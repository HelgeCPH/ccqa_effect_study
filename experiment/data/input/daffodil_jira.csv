issue_type,issue_component,creator_name,creator_display_name,reporter_name,reporter_display_name,priority,description,labels,created,resolution,updated,status,id,key
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A feature is needed to make it easier for users of our APIs to communicate from the DFDL schema to software called via our APIs such as an InfosetOutputter.

The idea here is to provide an extension property (dfdlx prefix/namespace) which allows a whitespace separated list of name-value pairs to be attached to the runtime data corresponding to a term (element or model group).

This enables the extensible parts of Daffodil, such as an InfosetOutputter or InfosetInputter to get custom behaviors that go beyond what is expressed only with DFDL properties.

An example of a need for this is a data format which is binary data, but which contains embedded strings that are XML.  This XML has its own XML Schema.

Suppose one of those strings contains <foo attrib=""bar""/> which is XML that cannot be described in a DFDL schema because it uses XML attributes. That piece of XML would normally show up in Daffodil's XML output with escaping like

 
{code:java}
      ""&lt;foo attrib=&quot;bar&quot'/>""{code}
 

That is because the DFDL schema for such data must model these strings as that, strings. So the XML output from Daffodil might altogether look like:

 
{code:java}
<data>
   <xmlString>&lt;foo attrib=&quot;bar&quot'/></xmlString>
</data>{code}
As SAX events, one would get a Start Element for 'data' a Start Element for 'xmlString' with a simple value - the string, which would have to be escaped to be legal in XML - then End Element 'xmlString' and End Element 'data'.

However, an application may want this XML embedded within the XML created by Daffodil's XML infoset outputter, so that the whole data document in XML looks like a uniform piece of XML like:

 
{code:java}
<data><xmlString><foo attrib=""bar""'/></xmlString></data>
{code}
 

The SAX events would want to be Start Element 'data', Start Element 'xmlString', Start Element 'foo' carrying metadata for the attribute 'attrib' with value ""bar"", End Element 'foo', End Element 'xmlString' and End Element 'data'.

A DFDL schema, with a dfdlx:runtimeProperties can be used to make this happen:

 
{code:java}
<xs:element name=""xmlString"" type=""xs:string""
          dfdlx:runtimeProperties=""stringAsXML=true"" .../>{code}
The runtime ERD for this element will contain a Map[String, String] which would contain this pair ""stringAsXML"" and ""true"", which would be ignored by parsing/unparsing, excepting a custom InfosetOutputter that generates SAX XML events could be created that looks at each element ERD to see if it carries this pair. If so it could parse the string as XML and generate the SAX events corresponding to the string, so that the ultimate set of SAX events appears as if the document didn't contain a string of XML, but contained that XML substructure.

The symmetric unparser InfosetOutputter is a little trickier, but the principle is the same, the events for that element ERD would consume all the events corresponding to a full element, convert that element and all its children into a string of textual XML, and use that as the value of the simple type element named 'xmlString'.

This dfdlx:runtimeProperties property is a very general extension hook that can be used to transmit information from the DFDL schema to layer transformers, infoset inputters/outputters, etc.

 ",[],2021-06-11 19:42:39+00:00,,2021-06-11 21:28:09+00:00,Open,13383500,DAFFODIL-2537
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"See topic _Refactoring for Separable Runtimes/Back-ends_

on the wiki page:

https://cwiki.apache.org/confluence/display/DAFFODIL/Roadmap+for+Upcoming+Releases",[],2021-06-11 19:00:22+00:00,,2021-06-11 19:43:42+00:00,Open,13383495,DAFFODIL-2536
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Quiet consensus discussion on dev list is that we should deprecate support for XML Catalogs for the reasons below (taken from email thread)
 
XML Catalogs seem very fragile, with important aspects that don't work (I was unable to get relative-catalogs to work at all) and I am wondering if we really need to support XML Catalogs not. Our classpath based resolution of schema locations works quite well and can be used to make quite modular DFDL schemas.
 
Currently, XML schemas built into Daffodil (e.g., tdml.xsd, the schema for DFDL schemas, etc.) are resolved from a built-in XML catalog, but really the fact that this is using a catalog is not particularly important. You can think of it as they're just built into our resolver.
 
XML Schemas referenced using the schemaLocation attribute on an xs:import/xs:include or the xsi:schemaLocation on XML instance documents are resolved by either:
 
1) relative to the file containing the reference, i.e., the file containing the include/import statement
 
2) relative to the root of any directory or jar on the classpath, searching them in classpath order. First one found wins.
 
This enables one to create multi-part DFDL schemas, such as for an envelope format, and a payload format carried inside the envelope format. Each can be testable separately, and a combining schema can be created that puts the payload on the classpath first, followed by the envelope format, and combines the two.
 
Given that this works, and works well, XML Catalogs can be demonstrated. 
 ",[],2021-06-10 13:16:48+00:00,,2021-06-10 13:16:48+00:00,Open,13383188,DAFFODIL-2535
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"IBM reported that their DFDL implementation was affected by what seems to be a bug introduced into the ICU library. Their description from the DFDL WG Agenda for 2021-06-10 is in this screenshot (apologies, the PDF doesn't allow select/cut/paste):

!image-2021-06-10-08-30-11-821.png|width=554,height=121!

Links:

[https://unicode-org.atlassian.net/browse/ICU-20425]

[https://github.com/unicode-org/icu/pull/1726]

 

 

 ",[],2021-06-10 12:34:59+00:00,,2021-06-10 12:34:59+00:00,Open,13383177,DAFFODIL-2534
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"It looks like the TDMLRunner does not detect and error if duplicate defineConfigs exist. For example, the config ""cfg_defaultNamespace"" is defined twice in this file with different tuanble settings.

daffodil-test/src/test/resources/org/apache/daffodil/section00/general/tunables.tdml


This likely means someone copy/pasted a config and forgot to change the name, so there are probably tests not using the intended configs. We added the capability to detect and error when test cases are defined with duplicate names. We should probably do the same for defineConfig.

 ",['beginner'],2021-06-03 21:23:29+00:00,,2021-06-03 21:23:36+00:00,Open,13382004,DAFFODIL-2533
Bug,[],lblatchford,Lara Blatchford,lblatchford,Lara Blatchford,Critical,"The following backtrace occurs during parse of a NITF 2.1 file.  Schema to reproduce is attached.  The file to reproduce is too large to attach, but may be downloaded:  

[https://six-library.s3.amazonaws.com/sicd_example_RMA_RGZERO_RE16I_IM16I.nitf|https://usg02.safelinks.protection.office365.us/?url=https%3A%2F%2Fsix-library.s3.amazonaws.com%2Fsicd_example_RMA_RGZERO_RE16I_IM16I.nitf&data=04%7C01%7Clara.blatchford%40nteligen.com%7Cde5463635e994fbd00f108d926a9831e%7C379c214c5c944e86a6062d047675f02a%7C0%7C0%7C637583331759380720%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=M0zdcUi1sg77AieKQHQHh90MzvEaCfMtIykhp5c%2BYN4%3D&reserved=0]

 

{{Exception in thread ""main"" org.apache.daffodil.exceptions.Abort: Invariant broken. Runtime.scala - Leaked exception: java.lang.NegativeArraySizeException}}{{java.lang.NegativeArraySizeException}}{{        at org.apache.daffodil.io.InputSourceDataInputStream.getByteArray(InputSourceDataInputStream.scala:149)}}{{        at org.apache.daffodil.processors.parsers.HexBinaryLengthParser.parse(HexBinaryLengthParsers.scala:42)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.HexBinaryLengthParser.parse1(HexBinaryLengthParsers.scala:26)}}{{        at org.apache.daffodil.processors.parsers.ElementParserBase.parse(ElementCombinator1.scala:148)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.ChoiceDispatchCombinatorParserBase.parse(ElementKindParsers.scala:233)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne(UnseparatedSequenceParsers.scala:29)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne$(UnseparatedSequenceParsers.scala:27)}}{{        at org.apache.daffodil.processors.parsers.ScalarOrderedUnseparatedSequenceChildParser.parseOne(UnseparatedSequenceParsers.scala:36)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parseOneInstance(SequenceParserBases.scala:279)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parse(SequenceParserBases.scala:206)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.SpecifiedLengthParserBase.parse(SpecifiedLengthParsers.scala:69)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.ElementParserBase.parse(ElementCombinator1.scala:148)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne(UnseparatedSequenceParsers.scala:29)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne$(UnseparatedSequenceParsers.scala:27)}}{{        at org.apache.daffodil.processors.parsers.ScalarOrderedUnseparatedSequenceChildParser.parseOne(UnseparatedSequenceParsers.scala:36)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parseOneInstance(SequenceParserBases.scala:279)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parse(SequenceParserBases.scala:206)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.ElementParserBase.parse(ElementCombinator1.scala:148)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne(UnseparatedSequenceParsers.scala:29)}}{{        at org.apache.daffodil.processors.parsers.Unseparated.parseOne$(UnseparatedSequenceParsers.scala:27)}}{{        at org.apache.daffodil.processors.parsers.RepOrderedExpressionOccursCountUnseparatedSequenceChildParser.parseOne(UnseparatedSequenceParsers.scala:63)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parseOneInstance(SequenceParserBases.scala:279)}}{{        at org.apache.daffodil.processors.parsers.SequenceParserBase.parse(SequenceParserBases.scala:139)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.parsers.ElementParserBase.parse(ElementCombinator1.scala:148)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:78)}}{{        at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:72)}}{{        at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:157)}}{{        at org.apache.daffodil.processors.DataProcessor.doParse(DataProcessor.scala:443)}}{{        at org.apache.daffodil.processors.DataProcessor.$anonfun$parse$1(DataProcessor.scala:406)}}{{        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)}}{{        at org.apache.daffodil.ExecutionMode$.$anonfun$usingRuntimeMode$1(ExecutionMode.scala:65)}}{{        at org.apache.daffodil.processors.DataProcessor.parse(DataProcessor.scala:398)}}{{        at org.apache.daffodil.processors.DataProcessor.parse(DataProcessor.scala:394)}}{{        at org.apache.daffodil.japi.DataProcessor.parse(Daffodil.scala:718)}}{{ }}{{org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:120)}}{{org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:166)}}{{org.apache.daffodil.processors.DataProcessor.doParse(DataProcessor.scala:502)}}{{org.apache.daffodil.processors.DataProcessor.$anonfun$parse$1(DataProcessor.scala:406)}}{{        at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:120)}}{{        at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:166)}}{{        at org.apache.daffodil.processors.DataProcessor.doParse(DataProcessor.scala:502)}}{{        at org.apache.daffodil.processors.DataProcessor.$anonfun$parse$1(DataProcessor.scala:406)}}{{        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)}}{{        at org.apache.daffodil.ExecutionMode$.$anonfun$usingRuntimeMode$1(ExecutionMode.scala:65)}}{{        at org.apache.daffodil.processors.DataProcessor.parse(DataProcessor.scala:398)}}{{        at org.apache.daffodil.processors.DataProcessor.parse(DataProcessor.scala:394)}}{{        at org.apache.daffodil.japi.DataProcessor.parse(Daffodil.scala:718)}}",[],2021-06-03 16:13:35+00:00,,2021-06-10 18:10:15+00:00,Reopened,13381944,DAFFODIL-2532
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Under sbt 1.5.3, the failure describe here happens.

It doesn't fail this way under sbt 1.3.9

The CSV dfdl schema has one portable test and two daffodil-only tests in it.

I am building and testing CSV as a sub-module in a regression test suite that has lots of schemas in it.

So the command I'm issuing is at a enclosing directory:
{code:java}
sbt dfdl-csv/ibm{code}
That should run the 1 portable test and skip the 2 non-portable tests.

However, it fails the 2 non-portable tests

I've instrumented Daffodil 3.2.0-SNAPSHOT a little to show why this is failing.
{code:java}
[error] Test suite com.tresys.csv.TestCSV failed with java.lang.ClassNotFoundException: org.junit.AssumptionViolatedException.
 [error] This may be due to the ClassLoaderLayeringStrategy (ScalaLibrary) used by your task.
 [error] To improve performance and reduce memory, sbt attempts to cache the class loaders used to load the project dependencies.
 [error] The project class files are loaded in a separate class loader that is created for each test run.
 [error] The test class loader accesses the project dependency classes using the cached project dependency classloader.
 [error] With this approach, class loading may fail under the following conditions:
 [error] 
 [error] * Dependencies use reflection to access classes in your project's classpath.
 [error] Java serialization/deserialization may cause this.
 [error] * An open package is accessed across layers. If the project's classes access or extend
 [error] jvm package private classes defined in a project dependency, it may cause an IllegalAccessError
 [error] because the jvm enforces package private at the classloader level.
 [error] 
 [error] These issues, along with others that were not enumerated above, may be resolved by changing the class loader layering strategy.
 [error] The Flat and ScalaLibrary strategies bundle the full project classpath in the same class loader.
 [error] To use one of these strategies, set the ClassLoaderLayeringStrategy key
 [error] in your configuration, for example:
 [error] 
 [error] set dfdl-csv / Test / classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.ScalaLibrary
 [error] set dfdl-csv / Test / classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat
 [error] 
 [error] See ClassLoaderLayeringStrategy.scala for the full list of options.

{code}",[],2021-06-02 23:17:50+00:00,2021-06-04 14:36:49+00:00,2021-06-04 19:09:46+00:00,Closed,13381804,DAFFODIL-2531
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Recent changes for XML Validation in the TDML runner broke the crosstester.

There are several lines of code in the TDML runner which are exercised only during an IBM DFDL cross test, and one of those has a clear mistake in it.",[],2021-06-02 18:19:20+00:00,2021-06-02 20:53:17+00:00,2021-06-03 16:40:30+00:00,Closed,13381768,DAFFODIL-2530
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"There are 2 schemas that we got from the plc4x project when they were experimenting with DFDL.

These schemas make use of XML Catalogs.

If you update their build.sbt to reference 3.2.0-SNAPSHOT, they fail with

```

[info] Test org.apache.plc4x.protocols.knxnetip.ProtocolTest.test_KNXNetIP_Disconnect_Response started
[error] Test org.apache.plc4x.protocols.knxnetip.ProtocolTest.test_KNXNetIP_Disconnect_Response failed: org.xml.sax.SAXParseException: src-resolve: Cannot resolve the name 'dfdl:format' to a(n) 'element declaration' component., took 0.007 sec
[error] at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
[error] at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)
[error] at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaError(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDHandler.getGlobalDecl(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDElementTraverser.traverseLocal(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDHandler.traverseLocalElements(Unknown Source)
[error] at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown Source)
[error] at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)
[error] at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)
[error] at org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar(Unknown Source)
[error] at org.apache.xerces.jaxp.validation.XMLSchemaFactory.newSchema(Unknown Source)
[error] at org.apache.daffodil.validation.XercesValidator.<init>(XercesValidator.scala:81)
[error] at org.apache.daffodil.validation.XercesValidator$.fromURIs(XercesValidator.scala:134)
[error] at org.apache.daffodil.xml.DaffodilXMLLoader.$anonfun$load$1(DaffodilXMLLoader.scala:586)
[error] at org.apache.daffodil.xml.DaffodilXMLLoader.$anonfun$load$1$adapted(DaffodilXMLLoader.scala:584)
[error] at scala.Option.foreach(Option.scala:407)
[error] at org.apache.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:584)
[error] at org.apache.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:562)

```

If you remove the XML Catalog usage, and replace it with class-path relative names, then the schemas still work. But that shouldn't be necessary of course.",[],2021-06-02 17:28:02+00:00,2021-06-03 18:26:15+00:00,2021-06-03 19:18:22+00:00,Closed,13381756,DAFFODIL-2529
New Feature,[],jinterrante,John Interrante,jinterrante,John Interrante,Major,"I noticed that Commons IO has merged dependabot PRs to update GitHub Actions, which is an useful feature we may want to enable in Daffodil repositories too.  

We need to add a new file $REPO/.github/dependabot.yml to enable this feature.  There is a possibility Dependabot may try to update Scala dependencies too but we probably can disable that through configuration if that happens (see the second link). 

[Dependabot now updates your Actions workflows | The GitHub Blog|https://github.blog/2020-06-25-dependabot-now-updates-your-actions-workflows/]

[Enabling and disabling version updates - GitHub Docs|https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/enabling-and-disabling-version-updates#enabling-github-dependabot-version-updates]",[],2021-05-28 19:07:12+00:00,,2021-05-28 19:14:38+00:00,Open,13381036,DAFFODIL-2528
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A recent change to disallow doctypes caused a regression.

The TDML runner used to load XML Infoset files using Xerces, but now it uses the ConstructingParser like all other loading.

The constructing parser is, unfortunately, intolerant of XML files that do not begin with ""<"" character either for an XML Prolog, or a document element.

The behavior needs to change to allow presence or absence of an XML prolog, whitespace or comments before the document element begins.",[],2021-05-27 12:45:42+00:00,2021-06-01 18:17:09+00:00,2021-06-03 16:59:31+00:00,Closed,13380765,DAFFODIL-2527
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Daffodil does a false-serialization of the parser/unparser at the end of compilation so as to force anything referenced from RuntimeData objects or parser/unparser objects to be evaluated if it was still lazy.

This is an overhead that we should be able to avoid if everything passed to RuntimeData constructors is passed by value, and everything passed to parser/unparser constructors is passed by value.",[],2021-05-24 13:13:18+00:00,,2021-05-24 13:13:18+00:00,Open,13380116,DAFFODIL-2526
Question,[],5v9wpcc0pa,5v9wpcc0pa,5v9wpcc0pa,5v9wpcc0pa,Minor,How to create a 3d array matrix with daffodil?,[],2021-05-24 11:30:48+00:00,2021-05-27 11:54:11+00:00,2021-05-27 14:11:31+00:00,Closed,13380078,DAFFODIL-2525
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Recent fixes to ULong in should be propagated back to the original authors.

We forked from them in 2015, If these bugs are still there in their code we shoud get the fixes to them.",[],2021-05-21 20:59:07+00:00,,2021-06-10 12:36:04+00:00,Open,13379852,DAFFODIL-2524
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"In TDML, and most of our test files, tdml:defineSchema is used, and by default, for backward compatibility with earlier-authored tests, it creates a schema with elementFormDefault=""qualified"" and xmlns='[http://example.com'|http://example.com'/] as a default namespace, which is what the useDefaultNamespace attribute (which defaults to true) means.

Both of those are inverted from what they *should* be.

The preferred style for schemas is elementFormDefault 'unqualified', and to NOT assume any default namespaces (xmlns=""...."") unless it is explicitly setup by the test author on the tdml:testSuite or other element.

The use of default namespaces causes many subtle interactions that can make namespace-sensitive testing hard to debug.

Changing the defaults here will break several tests. At one point changing just useDefaultNamespace to 'false' was measured as causing 81 test failures, though they are concentrated in just a few test files.

 ",[],2021-05-21 14:22:57+00:00,,2021-05-21 14:22:57+00:00,Open,13379785,DAFFODIL-2523
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"ULong in the passera.unsigned package has bugs.

 

ULong.MaxValue is wrong. Should be the same value as

new java.math.BigInteger(""FFFFFFFFFFFFFFFF"", 16)

Fix, and add tests so we can be sure ULong is working right.",[],2021-05-19 22:28:01+00:00,2021-05-21 21:01:54+00:00,2021-05-24 14:28:19+00:00,Closed,13379379,DAFFODIL-2522
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Several places in our code base call preSerialization to insure that there is no lazy evaluation that could happen late, after compilation is supposedly over.

The schema compiler should be responsible for making sure this is the case.

This can be achieved by having the schema compiler invoke preSerialization of the parser & unparser objects before returning them.

Then other uses of preSerialization in other places can be removed.

There are some unit tests of the schema compiler that could be effected. There may be a need for test-only schema compiler interface to be invoked that does *not* do this preserialization call, so that unit tests can partly compile, but then make inquiries of the compiler data structures.",[],2021-05-19 14:30:15+00:00,2021-06-11 19:46:54+00:00,2021-06-11 19:46:54+00:00,Resolved,13379315,DAFFODIL-2521
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The Daffodil TDML Processor uses a global scala object as a cache of compiled schemas.

If you run a large sbt test which tests many many DFDL schemas, you run out of memory because this cache grows by holding onto the compiled parser/unparser representations of all compiled schemas.

This SchemaCache is important to avoid compiling the same schema over and over for each individual test case, but there is no need for a global cache. This cache could be part of the TDML TestSuite object.

This SchemaCache is currently called and used by the Daffodil TDML Processor object, so does not have visibility to the whole TestSuite. If hoisted out to become state of the TestSuite object, then this may have implications for other TDML Processors like the one we use to cross-test against IBM DFDL.

 ",[],2021-05-17 17:19:40+00:00,,2021-06-11 19:47:19+00:00,Open,13378852,DAFFODIL-2520
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2021-05-14 20:04:18+00:00,2021-05-18 16:43:31+00:00,2021-05-19 11:08:55+00:00,Closed,13378520,DAFFODIL-2519
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Some issues were found when building an rc2 for 3.1.0:

- Typo in ""*Comitting* Site Changes""
- Because of the *set -e*, if a command ever exits with a non-zero exit code, the release candidate script just stops, and it's not obvious there was a failure. We should trap ERR and print out a message to make it clear things failed and what steps to take
- When the script commits site changes, it's possible for no changes to exist (this is likely in an rc2 since all documentation has already been committed during rc1). When this happens, the git commit command exists with a non-zero exit code and stop processing
- The script says to ""Delete"" staged files at repository.apache.org, but ""Drop"" is the correct terminology 
",[],2021-05-14 19:56:07+00:00,2021-05-19 12:37:53+00:00,2021-05-24 15:01:26+00:00,Closed,13378515,DAFFODIL-2518
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We deprecated and removed isAtEnd from use in the TDML Runner, and replaced it with a check that the final bit position of a parse/unparse matched the total length. If not, it means there was left over data.

However, the IBM DFDL implementation is not able to report final parse/unparse bitPosition, and so it always returns -1. This special value should disable left over data checking, but it does not. Since -1 is less than the the expected number of bits, tests fail complaining about left over data. We need to add back this special meaning of -1 to the TDML Runner.",[],2021-05-14 15:53:35+00:00,2021-05-14 18:16:44+00:00,2021-05-17 12:37:00+00:00,Closed,13378498,DAFFODIL-2517
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"runtime2 does not compile on FreeBSD because because of different include locations, from a user:

1. It looked like the runtime2 C code was looking for the Mini-XML dependencies under /usr whereas the package on FreeBSD is stored under /usr/local, and;
2. Some C files under runtime2 were including <endian.h> whereas the file was under /usr/include/sys.

CFLAGS env variable support might help with this, or maybe there are some system properties that could be read to add include locations. Might also be able to look for/use pkg-config too.",[],2021-05-14 11:44:40+00:00,,2021-05-14 23:47:09+00:00,Open,13378474,DAFFODIL-2516
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Recent changes to address DAFFODIL-1437 (a cleanup) in Rules.scala showed that there are many test code coverage gaps. (CodeCov shows them in the changes in PR [https://github.com/apache/daffodil/pull/561] )

These specific code coverage gaps are of particular concern, as this is the lexical analyzer code for Daffodil's recognizing of escapes, delimiters, etc.

This area needs to be well covered.

TDML Tests of real DFDL schemas and test data need to be created which create the subtle DFDL scenarios which cause all these variations to be explored and covered. If it turns out there is code here that is unreachable by way of actual DFDL parsing, then we should remove it and document why.

( Note that we could get the code coverage by just writing Junit tests that exercise these classes/objects directly. But we should *not* do that. The point is to create DFDL which causes this to be exercised when tested. )

 

 

 

 

 ",[],2021-05-13 15:03:39+00:00,,2021-05-13 15:03:39+00:00,Open,13378324,DAFFODIL-2515
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2021-05-12 11:49:56+00:00,2021-05-12 13:42:29+00:00,2021-05-13 18:01:08+00:00,Closed,13378081,DAFFODIL-2514
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Apache now as a JFrog Artifactory account as a way to easily distribute convenience binaries:

https://apache.jfrog.io/

All our jars are distributed via maven, but people using RPM need to manually download updates. An alternative for RPM users would be to upload RPM releases to jfrog, which acts as a yum/dnf repo. Then people can just add this as a new yum repo and daffodil will be automatically updated anytime someone runs dnf/yum update.

This is fairly new, so ASF provides little documentation on how to set this up, but it does use normal ASF credentials. They have stub page here: [https://cwiki.apache.org/confluence/display/INFRA/Artifactory+-+introduction+and+index]

Once we figure out how this works, we should incorporate it into our release workflow.",[],2021-05-07 16:56:42+00:00,,2021-05-17 14:40:21+00:00,Open,13377286,DAFFODIL-2513
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"Parsing of unordered sequences uses the ChoiceParser to handle parsing the different alternatives. This causes issues because the SequenceParser that orchestrates the ChoiceParser needs to know why a ChoiceParser fails and react differently. If the ChoiceParser fails because all branches speculatively failed, then we need to simply ignore the failure and it signifies the end of the sequence. But if the ChoiceParser fails because a discriminated branch failed, then it signifies the unordered seuence failed, and the error must propogate upwards.

This suggests that we cannot use the ChoiceParser when parsing an unordred sequence because we cannot know the reason for failure once it completes–all we know is it failed. Instead, the SequenceParser must create and manage points of uncertainty attempt to parse each branch of the unordered sequence individually, much like the ChoiceParser does. This way, it can know if a branch was discriminated and failed, or if all branches were tried and they all failed, and react appropriately.",[],2021-05-06 16:41:50+00:00,2021-06-02 13:15:26+00:00,2021-06-03 16:50:00+00:00,Closed,13377067,DAFFODIL-2512
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We represent unsigned integer types using the next larger sized signed integer. Ex: so xs:unsignedByte is represented by a Short, etc.

This works except for xs:unsignedLong. There is no next bigger type. Instead we use a BigInteger to represent an xs:unsignedLong.

All of that predates adding the ULong library to Daffodil. ULong behaves as an unsigned long, but represents itself as a signed long. This is much more efficient and generally a better idea than using BigInteger.

Similarly, we could use UInt, UShort and UByte as the representations of all the unsigned types for uniformity.

Direct support for these would need to be added to DataValue.

One thing to consider, and it may not matter, is that ULong and friends aren't subtypes of java.lang.Number, where all the other boxed number types we use are. 

A search for java.lang.Number makes sense as a starting point.  There are some places that use java.lang.Number specifically.

 ",[],2021-05-06 14:43:27+00:00,,2021-05-06 14:57:41+00:00,Open,13377050,DAFFODIL-2511
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Every object that mixes in the Logging trait gets its own mutable vars for logWriter and logLevel, and if not set, shares a single global state in the LoggingDefaults object.

This is not thread safe. At minimum LoggingDefaults should be a ThreadLocal.

Furthermore, those objects don't need independent ability to specify a unique logger or logging level. They should be sharing a logger supplied by the application.",[],2021-04-27 23:19:16+00:00,,2021-04-27 23:27:10+00:00,Open,13375456,DAFFODIL-2510
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We should turn off CodeCov coverage testing for all
 * Assert.invariantFailed
 * Assert.usageError
 * Assert.impossible
 * Assert.impossibleCase
 * Assert.notYetImplemented()
 * Assert.nyi()
 * Assert.abort()

These are, by definition, things we either cannot test (can't get the code to take those paths at all), or are unnecessary to have test coverage on.

The implementations of these things can also have coverage testing turned off for them.

[https://github.com/scoverage/sbt-scoverage#exclude-classes-and-packages]

So we could maybe do something like:
{code:java}
foo match {     
  case real1 => ...     
  case real2 => ... r    
  // $COVERAGE-OFF$    
  case thingy =>   Assert.invariantFailed("".....msg..."")    
  // $COVERAGE-ON$  
}
{code}
 

 ",[],2021-04-27 17:19:52+00:00,,2021-04-29 19:51:44+00:00,Open,13375401,DAFFODIL-2509
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"I noticed that the daffodil-runtime2 jar does not contain a LICENSE file. Since we distribute this jar in our conveneience binaries, it's should have a LICENSE and NOTICE file in src/main/resources/META-INF/",[],2021-04-27 15:36:02+00:00,2021-05-02 18:55:49+00:00,2021-05-07 16:49:27+00:00,Closed,13375374,DAFFODIL-2508
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"Unable to build/stage daffodil-cli with gcc version 4.8.2 on CentOS 7 on Runtime2 commit c095446be17b604bb5494e08462cc2210f58c8e6.

Running CentOS 7

Pulled specified commit.

Installed gcc (used yum installed version 4.8.2) and mxml (per Build Requirements page).
 Note: gcc-4.8.2 should support c99.

 

******

Executed sbt command *sbt daffodil-cli/stage* and got the following error:

[dfdl@localhost daffodil]$ sbt daffodil-cli/stage

[info] welcome to sbt 1.5.0 (Red Hat, Inc. Java 11.0.10)

[info] loading settings for project daffodil-build from plugins.sbt ...

[info] loading project definition from /home/dfdl/daffodil/project

[info] loading settings for project daffodil from build.sbt ...

[info] loading settings for project daffodil-japi from build.sbt ...

[info] loading settings for project daffodil-cli from build.sbt ...

[info] resolving key references (24156 settings) ...

[info] set current project to daffodil (in build file:/home/dfdl/daffodil/)

[info] Wrote /home/dfdl/daffodil/daffodil-cli/target/scala-2.12/daffodil-cli_2.12-3.1.0-SNAPSHOT.pom

[info] [cc, -c, /home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c, -o, /home/dfdl/daffodil/daffodil-runtime2/target/streams/compile/ccSourceObjectMap/_global/streams/compile/libruntime2.a/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c.o, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libcli, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/examples, -Wall, -Wextra]

/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c: In function ‘print_diagnostics’:

/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c:165:9: error: ‘for’ loop initial declarations are only allowed in C99 mode

         for (size_t i = 0; i < diagnostics->length; i++)

         ^

/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c:165:9: note: use option -std=c99 or -std=gnu99 to compile your code

[info] compiling 11 Scala sources to /home/dfdl/daffodil/daffodil-runtime2/target/scala-2.12/classes ...

[error] java.lang.RuntimeException: Nonzero exit value: 1

[error]   at scala.sys.package$.error(package.scala:30)

[error]   at scala.sys.process.ProcessBuilderImpl$AbstractBuilder.slurp(ProcessBuilderImpl.scala:138)

[error]   at scala.sys.process.ProcessBuilderImpl$AbstractBuilder.$bang$bang(ProcessBuilderImpl.scala:108)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$3(CcPlugin.scala:128)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$3$adapted(CcPlugin.scala:117)

[error]   at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)

[error]   at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)

[error]   at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$1(CcPlugin.scala:117)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$1$adapted(CcPlugin.scala:116)

[error]   at scala.collection.Iterator.foreach(Iterator.scala:943)

[error]   at scala.collection.Iterator.foreach$(Iterator.scala:943)

[error]   at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)

[error]   at scala.collection.IterableLike.foreach(IterableLike.scala:74)

[error]   at scala.collection.IterableLike.foreach$(IterableLike.scala:73)

[error]   at scala.collection.AbstractIterable.foreach(Iterable.scala:56)

[error]   at sbtcc.CcPlugin$.cccompile(CcPlugin.scala:116)

[error]   at sbtcc.CcPlugin$.$anonfun$baseCcSettings$25(CcPlugin.scala:223)

[error]   at scala.Function1.$anonfun$compose$1(Function1.scala:49)

[error]   at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)

[error]   at sbt.std.Transform$$anon$4.work(Transform.scala:68)

[error]   at sbt.Execute.$anonfun$submit$2(Execute.scala:282)

[error]   at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)

[error]   at sbt.Execute.work(Execute.scala:291)

[error]   at sbt.Execute.$anonfun$submit$1(Execute.scala:282)

[error]   at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)

[error]   at sbt.CompletionService$$anon$2.call(CompletionService.scala:64)

[error]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)

[error]   at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)

[error]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)

[error]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)

[error]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)

[error]   at java.base/java.lang.Thread.run(Thread.java:834)

[error] (daffodil-runtime2 / Compile / cCompile) Nonzero exit value: 1

 

******

Added *“std=c99”* to the build.sbt file and executed sbt command *sbt daffodil-cli/stage* and got the following error:

 

[dfdl@localhost daffodil]$ sbt daffodil-cli/stage

[info] welcome to sbt 1.5.0 (Red Hat, Inc. Java 11.0.10)

[info] loading settings for project daffodil-build from plugins.sbt ...

[info] loading project definition from /home/dfdl/daffodil/project

[info] loading settings for project daffodil from build.sbt ...

[info] loading settings for project daffodil-japi from build.sbt ...

[info] loading settings for project daffodil-cli from build.sbt ...

[info] resolving key references (24156 settings) ...

[info] set current project to daffodil (in build file:/home/dfdl/daffodil/)

[info] Wrote /home/dfdl/daffodil/daffodil-cli/target/scala-2.12/daffodil-cli_2.12-3.1.0-SNAPSHOT.pom

[info] [cc, -c, /home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c, -o, /home/dfdl/daffodil/daffodil-runtime2/target/streams/compile/ccSourceObjectMap/_global/streams/compile/libruntime2.a/src/main/resources/org/apache/daffodil/runtime2/c/libruntime/errors.c.o, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libcli, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/c/libruntime, -I/home/dfdl/daffodil/daffodil-runtime2/src/main/resources/org/apache/daffodil/runtime2/examples, -Wall, -Wextra, std=c99]

cc: error: std=c99: No such file or directory

[info] compiling 11 Scala sources to /home/dfdl/daffodil/daffodil-runtime2/target/scala-2.12/classes ...

[error] java.lang.RuntimeException: Nonzero exit value: 1

[error]   at scala.sys.package$.error(package.scala:30)

[error]   at scala.sys.process.ProcessBuilderImpl$AbstractBuilder.slurp(ProcessBuilderImpl.scala:138)

[error]   at scala.sys.process.ProcessBuilderImpl$AbstractBuilder.$bang$bang(ProcessBuilderImpl.scala:108)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$3(CcPlugin.scala:128)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$3$adapted(CcPlugin.scala:117)

[error]   at scala.collection.mutable.ResizableArray.foreach(ResizableArray.scala:62)

[error]   at scala.collection.mutable.ResizableArray.foreach$(ResizableArray.scala:55)

[error]   at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:49)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$1(CcPlugin.scala:117)

[error]   at sbtcc.CcPlugin$.$anonfun$cccompile$1$adapted(CcPlugin.scala:116)

[error]   at scala.collection.Iterator.foreach(Iterator.scala:943)

[error]   at scala.collection.Iterator.foreach$(Iterator.scala:943)

[error]   at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)

[error]   at scala.collection.IterableLike.foreach(IterableLike.scala:74)

[error]   at scala.collection.IterableLike.foreach$(IterableLike.scala:73)

[error]   at scala.collection.AbstractIterable.foreach(Iterable.scala:56)

[error]   at sbtcc.CcPlugin$.cccompile(CcPlugin.scala:116)

[error]   at sbtcc.CcPlugin$.$anonfun$baseCcSettings$25(CcPlugin.scala:223)

[error]   at scala.Function1.$anonfun$compose$1(Function1.scala:49)

[error]   at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)

[error]   at sbt.std.Transform$$anon$4.work(Transform.scala:68)

[error]   at sbt.Execute.$anonfun$submit$2(Execute.scala:282)

[error]   at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)

[error]   at sbt.Execute.work(Execute.scala:291)

[error]   at sbt.Execute.$anonfun$submit$1(Execute.scala:282)

[error]   at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)

[error]   at sbt.CompletionService$$anon$2.call(CompletionService.scala:64)

[error]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)

[error]   at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)

[error]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)

[error]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)

[error]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)

[error]   at java.base/java.lang.Thread.run(Thread.java:834)

[error] (daffodil-runtime2 / Compile / cCompile) Nonzero exit value: 1

 

 

My resolution:

After installing gcc version 10.3.0 I was able to build/stage daffodil-cli when “std=c99” included in the build.sbt file.

 ",[],2021-04-27 14:20:03+00:00,2021-05-05 15:34:34+00:00,2021-05-06 17:31:52+00:00,Closed,13375359,DAFFODIL-2507
Bug,[],jinterrante,John Interrante,jinterrante,John Interrante,Major,"Bintray is going away on May 1 (this Saturday).

I searched for bintray in the Daffodil repository and found one line of code using bintray.com:

 containers/release-candidate/setup-container.sh
|24|#install dependencies|
|25|curl https://bintray.com/sbt/rpm/rpm -o /etc/yum.repos.d/bintray-sbt-rpm.repo|
|26|microdnf install git svn sbt java-1.8.0-devel wine winetricks unzip rpm-build rpm-sign vim-minimal|

 

We need to replace bintray.com in line 25.  I see that the sbt website has updated its installation instructions and is now hosting the rpm binary on sbt’s own website:

 [sbt Reference Manual — Installing sbt on Linux (scala-sbt.org)|https://www.scala-sbt.org/1.x/docs/Installing-sbt-on-Linux.html]",[],2021-04-27 13:00:23+00:00,2021-04-29 14:16:52+00:00,2021-04-30 17:52:43+00:00,Closed,13375340,DAFFODIL-2506
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The README says that MiniXML 3.2 or newer is required. I didn't realize it, but I had installed 3.1 from Fedora and compiled and ran all tests without issue. Can we bump down the dependency to 3.1? Otherwise Fedora users might think they need to build from source, but that doesn't seem to be the case.",[],2021-04-26 18:14:00+00:00,2021-05-02 18:54:56+00:00,2021-05-07 16:38:02+00:00,Closed,13375129,DAFFODIL-2505
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"See tests

{color:#00627a}testDaffodilParseFromNetworkDelimited1{color}

{color:#00627a}testDaffodilParseFromNetworkDelimited1b{color}

{color:#00627a}testDaffodilParseFromNetworkDelimited2{color}

{color:#00627a}testDaffodilParseFromNetworkDelimited2b{color}

{color:#00627a}When parsing text from a network TCP stream, the parse should succeed once the parser knows it has matched the longest possible delimiter. It should not require more than that many characters to be present on the data stream in order for the parse to complete. {color}

{color:#00627a}There are no tests as yet, but presumably lengthKind 'pattern' will have a similar issue where only enough characters should be needed to provide the knowably longest match for the regex. (For example, suppose dfdl:lengthPattern=""."" which is looking for exactly 1 byte. The match of this should NOT require that more than one byte be available on the TCP stream. {color}

{color:#00627a}The arbitrary size 8 of the CharBuffer in InputSourceDataInputStream leads to this requiring around 8 characters of look ahead beyond the last character matched to the delimiter. Resizing this to 2 allows tests to succeed with fewer lookahead characters, but really the whole approach/algorithm needs to be examined to really consider the lookahead, and if it can be avoided in many cases.{color}

{color:#00627a}It is known that you can't always avoid looking ahead 1 character. {color}{color:#00627a}For matching delimiters that use DFDL Character Class Entities that can match a variable number of characters (e.g., WSP+, WSP*, and NL) a lookahead of 1 is clearly necessary to know if the match is complete. {color}

{color:#00627a}For matching regular expressions, since they can lookahead an arbitrary finite distance, the amount of lookahead required depends on the specific regex. {color}

{color:#00627a}Since some amount of look ahead is required in these cases, fixing this issue for the simpler situation of just basic delimiters with a fixed number of characters seems relatively low priority. {color}

 ",[],2021-04-26 01:38:38+00:00,,2021-04-30 15:56:40+00:00,Open,13374950,DAFFODIL-2504
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The coroutines library was in the code base, then we took it out, then we put it back in, but we didn't pull back in the unit tests.

MikeB has them. Add them back. Adjust for changes to coroutines made later.",[],2021-04-24 02:53:53+00:00,2021-04-30 16:00:04+00:00,2021-05-11 16:37:25+00:00,Closed,13374762,DAFFODIL-2503
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Daffodil assumes the input streams are like files - reads are always blocking for either 1 or more bytes of data, or End-of-data.

People want to use Daffodil to read data from TCP/IP sockets. These can return 0 bytes from a read because there is no data available, but that does NOT mean the end of data. It's just a temporary condition. More data may come along.

Daffodil's InputSourceDataInputStream is wrapped around a regular Java input stream, and enables us to support incoming messages which do not conform to byte-boundaries.

-The problem is that there's no way for users to wrap an InputSourceDataInputStream around a TCP/IP socket, and have it behave properly when a read() call temporarily says 0 bytes available.-

-Obviously we don't want to sit in a tight loop just retrying the read until we get either some bytes or end-of-data.-

-The right API here is that if the read() of the underlying java stream returns 0 bytes, that a hook function supplied by the API user is called.-

-One obvious thing a user can do is put a call to Thread.yield() in the hook. (That might even want to be the default behavior if they supply no hook.) Then if they have a separate thread parsing the data with daffodil, that thread will at least yield the CPU, i.e., behave politely in a multi-threaded world.-

-More advanced usage could start a Daffodil parse using co-routines, returning control to the caller when the parse must pause due to read() of the Java input stream returning 0 bytes.-

 

 ",[],2021-04-23 00:50:05+00:00,2021-04-30 15:55:49+00:00,2021-05-11 16:35:56+00:00,Closed,13374525,DAFFODIL-2502
Bug,[],jinterrante,John Interrante,jinterrante,John Interrante,Minor,"We need to report a issue with a reproducible test case in the dev.dirs/directories-jvm project on GitHub. Note that dev.dirs exhibits the problem but they may or may not be responsible for it. Their code which tries to run a Windows PowerShell script using a Java subprocess call hangs when run from MSYS2 on Windows although it works fine when run from CMD on Windows.

Then we need to wait until the hanging problem is fixed in the directories library, coursier picks up the new directories version, sbt picks up the new coursier version, and daffodil picks up the new sbt version, before we can remove the ""echo >> $GITHUB_ENV"" lines from .github/workflows/main.yml. We defined these COURSIER_CACHE and COURSIER_CONFIG_DIR environment variables to work around the sbt hanging problem by skipping the ProjectDirectories.from(null, null, ""Coursier"") calls.",[],2021-04-21 19:50:18+00:00,,2021-04-21 20:00:49+00:00,Open,13374227,DAFFODIL-2501
Bug,[],jinterrante,John Interrante,jinterrante,John Interrante,Blocker,"Update BUILD.md and the github actions to use clang instead of gcc. Will have to find the correct steps on Fedora / Linux / Windows and check they work (e.g., install clang-10 package on Ubuntu and set CC=clang-10 and AR=llvm-ar-10 environment variables).

Likewise, replace argp calls with getopt calls in daffodil_main.c and daffodil_argp.c even though it means giving up long options and other nice features that argp has.  Remove argp dependency from BUILD.md and the github actions.",[],2021-04-21 19:40:06+00:00,2021-05-02 18:54:07+00:00,2021-05-07 16:42:04+00:00,Closed,13374225,DAFFODIL-2500
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"PR [https://github.com/apache/daffodil/pull/537] adds tests which illustrate the bug.

The tests are test_sep_ssp_never_1 to test_sep_ssp_never_4.

See also DAFFODIL-2219 and DAFFODIL-2274

There are other tickets associated with other values of separatorSuppressionPolicy:

DAFFODIL-2498, DAFFODIL-2217, which should also be considered.",[],2021-04-21 16:54:22+00:00,,2021-04-29 19:50:00+00:00,Open,13374179,DAFFODIL-2499
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This bug was reported in 3.0.0, can be reproduced there. It is fixed already in 3.1.0 as of hash 5289f596f327f12477db29f0f3d5ca9db55db39f (I believe. This is the only related change to that part of the runtime code since 3.0.0)

This ticket is because tests need to be added which capture this precise failure behavior to prevent future regression.",[],2021-04-19 21:11:19+00:00,2021-04-20 13:15:36+00:00,2021-04-20 18:14:40+00:00,Closed,13373701,DAFFODIL-2498
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Until DAFFODIL-2496 is fixed, our implementation of emptyElementParsePolicy is as an extension in the dfdlx namespace.

The unsupported features list should mention this.

See also DAFFODIL-2179 which is a doc page for all the extensions,  which should mention emptyElementParsePolicy until DAFFODIL-2496 is fixed.",[],2021-04-16 19:02:26+00:00,,2021-04-16 19:02:32+00:00,Open,13373110,DAFFODIL-2497
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"emptyElementParsePolicy was a proposed extension to DFDL at the time we implemented it.

However, it was accepted and is part of DFDL v1.0.

Hence, we need to implement it as an official DFDL property, not just as an extension.

Note that our extension dfdlx:emptyElementParsePolicy had enums 'treatAsEmpty' and 'treatAsMissing'.

The official DFDL 1.0 property renamed 'treatAsMissing' to 'treatAsAbsent'.

The meanings of the enums did not change.

We should continue to accept the extension dfdlx property with the original enum values, and detect if both the official and extension properties exist and are in conflict.

We should issue a suppressable warning about the extension property, suggesting upgrading the DFDL schema to use the official property. 

The new official emptyElementParsePolicy should, if not defined, generate a suppressable warning, and get a default 'treatAsEmpty'.

 

 ",[],2021-04-16 18:49:52+00:00,,2021-04-16 18:49:52+00:00,Open,13373105,DAFFODIL-2496
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"One of the tests that is useful to perform is a --dry-run of the release candidate script. However, this currently always pulls from that master branch of the apache/daffodil repo. Sometimes it is useful to do that on a different branch of a different repo before things are merged, such as with pull requests.

We should change the release candidate script so that you can specify an alternative repo/branch when running a --dry-run. When not doing a dry-run, it should still always build from apache/daffodil@master.",[],2021-04-15 18:05:33+00:00,2021-04-15 19:33:56+00:00,2021-05-11 18:09:42+00:00,Closed,13372711,DAFFODIL-2495
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Two minor issues have been found after upgrading jline3 in commit 66dda260ce09c9963cbf1c8146712739f7590afc

# Autocompletion does not work when you use the short form debugger commands
# Trying to exit out of the deubger with Ctrl+C throws an org.jline.reader.UserInterruptException, which the CLI sees as a bug and prints the big ""THIS IS A BUG"" message. Instead, the CLI should catch this and just exit",[],2021-04-12 13:51:46+00:00,2021-04-13 13:51:25+00:00,2021-04-13 19:00:31+00:00,Closed,13371807,DAFFODIL-2494
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"we should try a grep for all commented out tests, and then re-enable and try them. Some may well be fixed now.

I did

{{}}
{code:java}
grep -Pr '(?<=//).*@Test' | wc -l{code}
{{}}{{}}{{}}

in both daffodil-test/src/test/scala and daffodil-test-ibm1/src/test/scala, and I got 134 and 15 back respectively.

Some PRs have re-enabled some tests that ""just work"" now, and that's the motivation for taking this pass.

Even if it doesn't find that any are magically fixed, it would be good to know that, and some might not have associated Jira ticket numbers.",[],2021-04-07 12:35:59+00:00,,2021-04-07 12:35:59+00:00,Open,13370090,DAFFODIL-2493
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Noticed this when trying to verify DAFFODIL-1945

Test org.apache.daffodil.util.TestLogger.test_var_args_different_primitives fails when the locale has been changed. The test simply returns:
""[error] Test org.apache.daffodil.util.TestLogger.test_var_args_different_primitives failed: null, took 0.003 sec""

Tested with the following:

# export SBT_OPTS=""-Xss2M -Xmx5G -Xms5G -Duser.country=DE -Duser.language=de""
# sbt test",[],2021-04-01 17:52:03+00:00,2021-04-08 16:57:23+00:00,2021-04-09 21:43:46+00:00,Closed,13369180,DAFFODIL-2492
New Feature,[],jw3,John Wass,jw3,John Wass,Major,"The runtime1 DataProcessor allows setting a Debugger implementation, but setters are not exposed in the SAPI or JAPI.
","['api', 'debugger']",2021-03-31 02:42:52+00:00,2021-04-06 13:04:57+00:00,2021-04-06 18:07:26+00:00,Closed,13368755,DAFFODIL-2491
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"More than once the need has arisen to convert binary data to XML where the binary data contains a string of data that is already XML.  That XML is not escapified XML, it's regular XML.

The surrounding binary data needs to be parsed and converted to XML, but the string of XML needs to simply be slammed into the XML text coming out of Daffodil.

The inverse needs to happen on unparsing - the XML corresponding to the string has to be written out as a string (without escaping) and  incorporated into the binary data.

Note that such XML isn't necessarily adhering to DFDL's subset of XML schema. E.g., it may use attributes, etc.

Nevertheless, the combined XML - the XML you get corresponding to the binary data part, along with the string of XML embedded in it, the resulting complete XML document does have an XSD and could be validated (if not by Daffodil, then by a separate validator)

 ",[],2021-03-30 22:48:25+00:00,2021-04-16 15:37:01+00:00,2021-04-16 15:37:16+00:00,Closed,13368730,DAFFODIL-2490
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Minor,"The abbreviation for the debugger command ""clear"" is incorrect on the Apache Daffodil Interactive Debugger page ([https://daffodil.apache.org/debugger/).]

It is listed as ""c"" which is the same as for the ""continue"" command.

The actual/correct abbreviation is ""cl"" which matches the help clear content.",['beginner'],2021-03-23 18:52:25+00:00,,2021-03-23 18:54:49+00:00,Open,13367081,DAFFODIL-2489
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Minor,"When executing a parse command with the debugger (--debug) an incorrect result is displayed when the ""display info unparser"" command is executed.

Sample result output for ""display info unparser"" and ""display info parser""  are below. You get the same result for both debug commands.

(debug) 
  unparser: <StringDelimitedParser/>
  parser: <StringDelimitedParser/>
(debug) 
  unparser: <AssertExpressionEvaluationParser/>
  parser: <AssertExpressionEvaluationParser/>
(debug) 
  unparser: <Separator/>
  parser: <Separator/>
(debug) 
  unparser: <Element name='field'><DelimiterStackParser>...</DelimiterStackParser><AssertExpressionEvaluationParser/></Element>
  parser: <Element name='field'><DelimiterStackParser>...</DelimiterStackParser><AssertExpressionEvaluationParser/></Element>
(debug)",['beginner'],2021-03-22 19:52:48+00:00,,2021-03-22 19:59:06+00:00,Open,13366810,DAFFODIL-2488
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"Tests

{color:#00627a}test_csv_hang_1{color}

{color:#00627a}test_csv_hang_2{color}

{color:#00627a}test_csv_hang_3{color}

{color:#00627a}All hang the parser. The problem seems to have to do with an array with minOccurs=""0"" change. If the minOccurs=""1"" these do not hang. {color}

 ",[],2021-03-19 22:17:22+00:00,2021-03-25 19:47:07+00:00,2021-03-26 19:19:13+00:00,Closed,13366447,DAFFODIL-2487
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A simple variant of CSV that uses a discriminator fails as if the discriminator evaluation was being ignored.

I will update this description with test info.",[],2021-03-19 19:07:24+00:00,,2021-04-16 15:11:39+00:00,Open,13366426,DAFFODIL-2486
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"From a user:
 
{quote}I'd like to find/have full documentation of '{{JAVA_OPTS}}' for future reference and use so I don't have to bother user community unnecessarily.
 
I've looked at:
 * [https://daffodil.apache.org/cli/]
 * [https://cwiki.apache.org/confluence/display/DAFFODIL/Java+Setup+and+Notes]
Above links don't appear to list all JAVA_OPTS.
Where can I get description/specifications of all relevant Daffodil options as they relate to JAVA?{quote}
 
I would suggest this doc should include all the env-vars that would normally be involved in setup to make Daffodil work from CLI and embedded in applications. For example use of the classpath to make schemas packaged as Jars work so that one schema can refer to another without being strongly coupled (still being able to test them separately).

This might be a group of doc pages, not just one. The classpath topic alone is probably a whole web-site page/topic.

 
 ",[],2021-03-19 13:33:42+00:00,,2021-03-19 13:33:42+00:00,Open,13366354,DAFFODIL-2485
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Java 16 is now available. Java 15 will no longer be supported, so we should update our CI configuration to run against Java 16.",[],2021-03-16 19:06:06+00:00,2021-04-15 19:22:29+00:00,2021-04-19 16:11:53+00:00,Closed,13365614,DAFFODIL-2484
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The current CLi behavior of warning when leftover data exists after a parse is unintutive. We should consider adding an option that allows the user to change the behavior when such data exists. For example --leftover-data=error/warning/ignore.

See discussion here for more motivatin and possible solutions: https://lists.apache.org/thread.html/rcf8e414ac96f090985dc79eaaba1cbd8022a163ac49f0e2c7e381843%40%3Cusers.daffodil.apache.org%3E",[],2021-03-15 18:44:34+00:00,,2021-03-15 18:44:34+00:00,Open,13365322,DAFFODIL-2483
New Feature,[],jw3,John Wass,jw3,John Wass,Major,"In some cases the SVRL output is needed regardless of validation outcome.  This output is currently discarded after parsing for errors in org.apache.daffodil.validation.schematron.SchematronValidator.

Two approaches:
1. log the SVRL as info level output from the validator
2. add an option to the schematron config to write the SVRL to a file
","['schematron', 'validation']",2021-03-12 01:32:04+00:00,2021-04-20 16:43:58+00:00,2021-05-12 18:37:06+00:00,Closed,13363980,DAFFODIL-2482
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Regarding newVariableInstance and defaultValue, the spec says:
{quote}
If the instance is not assigned a new default value then it inherits the default value specified by dfdl:defineVariable or externally provided by the DFDL processor.
{quote}
Daffodil does not support the ""or externally provided"" part of this. If NVI does not provide a defaultValue, then we always use the defaultValue specified by the defineVariable, regardless if it was set externally.

For example, say we have this schema:
{code:xml}
  <xs:annotation>
    <xs:appinfo source=""http://www.ogf.org/dfdl/"">
      <dfdl:format ref=""ex:GeneralFormat"" />
      <dfdl:defineVariable name=""var1"" type=""xs:int"" defaultValue=""1"" external=""true"" />
    </xs:appinfo>
  </xs:annotation>

  <xs:element name=""root"">
    <xs:complexType>
      <xs:sequence>
        <xs:element name=""beforeNVI"" type=""xs:int"" dfdl:inputValueCalc=""{ $ex:var1 }"" />
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source=""http://www.ogf.org/dfdl/"">
              <dfdl:newVariableInstance ref=""ex:var1"" />
            </xs:appinfo>
          </xs:annotation>
          <xs:element name=""afterNVI"" type=""xs:int"" dfdl:inputValueCalc=""{ $ex:var1 }"" />
        </xs:sequence>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
{code}

So the ""var1"" variable defaults to ""1"", and newVariableInstance does not provide a default value.

If we run the following to parse with an externally set value of 2:
{code}
daffodil parse -Dvar1=2 ...
{code}

Then we get the resulitng infoset:
{code:xml}
<root>
  <beforeNVI>2</beforeNVI>
  <afterNVI>1</afterNVI>
</root>
{code}
Which isn't correct. Because var1 was set externally to 2, the NVI should use that value as the default, so both beforeNVI and afterNVI should have a value of 2.

",[],2021-03-11 14:33:07+00:00,2021-04-09 20:03:07+00:00,2021-04-12 17:07:54+00:00,Closed,13363866,DAFFODIL-2481
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Say you have a schema that defines a variable ""foo"" that cannot be set externally (e.g. external=""false""). If we try to set any variable (whether or not it is defined in the schmea), we get the following error:

{code:none}
$ daffodil parse -Dfoo=1 ...
scala.MatchError: (ex:foo,MStack(top=VariableInstance(VariableDefined,DataValue(1),ex:foo,One(CompiledExpression(1)),VariableUndefined,NoValue))) (of class scala.Tuple2)
 at org.apache.daffodil.processors.VariableMap.$anonfun$externalVarGlobalQNames$1(VariableMap1.scala:305)
 at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:273)
 at scala.collection.mutable.HashMap.$anonfun$foreach$1(HashMap.scala:149)
 at scala.collection.mutable.HashTable.foreachEntry(HashTable.scala:237)
 at scala.collection.mutable.HashTable.foreachEntry$(HashTable.scala:230)
 at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:44)
 at scala.collection.mutable.HashMap.foreach(HashMap.scala:149)
{code}

So a schema with at least one non-external variable means you cannot set any variables externally.

Similary, say all variables are external, but we try to set a variable that doesn't exist. Then we get the following
{code:none}
$ daffodil parse -Ddne=1 ...
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://daffodil.apache.org/community/#issue-tracker

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


Schema Definition Error: unknown variable dne
Schema context: element reference ex:root Location line 36 in file:/home/slawrence/owl/daffodil/dfdl-schemas.git/dfdl-csv/src/main/resources/com/tresys/csv/xsd/csv.dfdl.xsd
	at org.apache.daffodil.dsom.ImplementsThrowsSDE.SDE(SDE.scala:179)
	at org.apache.daffodil.dsom.ImplementsThrowsSDE.SDE$(SDE.scala:178)
	at org.apache.daffodil.processors.TermRuntimeData.SDE(RuntimeData.scala:101)
{code}

So we do get an SDE about ""unknown variable"", but that SDE makes its way out of diagnostics and the CLI reports it as a bug.

I haven't testing how the API handles this, but presumably the issue is the same since that's what the CLI uses. When this is fixed, CLI and API tests should be added to make sure this works and correct error diagnostics are returned.",[],2021-03-11 14:25:28+00:00,2021-06-07 18:32:03+00:00,2021-06-10 13:27:07+00:00,Closed,13363863,DAFFODIL-2480
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"I have a file format where it is natural to specify initiators using hex character classes because the specification uses hex values. One case of this is an initator that has a value of 0x25 in hex. In ASCII encoding this is the percent character (%). For example:
{code:xml}
<xs:element name=""foo"" type=""xs:string"" dfdl:initiator=""%#x25;"" />
{code}
Using the above leads to the following invariant abort:
{code:none}
org.apache.daffodil.exceptions.Abort: Invariant broken. delimStr should not end in an isolated single %. DelimStr = %
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
org.apache.daffodil.processors.Delimiter.buildDelimBuf(DFDLDelimiter.scala:331)
org.apache.daffodil.processors.Delimiter.compileDelimiter(DFDLDelimiter.scala:69)
	at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
	at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
	at org.apache.daffodil.processors.Delimiter.buildDelimBuf(DFDLDelimiter.scala:331)
	at org.apache.daffodil.processors.Delimiter.compileDelimiter(DFDLDelimiter.scala:69)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.apply(CreateDelimiterDFA.scala:68)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.$anonfun$apply$3(CreateDelimiterDFA.scala:97)
{code}
It looks like Daffodil is treating this exactly as if it were a ""%"". For example, if I change the initiator to this:
{code:xml}
<xs:element name=""foo"" type=""xs:string"" dfdl:initiator=""%#x25;NL;"" />
{code}
then it looks for a newline initator (i.e. %NL\;)

Note that {{dfdl:initiator=""%""}} does give a helpful error message, so this is specific to using a character class entity that encodes to a percent.

The workaround is to specify the initiator as ""%%"" (i.e. an escaped percent). This works fine, but is not ideal in this case because all initiators are better described using hex values.",[],2021-03-10 21:05:51+00:00,,2021-03-18 20:20:20+00:00,Open,13363654,DAFFODIL-2479
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"DFDL schema writers need the definitions of these schemas.

Links to them, or copies, need to be available easily on the daffodil site, because people need them, and the only other way to get at them is either poke into the Daffodil source code in daffodil-lib module, or unzip a daffodil-lib jar file.

Putting a link on the daffodil-site that takes people to the github file is probably fine, that way we don't have a copy that gets obsolete.

 ",[],2021-03-09 19:21:12+00:00,,2021-03-18 20:19:33+00:00,Open,13363353,DAFFODIL-2478
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The CLI --validate flag allows an optional ""mode"" argument to specify whether to have full, limited, or no validation. If mode is not specified, it defaults to no validation.

As of Daffodil 3.0.0, this appears to be broken and the mode parameter is required. If you do not specify a mode, you get the error:
{code:java}
[error] Bad arguments for option 'validate': '' - you should provide exactly one argument for this option{code}
We need to fix this to make it optional again, or if that isn't possible for some reason, make it so the documentation is changed to make it clear that mode is a required argument.",['beginner'],2021-03-09 17:08:30+00:00,2021-05-11 21:23:15+00:00,2021-05-13 13:25:37+00:00,Closed,13363324,DAFFODIL-2477
Improvement,[],interran,John Interrante,interran,John Interrante,Minor,"Scala ecosystem library writers are being asked to define a *ThisBuild / versionScheme* setting declaring their library's semantic versioning scheme so that sbt can issue more reliable (no false positives) warnings about conflicts between incompatible versions of transitive library dependencies.  I think we should define this setting in Daffodil's build.sbt to tell any downstream applications which semantic versioning scheme Daffodil's version numbers use.

See: [Preventing Version Conflicts with versionScheme|https://scala-lang.org/blog/2021/02/16/preventing-version-conflicts-with-versionscheme.html]",[],2021-03-08 14:57:12+00:00,,2021-03-08 14:57:12+00:00,Open,13363035,DAFFODIL-2476
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor," 

Daffodil implements pattern facet regexs using the Java regex engine.

The regex allowed by the XSD pattern facet are much more restrictive than what the Java regex engine accepts for syntax.

There are even some incompatibilities (I think) where XSD pattern regexs allow subtraction from ranges: e.g., like [A-Z-[IO]] which means A through Z, without I nor O. This feature is not (need to double check) allowed by java regexs. 

I'm not worried about implementing that feature very much, though it is nice.

But for the most part the incompatibilities go the other way, where Java regex are more permissive and featureful. E.g., they have lookahead and lookbehind which XSD regexs don't support. They have modes like (?s) which enables ""."" to match line ending characters. XSD doesn't have that.

It may be that if you turn on Xerces validation, but are using java-only constructs in the regex, that XSD doesn't support, that you will get an error from Xerces. (Need to verify) in which case I think that would lower the priority of this issue.

I suggest one possible fix is a parser for this regex syntax that enforces only allowing what XSD allows in pattern regexs.

 

 

 

 ",[],2021-03-04 02:55:28+00:00,,2021-03-18 20:16:20+00:00,Open,13362207,DAFFODIL-2475
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Major because this issue was raised by a user, and it took me hours to figure it out!

We need to cleanup some code and add tests to show how to do seemingly obvious things with XSD pattern facets that are in fact quite tricky to do, and we've gotten them wrong before in real schemas.

E.g., use a pattern facet to restrict the characters of a string to only the characters with code points less than 7F.

This turns out to be quite tricky due to XML illegal characters, combined with XML attribute normalization.

The correct pattern facet definition is this:
{code:java}
<xs:pattern value=""[&#xE000;-&#xE008;\t\n&#xE00B;&#xE00C;\r&#xE00E;-&#xE01F;&#x20;-&#x7F]*""/>{code}
(that has to all be on one line)

Various other combinations do NOT work. E.g., you can't replace the \n by
{code:java}
&#xA;{code}
because XML attribute normalization will take that out.

You can't use Daffodil's
{code:java}
&#xE00A;{code}
either, because when Xerces-based full validation comes along, there will be an 0x0A in the data, not an 0xE00A, so Xerces will fail validation. You have to use \n for this.

 

 

 

 ",[],2021-03-04 01:34:45+00:00,2021-03-08 13:46:52+00:00,2021-03-08 20:15:06+00:00,Closed,13362197,DAFFODIL-2474
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"There are a number of data representations DFDL cannot handle because it cannot manipulate numbers with sufficient flexibility in expressions.

We need AND, OR, NOT, maybe XOR, and shift left, shift right, and probably arithmetic shift right (which does sign-extension of signed numbers). We should add functions for the whole set of them.

On signed numbers with specific sizes (long, int, short, byte) these should behave as if the data was binary in 2s complement representation, i.e., as if the most-significant-bit was playing the role of 2s complement sign.

These operations should all be undefined (Schema Def Error) on decimal, integer, and non-negative integer values, as well as float and double.

Specifically, these operations are defined on long and its subtypes, and unsignedLong and its subtypes only.

 

 

 ",[],2021-02-24 18:41:17+00:00,,2021-05-27 20:54:54+00:00,Open,13360721,DAFFODIL-2473
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2021-02-19 19:41:48+00:00,2021-02-25 14:14:05+00:00,2021-03-01 17:41:28+00:00,Closed,13359655,DAFFODIL-2472
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The release of daffodil 3.0.0 available from maven central specifies a source link that doesn't work any longer.

[https://gitbox.apache.org/repos/asf/incubator-daffodil.git]

This fails because of the ""incubator-"" prefix.

Note that this link is what is used by Scaladex to find and index scala-related projects, and that's a good place for Apache Daffodil to be listed properly.

Once this issue is fixed, scaladex should fix itself (eventually) either at the next post-incubator release (probably 3.1.0), or if we proactively fix 3.0.0 maybe scaladex will fix itself also (depends on whether they get an update pushed to them)

 ",[],2021-02-19 18:09:30+00:00,2021-03-18 20:14:13+00:00,2021-03-18 20:14:26+00:00,Closed,13359641,DAFFODIL-2471
Task,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Daffodil is nearing graduation with the only remaining step being final board approval. Assuming this is accepted, we will want to move quickly to publicize this via press releases/blogs/etc. We should plan to have instances of ""incubating"" removed prior to such publicity going out. To support doing this quickly, we should create pull requests to remove ""incubating"" on our website and code repository so that if graduation is approved, we can quickly make the transition.  ",[],2021-02-16 12:36:30+00:00,2021-02-19 18:02:00+00:00,2021-02-23 16:51:10+00:00,Closed,13358855,DAFFODIL-2470
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This page is as of release 2.7.0 (was never updated for 3.0.0 release)

It needs further update to match the final DFDL specification.

There is no current Errata document any longer. The DFDL Spec is being finalized, and incorporates all the existing errata.

So the section about errata support needs to just become ordinary unsupported features.

 ",[],2021-02-04 16:10:44+00:00,2021-02-04 19:39:06+00:00,2021-02-11 11:12:20+00:00,Closed,13356801,DAFFODIL-2469
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"While verifying DAFFODIL-2455 - - Large CSV file causes ""Attempting to backtrack too far"" exception, found that unparsing the successfully parsed 800mb CSV files infoset ran out of memory.

Increased the DAFFODIL_JAVA_OPTS memory setting several time up to 32gb and tried unparsing the infoset, each time running out of memory. Ran on test platform which has 90+GB of memory. 

Parsed and unparsed using the shema from dfdl-shemas/dfdl-csv repo.

The 800gb csv file (csv_data800m.csv) gzipped.",[],2021-02-03 13:52:50+00:00,2021-05-12 18:40:05+00:00,2021-05-12 18:40:05+00:00,Closed,13356503,DAFFODIL-2468
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2021-02-03 00:18:29+00:00,2021-02-05 15:25:15+00:00,2021-02-05 16:06:27+00:00,Closed,13356330,DAFFODIL-2467
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"This is the backtrace of testFromSPI.

testDefaultIsRegistered also fails similarly.

Presumably this is due to something that has to be on the classpath. I have verified that xerces is on the classpath for daffodil-lib, so unclear what is missing.

```

org.apache.daffodil.validation.ValidatorNotRegisteredException: No ValidatorFactory is registered as xerces
 at org.apache.daffodil.validation.Validators$.$anonfun$get$1(Validators.scala:47)
 at scala.collection.MapLike.getOrElse(MapLike.scala:128)
 at scala.collection.MapLike.getOrElse$(MapLike.scala:126)
 at scala.collection.AbstractMap.getOrElse(Map.scala:59)
 at org.apache.daffodil.validation.Validators$.get(Validators.scala:47)
 at org.apache.daffodil.validation.TestXercesValidator.testFromSPI(TestXercesValidator.scala:28)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
 at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
 at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
 at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
 at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

 ```",[],2021-02-01 20:30:28+00:00,,2021-04-13 18:41:11+00:00,Open,13356044,DAFFODIL-2466
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Our custom {{sbt updateEclipseClassifiers}} command requires that a user setup the DAFFODIL_HOME environment variable correctly. But this environment variable is actualy no longer needed in eclipse. It is only needed for this one sbt command.

To simplify eclipse setup, instead of getting the Daffodil directory from this environment variable, we should instead UpdateEclipseClassifers main() function accept the Daffodil directory as the first argument. This way, when run via sbt, sbt can pass in {{baseDirectory.value}}, and we can rid of this DAFFODIL_HOME step in the setup.",[],2021-02-01 16:33:29+00:00,2021-02-03 13:02:20+00:00,2021-02-12 20:09:16+00:00,Closed,13355992,DAFFODIL-2465
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"In preparation for graduation, we should document an assesment of the Apache maturity model:

https://cwiki.apache.org/confluence/display/DAFFODIL/Apache+Daffodil+Maturity+Model+Assesment",[],2021-01-27 18:11:01+00:00,2021-05-12 18:40:51+00:00,2021-05-12 18:40:51+00:00,Closed,13354995,DAFFODIL-2464
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"This page should be updated in preparation for graduation:

https://incubator.apache.org/projects/daffodil.html",[],2021-01-27 18:09:56+00:00,2021-01-28 23:10:38+00:00,2021-05-12 11:59:53+00:00,Closed,13354993,DAFFODIL-2463
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,Such as eclipse-projects and .settings files,['beginner'],2021-01-22 17:27:43+00:00,2021-03-05 18:35:27+00:00,2021-03-05 18:35:27+00:00,Closed,13354007,DAFFODIL-2462
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"In a recent GitHub Actions tests, there was a failure with checking the error code of a test:

https://github.com/apache/incubator-daffodil/pull/477/checks?check_run_id=1745505882#step:10:200

Based on the output, it's looks like Daffodil did the right thing, but then failed to detect the correct error code. The error makes this clear:

{quote}
Error:  Test org.apache.daffodil.schematron.TestEmbedded.extends2 failed: unparseable ec, D:\a\incubator-daffodil\incubator-daffodil>
{quote}

This ""unparseable ec"" is expecting an integer, but instead it got the command prompt. Looking at the output, we can see that we are sending the ""echo %errorlevel%"" command before we get to the prompt, and our code seems to be accepting the command prompt as a match for the error code.

Perhaps we need to have an expect that looks for the prompt before sending new line?",[],2021-01-22 13:06:06+00:00,2021-05-12 18:39:40+00:00,2021-05-12 18:39:40+00:00,Closed,13353971,DAFFODIL-2461
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"I get the following error when running the above test. For some context a02:inty is from an imported schema with targetNamespace ""http://a02.com"" (..a02_targetnamespace.dfdl.xsd) and b02:inty is from an inlcuded schema with no targetnamespace (no_targetnamespace.dfd.xsd). The targetnamesapce of the main schema (nested_namespaces.dfdl.xsd) is ""http://b02.com""


{noformat}
java.lang.AssertionError: pf compile errors: Schema Definition Error: Two or more members of the unordered sequence (b02:seq2::LocalComplexTypeDef::sequence[1]) have the same name and the same namespace.
Namespace: http://b02.com	Name: inty.
Schema context: sequence[1] Location line 12 column 8 in file:/tmp/anon7335421393015500745.dfdl.xsd

	at org.junit.Assert.fail(Assert.java:89)
	at TestUnorderedSequenceNamespace$.testDataProcessor(TestUnorderedSequenceNamespace.scala:32)
	at TestUnorderedSequenceNamespace$.dpNamespaces$lzycompute(TestUnorderedSequenceNamespace.scala:24)
	at TestUnorderedSequenceNamespace$.dpNamespaces(TestUnorderedSequenceNamespace.scala:24)
	at TestUnorderedSequenceNamespace.test_DataProcessor_parse(TestUnorderedSequenceNamespace.scala:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)
{noformat}



",[],2021-01-22 01:21:12+00:00,,2021-01-22 01:21:49+00:00,Open,13353878,DAFFODIL-2460
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"A layerTransformer that allows DFDL schemas to decode zip file contents carried within message payloads.

 ",[],2021-01-21 23:00:32+00:00,2021-03-18 20:10:06+00:00,2021-03-18 20:10:06+00:00,Closed,13353861,DAFFODIL-2459
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This wiki page:

[https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+Infoset+Streaming+and+Memory+Reduction]

is obsolete. The streaming-unparser description doesn't match for sure.

Needs revisiting.",[],2021-01-21 18:08:48+00:00,,2021-05-11 18:58:43+00:00,Open,13353817,DAFFODIL-2458
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"When thisElementNamespacePrefix was replaced with prefixOrNull, we lost the functionality where namespaces prefixes are looked up. And instead relied only on the lexical prefix. There's plenty of times when there is no lexical prefix, but there is a namespace associated with the element, thus we can attempt to look up a prefix. We need to bring back this functionality, fixing the incorrect namespaces and incorrect prefixes.",[],2021-01-20 16:17:23+00:00,2021-04-28 20:08:10+00:00,2021-05-11 14:25:07+00:00,Closed,13353568,DAFFODIL-2457
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"In JAPI, there is no way to parse, get a result back, but also get validation errors back.

Validation errors come through as diagnostics with isError true.

Calling outputter.getResult() requires that isError is false.

This prevents using validation errors like warnings.

I want to accept ""well formed"" but ""invalid"" data, and skip past it to the next input message.

I can't do that with the API like this.

I think I need getResult() to succeed if the errors are only validation errors (or recoverable errors), and give me the infoset.

We should also add a Diagnostic.isValidationError so that I can tell that a diagnostic is not a fatal error easily (currently one must call d.getMessage().contains(""Validation Error"") which is not a good API.

 

 

 ",[],2021-01-20 01:14:25+00:00,2021-01-20 19:40:56+00:00,2021-01-26 13:28:37+00:00,Closed,13353405,DAFFODIL-2456
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A user reports that they have an ~800MB CSV file and a schema to parse that file that looks something like this:
{code:xml}
  <xs:element name=""file"">
    <xs:complexType>
      <xs:sequence dfdl:separator=""%NL;"" dfdl:separatorPosition=""postfix"">
        <xs:element name=""row"" maxOccurs=""unbounded"">
          <xs:complexType>
            <xs:sequence dfdl:separator="","">
              <xs:element name=""field1"" type=""xs:string""/>
              <xs:element name=""field2"" type=""xs:string""/>
              ...
              <xs:element name=""fieldN"" type=""xs:string""/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
{code}
Parsing this large file fails with the exception:
{quote}[error] Runtime Schema Definition Error: Attempted to backtrack too far: Attempted to backtrack to byte 268427263, which exceeds maximum backtrack length of 268435456
{quote}
This schema does not require any backtracking, so shouldn't be hitting this issue.",[],2021-01-14 14:09:34+00:00,2021-01-19 15:10:54+00:00,2021-02-02 16:20:34+00:00,Closed,13352268,DAFFODIL-2455
Bug,[],susmita.munshi,Susmita,susmita.munshi,Susmita,Major,"Hi Steve,

We were using daffodil 2.2.0, we want to upgrade the daffodil and do few changes to fix a bug and compile the project.

we were able to do the compilation of version 2.2.0 and use it as required.

The latest version 3.0.0 we are not able to do so.

Used scala – : ""scala-SDK-4.7.0-vfinal-2.12-win32""  scala 2.11.

Please Guide, what are the prerequisite and the steps to do the modification in version 3.0.0 and do the compilation and daffodil/stage successfully.

Thanks & Regards

Susmita",[],2021-01-13 17:21:11+00:00,2021-02-02 15:21:38+00:00,2021-02-18 18:51:05+00:00,Closed,13352057,DAFFODIL-2454
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2021-01-13 13:49:20+00:00,2021-01-14 12:41:29+00:00,2021-01-26 16:50:30+00:00,Closed,13352011,DAFFODIL-2453
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"It is not uncommon to have something like the following in a DFDL schema:
{code:xml}
  <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />
{code}
This is used to reference a DFDL schema distributed in Daffodil jars to provide a reasonable set of defaults for some DFDL properties. Because this schemaLocation is in a Daffodil jar, Daffodil is always able to find and use it when included in DFDL schemas.

However, XML Schema validators other than Daffodil will not know how to find this file in a Daffodil jar. So if someone wants to use a schema that references this schemaLocation for something other than Daffodil parsing/unparsing (e.g. infoset schema validation), other tools will likely complain about a missing include. The only solution is to either ignore these errors, which might not always be possible, or find and download the file. But the file is only in our github repo, so there isn't an obvious way to find this file for people new to the project.

One solution would be to upload this DFDL schema to the Daffodil website so it could be referenced like so:
{code:xml}
  <xs:include schemaLocation=""https://daffodil.apache.org/xsd/DFDLGeneralFormat.dfdl.xsd"" />
{code}

This way, schema validators that know how to retrieve an external schemaResource can do so. And for those that can't, this makes for an obvious place for users to manually download the resource.

Note that Daffodil should almost certainly not download this file when included, but should instead see this URL and resolve to the file distributed in the Daffodil jar. There are many situtations where we do not want Daffodil going off box for schema resources (see DAFFODIL-602). For Daffodil, this would simply be a URI that happens to look like a URL that resolves to a file in our jars. 

We should also determine if there are any other schema resources distributed by Daffodil that could benefit from being put on our website for easy access.",[],2021-01-04 13:27:55+00:00,,2021-03-18 20:06:09+00:00,Open,13348944,DAFFODIL-2449
New Feature,[],jw3,John Wass,jw3,John Wass,Minor,"See Mike's [comment|https://github.com/apache/incubator-daffodil/pull/463#discussion_r547491041] about TDML support for invoking validation, specifically Schematron.

 
{quote}... it seems to me we want to be able to write TDML tests with validation settings that will cause them to invoke schematron as part of the runtime. E.g., define a tdml:testSuite with defaultValidation=""schematron"" or a specific tdml:parserTestCase with validation=""schematron""

 
{quote}",[],2020-12-29 03:06:02+00:00,,2021-03-18 20:04:24+00:00,Open,13348212,DAFFODIL-2448
Improvement,[],jw3,John Wass,jw3,John Wass,Trivial,"See Mike's [comment|https://github.com/apache/incubator-daffodil/pull/431#discussion_r512181997] for potential optimization.

bq. If you change this recursion to call schemaURIStringsForFullValidation (without the ""1"" suffix), this algorithm will be greatly improved because we expect tons of duplicates - so squeezing them out with the ""distinct"" recursively, as we aggregate up the tree, that call should pay dividends.
","['beginner', 'optimization']",2020-12-23 18:37:43+00:00,,2020-12-23 18:38:30+00:00,Open,13347638,DAFFODIL-2447
New Feature,[],jw3,John Wass,jw3,John Wass,Major,"Support embedding Schematron rules within the DFDL schema.

This builds on [DAFFODIL–1807|https://issues.apache.org/jira/browse/DAFFODIL-1807] to transparently extract rules prior to validation.",[],2020-12-23 17:41:19+00:00,2021-01-21 18:24:08+00:00,2021-01-21 18:24:08+00:00,Closed,13347632,DAFFODIL-2446
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,The use of this conversion function may not be necessary as expression should already evaluate to an expected type.,[],2020-12-09 17:01:14+00:00,,2021-03-18 20:02:48+00:00,Open,13345114,DAFFODIL-2445
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"While enabling support for defineVariable's that have non-constant expressions, I ran into some error cases where the path handling code for expressions would throw NoSuchElement exceptions when trying to handle this case where we are trying to evaluate a path before the infoset even exists.

I attempted to add some basic handling to the case I was running into, but that only lead to finding more issues where we were at least running into some Assert.invariant checks instead of exceptions, but there are probably a number of places that could use proper error handling in here if we want to handle situations like this where the infoset doesn't exist.

Here is the stack trace for the test:
[error] Test org.apache.daffodil.section07.variables.TestVariables.test_defineVariable_ref_infoset_err failed: java.util.NoSuchElementException: head of empty list, took 0.029 sec
[error]     at scala.collection.immutable.Nil$.head(List.scala:430)
[error]     at scala.collection.immutable.Nil$.head(List.scala:427)
[error]     at org.apache.daffodil.dpath.NamedStep.downwardStep$lzycompute(Expression.scala:1177)
[error]     at org.apache.daffodil.dpath.NamedStep.downwardStep(Expression.scala:1176)
[error]     at org.apache.daffodil.dpath.NamedStep.compiledDPath$lzycompute(Expression.scala:1167)
[error]     at org.apache.daffodil.dpath.NamedStep.compiledDPath(Expression.scala:1166)
[error]     at org.apache.daffodil.dpath.RelativePathExpression.$anonfun$compiledDPath$3(Expression.scala:828)
[error]     at scala.collection.immutable.List.map(List.scala:286)
[error]     at org.apache.daffodil.dpath.RelativePathExpression.compiledDPath$lzycompute(Expression.scala:827)
[error]     at org.apache.daffodil.dpath.RelativePathExpression.compiledDPath(Expression.scala:826)
[error]     at org.apache.daffodil.dpath.WholeExpression.compiledDPath$lzycompute(Expression.scala:650)
[error]     at org.apache.daffodil.dpath.WholeExpression.compiledDPath(Expression.scala:650)
[error]     at org.apache.daffodil.dpath.DFDLPathExpressionParser.compile(DFDLExpressionParser.scala:60)
[error]     at org.apache.daffodil.dsom.ExpressionCompiler.compileRealExpression(CompiledExpression.scala:219)
[error]     at org.apache.daffodil.dsom.ExpressionCompiler.compileExpression(CompiledExpression.scala:73)
[error]     at org.apache.daffodil.dsom.ExpressionCompiler.compileProperty(CompiledExpression.scala:116)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.$anonfun$maybeDefaultValueExpr$1(DFDLDefineVariable.scala:73)
[error]     at scala.Option.map(Option.scala:230)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.maybeDefaultValueExpr$lzycompute(DFDLDefineVariable.scala:72)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.maybeDefaultValueExpr(DFDLDefineVariable.scala:69)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.$anonfun$variableRuntimeData$1(DFDLDefineVariable.scala:86)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.$anonfun$variableRuntimeData$1$adapted(DFDLDefineVariable.scala:86)
[error]     at org.apache.daffodil.processors.VariableRuntimeData.maybeDefaultValueExpr$lzycompute(RuntimeData.scala:966)
[error]     at org.apache.daffodil.processors.VariableRuntimeData.maybeDefaultValueExpr(RuntimeData.scala:966)
[error]     at org.apache.daffodil.processors.VariableRuntimeData.preSerialization(RuntimeData.scala:970)
[error]     at org.apache.daffodil.dsom.DFDLDefineVariable.$anonfun$new$1(DFDLDefineVariable.scala:35)
[error]     at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:669)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:667)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:664)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGHost.$anonfun$checkErrors$2(OOLAG.scala:414)
[error]     at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error]     at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:414)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors$(OOLAG.scala:400)
[error]     at org.apache.daffodil.dsom.SchemaComponentImpl.checkErrors(SchemaComponent.scala:35)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:471)
[error]     at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError$(OOLAG.scala:470)
[error]     at org.apache.daffodil.dsom.SchemaSet.super$isError(SchemaSet.scala:483)
[error]     at org.apache.daffodil.dsom.SchemaSet.$anonfun$isError$2(SchemaSet.scala:483)
[error]     at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:23)
[error]     at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
[error]     at org.apache.daffodil.dsom.SchemaSet.isError(SchemaSet.scala:474)
[error]     at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:111)
[error]     at org.apache.daffodil.compiler.Compiler.org$apache$daffodil$compiler$Compiler$$compileSourceInternal(Compiler.scala:329)
[error]     at org.apache.daffodil.compiler.Compiler$.org$apache$daffodil$compiler$Compiler$$compileSourceSynchronizer(Compiler.scala:367)
[error]     at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:314)
[error]     at org.apache.daffodil.tdml.processor.TDMLDFDLProcessorFactory.compileProcessor(DaffodilTDMLDFDLProcessor.scala:148)
[error]     at org.apache.daffodil.tdml.processor.TDMLDFDLProcessorFactory.$anonfun$getProcessor$1(DaffodilTDMLDFDLProcessor.scala:169)
[error]     at org.apache.daffodil.tdml.SchemaCache.doCompile$lzycompute$1(SchemaCache.scala:95)
[error]     at org.apache.daffodil.tdml.SchemaCache.doCompile$1(SchemaCache.scala:95)
[error]     at org.apache.daffodil.tdml.SchemaCache.$anonfun$compileAndCache$1(SchemaCache.scala:108)
[error]     at scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:86)
[error]     at org.apache.daffodil.tdml.SchemaCache$Cache.getOrElseUpdate(SchemaCache.scala:51)
[error]     at org.apache.daffodil.tdml.SchemaCache.compileAndCache(SchemaCache.scala:107)
[error]     at org.apache.daffodil.tdml.processor.TDMLDFDLProcessorFactory.getProcessor(DaffodilTDMLDFDLProcessor.scala:169)
[error]     at org.apache.daffodil.tdml.TestCase.run(TDMLRunner.scala:753)
[error]     at org.apache.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:387)
[error]     at org.apache.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:144)
[error]     at org.apache.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:150)
[error]     at org.apache.daffodil.section07.variables.TestVariables.test_defineVariable_ref_infoset_err(TestVariables.scala:71)",[],2020-12-08 22:41:43+00:00,,2020-12-08 22:41:43+00:00,Open,13344936,DAFFODIL-2444
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"While working on enabling defineVariables to have non-constant expressions, I ran into a few cases where expected errors were occurring, but were not being detected by TDMLRunner.  Instead, the error occurred and the stacktrace from the exception is simply printed out, causing the test to fail even though the TDML test case was expecting that error.

See tests test_circular_defineVariable_err and test_defineVariable_ref_noDefault_err in daffodil-test/src/test/scala/org/apache/daffodil/section07/variables/TestVariables.scala which are currently commented out.",[],2020-12-08 22:23:39+00:00,2020-12-09 16:20:22+00:00,2020-12-09 16:20:22+00:00,Closed,13344933,DAFFODIL-2443
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The DFDL Spec link from the website is to an obsolete old version.

 

The spec is in public review now, the links should point there, or to our own page which has both the public review links and the historic links.

 

Hopefully as of January 2021 or shortly thereafter, there will be a final DFDL spec to point to.",[],2020-11-26 00:25:56+00:00,2020-12-01 19:45:59+00:00,2020-12-10 16:11:44+00:00,Closed,13342728,DAFFODIL-2442
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Say we accidentally try to compile a non-DFDL schema (i.e. a schema without the DFDL namespace prefix defined). In this case we get a warning like so:
{code}
[warning] Schema Definition Warning: Non-DFDL Schema file ignored. Does not have DFDL namespace definition on schema root element.
...
{code}
In this case, we simply do not generate a parser, and the warning alerts that user as to why.

But if we try to compile the same schema with warinings disabled (i.e. suppressSchemaDefinitionWarnings=all), then we get the following invariant:
{code}
org.apache.daffodil.exceptions.Abort: Invariant broken: diags.length.>(0)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.compiler.Compiler.org$apache$daffodil$compiler$Compiler$$compileSourceInternal(Compiler.scala:332)
org.apache.daffodil.compiler.Compiler$.org$apache$daffodil$compiler$Compiler$$compileSourceSynchronizer(Compiler.scala:367)
org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:314)
	at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
	at org.apache.daffodil.compiler.Compiler.org$apache$daffodil$compiler$Compiler$$compileSourceInternal(Compiler.scala:332)
	at org.apache.daffodil.compiler.Compiler$.org$apache$daffodil$compiler$Compiler$$compileSourceSynchronizer(Compiler.scala:367)
	at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:314)
{code}

This assertion is hit if the processor factory returns an error during compilation (which occurs in this case because we don't have a DFDL schema) but does not have any diagnostics related to the error. In this case, we don't have any diagnostics because we disabled the warning that we would normally output.

Some potential solutions:
1. Change the SDW to an SDE, so the diagnostic cannot be ignored. This might seem reasonable, but it is allowed to import a non-DFDL schema into a DFDL schema, so we need to ensure that this case is either still an SDW or does not create a diagnostic. So there might be different cases where this is an SDE vs SDW. 
1. Just remove this invariant check, since this is case where pf.isError can be true, but there is no related diagnostic. However, that might be unhelpful since it's not uncommon for users to suppress all warnings, and so the user gets no indication that a parser was not created.",['beginner'],2020-11-19 18:33:24+00:00,,2021-03-18 19:59:27+00:00,Open,13341648,DAFFODIL-2441
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Daffodil's TDML processor can determine the root element namespace URI by searching.

Other TDML processors can't do that. 

This turns out to make it impossible to run TDML negative parser test cases, because there is no infoset from which the namespace can be determined. So, for example on the IBM Cross Tester's TDML Processor, a parserTestCase that is negative always fails with 'can't find root element' whenever there is a target namespace in the schema.

1) add a way to specify the root namespace URI on a test case (e.g., rootNS attribute)

2) add a heuristic to grab targetNamespace of primary schema file or schema node

Pass this namespace string so that it is supplied to the processor.

 ",[],2020-11-18 05:46:40+00:00,2020-11-20 23:32:48+00:00,2020-12-10 19:59:15+00:00,Closed,13341224,DAFFODIL-2440
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"There is an invariant that ""dead"" DataOutputStream doesn't mean really dead, because a suspension can still care whether it is zeroLength or not, has implications for resource management. E.g., suppose we wanted to pool DOS objects for reuse. The state we call ""dead"" for them is not equivalent to ""reusable"" so should be put back into the pool. This suggests the state dead and method isDead should be renamed to outputComplete or some other name that suggests notDeadYet, but that one aspect of usage is over with, but there can still be suspensions. I think the suspension has to be attached to the DOS while it is live. Hence, we could add a hasAssociatedSuspension bit or reference counter to the DOS object. Then things that are outputComplete but not hasAssociatedSuspension are truly ""dead"" and could be recycled. Otherwise they would be in state hasAssociatedSuspension until that suspension is resolved.",[],2020-11-17 15:03:14+00:00,,2021-03-18 19:58:45+00:00,Open,13341084,DAFFODIL-2439
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The fn:count, fn:exists, fn:exactly-one, fn:empty functions take a path expression.

The precise meaning of these is not (yet) defined by the DFDL spec if the argument is a path that leads to an enclosing element where the expression resides.

Ex: fn:count(../..) when parsing? It is unclear what this means, and it is problematic if this relative path is to an enclosing array that contains elements where this expression is being evaluated at parse time, because success of the expression determines the count. This is inherently circular, or overly-constrains implementations to an iterative sequential parse algorithm.

The DFDL Workgroup has discussed clarification of this behavior, and the very likely result is that use of an argument path (relative or absolute) that refers to an enclosing element will be defined to be a runtime SDE.

Step 1 however, is to scan existing test suite and known DFDL schemas used with Daffodil, and to find any such usage. It is expected any such usage can be revised so as not to depend on this undefined DFDL behavior. 

All 4 functions: fn:count, fn:exists, fn:exactly-one, and fn:empty must be considered.

Then, detection and issuing of this runtime SDE should be implemented, and negative tests that cause this error added to Daffodil.

 ",[],2020-11-12 17:52:39+00:00,,2021-03-18 19:58:25+00:00,Open,13340312,DAFFODIL-2438
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"DFDL is missing a property on dfdl:newVariableInstance and dfdl:setVariable (or perhaps it should be on the dfdl:defineVariable) to indicate if they are to be evaluated at parse, unparse, or both.
 
I have updated the PCAP schema on github to illustrate this issue.
 
This is a pull request (code review) of the changes [https://github.com/DFDLSchemas/PCAP/pull/10]
 
In the PCAP schema the IPSrcGrp group ref appears immediately before the IPSrc element. Similarly the IPDestGrp reference appears immediately before the IPDest element.
 
These groups contain elements which are the individual binary bytes of the IP Source and IP Dest addresses. They are 4 unsigned bytes.
When parsing these are parsed and then their values concatenated as strings into a string like ""1.2.3.4"".
 
 
When unparsing, these groups use dfdl:outputValueCalc to take apart a string like ""1.2.3.4"" (which appears in the infoset), back into its individual digits 1, 2, 3, 4, and creates an unsignedByte value of each number.
 
The problem is, these groups are absolute nonsense if you view the dfdl:newVariableInstance defaultValue expression as being evaluated at parse time. The expression is for use *only* at unparse time and immediately does a forward reference to the following IPSrc member containing the ""1.2.3.4"" type string.
 
Without some sort of additional property on dfdl:newVariableInstance and dfdl:setVariable (or dfdl:defineVariable) to indicate that this only should be evaluated at unparse time, there is no way to suppress evaluation and perform it only at unparse time.
 
I suggest we need an additional property on newVariableInstance and setVariable (or on dfdl:defineVariable) which I suggest is called 'direction', with values 'parse', 'unparse', 'both'. This property defaults to 'both', but if set to 'unparse' only evaluates the expression (and binds/sets variable) during that direction of processing. 
 
This property setting also loosens the DFDL spec restriction that setVariable and newVariableInstance expressions only refer backward. That restriction makes variables fairly useless when unparsing, as most usage of variables from dfdl:outputValueCalc would be to capture common subexpressions that are doing forward reference.
 
(Note: maybe the values of the property should be ""input"", ""output"" and ""both"" to correspond to dfdl:inputValueCalc and dfdl:outputValueCalc property names?)
 
Standard practice now is such new DFDL features must be created as experimental features in an implementation and then proposed for inclusion in the DFDL language.
 
An experimental feature writeup of this proposal is needed to describe the implementation once we have experience with it. 
 
 ",[],2020-11-12 17:42:35+00:00,2020-11-12 17:54:45+00:00,2020-11-12 17:54:46+00:00,Closed,13340308,DAFFODIL-2437
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We currently only test Daffodil on Java 8, 9, and and 11. We should really drop anything that isn't an LTS, and add the newest so we can ensure people on the bleeding edge of Java can use Daffodil.

Also, see DAFFODIL-2332, a known issue with Java 13.",[],2020-11-12 12:53:40+00:00,2020-11-20 15:27:43+00:00,2021-04-19 17:23:21+00:00,Closed,13340210,DAFFODIL-2436
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-11-11 18:46:51+00:00,2020-11-20 14:03:13+00:00,2020-12-10 20:05:54+00:00,Closed,13340034,DAFFODIL-2435
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The sbt-rat plugin has been updated to 0.7.0. This comes with a newer version of the Apache RAT library, but also the ability to ensure that there are no unexpected binaries in the repo. We should update the plugin and enable this check.",[],2020-11-11 18:33:52+00:00,2020-11-20 16:22:55+00:00,2020-12-15 14:28:32+00:00,Closed,13340033,DAFFODIL-2434
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,"Currently the code looks like the below:
{code:scala}
new DaffodilUnhandledSAXException(e.getMessage, e)
{code}

Since e has all the infomation, we can pass it in directly rather than grabbing the message here. The wiki should have some more information on the ideal pattern to create an Exception/Throwable class.",['beginner'],2020-11-10 20:45:26+00:00,,2021-03-18 19:56:27+00:00,Open,13339842,DAFFODIL-2433
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The TunableGenerator.scala file use the dafext.xsd file to generate code to parse tunables. This handles things like correctly converting types or handling default values. Unfortunately, it only does type validation, nothing about value validation (e.g. value must be positive). This means we must either add custom validation code for tunable values long after they have been set, which can possibly lead to confusion, or we don't do any validation at all, which can lead to undefined behavior.

Instead, we should add xs:restriction's to the tunables list in dafext.xsd, and have the TunableGenerator create code to validate based on these restrictions. We don't necessarily need to support all XSD restrictions--probably min/maxInclusive is suffiicient.",[],2020-11-10 13:48:24+00:00,2020-12-02 18:20:58+00:00,2020-12-15 19:31:01+00:00,Closed,13339757,DAFFODIL-2432
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"User reported getting this backtrace. Notice first line is a fragment message. So something is clearly wrong here. Files to reproduce are attached. This is related to unparser suspensions somehow.

```

Exception in thread ""Thread-1"" org.apache.daffodil.exceptions.Abort: Invariant broken. Single suspended expression making

org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:120)

org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:166)

org.apache.daffodil.processors.unparsers.UStateMain.evalSuspensions(UState.scala:647)

org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:538)

at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:120)

at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:166)

at org.apache.daffodil.processors.unparsers.UStateMain.evalSuspensions(UState.scala:647)

at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:538)

at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:511)

at org.apache.daffodil.japi.DataProcessor.unparse(Daffodil.scala:730)

at mil.af.rl.filter.dfdl.impl.DFDLConverterImpl.translateFromXML(DFDLConverterImpl.java:130)

at mil.af.rl.filter.dfdl.TranslateFromXMLFilter.getDFDLResult(TranslateFromXMLFilter.java:47)

at mil.af.rl.filter.dfdl.DFDLFilterBase.filter(DFDLFilterBase.java:108)

```",[],2020-11-09 17:58:25+00:00,2020-11-20 14:59:02+00:00,2020-12-14 19:28:52+00:00,Closed,13339574,DAFFODIL-2431
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If you run the rat check using the sbt console, the ratCheck command fails with the following:
{code:java}
$ sbt
sbt:daffodil> ratCheck
[error] Unapproved licenses found: 1. See full report in .../daffodil.git/target/rat.txt
[error] (ratCheck) org.musigma.sbt.rat.SbtRatCheck$UnapprovedLicenseException: Unapproved licenses
[error] Total time: 2 s, completed Nov 4, 2020 11:07:15 AM
{code}

This happens because the sbt console generates a {{.bsp}} directory with unlicensed files in it, and the ratCheck finds these files and errors. The ratCheck command is supposed to ignore files listed in .gitingore, and .bsp is listed, so it should ignore this file. Need to figure out why it's not being ignored so that we can run ratCheck from the sbt console.",[],2020-11-04 16:16:49+00:00,2020-11-20 19:02:52+00:00,2020-12-15 14:56:01+00:00,Closed,13338860,DAFFODIL-2430
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I have updated the PCAP schema on github to illustrate this issue.
 
This is a pull request (code review) of the changes [https://github.com/DFDLSchemas/PCAP/pull/10]
 
In the PCAP schema the IPSrcGrp group ref appears immediately before the IPSrc element. Similarly the IPDestGrp reference appears immediately before the IPDest element.
 
These groups contain elements which are the individual binary bytes of the IP Source and IP Dest addresses. They are 4 unsigned bytes.
When parsing these are parsed and then their values concatenated as strings into a string like ""1.2.3.4"".
 
When unparsing, these groups use dfdl:outputValueCalc to take apart a string like ""1.2.3.4"" (which appears in the infoset after parsing), back into its individual digits 1, 2, 3, 4, and creates an unsignedByte value of each number.
 
The problem is, these groups are absolute nonsense if you view the dfdl:newVariableInstance defaultValue expression as being evaluated at parse time. The expression is for use *only* at unparse time and immediately does a forward reference to the following IPSrc member containing the ""1.2.3.4"" type string.
 
Without some sort of additional property on dfdl:newVariableInstance and dfdl:setVariable to indicate that this only should be evaluated at unparse time, there is no way to suppress evaluation and perform it only at unparse time.
 
I suggest we need an additional property on newVariableInstance and setVariable which I suggest is called 'direction', with values 'parse', 'unparse', 'both'. This property defaults to 'both', but if set to 'unparse' only evaluates the expression (and binds/sets variable) during that direction of processing.
 
...mikeb{color:#888888}
{color}",[],2020-11-03 00:19:42+00:00,2021-03-15 14:25:15+00:00,2021-03-18 15:39:15+00:00,Closed,13338524,DAFFODIL-2429
Task,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Commit 5061ed004f9206f2287a3186dfa40684c2d84e5e (DAFFODIL-2388) updated the sbt-native-packger plugin that we use for building things like RPM and windows MSI. The native packager expects to be run on Windows to build the MSI, so we included various hacks is the release candidate container to install wine and mess with settings to get that to work. Unfortunately, upgrading the version of sbt-native-packager broke those hacks.

Need to figure out how it broke things and how to get around that issue.",[],2020-10-27 20:45:13+00:00,2020-10-28 23:13:39+00:00,2020-11-20 21:17:45+00:00,Closed,13337515,DAFFODIL-2428
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"Start with 100 for the ArrayBlockingQueue depth, to see if there is improvement.

- udpdates with need to be made on the SAXInfosetInputter, as well as the DaffodilUnparseContentHandler side to ensure the n for the ABQ is respected by both sides.",[],2020-10-27 18:51:19+00:00,2020-11-20 14:57:14+00:00,2020-12-15 00:11:49+00:00,Closed,13337495,DAFFODIL-2427
Task,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-10-27 16:21:14+00:00,2020-10-30 19:27:56+00:00,2020-11-20 19:55:26+00:00,Closed,13337470,DAFFODIL-2426
Bug,[],bnordin,Brent Nordin,bnordin,Brent Nordin,Major,"I am running large NITF files against Daffodil. I can parse the large file, but Daffodil crashes on the unparse. My casual inspection suggests that a putFile function needs to accept a long parameter instead of an int.

I am running Apache Daffodil (incubating) 3.0.0-SNAPSHOT 

As per https://issues.apache.org/jira/browse/DAFFODIL-2401 I modified the NITF DFDL Schema to use blobs (instead of HexBinary). The modified Schema (and a supporting jpeg Schema) is attached here as I have not yet made a pull request to the NITF DFDL project to have the modifications placed into the main repo.

Be aware that the zipped, compressed test file 'test4G.ntf.zip.Z' will expand to a 4GB file.

To parse the NITF file:

~/Daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I xml -o xxx -s nitfx.dfdl.xsd test4G.ntf

and then to unparse

~/Daffodil/daffodil-cli/target/universal/stage/bin/daffodil unparse -I xml -o xxx.nitf -s nitfx.dfdl.xsd xxx

and after some warnings, it's off into the weeds:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


org.apache.daffodil.exceptions.Abort: Invariant broken: nBytesPut.==(nBytes)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.io.DirectOrBufferedDataOutputStream.deliverContent(DirectOrBufferedDataOutputStream.scala:891)
org.apache.daffodil.io.DirectOrBufferedDataOutputStream$.org$apache$daffodil$io$DirectOrBufferedDataOutputStream$$deliverBufferContent(DirectOrBufferedDataOutputStream.scala:1022)
org.apache.daffodil.io.DirectOrBufferedDataOutputStream.setFinished(DirectOrBufferedDataOutputStream.scala:457)
 at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 at org.apache.daffodil.io.DirectOrBufferedDataOutputStream.deliverContent(DirectOrBufferedDataOutputStream.scala:891)
 at org.apache.daffodil.io.DirectOrBufferedDataOutputStream$.org$apache$daffodil$io$DirectOrBufferedDataOutputStream$$deliverBufferContent(DirectOrBufferedDataOutputStream.scala:1022)
 at org.apache.daffodil.io.DirectOrBufferedDataOutputStream.setFinished(DirectOrBufferedDataOutputStream.scala:457)
 at org.apache.daffodil.processors.Suspension.runSuspension(Suspension.scala:89)
 at org.apache.daffodil.processors.Suspension.runSuspension$(Suspension.scala:81)
 at org.apache.daffodil.processors.unparsers.OnlyPaddingUnparserSuspendableOperation.runSuspension(SpecifiedLength2.scala:616)
 at org.apache.daffodil.processors.SuspensionTracker.evalSuspensionQueue(SuspensionTracker.scala:110)
 at org.apache.daffodil.processors.SuspensionTracker.requireFinal(SuspensionTracker.scala:80)
 at org.apache.daffodil.processors.unparsers.UStateMain.evalSuspensions(UState.scala:620)
 at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:572)
 at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:545)
 at org.apache.daffodil.Main$.$anonfun$run$20(Main.scala:1222)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:78)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:37)
 at org.apache.daffodil.Main$.run(Main.scala:1222)
 at org.apache.daffodil.Main$.main(Main.scala:1464)
 at org.apache.daffodil.Main.main(Main.scala)",[],2020-10-27 00:20:49+00:00,2020-10-27 17:34:22+00:00,2020-11-17 13:41:12+00:00,Closed,13337302,DAFFODIL-2425
Test,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Daffodil has a capability to use a CatalogManager.properties file to specify XML catalogs for resolving includes. We do not have many, if any, tests that verify that this functions as expected. This is partly because it is difficult to write tests because the CatalogManager.properties file must be at the root of the classpath, so one test could affect other tests.

We probably need a way to fork tests that deal with CatalogManager.properties so that we can fork different tests in different temprory directories that contain different CatalogManager.properties files. Perhaps the CLI integration tests are a good candidate for this, but it might make testing some circumstatnces more difficult.

For reference, the TestDaffodilXMLLoader.scala file had tests that verified CatalogManager.properties behavior. But in some cases the tests would be skipped, and they were not thread safe when they were run. So these tests were removed. See the below link to see these tests before they were removed. These tests are good candidates as a starting point for what kinds of tests would be useful to add:

https://github.com/apache/incubator-daffodil/blob/0391ba1345521ce2119833391428a626728b7df3/daffodil-test/src/test/scala/org/apache/daffodil/xml/test/unit/TestDaffodilXMLLoader.scala ",[],2020-10-26 17:13:45+00:00,,2021-03-18 19:55:56+00:00,Open,13337251,DAFFODIL-2424
Task,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,There is a HelloWorld example on the [OpenDFDL GitHub |https://github.com/OpenDFDL/examples]uses XSLT Transformer describe the Daffodil API. We want to create one that uses the SAX API.,[],2020-10-22 20:53:35+00:00,,2020-10-22 20:53:35+00:00,Open,13336801,DAFFODIL-2423
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"The DaffodilXMLReader reader allows you to set/get the Namespace/Namespace-Prefixes features, but it actually doesn't implement them when passing info to a ContentHandler, as is required  by the documentation. Since the XMLReader is expected to work with any ContentHandler, this can lead to unexpected results. We need to update the XMLReader to send the appropriate stuff to the ContentHandler (which within our implementation is via the SAXInfosetOutputter), and to mimic the behavior expected of it in the [XMLReader Documentation|https://docs.oracle.com/javase/7/docs/api/org/xml/sax/XMLReader.html]. Please refer to the [SAX Project namespaces|http://www.saxproject.org/namespaces.html] page as well


 

The table is an excerpt from the [SAX Documentation|http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html#package_description]

||Feature ID||Access||Default||Description||
|namespaces|_read/write_|true|A value of ""true"" indicates namespace URIs and unprefixed local names for element and attribute names will be available.|
|namespace-prefixes|_read/write_|false|A value of ""true"" indicates that XML qualified names (with prefixes) and attributes (including _xmlns*_ attributes) will be available.|",[],2020-10-22 15:43:26+00:00,2021-04-28 20:08:50+00:00,2021-05-11 14:34:10+00:00,Closed,13336764,DAFFODIL-2422
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Erratum 5.1 describes a specific test case for escapeEscapeCharacter:
{quote}{color:#2f2f2f}Consider a dfdl:escapeScheme annotation with the following properties:{color}

{color:#2f2f2f}dfdl:escapeBlockStart=""start""{color}

{color:#2f2f2f}dfdl:escapeBlockEnd=""end""{color}

{color:#2f2f2f}dfdl:escapeEscapeCharacter=""#""{color}{color:#000000} 
 {color}

{color:#2f2f2f}If this is used to serialize a DFDL Infoset element of type xs:string with value “A hash is a #”, then the value is wrapped with the dfdl:escapeBlockStart and dfdl:escapeBlockEnd, giving simple content ""startA hash is a #end"".  If this data was parsed, the ""#end"" will be treated as an escaped escape block end and the parse will fail, reporting that there is no escape block end in the data. {color}{color:#000000} 
 {color}{color:#2f2f2f}
 In this scenario, the data is not compliant with the escape scheme, and the DFDL serializer must issue a processing error. {color}
{quote}
{color:#2f2f2f}We need a specific test to match this case verifying that the processing error does in fact occur, and of course to fix the behavior if it does not.{color}",[],2020-10-21 20:35:09+00:00,,2021-02-05 20:13:29+00:00,Open,13336576,DAFFODIL-2421
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Erratum 5.39 clarifies behavior on arrays in a choice branch, when there are zero occurrences of the array element
{quote}If the branch is an element declaration having dfdl:occursCountKind='expression' or dfdl:occursCountKind='parsed', then zero instances are possible. If the branch parses successfully without a discriminator but produces no element occurrences, then the branch is considered missing, and the parser looks for the next branch.
{quote}
We need to ensure Daffodil implements this behavior, and/or add tests to verify it.

Note: it may be that this is daffodil's behavior, but I somehow doubt it.

 ",[],2020-10-21 19:57:52+00:00,,2021-02-05 20:15:13+00:00,Open,13336566,DAFFODIL-2420
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Erratum 5.40 clarifies that a complexType cannot have a sequence with dfdl:hiddenGroupRef as its model group.

A check for this and issuing an SDE is needed to verify that schemas don't do this.",['beginner'],2020-10-21 19:52:55+00:00,,2021-03-18 19:51:29+00:00,Open,13336565,DAFFODIL-2419
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Trivial,"Erratum 5.30 of the DFDL Spec says:
{quote}{{Implementation Note: Scanning for delimiters when data is binary, or when using raw byte entities in delimiters, means that a simple character based delimiter scanner is not sufficient, as the delimiter may not be representable as characters.}}
{quote}
Implementing a delimiter scanner that works even when delimiters contain raw bytes is hard, but it is required if raw bytes are to be fully implemented. Basically it means that you can't scan for characters in strings, but must lower delimiters (and their state machines)from characters to their representational bytes so that some of the things being scanned for can be just byte values. 

 ",[],2020-10-21 19:33:14+00:00,2020-10-21 19:35:26+00:00,2021-05-18 14:38:45+00:00,Closed,13336559,DAFFODIL-2418
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"DFDL Erratum 5.14 requires a runtime check at unparse time for binaryDecimalVirtualPoint:
{noformat}
In the description of binaryDecimalVirtualPoint, clarify that when unparsing, if the property value is not sufficient to remove the decimal point from the infoset value, it is a processing error. This is true even if the resultant number can be converted into an integer (that is, all digits after the decimal point are zero) because it is an example of excess precision.{noformat}
This ticket is for implementing this check.",[],2020-10-21 19:17:44+00:00,,2021-03-18 19:50:58+00:00,Open,13336556,DAFFODIL-2417
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Trivial,"Element declarations can have a 'form' attribute which overrides the elementFormDefault on the xs:schema. This is standard XSD stuff, not anything DFDL-specific.

 ",[],2020-10-21 19:12:55+00:00,2021-02-04 15:46:12+00:00,2021-02-04 15:46:27+00:00,Closed,13336554,DAFFODIL-2416
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"New feature added in Erratum 5.3. See Erratum document:

https://redmine.ogf.org/dmsf_files/13384?download=",[],2020-10-21 19:07:14+00:00,,2021-03-18 19:50:38+00:00,Open,13336550,DAFFODIL-2415
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-10-21 13:44:06+00:00,2020-10-30 17:40:48+00:00,2020-11-20 19:52:32+00:00,Closed,13336483,DAFFODIL-2414
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If you have a tdml test case that doesn't have either a tdml:infoset or tdml:error tag, then you get the following unhelpful invariant abort error:
{code}
Abort: Invariant broken. Should be Some None, or None Some only.
{code}
Seems like this is expecting this check to happen somewhere else, but it's not happening. We either need to ensure this check happens somewhere else, or change this abort into a more user friendly TDMLException with helpful error message.",['beginner'],2020-10-15 17:27:00+00:00,2021-05-11 20:30:46+00:00,2021-05-11 20:30:55+00:00,Closed,13335642,DAFFODIL-2413
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The CLI currently always reads the entire infoset into an ByteArray. This means it cannot unparse infosets that are larger than memory. For the performance command, this might be reasonable since we want to avoid any overhead relted to reading from disk. But for the normal unparse commad using an the ""xml"" infoset type, we should be able to unparse directly from the InputStream.",[],2020-10-15 14:16:20+00:00,2020-10-16 15:45:09+00:00,2020-12-02 15:19:55+00:00,Closed,13335621,DAFFODIL-2412
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"There are a number of places where we are getting a length of an element or an array that could potentially cause an integer overflow to occur.

For example, all the binary number parsers have a getBitLength funciton that returns an int. It is unlikely for a binary number to have such a large length that it overflows, but if there were bad data or a bad dfdl:length expression, it could definately happen.

Currently there are calls in many different places that would need range checks to prevent this, so it may require some re-architecture to provide a clean solution.",[],2020-10-14 18:37:20+00:00,,2021-03-18 19:47:03+00:00,Open,13335472,DAFFODIL-2411
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The TDML Runner currently hides warnings. This means that if we make a change that causes many new warnings it is very easy to not realize it.

Unfortunately, many tests, including those external to daffodil, might rely on this current behavior so we can't simply fail tests if warnings exist but there are no tdml:warnings in the TDML test.

However, we should at least have some mode that allows us to run the TDML runner and error if there are unchecked warnings. Or perhaps we always output warnings, which would encourage users to update their schemas or fix tests to suppress expected warnings. We could even provide a message that says in some future release uncheck warnings will always be considered an error if we want to go that route.",['beginner'],2020-10-14 15:01:12+00:00,,2021-03-18 19:46:33+00:00,Open,13335437,DAFFODIL-2410
New Feature,[],jw3,John Wass,jw3,John Wass,Major,"Allow for custom validation implementations to be provided at runtime and integrated with SPI.  Would require an interface that describes validation behavior and some refactoring of the existing validation machinery.

The CLI could extend the --validate flag to support additional arguments that identify what validator to run.  The previous usage can be supported for backward compatibility.

The API can be extended with an additional ValidationMode which can identify what validator to run.",[],2020-10-13 19:44:28+00:00,2020-11-20 14:07:40+00:00,2020-12-10 20:28:40+00:00,Closed,13335279,DAFFODIL-2409
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A user is using Daffodil 2.3.0 with the iCalendar DFDL schema, and has provided an "".ics"" file.

These cause Daffodil 2.3.0 to fail with invariant failed.

I have verified that these also cause problems (but not the same one) on Daffodil 2.7.0 with the latest iCalendar schema I have access to. 

On 2.7.0 Daffodil this aborts when run with a trace, and without a trace it parses producing an empty iCalendar element, without error. It doesn't even complain about not consuming the data. This is of course nonsense. There's plenty of data, and an empty icalendar element isn't valid. It has a required vcalendar child element. (You have to turn validation off to get the empty icalendar result, otherwise you get validation errors)

Contact [~mbeckerle] for the associated files.",[],2020-10-09 18:35:21+00:00,2020-10-26 15:00:41+00:00,2020-11-17 17:00:51+00:00,Closed,13334698,DAFFODIL-2408
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"A wish-list item. 

[https://docs.aws.amazon.com/athena/latest/ug/work-with-data-stores.html]",[],2020-10-07 14:03:56+00:00,,2020-12-16 20:44:33+00:00,Open,13334197,DAFFODIL-2407
Improvement,[],interran,John Interrante,interran,John Interrante,Major,"There has been some discussion on the dev list about renaming some Daffodil subprojects to make their contents more obvious to newcomers.  The following list of new subproject names has received some consensus support, although the renaming should be performed in two phases (two separate commits) as the second phase would require more work than simply changing filenames:

*Phase 1*
 * containers
 * daf-backend-c-generator (ignore - not in main yet, but will be later)
 * daf-backend-scala-parser (to be merged into daf-backend-scala later)
 * daf-backend-scala -unparser (to be merged into daf-backend-scala later)
 * daf-cli
 * daf-io
 * daf-lib
 * daf-macro-lib
 * daf-propgen
 * daf-sapi
 * daf-schema-compiler (was daffodil-core)
 * daf-tdml-lib
 * daf-tdml-processor

 * project
 * test-suite-daf
 * test-suite-ibm
 * test-suite-layout
 * tutorials

*Phase 2*

Merge daf-backend-scala-parser and daf-backend-scala-unparser together into daf-backend-scala.

 ",['beginner'],2020-10-07 13:08:22+00:00,,2020-12-01 19:30:28+00:00,Open,13334183,DAFFODIL-2406
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The unparseJustSeparatorWithTrailingSuppression function in SeparatedSequenceUnparsers.scala is private and not called anywhere. It has no test coverage. It is unclear if this is just dead code that can be removed, or if the intention was for an unimplemented edge case that we are missing. Potentially related to DAFFODIL-2219. This bug is to determine if this code is needed and use it or to just delete it if not.",['beginner'],2020-10-06 18:24:47+00:00,,2021-03-18 19:44:10+00:00,Open,13334042,DAFFODIL-2405
Task,[],interran,John Interrante,interran,John Interrante,Major,"Scala 2.11 is end of life and there are no plans to make a new 2.11 release.  The last time a new Scala 2.11 release came out was 2.11.12 at the end of 2017.  We kept publishing Scala 2.11 builds because Apache Spark did not start supporting Scala 2.12 until November 2018, but the latest Spark 3.x releases support only 2.12 and have removed support for 2.11.

A pull request in progress (#422) depends on an open source library (os-lib) which has not published any new Scala 2.11 builds since March 2019.  We also may need to stop building on Scala 2.11 before we can update some of our dependencies to newer major versions (DAFFODIL-2269).

Modify the build infrastructure to stop building on Scala 2.11.  Also remove some code written only for 2.11 support.",[],2020-10-03 20:26:52+00:00,2020-10-05 20:03:45+00:00,2020-11-20 17:39:54+00:00,Closed,13330749,DAFFODIL-2404
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,We often forget that code coverage is enabled because we have PR comments disabled. We should re-enable these notifications and determine if they are helpful and not too intrusive so that it is more visible and encourages new PRs to add coverage for their code.,[],2020-09-30 12:03:51+00:00,2020-10-06 18:50:47+00:00,2020-11-20 16:08:44+00:00,Closed,13330159,DAFFODIL-2403
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The TDML runner currently accepts xsi:type annotations on infosets and does type-specific comparisons for date/time/dateTime types.

This should be extended to allow at least double and float types also, and possibly other types.

For integers it doesn't matter much, but perhaps for decimal (trailing zeros issues).",['beginner'],2020-09-23 20:26:03+00:00,,2021-03-18 19:43:43+00:00,Open,13329069,DAFFODIL-2402
Bug,[],bnordin,Brent Nordin,bnordin,Brent Nordin,Critical,"NITF parse crashes Daffodil using this command line:

apache-daffodil-2.7.0-incubating-bin/bin/daffodil parse -s nitf.dfdl.xsd test4G.ntf > 4G.ntf.xml

The test file is 4GB. Testing with 8GB and 10GB NITF images is successful. I have attached the test images as zipped and then compressed files. Beware when you expand them - you will have 3 files totaling 22GB.

The attached nitf.dfdl.xsd file includes a work-around from S. Lawrence (for the memory caching issue described elsewhere) and another fix that has already been rolled in to the NITF Schema repo.",[],2020-09-23 19:16:23+00:00,2020-10-14 20:04:12+00:00,2020-11-18 13:16:23+00:00,Closed,13329058,DAFFODIL-2401
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The new SAX API caused performance degredations across the board of file types. The SAX API is basically just a wrapper around the current API, so this is a bit surprising. Need to investigate what is causing these slowdows and see if it can be resolved.",[],2020-09-22 11:53:15+00:00,,2021-05-12 18:41:10+00:00,Open,13328766,DAFFODIL-2400
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The HL7 schema (currently not public) currently parses successfully and outputs an infoset, but also outputs a bunch of Parse Error diagnostics, making it appear as if the parse failed. The TDML runner does not detect these additional diagnostics and so when run via a TDML runner the tests pass. But when run via the CLI it's very clear something is wrong. Testing with older version of Daffodil, this appears to go back to at least 2.4.0, so this is a very old bug. Additionally, when using the new SAX API, the error diagnostic is only output once--need to figure out why SAX errors are different than non-SAX.

This is potentially multiple separate issues, but I'll keep this as one issue until I can create a minimial test case to reproduce this issue and can figure out what's actually going on.  Creating this ticket for now so we don't forget out this issue.",[],2020-09-21 18:25:10+00:00,2021-05-06 19:44:06+00:00,2021-05-07 16:22:58+00:00,Closed,13328616,DAFFODIL-2399
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Add a flag (defaults false for current behavior) which makes TDML tests verbose in output.

Currently, if tests are run and pass, nothing is displayed.

In this verbose mode, Infosets would be displayed, all diagnostics would be displayed, even for tests that pass.

For tests that fail, all diagnostics would be displayed, even if the infoset doesn't match

For negative tests that produce a partial infoset (using the SAX API of Daffodil 3.0.0), they should capture as much output as possible and display this partial infoset fragment. They should also display all diagnostics even if the negative test passes becauuse expected diagnostics were found.

Unparser tests should display the output  as hex dump, iso8859-1 characters, modified to have the picture characters that correspond to the non-displaying whitespace and control chars.

Round-trip tests should show how the round-trip works - each not conforming thing, whether it is Infoset or output data, and setting them off from the final correct output.

The goal is to be able to use TDML not only for unit tests, but as an easy way to run self-contained examples for demonstration.

The ability to run a TDML test in this mode should be available via a CLI option.",['beginner'],2020-09-18 11:28:11+00:00,,2021-03-18 19:40:31+00:00,Open,13328224,DAFFODIL-2398
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The API for creating InputSourceDataInputStream's does not provide a way to configure bucket sizes or cache limits when a BucketingInputSource is used. We need a way to allow this to be configured.

One option is to just modify the InputSOurceDataInptuStream constructor to accept additional parameters.

Another option is to use tunables to configure these, and treat the DataProcessor as a factory for creating InputSourceDataInputStreams. This allows the tunables that are part of the DataProcessor to be passed to the InputSource.",[],2020-09-14 15:32:43+00:00,,2021-03-18 19:39:51+00:00,Open,13327464,DAFFODIL-2397
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Commit b0f59ef7c8b3a1088183c40691df7f3fd10ff864 for DAFFODIL-934 caused a noticable degradation in performance. Usually this was pretty small, around 3-7%, but sometimes could be as high as 20%. This changes adds more work, so it's not too surprising, but we should try to make some optimizations to see if we can reduce the performance hit.",[],2020-09-14 12:42:26+00:00,2020-09-15 12:37:02+00:00,2020-09-23 19:41:52+00:00,Closed,13327435,DAFFODIL-2396
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"See below thread on list about the issue. Various suggestions are made for how to fix this:

https://lists.apache.org/thread.html/re7e658bd802a36e127d7fb168643fbddab9108d0ae1e4332e3c295bf%40%3Cdev.daffodil.apache.org%3E",[],2020-09-14 12:14:11+00:00,2020-09-28 15:17:46+00:00,2020-11-19 21:48:57+00:00,Closed,13327427,DAFFODIL-2395
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When a BacktrackingException is created, the ThinException that is created results in the following exception:
{code}
org.apache.daffodil.exceptions.Abort: Invariant broken. Runtime.scala - Leaked exception: java.util.IllegalFormatConversionException: d != scala.collection.mutable.WrappedArray$ofRef
java.util.IllegalFormatConversionException: d != scala.collection.mutable.WrappedArray$ofRef
	at java.util.Formatter$FormatSpecifier.failConversion(Formatter.java:4302)
	at java.util.Formatter$FormatSpecifier.printInteger(Formatter.java:2793)
	at java.util.Formatter$FormatSpecifier.print(Formatter.java:2747)
	at java.util.Formatter.format(Formatter.java:2520)
	at java.util.Formatter.format(Formatter.java:2455)
	at java.lang.String.format(String.java:2940)
	at scala.collection.immutable.StringLike.format(StringLike.scala:354)
	at scala.collection.immutable.StringLike.format$(StringLike.scala:353)
	at scala.collection.immutable.StringOps.format(StringOps.scala:33)
	at org.apache.daffodil.exceptions.ThinException.msg_$lzycompute(Assert.scala:36)
	at org.apache.daffodil.exceptions.ThinException.msg_(Assert.scala:35)
	at org.apache.daffodil.exceptions.ThinException.getMessage(Assert.scala:40)
{code}",[],2020-09-11 16:29:57+00:00,2020-09-14 12:11:27+00:00,2020-09-24 18:04:34+00:00,Closed,13327121,DAFFODIL-2394
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A complex type containing an expression with a path having path steps upward and out of the element into surrounding elements fails with relative path past root error.

Discovered working on JANAP-128 schema. (Worked around by moving expression outside the complex type.)

Test case TBD. ",[],2020-09-09 15:13:54+00:00,,2020-10-15 14:35:43+00:00,Open,13326696,DAFFODIL-2393
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,"Currently with the SAX implementation, we run the TDML tests using the original dataprocessor parse, and the SAXXmlReader parse. But eventually we'll just obsolete the non-SAX API, or reimplement it in terms of the SAX one, so there won't be ""both"".  At that point we want to either remove the duplication, or make it configurable when/if we want to do both.

We might also want to make it configurable so that when using the non-SAX API that we only generate one infoset. We currently generate like 5 infosets. For very large infosets, that could take up quite a bit of memory.",[],2020-09-08 17:32:25+00:00,,2021-03-18 19:36:51+00:00,Open,13326533,DAFFODIL-2392
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"In InfosetImpl, DIComplex and DIArrays have arrays of child elements. To reduce memory usage, Daffodil will set some of these array indices to null to if we determine that they will never be accessed again. Unfortunately, this means that if there is a bug in Daffodil and it does get accessed then we'll get a NullPointerException. We should refactor this code to avoid potential NPE's, likely by changing these array contents to Maybe's.",[],2020-09-04 14:56:48+00:00,,2020-09-04 14:56:48+00:00,Open,13326092,DAFFODIL-2391
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"Currently the code, ctaches any errors from the contenthandler call but doesn't do anything with it.



We need to consider if there is something that needs to be done, or can be done, with these exceptions.

So if something goes wrong in any InfosetOutputter, we are going to just keep on going and ignore that. We need to ensure that the results of InfosetOutputter functions are actually used and that there is some way to pass back information so that diagnostics about the failure can be recovered.",[],2020-09-02 17:06:43+00:00,,2021-03-18 19:33:53+00:00,Open,13325780,DAFFODIL-2390
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"We need to find/implement a ContentHandler that writes XML text directly to a java OutputStream or Writer, similar to what our XMLTextInfosetOutputter does. Then when using the CLI we output XML as soon as we get the events rather than building up some representation in memory and then converting the whole thing to text at the end.

 ",[],2020-09-02 16:58:35+00:00,2020-10-14 14:27:59+00:00,2020-11-17 16:38:19+00:00,Closed,13325778,DAFFODIL-2389
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"That Daffodil release process uses a Fedora 31 rpm, which configures rpmbuild to use zstd compression by default, rather than the usual xz compression.

Unfortunately, older versions of rpm, like those that are installed for RHEL7 do not appear to support zstd compression. So you cannot install our rpms old older OSs. We should configure our build system to always use xz compression to support older systems.",[],2020-09-01 18:22:41+00:00,2020-09-03 13:19:56+00:00,2020-11-20 14:07:20+00:00,Closed,13325574,DAFFODIL-2388
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The CLI -o option specifies an output file that Daffodil should write the infoset to (or unparse data to). If there is an error during parse/unparse (e.g. non-backtrackable parse error, SDE) this file is not deleted which can cause confusion. Especially since in some cases the file could have a partial infoset/data.

We might want to consider deleting the output file that we create if there is an error to prevent possible confusion. Note that we need to be careful about when we delete it. For example, say the file already existed when we ran Daffodil. In this case Daffodil will truncate the file to zero bytes and then write the output. But if there is an error, do we want to delete it if it already existed? Or maybe we just leave it truncated it to zero bytes (I.e. should we delete a file we didn't create?)",['beginner'],2020-08-31 12:35:15+00:00,2020-09-11 20:25:41+00:00,2020-09-24 14:16:51+00:00,Closed,13325334,DAFFODIL-2387
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Currently, if validation mode is full we write out the entire infoset to a byte array and then validate that at the end of parse. For large infosets, this could require a very large amount of memory.

Instead, we should create a ValidationHandler and use the new SAXInfosetOutputter to perform validation as we parse. See [https://stackoverflow.com/questions/31325770/java-sax-parser-validation]

Also see DAFFODIL-1749",[],2020-08-28 20:23:32+00:00,,2021-03-18 19:32:43+00:00,Open,13325081,DAFFODIL-2386
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"While doing some work for a customer schema I ran into an issue where I was using newVariableInstance and setting a variable based on the value of another element.  This other element has an outputValueCalc that performs dfdl:valueLength() on a section of data.

I believe what is happening is that the newVariableInstance starts its scope and tries to set its variable but suspends until the dfdl:valueLength() call can be resolved. In the meantime there is another call to NVI and setVariable on the same variable which results in the variable being set twice and causing an error.  Removing the outputValueCalc resolves this issue, which leads me to believe that the suspension is resulting in the variable stack getting clobbered.",[],2020-08-27 11:25:34+00:00,2021-03-30 18:41:17+00:00,2021-04-09 12:03:04+00:00,Closed,13324821,DAFFODIL-2385
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Say we have this schema snippet:

{code:xml}
<xs:element name=""SimpleDataFormat"">
    <xs:complexType>
        <xs:sequence>
            <xs:element name=""NumStudents"" type=""xs:nonNegativeInteger"" 
                dfdl:textNumberCheckPolicy=""strict""
                dfdl:textNumberPattern=""#,###""
                dfdl:textStandardGroupingSeparator="",""
                dfdl:textStandardDecimalSeparator="".""
            />
        </xs:sequence>
    </xs:complexType>
</xs:element>
{code}

This successfully parses the data
{code}
1234
{code}

Even though textNumberCheckPolicy=""strict"" and the pattern contains a grouping separator, it still allows data that does not contain grouping separators. This feels like bug.

That said, we just use the ICU library for parsing numbers based on the textNumberPattern. This library has this to say about strict parsing of numbers:

{quote}
The following conditions cause a parse failure relative to [lax] mode
(examples use the pattern ""#,##0.#""):

* The presence and position of special symbols, including currency, 
must match the pattern.
    
  '+123' fails (there is no plus sign in the pattern)
* Leading or doubled grouping separators
      
  ',123' and '1,,234"" fail
* Groups of incorrect length when grouping is used
        
  '1,23' and '1234,567' fail, but '1234' passes
* Grouping separators used in numbers followed by exponents
        
  '1,234E5' fails, but '1234E5' and '1,234E' pass ('E' is not an 
   exponent when not followed by a number)
{quote}

So bsaed on ICU's description of strict, this is the expected behavior. It doesn't say anything about missing grouping separators causing an error. Only that if they do exist then they must be in the right spot.

The only thing the DFDL specification mentions regarding strict numbers is this:

{quote}
If 'strict' and dfdl:textNumberRep is 'standard' then the data must 
follow the pattern with the exceptions that digits 0-9, decimal 
separator and exponent separator are always recognised and parsed
{quote}

To me, that reads like the decimal separator should always be required in strict mode, so this feels like the ICU behavior and the behavior described in the DFDL specification do not match. And I believe the DFDL behavior was intended to match match ICU behavior, so it's possible the DFDL specification needs to be updated.

We need to determine if which specification is correct, and if Daffodil needs to change it's behavior.",[],2020-08-19 11:28:11+00:00,,2021-03-18 19:27:03+00:00,Open,13323545,DAFFODIL-2384
New Feature,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Critical,"Proposal here: [https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+SAX+API]

Discussion Thread here: [https://lists.apache.org/thread.html/reb7c49def33f5e9d68a5e76b707a68a2c43e966ced244b231d677d7c%40%3Cdev.daffodil.apache.org%3E] ",[],2020-08-06 19:18:57+00:00,2020-10-27 14:34:13+00:00,2020-11-17 16:36:02+00:00,Closed,13321370,DAFFODIL-2383
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The JAPI function withExternalVariables requires a Scala Map as a parameter, which makes it difficult to use from Java. The API should be changed to accept a Java AbstractMap similar to withTuanbles.",[],2020-08-05 14:27:00+00:00,2020-10-23 16:42:42+00:00,2020-11-17 18:45:13+00:00,Closed,13321112,DAFFODIL-2382
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The CLI tests have lots of verbose things explicit in test after test that should be pushed into libraries so that all the tests don't have to express them over and over.

{code:java}
 val DAFFODIL_JAVA_OPTS = Map(""DAFFODIL_JAVA_OPTS"" -> ""-Xms256m -Xmx2048m -Djline.terminal=jline.UnsupportedTerminal -Dfile.encoding=UTF-8"")
  //  Dubugging tests were not executing under Windows and especially under Eclipse
  //  due to the use of a non-interactive console.
  //  Set the DAFFODIL_JAVA_OPTS environment variable for Debugger tests to specify
  //  the use of an unsupported terminal: -Djline.terminal=jline.UnsupportedTerminal
  //  Also added a Java option to specify the character encoding: -Dfile.encoding=UTF-8

  @Test def test_3385_CLI_Debugger_invalidExpressions(): Unit = {
    val schemaFile = Util.daffodilPath(""daffodil-test/src/test/resources/org/apache/daffodil/section06/entities/charClassEntities.dfdl.xsd"")
    val inputFile = Util.daffodilPath(""daffodil-cli/src/it/resources/org/apache/daffodil/CLI/input/input1.txt"")
    val (testSchemaFile, testInputFile) = if (Util.isWindows) (Util.cmdConvert(schemaFile), Util.cmdConvert(inputFile)) else (schemaFile, inputFile)

    val shell = if (Util.isWindows) Util.start("""", envp = DAFFODIL_JAVA_OPTS) else Util.start("""")
{code}

All this Util.isWindows conditionalization should be pushed down into the Util libraries so that tests don't have to contain this kind of conditionalization. 

Every test in the file where the above code is taken has this same  start:
{code}
    val schemaFile = Util.daffodilPath(""daffodil-test/src/test/resources/org/apache/daffodil/section06/entities/charClassEntities.dfdl.xsd"")
    val inputFile = Util.daffodilPath(""daffodil-cli/src/it/resources/org/apache/daffodil/CLI/input/input2.txt"")
    val (testSchemaFile, testInputFile) = if (Util.isWindows) (Util.cmdConvert(schemaFile), Util.cmdConvert(inputFile)) else (schemaFile, inputFile)
{code}

This conditional call to Util.cmdConvert should be pushed down into Util.daffodilPath, which should probably be shortened to just Util.path. 
",['beginner'],2020-07-30 21:16:37+00:00,,2021-03-18 19:25:35+00:00,Open,13320274,DAFFODIL-2381
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Some users have the hope that Daffodil will perfectly-round-trip data. 
That means that a parse, validate, unparse of data will perfectly reproduce data, not canonicalize it thereby requiring recomputation of checksums, signatures, etc. which we (Daffodil) can't do yet automatically. 

Can daffodil keep track of the specific delimiters used, and other things that would otherwise be cannonicalized. This would not be DFDL-spec compliant, which requires that on unparse, the first of several alternative delimiters be used.  Nevertheless a mode where delimiters were captured into some sort of pseudo-element so that they would be used for unparsing would be helpful for some network-security applications.

There are other tickets for abilities to recompute checksums, by enhancing the Daffodil layering extension of DFDL. This would be a different solution to that sort of problem. ",[],2020-07-30 17:01:07+00:00,2021-03-18 19:22:30+00:00,2021-03-18 19:22:36+00:00,Closed,13320240,DAFFODIL-2380
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"These operators intersect and except from XPath 2.0 spec were added to the DFDL specification (latest working group draft), so are forthcoming in the spec. 

These need to be added to the expression language. 

Labeled this beginner since there are well established code-patterns to copy in creating these operators. It touches a lot of the DPath language code - syntax analyzer/parser, all the way to the runtime, but.... there's things to copy at every level. 
",[],2020-07-30 13:38:23+00:00,,2020-10-14 12:03:05+00:00,Open,13320196,DAFFODIL-2379
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The unparser test case below fails.

The output is ""0000000-1"" which is clearly wrong. The padding should be after the sign. 

Interestingly same bug appears in IBM DFDL (who asked us to see if it also is in Daffodil), which suggests rather strongly this may be an issue in the ICU library.

{code:java}
	<tdml:defineSchema name=""dfdlwg1"" elementFormDefault=""unqualified"">
		<xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd""/>

		<dfdl:format ref=""ex:GeneralFormat"" lengthKind=""delimited""/>

		<xs:element name=""r"" type=""ex:numeric9_custom1""/>
		<xs:simpleType dfdl:textNumberPattern=""#0"" 
                                            dfdl:textOutputMinLength=""9"" dfdl:textPadKind=""padChar""
					   dfdl:textTrimKind=""padChar"" name=""numeric9_custom1"" 
                                           dfdl:textNumberPadCharacter=""0"">
			<xs:restriction base=""xsd:decimal"">
				<xs:totalDigits value=""9""/>
			</xs:restriction>
		</xs:simpleType>

	</tdml:defineSchema>

	<tdml:unparserTestCase name=""textNumberPattern1"" model=""dfdlwg1"">
		<tdml:document><![CDATA[-00000001]]></tdml:document>
		<tdml:infoset><tdml:dfdlInfoset>
			<ex:r>-1</ex:r>
		</tdml:dfdlInfoset></tdml:infoset>
	</tdml:unparserTestCase>
{code}
",[],2020-07-29 20:34:14+00:00,2020-07-30 13:31:05+00:00,2020-11-19 20:03:11+00:00,Closed,13320058,DAFFODIL-2378
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"{code:java}
Unparsing the following DFDL schema resulted in the below error.
 
 <xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""
     xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/""
     xmlns:fn=""http://www.w3.org/2005/xpath-functions""
     elementFormDefault=""qualified"">
     
     <xs:annotation>
         <xs:appinfo source=""http://www.ogf.org/dfdl/"">
             <dfdl:format
                 textBidi=""no""
                 floating=""no""
                 encodingErrorPolicy=""replace""
                 leadingSkip=""0"" 
                 alignmentUnits=""bytes""
                 alignment=""1"" 
                 trailingSkip=""0""
                 textPadKind=""none""
                 escapeSchemeRef=""""
                 truncateSpecifiedLengthString=""no""
                 textTrimKind=""none"" 
                 binaryNumberRep=""binary""
                 
                 representation=""binary""
                 byteOrder=""littleEndian""
                 encoding=""ISO-8859-1""
                 sequenceKind=""ordered""
                 initiator=""""
                 terminator=""""
                 separator=""""
                 ignoreCase = ""yes""
                 initiatedContent=""no""
                 
             />
         </xs:appinfo>
     </xs:annotation>
     
     <xs:element name=""input""
         dfdl:lengthKind=""implicit""
         dfdl:lengthUnits=""bytes""
         >
         <xs:complexType>
             <xs:sequence dfdl:fillByte=""%NUL;"">
                 <xs:element name=""A"" type=""xs:unsignedInt"" 
                     dfdl:lengthKind=""explicit""
                     dfdl:length=""1""
                     dfdl:lengthUnits=""bytes""
                     dfdl:alignment=""1""
                     dfdl:alignmentUnits=""bytes""
                 />
                 <xs:element name=""B"" type=""xs:unsignedInt"" 
                     dfdl:lengthKind=""explicit""
                     dfdl:length=""1""
                     dfdl:lengthUnits=""bytes""
                     dfdl:alignment=""2""
                     dfdl:alignmentUnits=""bytes""
                 />
                 <xs:element name=""C"" type=""xs:unsignedInt"" 
                     dfdl:lengthKind=""explicit""
                     dfdl:length=""1""
                     dfdl:lengthUnits=""bytes""
                     dfdl:alignment=""2""
                     dfdl:alignmentUnits=""bytes""
                 />
             </xs:sequence>
         </xs:complexType>
     </xs:element>
     
 </xs:schema>
 
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !!   An unexpected exception occurred. This is a bug!   !!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
  Please report this bug and help us fix it:
 
   https://daffodil.apache.org/community/#issue-tracker
 
  Please include the following exception, the command you
  ran, and any input, schema, or tdml files used that led
  to this bug.
 
 
 java.util.NoSuchElementException: Nope.get
         at org.apache.daffodil.util.Maybe$.noneGet$extension(Maybe.scala:39)
         at org.apache.daffodil.util.Maybe$.get$extension(Maybe.scala:36)
         at org.apache.daffodil.processors.ParseOrUnparseState.fillByte(ProcessorStateBases.scala:288)
         at org.apache.daffodil.io.DataOutputStreamImplMixin.skip(DataOutputStreamImplMixin.scala:998)
         at org.apache.daffodil.io.DataOutputStreamImplMixin.skip$(DataOutputStreamImplMixin.scala:991)
         at org.apache.daffodil.io.DirectOrBufferedDataOutputStream.skip(DirectOrBufferedDataOutputStream.scala:177)
         at org.apache.daffodil.io.DataOutputStreamImplMixin.align(DataOutputStreamImplMixin.scala:1100)
         at org.apache.daffodil.io.DataOutputStreamImplMixin.align$(DataOutputStreamImplMixin.scala:1096)
         at org.apache.daffodil.io.DirectOrBufferedDataOutputStream.align(DirectOrBufferedDataOutputStream.scala:177)
         at org.apache.daffodil.processors.unparsers.AlignmentFillUnparserSuspendableOperation.continuation(FramingUnparsers.scala:54)
         at org.apache.daffodil.processors.SuspendableOperation.doTask(SuspendableOperation.scala:86)
         at org.apache.daffodil.processors.SuspendableOperation.doTask$(SuspendableOperation.scala:57)
         at org.apache.daffodil.processors.unparsers.AlignmentFillUnparserSuspendableOperation.doTask(FramingUnparsers.scala:38)
         at org.apache.daffodil.processors.Suspension.run(Suspension.scala:104)
         at org.apache.daffodil.processors.Suspension.run$(Suspension.scala:103)
         at org.apache.daffodil.processors.unparsers.AlignmentFillUnparserSuspendableOperation.run(FramingUnparsers.scala:38)
         at org.apache.daffodil.processors.unparsers.SuspendableUnparser.unparse(Unparser.scala:139)
         at org.apache.daffodil.processors.unparsers.SuspendableUnparser.unparse$(Unparser.scala:136)
         at org.apache.daffodil.processors.unparsers.AlignmentFillUnparser.unparse(FramingUnparsers.scala:65)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:73)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
         at org.apache.daffodil.processors.unparsers.AlignmentFillUnparser.unparse1(FramingUnparsers.scala:65)
         at org.apache.daffodil.processors.unparsers.ElementUnparserBase.doBeforeContentUnparser(ElementUnparser.scala:169)
         at org.apache.daffodil.processors.unparsers.ElementUnparserBase.unparse(ElementUnparser.scala:192)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:73)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
         at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
         at org.apache.daffodil.processors.unparsers.ScalarOrderedUnseparatedSequenceChildUnparser.unparse(UnseparatedSequenceUnparsers.scala:37)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:73)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
         at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
         at org.apache.daffodil.processors.unparsers.OrderedUnseparatedSequenceUnparser.unparseOne(UnseparatedSequenceUnparsers.scala:68)
         at org.apache.daffodil.processors.unparsers.OrderedUnseparatedSequenceUnparser.unparse(UnseparatedSequenceUnparsers.scala:169)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:73)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
         at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
         at org.apache.daffodil.processors.unparsers.ElementUnparserBase.runContentUnparser(ElementUnparser.scala:181)
         at org.apache.daffodil.processors.unparsers.ElementUnparserBase.unparse(ElementUnparser.scala:202)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:73)
         at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
         at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
         at org.apache.daffodil.processors.DataProcessor.doUnparse(DataProcessor.scala:394)
         at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:334)
         at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:308)
         at org.apache.daffodil.Main$.$anonfun$run$15(Main.scala:1160)
         at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
         at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
         at org.apache.daffodil.Main$.run(Main.scala:1160)
         at org.apache.daffodil.Main$.main(Main.scala:1388)
         at org.apache.daffodil.Main.main(Main.scala){code}",[],2020-07-28 16:49:46+00:00,2020-10-23 18:52:50+00:00,2020-11-17 18:28:21+00:00,Closed,13319801,DAFFODIL-2377
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Apache is currently migrating the old builds.apache.org to ci-builds.apache.org as that server is running a more enterprizy commercial Jenkins distribution that is told to cope much better with the usual load our Jenkins has.
 
 However this migration is not done automatically and has to be done manually.
 
 So I would suggest someone in this project volunteers to do it:
 
 Go to this thread:
 [https://lists.apache.org/thread.html/rd50c08d3d4800574586c7572cb60c8a5c6d8537cab9c88499813aa77%40%3Cbuilds.apache.org%3E]
 And request a folder for your project being setup.
 
 After that’s done you can log in to ci-builds.apache.org with your normal ldap credentials and re-create your jobs.",[],2020-07-27 17:09:54+00:00,2020-10-14 12:02:36+00:00,2020-11-20 17:28:23+00:00,Closed,13319579,DAFFODIL-2376
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Discovered this issue while working on a schema project.

While the schema parses fine, for some reason multiple SetVariable parsers are getting instantiated for the same variable, which causes a double-set error to occur.

 

See test_choiceBranchVariables in daffodil-test/src/test/scala/org/apache/daffodil/section07/variables/TestVariables.scala for a test that demonstrates this issue.",[],2020-07-24 16:55:10+00:00,2020-10-22 15:41:30+00:00,2020-11-17 19:14:59+00:00,Closed,13319198,DAFFODIL-2375
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Ran into this while developing schemas for a customer.

The schema for this scenario looks something like this:

<dfdl:defineVariable name=""var"" defaultValue=""false"" />

....

<dfdl:setVariable ref=""var"" value=""true"" />

...

<xs:choice dfdl:choiceDispatchKey=""\{ $var }"">

  <xs:sequence dfdl:choiceBranchKey=""true"">

    <xs:element name=""name"" type=""xs:string"" nillable=""true"">

  </xs:sequence>

</xs:choice>

 

What I believe is happening is that the nillable element is creates a mark in PState, which then gets reset as this element in the data is not nil. This causes PState to reset back to the mark, which also triggers any variables that were changed in the current scope to reset. In this case, the changes that have been tracked is the setVariable on var and the readVariable on var for the choice dispatch. So when reset gets called the variable is getting reset back to its initial default state of false.

 

I believe the fix for this is to simply push a new list to the changedVariablesStack whenever we create a new mark and pop the stack after resetting any changed variables, but I have not spent a lot of time on it. It fixes the issue I have and does not break any existing tests though.",[],2020-07-23 18:28:26+00:00,2020-08-05 17:04:32+00:00,2020-11-16 15:29:54+00:00,Closed,13319023,DAFFODIL-2374
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We need a mode that is equivalent to having an assert call checkConstraints(.) on all simple elements, and check the max/min occurs bounds on arrays.

This model escalates a validation 'limited' validation error into a parse error for purposes of backtracking and pass/fail of the parse.

These should still be labeled as ""Validation Error"", but perhaps should print ""Parse Error (Validation Error)"" so that TDML tests can look for either string.

 

 

 

 

 ",[],2020-07-23 15:08:10+00:00,,2021-03-18 19:21:30+00:00,Open,13318979,DAFFODIL-2373
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-07-16 19:18:03+00:00,2020-07-17 11:26:12+00:00,2020-07-20 09:58:54+00:00,Closed,13317237,DAFFODIL-2372
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When a discriminator evaluates to true, Daffodil always resolves the nearest in-scope point of uncertainty, even if it has already been resolved by another discriminator. This means if there are multiple discriminators, we may resolve the same PoU repeatedly, essentially making true discriminators no-ops. 

Based on recent clarifications by the DFDL-WG, a descriminator that evalutes to true should instead resolve the nearest *unresolved* point of uncertainty. This means multiple discriminators evaluating to true will result in multiple PoU's being resolved.",[],2020-07-16 15:30:50+00:00,2020-08-17 15:52:09+00:00,2020-08-25 11:28:51+00:00,Closed,13317202,DAFFODIL-2371
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-07-16 12:05:34+00:00,2020-07-17 12:05:23+00:00,2020-07-17 21:40:23+00:00,Closed,13317153,DAFFODIL-2370
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The tdml:documentPart type='byte' element only interprets hex digit characters. The documentPart bits only interprets 1 and 0.

For bits, this makes it tempting to put labels in the data like:

 
{code:java}
<tdml:documentPart type=""bits""><![CDATA[

01 flagByte1

1 bool2

]]></tdml:documentPart>
{code}
As soon as the label contains a 1 or 0, you are in trouble though, because then that part of the label is getting pikced up as data. The above data is 0111, the 2nd 1-bit is from the word 'flagByte1'. 

Nevertheless, if you are careful, with bits you can get away with labels.

But, then if you try to do the same thing for documentPart type byte, all hell breaks loose.because letters a-f and 0-9 all are interperted as hex data even though other characters like ghi....z get ignored.

This is all way too fragile.

Lesson learned is that we need the ability to put labels inside TDML documentPart data areas.  Breaking them up into separate documentPart elements so you can use standard XML Comments is not effective enough due to the clutter involved.

It is very important to be able to put labels into data.

So we need to do two things:

1) make document part type 'byte' and 'bit' reject any character other than 0-9a-fA-F (for byte) and 0,1 (for bits) that isn't whitespace.

2) support a comment syntax. I suggest the C/C++ conventions of // (to end of line - which is going to require use of a CDATA block since otherwise the line-endings are fungible by XML) or the /* */ convention.

 ",[],2020-07-14 18:53:11+00:00,,2021-03-18 19:19:55+00:00,Open,13316760,DAFFODIL-2369
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We currently only generate API documentation for the daffodil-japi and daffodil-sapi subprojects. The rest of the subprojects and sort of considered a private/unstable API, and so it's reasonable to not include them on our website.

However, the daffodil-udf subproject is also a public/stable API, but it not currently generated and output to the website. Ideally this would all be merged into a single API that can be put on the website. SBT does not have a built-in way to merge API's from subprojects, but the [sbt-unidoc|https://github.com/sbt/sbt-unidoc] plugin seems to be able to exactly that, and it even supports the genjavadoc plugin that we use for th Java API.

We should see if we can enable and configure this plugin to combine our API and UDF subprojects into a single scala/javadoc that can be put on the website. This could potentially be one method to easily define more public/stable API's by creating new subprojects and adding them to the list of things that sbt-unidoc merges.",[],2020-07-13 16:02:52+00:00,2020-07-15 19:39:54+00:00,2020-07-16 13:17:34+00:00,Closed,13316491,DAFFODIL-2368
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"I was having trouble debugging a schema, I thought nested choices were messing up.

As part of convincing myself this functionality in fact worked as designed I ended up creating some additional tests for it.

See testNestedChoices1 and others in that group.",[],2020-07-10 23:10:30+00:00,2020-07-13 15:22:58+00:00,2020-07-14 12:48:49+00:00,Closed,13316250,DAFFODIL-2367
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor," 

This check, done during incubator review of 2.7.0, suggests additional checking to be done as part of our Release process, and also calls for creation of an actual Release notes file. Our release notes are on our web site, but wouldn't hurt to put a file in the release with the URL to that in it.

 
{noformat}
[OK] Download all staged artifacts under the url specified in the release vote email into a directory we’ll now call download-dir.
 [MINOR] Verify the signature is correct: Additional Apache tutorial on how to verify downloads can be found here.
         - No trusted Key-chain (might think about going to a key-signing party) 
 [OK] Check if the signature references an Apache email address.
 [OK] Verify the SHA512 hashes:
 [OK] Unzip the archive:
 [MINOR] Verify the existence of DISCLAIMER, LICENSE, NOTICE, README, RELEASE_NOTES files in the extracted source bundle.
         - No RELEASE_NOTES
 [OK] Verify the content of LICENSE, NOTICE, README, RELEASE_NOTES files in the extracted source bundle.
 [OK] Run RAT externally (without any exclusions) to ensure there are no surprises.
 [OK] Search for SNAPSHOT references:
 [MINOR] Search for Copyright references, and if they are in headers, make sure these files containing them are mentioned in the LICENSE file.
         - Some files listed in LICENSE moved from daffodil-test/src/test/resources/org/apache/daffodil/ibm-tests/ to daffodil-test-ibm1/src/test/resources/test-suite/ibm-contributed/ without being updated in the LICENSE file
                 - dpaspc7131.dfdl.xsd
                 - dpaspc7132.dfdl.xsd
                 - dpaspc7132_2.dfdl.xsd
 [OK] Build the project according to the information in the README.md file.{noformat}

 

 ",[],2020-07-10 14:22:14+00:00,,2021-03-19 20:44:21+00:00,Open,13316169,DAFFODIL-2366
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"This came up in inspection of 2.7.0 release by incubator team[

MINOR] Search for Copyright references, and if they are in headers, make sure these files containing them are mentioned in the LICENSE file.
         - Some files listed in LICENSE moved from daffodil-test/src/test/resources/org/apache/daffodil/ibm-tests/ to daffodil-test-ibm1/src/test/resources/test-suite/ibm-contributed/ without being updated in the LICENSE file
                 - dpaspc7131.dfdl.xsd
                 - dpaspc7132.dfdl.xsd
                 - dpaspc7132_2.dfdl.xsd",[],2020-07-10 14:17:23+00:00,2020-10-15 13:42:50+00:00,2020-10-16 13:26:36+00:00,Closed,13316167,DAFFODIL-2365
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"test_nulPad1 goes into an infinite loop on 2.7.0.

Some aspect of no-forward-progress checking isn't working.

 ",[],2020-07-10 01:20:49+00:00,,2020-10-15 14:35:52+00:00,Open,13316029,DAFFODIL-2364
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"See test_nulPattern1. 

This bug is a real pain in the neck. 

I want to capture NUL padding regions and insure they are all NUL. 

These come through to XML as These U+E000 characters. I need to insure that the string contains only those.

So I'd like to use a 
{code:xml}
<xs:simpleType name=""allNULStringType>
  <xs:restriction base=""xs:string"">
     <xs:pattern value=""&#xE000;*""/>
  </xs:restriction>
</xs:simpleType>
{code}

I consider this data well-formed (should parse) even if other bytes are there that aren't NUL, but such data is invalid. So I want the facet to check for all NUL chars (or these E000 things that Daffodil puts in XML because XML can't contain actual NUL chars).

The test fails with 


{code:java}
org.apache.daffodil.tdml.TDMLExceptionImpl: (Implementation: daffodil) Validation errors found where none were expected by the test case.
Validation Error: ex:foo failed facet checks due to: facet pattern(s): *
{code}


If github does the right thing that pattern will look like the E000 box char and *. 
",['beginner'],2020-07-10 00:58:29+00:00,2020-10-21 18:41:50+00:00,2020-11-17 22:01:40+00:00,Closed,13316025,DAFFODIL-2363
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The JSON output feature always quotes values. So ""3"" instead of 3. 

This is unnecessary and adds clutter unexpected by users. ",['beginner'],2020-07-07 11:56:08+00:00,,2021-03-18 19:18:11+00:00,Open,13315384,DAFFODIL-2362
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Ran into this issue while making changes to a production schema.

Consider the following schema;

<xs:element name=""len"" type=""xs:unsignedInt"" dfdl:outputValueCalc=""\{ dfdl:valueLength(../implicitLenComplex, 'bytes') }"" />
 <xs:element name=""implicitLenComplex"">
 <xs:complexType>
 <xs:sequence>
 <xs:element name=""item1"" type=""xs:hexBinary"" dfdl:length=""\{ ../../len }"" dfdl:lengthUnits=""bytes"" dfdl:lengthKind=""explicit"" />
 </xs:sequence>
 </xs:complexType>
 </xs:element>

 

I would reasonably expect that the outputValueCalc would work as expected and get the valueLength of the entire implicitLenComplex sequence, however this results in a circular deadlock.

 

NOTE: if you change the outputValueCalc to dfdl:valueLength(../implicitLenComplex/item1, 'bytes') everything works as expected.

 

I've attached a sample schema file and test data that demonstrates this issue.

 

EDIT: I've added an additional schema that demonstrates that if the hexBinary element is wrapped inside an additional sequence and valueLength is called on the inner sequence it still results in the circular deadlock.",[],2020-07-01 15:22:28+00:00,,2020-07-01 16:21:59+00:00,Open,13314504,DAFFODIL-2361
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Two files exist in our repository that match patterns in our .gitignore file

# *.classpath* - this file should probably just be removed
# *project/plugins.sbt* - this file should definiately not be removed. The .gitignore file contains a {{*.sbt}} pattern which is intended to allow people to add custom .sbt files to customize the daffodil build without making changes to existing files. We should proably keep this capability. We already have a {{!build.sbt}} so that file isn't ignored. We probably also want to add a {{~project/plugins.sbt}} or something similar as well.",['beginner'],2020-06-25 11:55:44+00:00,2021-05-12 18:40:23+00:00,2021-05-12 18:40:23+00:00,Closed,13313430,DAFFODIL-2360
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,,[],2020-06-23 15:01:39+00:00,2020-07-15 20:29:18+00:00,2020-07-16 12:36:39+00:00,Closed,13313072,DAFFODIL-2359
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Change branch to 2.7.0-SNAPSHOT first. So we're setup to create 2.7.0 release following regular conventional process. ,[],2020-06-23 13:50:29+00:00,2020-06-24 18:21:21+00:00,2020-06-24 18:21:21+00:00,Closed,13313059,DAFFODIL-2358
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"DAFFODIL-357 and [PR#386|https://github.com/apache/incubator-daffodil/pull/386] added support for dfdl:assert with failureType=""recoverableError"". This made it so recoverable errors are reported as SDW. However, we probably want to add a special error type and API/TDML updates to have a unique ReocverableError to differentiate it from a warning.

See the comments in PR#387 for the discussion about this proposed changes.",['beginner'],2020-06-23 12:31:24+00:00,,2021-03-18 19:15:43+00:00,Open,13313039,DAFFODIL-2357
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"When delimiter scanning fails to find a delimiter, it creates a PE that is something like ""Separator foo not found"". The SeparatorParseHelper will checked for failures and create a new PE that's something like ""Failed to parse infix separator"", providing the first as a cause. This can be confusing because both the new PE and the cause PE include context information. 
Furthurmore, the cause PE is also a separate diagnostic, so it too is printed. So the output of such a failure looks something like:
{code}
Parse Error: Failed to parse infix separator. Cause: Separator foo not found
Schema Context: context for cause PE
Schema Context: context for new PE
ParseError: Separator foo not found
Schema Context: context for cause PE
{code}
This nesting of contexs and duplciate PE makes for a very confusing and unclear diagnostic.

Perhaps we shouldn't include PE as a cause for other PE's to avoid this nesting, especially considering the cause PE will already be output as a diagnostic? ",[],2020-06-19 14:59:57+00:00,,2021-03-18 19:14:49+00:00,Open,13312499,DAFFODIL-2356
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"There are a few places where we include Scala code/dependenies with Daffodil:
* daffodil-lib/src/main/scala/org/apache/daffodil/util/UniquenessCache.scalaUniquenessCache.scala in our source
* scala-xml jar in daffodil-cli helper binaries
* scala-parser-combinators jar in daffodil-cli helper binaries

At one point these were all BSD-3 licensed, but it looks like that changed around the scala 2.12.8 time frame. We should make the following changes make sure our licensing information is up to date:

* Update UniquenessCache.scala to use the Apache v2 header from https://github.com/scala/scala/blob/2.13.x/src/library/scala/Symbol.scala (the content does not appear to have changed, but we should comfirm this)
* Remove the Scala references in LICENSE and daffodil-cli/bin.LICENSE--that's no longer necessary since Scala is Apache v2
* Copy the NOTICE content from scala into NOTICE
* Copy the NOTICE content from scala, scala-xml, and scala-parser-combinators into daffodil-cli/bin.NOTICE",[],2020-06-19 12:58:51+00:00,2020-06-29 13:06:15+00:00,2020-07-01 14:05:29+00:00,Closed,13312463,DAFFODIL-2355
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The following schema uses newVariableInstance with the goal of parameterizing repeated types. Note that this snippet does not even use the type and count variables, or parameterizes anything, which is the intention. The ultimate goal is to have set the type and count variables based on the type/count elements, and then use those variables in the choice rather than using XPath to access the elements. Things were simplified to create the smallest test case.

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?> 

<xs:schema
  xmlns:xs=""http://www.w3.org/2001/XMLSchema""
  xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"">

  <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />

  <xs:annotation>
    <xs:appinfo source=""http://www.ogf.org/dfdl/"">
      <dfdl:format ref=""GeneralFormat"" />
      <dfdl:defineVariable name=""type"" type=""xs:int"" />
      <dfdl:defineVariable name=""count"" type=""xs:int"" />
    </xs:appinfo>
  </xs:annotation>

  <xs:element name=""file"">
    <xs:complexType>
      <xs:sequence>
        <xs:element name=""records"" maxOccurs=""unbounded"" dfdl:terminator=""%NL;"">
          <xs:complexType>
            <xs:sequence>
              <xs:element name=""type"" type=""xs:int"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" />
              <xs:element name=""count"" type=""xs:int"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" />
              <xs:sequence>
                <xs:annotation>
                  <xs:appinfo source=""http://www.ogf.org/dfdl/"">
                    <dfdl:newVariableInstance ref=""type"" />
                    <dfdl:newVariableInstance ref=""count"" />
                  </xs:appinfo>
                </xs:annotation>
                <xs:sequence>
                  <xs:choice dfdl:choiceDispatchKey=""{ xs:string(./type) }"">
                    <xs:element name=""int"" type=""xs:int"" dfdl:choiceBranchKey=""1"" maxOccurs=""unbounded""
                      dfdl:occursCountKind=""expression"" dfdl:occursCount=""{ ../count }""
                      dfdl:lengthKind=""explicit"" dfdl:length=""1"" />
                    <xs:element name=""str"" type=""xs:string"" dfdl:choiceBranchKey=""2"" maxOccurs=""unbounded""
                      dfdl:occursCountKind=""expression"" dfdl:occursCount=""{ ../count }""
                      dfdl:lengthKind=""explicit"" dfdl:length=""1"" />
                  </xs:choice>
                </xs:sequence>
              </xs:sequence>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

{code}

So each line has a type (either 1 for int or 2 for string) and a count, followed by count occurrances of that type.

This should parse data that looks something like this:
{code}
1512345
26abcdef
{code}

However, trying to parse this data leads to a usage exception about the mark state being messed up.

Simply removing the newVariableInstance annotation allows things to work, so somehow that is messing with state in a way that is unexpected.",[],2020-06-10 17:22:33+00:00,2020-08-06 16:19:53+00:00,2020-11-16 15:28:35+00:00,Closed,13310714,DAFFODIL-2354
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," Conversion to base 10 is required for XML, and that means floating point numbers converted from binary to base 10 are going to lose information sometimes vs. their binary IEEE 754 or other representation.

But.... We or a user via UDF could provide a conversion function hexBinaryToDouble, then you could get something like this:

<myValue>
     <ieeeHex>40FE208000000000</ieeeHex>
     <value>1.234e5</value>
</myValue>

The <value> element is there to exhibit the value in a human-understandable way, but the parsing would actually unparse from the raw ieeeHex element which is a hex dump of the actual value bits.

On unparsing, if the base 10 value has been modified, and no longer matches the base-10 equivalent of the raw value, then the binary data could be recomputed from the new base 10 value.

Due to big/little endian issues, we probably want to do this from 64-bit integers, not hexBinary. That way the conversion functions are byte order independent. 

Note about EXI (DAFFODIL-1959) - if we are converting data from binary to EXI representation or back for unparsing, it would be great if no conversion to base 10 text was required. This raises an issue however, of a different DFDL schema being appropriate when using EXI vs. when using XML text (or any other base-10 text representation). ",['beginner'],2020-06-10 17:14:38+00:00,,2020-10-13 21:22:21+00:00,Open,13310711,DAFFODIL-2353
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"If we have a schema with newVariableInstance that uses a non-constant DFDL expression for the default value, that default value is never set. For example:
{code:xsd}
<xs:sequence>
  <xs:annotation>
    <xs:appinfo source=""http://www.ogf.org/dfdl/"">
      <dfdl:newVariableInstance ref=""foo"" defaultValue=""{ /some/non/constant/thing }"" />
    </xs:appinfo>
  </xs:annotation>
  <xs:element name=""fooValue"" type=""xs:int"" dfdl:inputValueCalc=""{ $foo }"" />            </xs:sequence>
{code}
When the inputValueCalc expressoin is evaluated, we fail with the error
{code}
Runtime Schema Definition Error: Variable Error: Variable map (runtime): variable foo has no value. It was not set, and has no default value.
{code}
According to the spec:
{code}
If a default value is specified this initial value of the instance will be set when the instance is created
{code}
So we are likely just missing the logic to evaluate and set the default when when we create the new VariableInstacne.

This might also affect dfdl:defineVariable as well, which is allowed to also have expressions as the defaultValue, as long as the expression doesn't reference the infoset and only other variables.",[],2020-06-10 16:09:03+00:00,2020-12-09 20:52:23+00:00,2020-12-14 17:46:53+00:00,Closed,13310703,DAFFODIL-2352
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"JPEG format has ""Entropy Coded Segments"" or ECS Segments.

These are terminated by the byte-pattern that indicates the start of the following JPEG segment, so we need the ability to isolate these bytes by finding, but not consuming, the start of the next segment. 

Currently the only way to do this is with lengthKind='pattern', and a regex with lookahead. This is problematic due to the way the implementation of regex scanning works (buffers that are gradually enlarged if needed).  The buffers cannot be made big enough and this will simply not work for JPEG's with very large images (JPEG2000 format has the same problem and holds even larger images). 

The ability to define a layer that contains data up to, but not including, a particular marker is needed. In JPEG the marker is a 2-byte sequence.

In addition, for JPEG, these ECS segments are ""byte stuffed"", which is an escaping scheme where if the first byte of the marker is found in the data it is modified by inserting a zero byte after it so that it does not match the marker. This inserted zero needs to be removed from the data on parsing, and re-inserted on unparsing by the layer transform. 

Finally, all the implementation of this feature needs to not require staging a copy of the entire contents of the ECS segment in any array, so long as the ultimate destination of the bytes is as a DFDL BLOB (extension to DFDL v1.0). These layers need to allow streaming the bytes of the ECS segment out to an external BLOB (e.g., a BLOB file) without the need to create any object in the Daffodil process memory that is the size of the whole ECS segment. 

   

 ",[],2020-06-10 13:47:17+00:00,,2020-10-14 12:03:10+00:00,Open,13310667,DAFFODIL-2351
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"DFDL uses only a subset of XSD features. 

That subset doesn't include xs:key and xs:unique constraints.

However, those are very useful for integrity checking once data has be converted from native format into XML.

So Daffodil should simply ignore these xs:key and xs:unique features thereby allowing them to be in the DFDL schema when it is used only as an XML schema for validation purposes. 
",[],2020-06-10 13:22:09+00:00,,2021-03-18 19:12:12+00:00,Open,13310661,DAFFODIL-2350
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The checkTotalDigits logic works by creating a {{BigInteger}} that is {{10^^totalDigits^}}, and then comparing the infoset unscaledValue to that number.

Unfortunately, we then get the {{intValue}} of that number, which means if {{10^^totalDigits^}} is ever greater than an int value, Daffodil will throw an AritchmeticException. This will happen when totalDigits >= 10.

I think this is also broken if the dataValue is negative. 
",['beginner'],2020-06-09 11:19:39+00:00,2020-06-24 18:21:20+00:00,2020-06-24 18:21:20+00:00,Closed,13310366,DAFFODIL-2349
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When using the debugger and displaying the infoset (e.g. info infoset), if the current element is a prefixed length element Daffodil will abort with an exception about ""No parent element for element (prefixLength)"". This is because the debugger tries to find the root element:

{code:scala}
infoset = infoset.toRootDoc.getRootElement().asInstanceOf[DIElement]
{code}

But that fails when the element is a prefixed length element. Need special logic somewhere to handle these detached elements.
",[],2020-06-05 17:48:49+00:00,2020-12-16 13:49:13+00:00,2021-01-04 20:43:59+00:00,Closed,13309780,DAFFODIL-2348
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Running DFDLSchemas/csv tests with the IBM implementation results in 2 test failures with the error:
{code}
Test com.tresys.csv.TestCSV.test_csv_test_2 failed: org.apache.daffodil.tdml.TDMLTestNotCompatibleException: (Implementation: ibm) Test 'csv_test_2' not compatible with implementation.
{code}
When JUnit is on the classpath, the TDML runner should throw an {{org.junit.AssumptionViolatedException}} so that the test is just marked as skipped by Junit (see {{def testNotCompatible}} in {{TDMLRunner.scala}}). But instead it is just throwing a TDMLTestNotCompatiableException.

I have confirmed that when running the tests the Junit jar is on the classpath, but the exception class does not exist in the jnit jar. Instead, there is only {{org.junit.internal.AssumptionViolatedException}}. Perhaps we updated junit and the new version only has the internal exception? Or maybe the non-internal version is only available in newer versions of Junit4 and we need to upgrade?",[],2020-05-26 15:22:38+00:00,2020-05-26 15:30:11+00:00,2020-05-29 16:59:44+00:00,Closed,13307472,DAFFODIL-2347
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"It is incredibly painful to take the XML output, pretty print it to make it readable, and find out that this has mangled the significant whitespace inside element values. 

In general, since whitespace within simple values is considered fungible in XML, we have to protect whitespace that is truly part of the DFDL infoset. 

I think CDATA bracketing is preferable to replacing whitespace characters with XML escaping like &amp;#x20; 
",[],2020-05-22 16:36:39+00:00,,2021-03-18 19:10:25+00:00,Open,13306830,DAFFODIL-2346
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When scanning for a separator and encountering an out-of-scope separator/terminator, the diagnostic message is really poor.

It says what it found, that it was out-of-scope, but doesn't focus you on where it was within the scope, by giving an element name, or line number in the schema. 

If you have a required element that is missing, so that the parser can't find that element's separator and instead finds the enclosing separator/terminator, the diagnostic message needs to include the required element that it did not find a separator before, or the prior element it did not find the separator after. One of the two. Or at least needs to point you at the sequence the two elements are found in. But since that sequence could be spread over many lines, it really does need to identify in terms of the term decl before and after where the separator was not found.",[],2020-05-22 14:48:59+00:00,,2020-10-14 11:54:21+00:00,Open,13306804,DAFFODIL-2345
Improvement,[],matighet,Michael Atighetchi,matighet,Michael Atighetchi,Major,"I'm getting deprecation errors on HelloWorld example.
|c.setValidateDFDLSchemas(true); // makes sure the DFDL schema is valid|
| |// itself.|

 

[https://github.com/OpenDFDL/examples/blob/master/helloWorld/src/main/java/HelloWorld.java]",[],2020-05-22 12:46:42+00:00,2020-05-22 13:00:53+00:00,2021-05-19 13:23:12+00:00,Closed,13306765,DAFFODIL-2344
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I suspect this is related to the sharing of group definitions in the schema compiler.

I have a group that is reused all over a very large schema (link16).

I am working on debugging a J3.2 message. But I am getting a diagnostic that mentions J9.1.

I suspect that it just so happens that this J9.1 schema file use of this group is the first one to be compiled, and so it was selected by the schema compiler to be the ""cannonical"" one for the purposes of sharing the definition.  But then nothing *should* be using that object's schema-file-location, because it's going to be shared. 

 To make this clearer, here's the diagnostic messages. I'm going to break this up and talk about the parts that are right, and where it goes wrong.

{code}
org.apache.daffodil.tdml.TDMLExceptionImpl: (Implementation: daffodil) Parse Error: Choice dispatch branch failed: List(Parse Error: Failed to populate spare[1]. Cause: Parse Error: Insufficient bits in data. Needed 2 bit(s) but found only 0 available.
Schema context: spare Location line 79 column 8 in file:/home/mbeckerle/Documents/dataiti/git/dfdl-schemas/dfdl-link16/target/classes/com/tresys/mil-std-6016-common/xsd/mil-std-6016-common.dfdl.xsd
Data location was preceding byte 63 limit(bytes) 63
{code}
Everything above is perfect. The problem is with an element named 'spare' in a group defined in a file 'mil-std-6016-common.dfdl.xsd'.

Then things go bad:
{code}
Schema context: group[2] Location line 69 column 10 in file:/home/mbeckerle/Documents/dataiti/git/dfdl-schemas/dfdl-link16/target/classes/com/tresys/mil-std-6016f1/xsd/J9_1_engagement_coordination_link16.gen.dfdl.xsd
{code}
At that line 69 of that file, is a group reference to the group defined in mil-std-6016-common.dfdl.xsd.

The problem is, this isn't a relevant source file. My data doesn't contain any J9.1 information. 

If you run the test with tracing turned on, the activity is all about the correct message which is J3.2. And I am certain that the problem is about a usage of this same shared group definition that is happening in the J3.2 message schema files. 

The problem is just that the schema compiler is somehow associating J9.1 information about the file location for this group, as a side-effect of sharing definitions of groups for re-use. 
",[],2020-05-20 23:12:15+00:00,,2020-10-14 11:54:14+00:00,Open,13306334,DAFFODIL-2343
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"There is an issue with Link16 schema project that appears to stem from some variables being shared between different schema projects. Changes in made to variables in one schema project are affecting variables in a different project.

There is probably some data sharing happening some where in the code base that instead needs to be a copy.",[],2020-05-14 14:09:29+00:00,2020-06-24 18:21:22+00:00,2020-06-24 18:21:22+00:00,Closed,13304953,DAFFODIL-2342
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The new way of setting up for Eclipse development in daffodil is described on the wiki page 

https://cwiki.apache.org/confluence/display/DAFFODIL/Eclipse+Tricks+and+Notes

This works, but the source jars are not properly linked, nor are javadoc jars. ",[],2020-05-13 22:30:12+00:00,,2021-03-18 19:02:30+00:00,Open,13304777,DAFFODIL-2341
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The TDML runner gathers up sax errors onto a loadingExceptions list.

This list is only displayed if the TDML file is deemed invalid, which requires that the sax exception was reported as an error, not just as a warning.

Even if the TDML is deemed valid, warnings should be output.

In test_unqualifiedPathStepPolicy_defaultNamespace_test_01 a warning is being suppressed that should say:
{code}
org.apache.daffodil.xml.DFDLCatalogResolver Info[Unable to resolve file:/home/mbeckerle-unencrypted/daffodil/daffodil-test/target/scala-2.12/test-classes/org/apache/daffodil/section00/general/org/apache/daffodil/xsd/dafext.xsd in Some(file:/home/mbeckerle-unencrypted/daffodil/daffodil-test/target/scala-2.12/test-classes/org/apache/daffodil/section00/general/tunables.xml)]
{code}

Couple things though. First, that exception is because of an xsi:schemaLocation attribute on the daf:dfdlConfig element in the config file tunables.xml. 

That particular error is spurious. It *should* be finding and properly resolving. That's a separate ticket DAFFODIL-2339. 

But, for purposes of this ticket, this exception is on the loadingExceptions list and is suppressed entirely. 

",[],2020-05-12 17:26:36+00:00,2020-05-13 18:24:17+00:00,2020-06-29 16:21:53+00:00,Closed,13304412,DAFFODIL-2340
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"For CLI test_3507_CLI_Parsing_SimpleParse_SaveParser_extVars

This specifies a config file on the command line via the path

daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/daffodil_config_cli_test.xml

This file contains
{code}
<daf:dfdlConfig xmlns:daf=""urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"">
	<daf:externalVariableBindings xmlns=""http://www.w3.org/2001/XMLSchema""
		xmlns:ex=""http://example.com"">
		<daf:bind name=""ex:var1"">-9</daf:bind>
		<daf:bind name=""ex:var3"">-8</daf:bind>
	</daf:externalVariableBindings>
</daf:dfdlConfig>
{code}

It would be valuable to add xsi:schemaLocation to this so as to specify where the
daf namespace schema is defined like so:
{code}
<daf:dfdlConfig xmlns:daf=""urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext""
    xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xsi:schemaLocation=""urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext org/apache/daffodil/xsd/dafext.xsd"">
	<daf:externalVariableBindings xmlns=""http://www.w3.org/2001/XMLSchema""
		xmlns:ex=""http://example.com"">
		<daf:bind name=""ex:var1"">-9</daf:bind>
		<daf:bind name=""ex:var3"">-8</daf:bind>
	</daf:externalVariableBindings>
</daf:dfdlConfig>
{code}

Unfortunately, that causes a failure:
{code}
/home/mbeckerle/dataiti/git/daffodil/daffodil-cli/target/universal/stage/bin/daffodil -v save-parser -s /home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/external_variables.dfdl.xsd -r row -c /home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/daffodil_config_cli_test.xml test_3507.xsd.bin

[info] Unable to resolve file:/home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/org/apache/daffodil/xsd/dafext.xsd in Some(file:/home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/daffodil_config_cli_test.xml)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://daffodil.apache.org/community/#issue-tracker

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


org.xml.sax.SAXParseException; systemId: file:/home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/daffodil_config_cli_test.xml; lineNumber: 21; columnNumber: 110; schema_reference.4: Failed to read schema document 'file:/home/mbeckerle/dataiti/git/daffodil/daffodil-test/src/test/resources/org/apache/daffodil/section07/external_variables/org/apache/daffodil/xsd/dafext.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.warning(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.xs.traversers.XSDHandler.reportSchemaWarning(Unknown Source)
	at org.apache.xerces.impl.xs.traversers.XSDHandler.getSchemaDocument1(Unknown Source)
	at org.apache.xerces.impl.xs.traversers.XSDHandler.getSchemaDocument(Unknown Source)
	at org.apache.xerces.impl.xs.traversers.XSDHandler.parseSchema(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaLoader.loadSchema(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.findSchemaGrammar(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)
	at org.apache.xerces.impl.xs.XMLSchemaValidator.startElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLNSDocumentScannerImpl$NSContentDispatcher.scanRootElementHook(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at org.apache.daffodil.xml.DFDLXercesAdapter.loadXML(DaffodilXMLLoader.scala:400)
	at scala.xml.factory.XMLLoader.load(XMLLoader.scala:56)
	at scala.xml.factory.XMLLoader.load$(XMLLoader.scala:56)
	at scala.xml.parsing.FactoryAdapter.load(FactoryAdapter.scala:38)
	at org.apache.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:562)
	at org.apache.daffodil.configuration.ConfigurationLoader$.getConfiguration(ConfigurationLoader.scala:43)
	at org.apache.daffodil.configuration.ConfigurationLoader$.getConfiguration(ConfigurationLoader.scala:50)
	at org.apache.daffodil.Main$.loadConfigurationFile(Main.scala:589)
	at org.apache.daffodil.Main$.run(Main.scala:1181)
	at org.apache.daffodil.Main$.main(Main.scala:1379)
{code}
Simple things like adding an sbt dependency from daffodil-cli back to daffodil-lib, whether always or ""it->test""  dependent, don't fix this.

The CLI is using DaffodilXMLLoader to load this config file, so the resolver should be doing the right thing by finding this dafext.xsd on the class path inside of daffodil-lib's jar.
 
It seems to be erroring out because it is failing upon constructing and not finding the relative path, that is the path creating by concatenating this file's URL with the org/apache/daffodil/xsd/dafext.xsd. That should not be found, but it should then not fail, but go search the class path for the org/apache/daffodil/xsd/dafext.xsd.

",['beginner'],2020-05-12 16:11:56+00:00,,2021-02-18 21:30:15+00:00,Open,13304400,DAFFODIL-2339
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We use the isValidRange function in NodeInfo primititives to determine what values are not in the correct range of the type, and error accodingly. This logic is spread out in mutiple places that need to do range checking. And in some places (such as NodeInfo fromXMLString) we don't even do range checking.

Instead of having this logic spread out, we should consolidate ranging checking logic in a single place, presumably in NodeInfo fromXMLString and fromNumber. These functions should only ever return a valid primitive in a valid range, or they should throw an exception if they aren't valid and why. We then modify all uses of these function to catch this exception and handle appropriately.",[],2020-05-08 12:16:57+00:00,2020-06-24 18:21:19+00:00,2020-06-24 18:21:19+00:00,Closed,13303625,DAFFODIL-2338
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This page could use an update.

There are now errata through 5.63. Many of these we already implement. ",[],2020-05-04 14:10:01+00:00,2020-10-22 14:26:28+00:00,2020-11-20 17:20:09+00:00,Closed,13302647,DAFFODIL-2337
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Currently the blob feature generates a temp file with a random name and an optional API-provided prefix/suffix that is common among all blobs generated during a parse. However, in some cases, it might be useful for the schema author to have some control over the name of this file.

As an eample, a tar file is essentialy a container format that includes a file name and a blob. It might be useful for the blobs to be written to a file with the same name as defined by the tar. Thus, we could do something like this:

{code:xml}
<xs:element name=""file"" type=""xs:anyURI"" dfdlx:objectKind=""bytes"" dfdlx:objectIdentifier=""{ ../filename }"" />
{code:xml}

This dfdlx:objectIdentifier would be evaluated and used when creating the blob file.

One could also image this useful if a container format contained mime information about a blob. One could then query this mime information and apply the appropriate extension for the blob. This way handlers of these blobs do not necessarily need to query the infoset and know where to look to determine basic information about the blob, but could instead use this identifer information.",[],2020-05-01 17:52:38+00:00,,2021-02-18 21:29:05+00:00,Open,13302334,DAFFODIL-2336
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,Currently the Daffodil CLI always exits with an exit code of 1 if there is any kind of error. But this isn't very helpful in determining what actually went wrong. We should document and return different exit codes depending on the failure type. ,['beginner'],2020-05-01 12:37:52+00:00,,2021-06-10 20:08:15+00:00,Open,13302303,DAFFODIL-2335
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Changes made to the Variabe API in commit dd499070049b91fb8d859ac8d44fd0be088c985c broke several of the schemas that are not in our buildbot test suite, but are in the nightly performance tests:
HL7:
org.apache.daffodil.exceptions.Abort: Invariant broken: this.state.!=(VariableUndefined)
 
Nacha:
org.apache.daffodil.exceptions.Abort: Invariant broken: this.state.!=(VariableUndefined)
 
Nato-stanag:
[error] Runtime Schema Definition Error: Variable Error: Variable map (runtime): variable ms:word-padding-bits has no value.
 
PCAP:
org.apache.daffodil.exceptions.Abort: Invariant broken: this.state.!=(VariableUndefined)
 
VMF:
org.apache.daffodil.exceptions.Abort: Usage error: InputSourceDataInputStream.this.markStack.isEmpty.unary_!
 
The attached file included the full exception/error messages for each.
 
<< NightlyFailure_Commit-dd499070.txt >>
I rolled commit back to commit 120f2e618f63a2aca3574eb33fa7a2cd4a7c77f6 and these tests passed.",[],2020-04-30 17:36:08+00:00,2020-06-24 18:21:26+00:00,2020-06-24 18:21:27+00:00,Closed,13302165,DAFFODIL-2334
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A user (depth.painter 'at' mail.com) requested line folding that removes a variant of line-folding similar to already supported, but also strips out a comment syntax. 

bq. ....Line folding and line comments.
bq. 
bq. For line folding the layer transforms specifically the lineFolded_* family looks promising however the two that are implemented don't match my file specification because crlf%x20; and lf%x20; can both be used to fold lines.
bq. 
bq. As for line comments I currently have some Comment elements peppered throughout my schema however I'm sure I missed some. And that strategy isn't even up to spec because comments are supposed to be ignored during parsing.


",[],2020-04-29 17:28:34+00:00,,2020-10-14 11:53:48+00:00,Open,13301871,DAFFODIL-2333
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"Apparently javadoc has become more particular about things in recent versions. Below is the error that was produced.

 

[error] Constructing Javadoc information...
[error] Standard Doclet version 13.0.2
[error] Building tree for all the packages and classes...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/debugger/DebuggerRunner.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/debugger/TraceDebuggerRunner.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/InfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/InfosetInputterProxy.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/InfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/InfosetOutputterProxy.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/JDOMInfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/JDOMInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/JsonInfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/JsonInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/NullInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/ScalaXMLInfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/ScalaXMLInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/W3CDOMInfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/W3CDOMInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/XMLTextInfosetInputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/XMLTextInfosetOutputter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/io/InputSourceDataInputStream.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/Compiler.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/Daffodil.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/DataLocation.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/DataProcessor.html...
[error] /home/jadams/Programming/tresys/daffodil/daffodil-japi/src/main/java/org/apache/daffodil/japi/package-info.java:23:1: error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>
[error] * <h3>Overview</h3>
[error] ^Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/Diagnostic.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/InvalidParserException.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/InvalidUsageException.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/LocationInSchemaFile.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/ParseResult.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/ProcessorFactory.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/UnparseResult.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/ValidationMode.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/WithDiagnostics.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/ConsoleLogWriter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/FileLogWriter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/LogLevel.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/LogWriter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/NullLogWriter.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/package-summary.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/package-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/debugger/package-summary.html...
[error] /home/jadams/Programming/tresys/daffodil/daffodil-japi/src/main/java/org/apache/daffodil/japi/debugger/package-info.java:21:1: error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>
[error] * <h3>Overview</h3>
[error] ^Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/debugger/package-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/package-summary.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/infoset/package-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/io/package-summary.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/io/package-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/package-summary.html...
[error] /home/jadams/Programming/tresys/daffodil/daffodil-japi/src/main/java/org/apache/daffodil/japi/logger/package-info.java:21:1: error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>
[error] * <h3>Overview</h3>
[error] ^Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/org/apache/daffodil/japi/logger/package-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/constant-values.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/serialized-form.html...
[error] Building index for all the packages and classes...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/overview-tree.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/deprecated-list.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/index.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/index-all.html...
[error] Building index for all classes...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/allclasses-index.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/allpackages-index.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/overview-summary.html...
[error] Generating /home/jadams/Programming/tresys/daffodil/daffodil-japi/target/scala-2.12/genjavadoc-api/help-doc.html...
[error] 3 errors
[warn] javadoc exited with exit code 1
[error] stack trace is suppressed; run last daffodil-japi / Genjavadoc / doc for the full output
[error] (daffodil-japi / Genjavadoc / doc) sbt.inc.Doc$JavadocGenerationFailed
[error] Total time: 99 s (01:39), completed Apr 28, 2020, 8:40:20 PM",[],2020-04-29 00:49:00+00:00,2020-11-20 15:24:33+00:00,2021-04-19 18:06:40+00:00,Closed,13301677,DAFFODIL-2332
Improvement,[],interran,John Interrante,interran,John Interrante,Minor,"Expression.scala uses FNZeroArgExpr to implement fn:local-name, fn:namespace-uri, dfdlx:outputTypeCalcNextSibling, dfdlx:repTypeValue, and dfdlx:logicalTypeValue functions.  It has to pass NodeInfo.XXX for the argType parameter, even though the argType parameter shouldn't be needed if there are zero arguments.  Should we remove this parameter?  It looks like argType is used only in targetTypeForSubexpression, which should never be called in FNZeroArgExpr since there are zero arguments.

If we remove the argType parameter, we also shouldn't need to pass argType to the constructor for FNNamespaceURI0 and similar classes in FNFunctions.scala.

People who can answer questions about this issue are Steve Lawrence and myself (although Steve can answer questions better).",[],2020-04-28 22:21:02+00:00,,2021-02-18 21:23:41+00:00,Open,13301660,DAFFODIL-2331
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,"We'd either like to create a new container or update the existing (with flags). Essentially we want to automate more steps of the release process. Up to date steps can be found [here|https://cwiki.apache.org/confluence/x/zgHgB]. But the gist of the updates can be found below

Updating the Website
 * template page w/ release text
 * test and release

Promote to Final Release
 * Moving release files
{code:bash}
svn mv -m ""Release Apache Daffodil (incubating) 2.0.0"" \
    https://dist.apache.org/repos/dist/dev/incubator/daffodil/2.0.0-rc1/ \
    https://dist.apache.org/repos/dist/release/incubator/daffodil/2.0.0/
{code}

 * Creating, signing and pushing Git tag
{code:bash}
git clone git@github.com:apache/incubator-daffodil.git incubator-daffodil-2.0.0-rc1
git tag -as -u KEYID -m ""Release v2.0.0"" v2.0.0 v2.0.0-rc1^{}
git push asf v2.0.0
{code}

 * Website modifications after mirrors have sycned
 * Archiving previous version in dist",['beginner'],2020-04-24 22:11:05+00:00,,2021-02-18 21:23:02+00:00,Open,13300898,DAFFODIL-2330
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-04-24 12:05:09+00:00,2020-06-24 18:21:24+00:00,2020-06-24 18:21:24+00:00,Closed,13300792,DAFFODIL-2329
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"By inspection, DataProcessor.scala setValidation is wrong. It calls super.withValidation. 

It can't call super.setValidation without causing a deprecation warning. It needs to assign the validationMode var directly. ",[],2020-04-22 15:45:13+00:00,2020-06-24 18:21:19+00:00,2020-06-24 18:21:19+00:00,Closed,13300307,DAFFODIL-2328
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I have a schema with an expression. The expression uses the value of an element of type unsignedInt, and some variables also all of type unsignedInt. The rest of the expression is just add and multiply and subtract.

I get this exception:
{code:java}
org.apache.daffodil.exceptions.Abort: Invariant broken. Runtime.scala - Leaked exception: java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.lang.Long
java.lang.ClassCastException: java.math.BigInteger cannot be cast to java.lang.Long
	at org.apache.daffodil.infoset.DataValue$.getLong$extension(DataValue.scala:88)
	at org.apache.daffodil.dpath.UnsignedIntToLong$.computeValue(ConverterOps3.scala:91)
	at org.apache.daffodil.dpath.UnsignedIntToLong$.computeValue(ConverterOps3.scala:89)
	at org.apache.daffodil.dpath.Converter.run(DPathRuntime.scala:293)
	at org.apache.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:139)
	at org.apache.daffodil.dpath.NumericOperator.run(DPathRuntime.scala:262)
{code}
There is a conversion UnsignedIntToLong being invoked. This just calls a getLong which just calls a v.asInstanceOf[JLong] cast, which fails because v is a java BigInteger.

 ",[],2020-04-21 15:03:31+00:00,2020-06-24 18:21:17+00:00,2020-06-24 18:21:17+00:00,Closed,13300012,DAFFODIL-2327
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"DPathCompileInfo should not be passed a RuntimeData to its constructor.

This causes a great deal of circularity between RuntimeData objects and computations that provide the values needed in those RuntimeData objects.

This prevents simplifying the constructors of the RuntimeData objects (DAFFODIL-2325), and causes them to hold onto large compile-time structures unnecessarily (DAFFODIL-1879)

Any computation that uses a check of an Evaluatable if it isConstant, (knownEncoding for example asks EncodingEv.isConstant), well.... constructing an evaluatable requires a DPathCompileInfo object, and ..... here's the problem: right now we pass a RuntimeData object to the DPathCompileInfo constructor purely for use compiling type-calc-related functions.

The type-calc functions need to know about sibling elements. The DPath compile info objects don't have sibling info. But the RuntimeData objects do. So that's where the expression compiler gets the sibling info it needs.

If some sibling information is needed to compile these functions, then we should compute that information and pass it to the DPathCompileInfo constructor, not just pass in the RuntimeData object.

 

Note however. The whole set of type-calc related functions is an experimental feature and subject to review. There are proposals to simplify it significantly. It's possible these functions will just not be needed. And in that case, the sibling info won't be needed in the DPathCompileInfo objects.

 

 ",[],2020-04-18 19:57:27+00:00,,2021-02-18 21:22:22+00:00,Open,13299398,DAFFODIL-2326
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The RuntimeData objects pass many parameters by-name. Many of them do not need to be passed by name and those should be changed to pass normally.

Some of this pass by name is legitimate because these objects are referenced by objects which they also reference.

Related see DAFFODIL-1879

 

 ",[],2020-04-18 19:51:08+00:00,2020-04-24 20:41:20+00:00,2020-06-26 13:10:03+00:00,Closed,13299397,DAFFODIL-2325
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Erratum 5.60 of the DFDL spec clarifies how choice branch selection works.

Our current schemas that use presence bits flags use a structure like this:
{code:java}
<choice>
 <sequence>
   <sequence dfdl:hiddenGroupRef=""PI_true""/>
 
     <sequence>
      <element name=""foo"" minOccurs=""0"" ...../>
      <element name=""bar"" minOccurs=""0"" ..../>
   </sequence>
 
   <sequence dfdl:hiddenGroupRef=""PI_false""/>
 
 </choice>{code}
We depend on the fact that by default this chooses the PI_false hidden group when the incoming infoset event is not for a foo nor bar element. 

The DFDL spec says (with the Erratum/Clarification) that if we want PI_false to be chosen, then we must flip the order of these two choice branches.

Daffodil is currently preferring the ""more empty"" of the two branches, and so seleting PI_false, rather than just taking the first possibly empty branch.

Once we fix this behavior to conform to the spec., we will have to update DFDL schemas that use this behavior, and actually flip these branches.

Based on that, we may want to put a compatibility flag into daffodil. Or perhaps a feature to generate a warning whenever there is more than one empty choice branch that *could* be selected, if the current functionality selects a default branch that is not the first possibly empty branch thena warning would be issued indicating that the branches should be reordered. 

The only schema I know of that is sensitive to this bug is mil-std-6017/VMF (and variants thereof).

 

 ",[],2020-04-16 16:35:09+00:00,,2021-02-18 21:21:19+00:00,Open,13298865,DAFFODIL-2324
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Below is a schema. It has initiator and encoding in dfdl:format. Schema works fine. Remove them and place them in the element declaration for age. Schema breaks. 

 
{code:java}
<?xml version=""1.0"" encoding=""UTF-8""?> 
 <xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""
     xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/""
     xmlns:fn=""http://www.w3.org/2005/xpath-functions""
     elementFormDefault=""qualified"">
     
     <xs:annotation>
         <xs:appinfo source=""http://www.ogf.org/dfdl/"">
             <dfdl:format
                 textBidi=""no""
                 separatorSuppressionPolicy=""never""
                 floating=""no""
                 encodingErrorPolicy=""replace""
                 outputNewLine=""%CR;%LF;""
                 leadingSkip=""0"" 
                 trailingSkip=""0""
                 textPadKind=""none""
                 textTrimKind=""none"" 
                 truncateSpecifiedLengthString=""no""
                 escapeSchemeRef=""""
                 initiator=""""
                 terminator=""""
                 encoding=""ASCII""
             />
         </xs:appinfo>
     </xs:annotation>
     
     <xs:element name=""SimpleBinaryDataFormat"" dfdl:representation=""binary""
         dfdl:lengthKind=""delimited""
         dfdl:initiator="""" dfdl:terminator=""""
         dfdl:alignment=""1"" dfdl:alignmentUnits=""bytes""
         dfdl:byteOrder=""littleEndian"">
         <xs:complexType>
             <xs:sequence dfdl:initiator="""" dfdl:sequenceKind=""ordered""
                 dfdl:terminator="""" dfdl:separator=""""
                 dfdl:alignment=""1"" dfdl:alignmentUnits=""bytes""
                 dfdl:ignoreCase=""yes""
                 dfdl:initiatedContent=""no"">
                 <xs:element name=""name"" type=""xs:string""
                     dfdl:representation=""text""
                     dfdl:encoding=""ASCII""
                     dfdl:terminator=""%NUL;""
                     dfdl:initiator=""""
                     dfdl:emptyValueDelimiterPolicy=""terminator""
                     dfdl:ignoreCase=""yes""
                     dfdl:lengthKind=""delimited""
                     dfdl:alignment=""1""
                     dfdl:alignmentUnits=""bytes""
                 />
                 <xs:element name=""age"" type=""xs:nonNegativeInteger""
                     dfdl:representation=""binary""
                     dfdl:lengthKind=""explicit""
                     dfdl:lengthUnits=""bytes""
                     dfdl:length=""1""
                     dfdl:alignment=""1""
                     dfdl:alignmentUnits=""bytes""
                     dfdl:byteOrder=""littleEndian""
                     dfdl:binaryNumberRep=""binary""
                 />
             </xs:sequence>
         </xs:complexType>
     </xs:element>
     
 </xs:schema>{code}
{color:#000000}
 {color}",[],2020-04-13 15:30:26+00:00,,2021-02-18 21:17:13+00:00,Open,13298063,DAFFODIL-2323
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The following should work:
{code:xml}
<xs:element name=""foo"" type=""xs:string"" dfdl:textBidi=""no"" />
{code}
But currentl throws the following error:
{code}
Attribute 'dfdl:textBidi' is not allowed to appear in element 'xs:element'.
{code}
Specifying the property in element form or short form works, it appears to only be attribute form that is broken.",['beginner'],2020-04-10 12:56:21+00:00,2020-08-27 13:48:58+00:00,2020-11-20 14:23:06+00:00,Closed,13297609,DAFFODIL-2322
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Currently, we have a single LICENSE file for source and a single license file (bin.LICENSE) for our CLI package binary. When we create our jars, we copy the source LICENSE into each jar, defined in the main build.sbt file. However, the source LICENSE references everything in the entire source tree. Not everything in the LICENSE file applies to all jars. Ideally, we would have away to generate the LICENSE files that go into each jar so that the contents only applies specifically to what is in that jar. The same applies for the NOTCE file as well.",[],2020-04-08 17:23:18+00:00,2020-04-09 14:31:03+00:00,2020-04-13 13:17:24+00:00,Closed,13297138,DAFFODIL-2321
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,Running the sbt test with LANG=de_DE causes a failure in test_BG000. Need to investigate and resolve.,[],2020-04-08 16:23:07+00:00,2020-04-09 13:56:06+00:00,2020-04-13 12:46:29+00:00,Closed,13297122,DAFFODIL-2320
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-04-08 13:33:51+00:00,2020-04-08 16:19:25+00:00,2020-04-13 12:34:42+00:00,Closed,13297082,DAFFODIL-2319
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The following xml files are listed in the Rat.scala ignore list, but they probably can have a license. We should confirm if there is a reason why they don't have a license and add one possible.",[],2020-04-08 13:32:44+00:00,2020-04-08 16:28:12+00:00,2020-04-13 12:29:03+00:00,Closed,13297081,DAFFODIL-2318
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-04-08 13:27:20+00:00,2020-04-08 15:49:35+00:00,2020-04-13 11:49:13+00:00,Closed,13297075,DAFFODIL-2317
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We already have 512, no need to have multiple kinds",[],2020-04-08 13:24:55+00:00,2020-04-08 20:40:04+00:00,2020-04-13 12:09:17+00:00,Closed,13297073,DAFFODIL-2316
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,D,[],2020-04-08 13:14:34+00:00,2020-04-08 15:35:37+00:00,2020-04-13 11:11:46+00:00,Closed,13297071,DAFFODIL-2315
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"SBT switched from Ivy to Coursier for library management. Unfortunately, this broke retrieveManaged, which is needed for sonarqube. The fix appears to be to disable coursier: https://github.com/sbt/sbt/issues/5078",[],2020-04-06 19:00:31+00:00,2020-04-06 19:39:51+00:00,2020-04-08 15:18:08+00:00,Closed,13296630,DAFFODIL-2314
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,,[],2020-04-06 14:29:43+00:00,2020-04-06 18:18:21+00:00,2020-04-08 18:01:50+00:00,Closed,13296528,DAFFODIL-2313
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-04-02 14:01:06+00:00,2020-04-07 21:26:25+00:00,2020-04-13 10:25:05+00:00,Closed,13295808,DAFFODIL-2312
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"Latest changes in 2.6.0-SNAPSHOT (bf333ad77d96531ccffaa04d6851e1ce1376ecb5)

break the PCAP schema.

PCAP depends on TDML defineConfig where the config file specifies a binding for the dfdl:byteOrder variable to 'littleEndian'.

Tests fail (4) because the byte order is behaving as bigEndian.

This the TDML Runner's fault. An error due to local var vs. it should be a var member of TestCase to hold the processor.",[],2020-04-01 21:27:27+00:00,2020-04-07 20:26:59+00:00,2020-04-07 20:26:59+00:00,Closed,13295630,DAFFODIL-2311
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"This file really belongs in the runtime1 package of daffodil-core.

While at it, it could be renamed to VariableMapFactory.scala, as that's what it defines

(The VariableMap data structure itself is part of daffodil-runtime1)

 

This ticket is just a reminder on this issue. Not moving file now, because work is simultaneously ongoing on reimplementing variables, and to preserve diff capability while that is underway, moving files around is discouraged.

 

 ",[],2020-04-01 12:15:38+00:00,2020-05-05 14:20:52+00:00,2020-06-29 16:01:02+00:00,Closed,13295526,DAFFODIL-2310
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Several API methods take a name and namespace as strings, or Option[String] for scala, and they tolerate getting neither, or getting only a name. But the erroneous usage of supplying no name, but supplying a namespace will just get ignored.

This should instead issue an error that you cannot supply only the namespace.",[],2020-03-31 14:49:31+00:00,2020-04-01 19:55:13+00:00,2020-04-13 17:37:22+00:00,Closed,13295277,DAFFODIL-2309
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"While debugging changes for DAFFODIL-2302 I encountered a test (in a large schema - link16subset) is failing and an element that should have its' info.isReferencedByExpressions true has false, so it is not getting marked.

 ",[],2020-03-29 22:40:01+00:00,2020-04-01 11:27:16+00:00,2020-04-13 17:49:39+00:00,Closed,13294870,DAFFODIL-2308
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"TravisCI is fairly unstable and often takes a while before tests even begin. GitHub Actions provides more functionality and stability than TravisCI, and it's tightly integrated into GitHub which is our main workflow. We should just remove TravisCI support and switch entirely to GitHub Actions.",[],2020-03-26 11:19:33+00:00,2020-03-26 15:20:58+00:00,2020-04-27 18:31:23+00:00,Closed,13294175,DAFFODIL-2307
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I have a schema that uses this group. It's a way of doing an optional element
using a choice-by-dispatch.

Running this causes an abort when a NadaParser survives the optimizer and makes it into the parser definition.
{code:java}
<xs:group name=""wordPadding"">
  <xs:choice dfdl:choiceDispatchKey=""{ if ($tns:l16WordPaddingBits eq 0) then '0' else '1' }"" >
     <xs:sequence dfdl:choiceBranchKey=""0""/>
      <xs:element dfdl:choiceBranchKey=""1"" name=""spare"" type=""vmfgi:padding"" dfdl:length=""{ $tns:l16WordPaddingBits }"" />
  </xs:choice>
</xs:group>{code}",[],2020-03-25 20:23:17+00:00,2020-03-26 14:39:59+00:00,2020-03-27 20:51:28+00:00,Closed,13293929,DAFFODIL-2306
Task,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"There are some methods in Term.scala that are no longer used, and can be removed, along with their associated tests.

possibleFirstChildElementsInInfoset
The method couldBeLastElementInModelGroup, which has an abstract definition below, is also not used and it should be deleted. (The implementations of these are in ModelGroup and ElementBase.)

Ditto for possibleFirstChildTerms
Ditto for isSequendceChild
Ditto for possibleNextSiblingTerms

hasLaterRequiredSiblings is used only by unit tests, so that AND the unit tests looking at it can go away (ensure this doesn't decrease coverage if other methods are called)
Same for hasPriorRequiredSiblings.

priorSibling is unused and can be deleted.",[],2020-03-25 17:30:35+00:00,2020-03-26 14:20:45+00:00,2020-03-27 12:02:08+00:00,Closed,13293885,DAFFODIL-2305
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"HiddenGroupRef's in a group without a sequence tag (i.e s6 instead of s5) will result in s6 being dropped in an unparse test case (see test_ignoredHiddenGroupRefWithNoSequenceParent), with a ""DFDL 

 
{code:java}
<xs:group name=""s5"">
  <xs:sequence>
    <xs:sequence dfdl:hiddenGroupRef=""ex:s4"" />
  </xs:sequence>
</xs:group>
<xs:group name=""s6"">
  <xs:sequence dfdl:hiddenGroupRef=""ex:s4"" />
</xs:group>

<xs:element name=""e9"" dfdl:lengthKind=""delimited"">
  <xs:complexType>
    <xs:sequence dfdl:separator="","">
      <xs:sequence dfdl:hiddenGroupRef=""ex:s6"" />
      <xs:element name=""g"" type=""xs:int""/>
    </xs:sequence>
  </xs:complexType>
</xs:element>
{code}
With some preliminary investigating, I narrowed it down to how children are extracted with apparentXMLChildren in SequenceGroup.scala. There may be implications to changing this that needs to be investigated.

 ",[],2020-03-25 14:40:58+00:00,2020-03-27 16:03:51+00:00,2020-04-08 21:08:16+00:00,Closed,13293836,DAFFODIL-2304
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Should not be catching throwable. Should be catching reasonable Daffodil exceptions that could come up.,[],2020-03-25 13:51:11+00:00,2020-05-18 20:26:42+00:00,2020-06-29 13:26:21+00:00,Closed,13293824,DAFFODIL-2303
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"A schema has two separate TDML test suites.

The schema has an external variable that has a default value of 2.

The first TDML test suite binds the variable to 0.

The second TDML test suite does not bind the variable, but the tests require that the default value of 2 is used.

Each test suite, run separately works fine.

When run together the 2nd one fails. It is getting the ""0"" value that was set for the external variable. 

Even if you ALSO set the external variable in the 2nd test suite, the bug still occurs. Seemingly because the earlier external variable binding is ""winning"" for some reason.

The TDML runner needs to reset state of external variables for each test suite.

 ",[],2020-03-25 13:17:47+00:00,2020-04-01 19:54:42+00:00,2020-04-13 15:08:44+00:00,Closed,13293814,DAFFODIL-2302
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"There's an bug v1 that prevents rerunning builds, which is necessary due to random failures (e.g. network failure when downloading dependencies). Supposedly v2 fixes this issue.",[],2020-03-24 14:48:50+00:00,2020-03-24 21:45:33+00:00,2020-04-13 14:35:09+00:00,Closed,13293575,DAFFODIL-2301
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Whenever we push a branch to a fork, the sonarcloud github action is tiggered on that fork. Since most people probably don't have a personal sonarcloud account associated with their fork this is going to fail and sends an email. This can be annoying and potentially confusing for new contributors.

We should modify this action so that it is only triggered conditionally. Maybe we detect when the repo is not the main apache repo, or perhaps skip it if the SONAR_TOKEN environment variable is not set. Maybe there's some  other alternative.",[],2020-03-23 13:55:02+00:00,2020-03-24 21:46:28+00:00,2020-04-13 14:30:04+00:00,Closed,13293310,DAFFODIL-2300
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"The performance for the nightly csvMixedNarrow unparse tests has significantly degraded (decreased 33 - 65%) with commit 356291c3f5cbd82832bc68f7f573b292a46feb3d.

Subsequent nightly results showed similar degradation. Rolled back to previous commit and performance increased to previous values.",[],2020-03-22 22:45:48+00:00,2020-03-25 16:35:08+00:00,2020-03-25 18:15:31+00:00,Closed,13293207,DAFFODIL-2299
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,"isRepresented in dispatchBranchKeyMap in ChoiceCombinator.scala needs to be verified to ensure that it can be locked as true or if this has unintended consequences. It is used to decide whether to reset state for backtracking or discard it in  ChoiceDispatchCombinatorParserBase.

It is also possible that this boolean might not be needed at all",[],2020-03-20 20:18:47+00:00,,2021-02-18 21:15:16+00:00,Open,13293014,DAFFODIL-2298
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I have a schema which has a padding field that can have between 0 and 5 bits in it.

The number of padding bits is controlled by an external variable which defaults to 2.

If I set it to 0 bits, I get an error:
{code:java}
Runtime Schema Definition Error: Expression Evaluation Error: Element {}spare does not have a value.{code}
That comes from this definition:
{code:java}
<xs:element name=""spare"" type=""vmfgi:padding"" dfdl:length=""{ $l16common:l16WordPaddingBits }""/>{code}
The type vmfgi:padding has an assert that checks that the padding field contains the value 0.

 
{code:java}
<xs:simpleType name=""padding"" dfdl:lengthKind=""explicit"">
  <xs:annotation>
   <xs:appinfo source=""http://www.ogf.org/dfdl/"">
     <dfdl:assert test=""{ . eq 0 }"" />
   </xs:appinfo>
  </xs:annotation>
 <xs:restriction base=""xs:unsignedInt"">
   <xs:enumeration value=""0"" />
 </xs:restriction>
</xs:simpleType>{code}
Arguably, there shouldn't be an assert here. Just the restriction that it is 0 valued.

But ignoring that for a minute. If I did need this padding element to have a value, it will get a value if there are any bits parsed, but it has no value at all if the length is zero bits.

That requires me to model these spare fields as a complex type so that I can have a choice between no spare field, and having one, based on the padding bits value being 0 or greater than zero.

I could do that. But arguably, a zero-bit-long integer should have value 0 shouldn't it? That certainly would simplify things.

I have requested a clarification from the DFDL Workgroup. However, a runtime SDE for this clearly seems wrong. The failure should be either a parse error because zero bits is not a legal representation, or there should be no error and the integer value should be 0.

 

 

 ",['beginner'],2020-03-19 22:51:21+00:00,,2021-02-18 21:12:19+00:00,Open,13292797,DAFFODIL-2297
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"On the 2.6.0 development branch, git hash: 356291c3f5cbd82832bc68f7f573b292a46feb3d

These two NACHA tests fail. NACHA is a DFDL schema published on github that is portable to Daffodil and IBM DFDL.

TestNACHA.test_ppd_valid_1

TestNACHA.test_ccd_valid_1",[],2020-03-19 18:25:21+00:00,2020-03-20 18:17:18+00:00,2020-03-20 19:56:16+00:00,Closed,13292760,DAFFODIL-2296
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The AlignedMixin trait has a member priorAlignmentApprox which  for a term, computes an approximation of the alignment prior to it.

One of the things that could be before a term is a separator of a separated sequence (prefix or infix position), and in that case, the alignment will be the mandatory-text-alignment of that separator's encoding.

The code of priorAlignmentApprox takes a number of things into consideration, but does not take the possibility of a separator into account.

The design note [https://daffodil.apache.org/dev/design-notes/term-sharing-in-schema-compiler/] shows numerous things in the ""unique before"" of a term including the separator text regions, but the code doesn't implement this fully.

This is a bug, because the schema compiler may not insert an alignment region when one is required to meet the term's alignment property requirement.

 ",[],2020-03-19 16:55:24+00:00,,2020-10-13 20:00:45+00:00,Open,13292746,DAFFODIL-2295
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We provide an RPM as a helper binary, and we provide public keys and an .asc signature file that one can use to verify the RPM. However, RPM has the ability embed a signature during the rpmbuild process via --sign process. Unfortunately, it doesn't look like the sbt-native-packager plugin that we use to build RPMs supports signing:

[https://github.com/sbt/sbt-native-packager/issues/162]

As an alternative, we should be able to install the {{rpmsign}} tool into our release container and sign the RPM after it has been built. We should be able to use the same key that we use for signing everything else, so hopefully it should just be a matter of running that tool. 

Once this is done, people should be able to import our public keys (e.g. rpm --import ...) and then install our RPM with validation enabled.",[],2020-03-17 23:22:16+00:00,2020-03-20 17:35:55+00:00,2020-04-09 14:32:12+00:00,Closed,13292294,DAFFODIL-2294
Question,[],adeutschmann,Alexander Deutschmann,adeutschmann,Alexander Deutschmann,Major,"Hello everyone,

i have the following schema:
{code:xml}
<xs:complexType name=""statusReportDetails"">
		<xs:sequence>
			<xs:element name=""state"" type=""abc:stateenum"" dfdl:length=""4"" />
			<xs:element name=""indicators"" type=""abc:indicators""  dfdl:length=""16"" />
			<xs:element name=""v"" type=""v"" dfdl:length=""10"" />
			<xs:element name=""driverId"" type=""xs:string"" dfdl:lengthKind=""explicit"" dfdl:length=""128"" dfdl:alignment=""8"" />
		</xs:sequence>
	</xs:complexType>

{code}

And the related bitstream:

{code:java}

0101 -> Enum
0000110000000001 -> indicators
0001100100 -> v
0000110001001100010011000100110001001100100011001000110010001100100011001100110011001100110011001100110100001101000011010000110100 -> driverId

{code}

The driverId has 130 bits and not the 128. bits which is defined in the schema. 
My question is where comes the first two bits ? I know it is an configuration mistake or something like that.

I hope someone can help me.

Thank you.
Alex",[],2020-03-17 15:07:35+00:00,2020-03-30 11:19:20+00:00,2020-04-13 17:23:30+00:00,Closed,13292216,DAFFODIL-2293
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,The CLI Integreation tests in ``daffodil-cli/src/it`` have lots of duplication to set up test for either windows or linux. We should be able to abstract all of this away into some CLI integration tests utilities.,['beginner'],2020-03-16 11:10:33+00:00,2020-08-03 12:17:46+00:00,2020-09-25 20:11:51+00:00,Closed,13291944,DAFFODIL-2292
Task,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"There's an typo with the sonar.projectKey, it should say apache_incubator-daffodil, but it says apache_inbubator-daffodil.",[],2020-03-04 21:03:16+00:00,2020-03-24 13:53:33+00:00,2020-04-13 17:07:42+00:00,Closed,13289633,DAFFODIL-2291
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The incubator recently announced that apache.org/dist/ has been deprecated and that downloads.apache.org should be used instead. There is a redirect in place, but we should update all urls and documentation to use the new link.",[],2020-03-04 12:15:49+00:00,2020-03-04 12:52:37+00:00,2020-04-13 13:57:57+00:00,Closed,13289518,DAFFODIL-2290
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Created an unparser test case. An error had been changed into a warning, so I changed the tdml:errors to tdml:warnings. However, a test with only warnings will pass; hence, also expects the output data to be provided.

However, no reasonable diagnostic message to that effect is issued. You just get an abort ""should be no fall through to this case"".

 ",['beginner'],2020-03-02 15:54:47+00:00,,2021-02-18 21:09:04+00:00,Open,13288930,DAFFODIL-2289
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Due to dependency in libraries we're using for Runtime 2 effort, we need to upgrade version of jackson-core.",[],2020-02-27 23:08:02+00:00,2020-02-28 22:13:05+00:00,2020-04-13 18:35:17+00:00,Closed,13288160,DAFFODIL-2288
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Java assumes that all exceptions thrown by a function are either declared in the function signature, or extend RuntimeException. As such, the compiler will prevent users from catching a checked exception which is not declared in the function signature.

The Java API defines a parse function which does not declare any exceptions. However, this function can throw a NotYetImplementedException (and possibly other exceptions).

If a Java user attempts to catch this exception, the compiler will complain because NotYetImplementedException is a checked exception, so Java believes it cannot be thrown.

I suspect that this issue occurs in other places in out Java API.

The simplest solution is to make all Scala exceptions RuntimeExceptions. Since Scala does not have checked exceptions, this is no loss to the Scala users, and will allow Java users to treat them as normal unchecked exceptions.

The more correct solution is to go throw the java API and add throws annotations, such as:

{quote}@throws(classOf[NotYetImplementedException]){quote}

In the meantime, users can work around this by catching Exception, and doing an explicit instanceOf test themselves.",[],2020-02-26 23:05:07+00:00,,2020-02-26 23:05:07+00:00,Open,13287868,DAFFODIL-2287
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When users compile a schema to a binary, they can't use full validation, because that works from the schema source.

The schema source is in the jar files of a packaged schema.

Either we arrange for the compiled binary to also contain the source, or somehow otherwise arrange that users can use full validation while still using pre-compiled binaries of schema.

 

See also DAFFODIL-1685,  DAFFODIL-1749",[],2020-02-24 22:03:29+00:00,2020-02-24 22:04:39+00:00,2020-02-24 22:04:39+00:00,Closed,13287349,DAFFODIL-2286
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Imagine we have an element like this:
{code:xml}
    <xs:element name=""elem"" type=""xs:string""
      dfdl:lengthKind=""explicit"" dfdl:length=""5""
      dfdl:textPadKind=""padChar""
      dfdl:textTrimKind=""padChar""
      dfdl:textStringPadCharacter=""%SP;""
      dfdl:textStringJustification=""left""
      dfdl:nilKind=""literalCharacter""
      dfdl:nilValue=""%SP;""
      nillable=""true"" />
{code}

So we have a length 2, space padded string, that should also be considered nill if the entire string is made up of spaces. This does not currently work.

I *think* the reason is because when when check to see if it's a nil string we first trim off all padding, which results in a zero length string. We then check to see if that string is entirely made up of the space literalCharacter. But because the string is zero length it fails. We may either need to allow zero length string, or special case when nilValue == padValue.",[],2020-02-21 15:25:11+00:00,2020-07-30 20:17:51+00:00,2020-11-11 15:14:55+00:00,Closed,13286818,DAFFODIL-2285
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"Commit 7e8e1b3ed110efe939908cdf1e12df50d1f86527 causes random failures when doing performance tests with a JSON schema (schema and test file attached), e.g.:
{code}
daffodil performance -s json.dfdl.xsd -t 2 -N 2 random.json
{code}
The likely cause is that we've always had some non-thread-safe code that we just never happened to hit. But with that commit, there is much more sharing going on and so much more likely for non-thread-safe code to get triggered. No other information as to where the bad code is, but it's very repeatable with this schema.",[],2020-02-20 19:25:31+00:00,2020-03-03 15:36:29+00:00,2020-03-04 17:52:52+00:00,Closed,13286553,DAFFODIL-2284
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Blocker,"The ATO and HL7 saved parser (.bin) files fail to be generated on commit 7e8e1b3ed110efe939908cdf1e12df50d1f86527, commit for schema compilation speed improvement.

Both formats fail with a Stack Overflow error.

Attached are the trace back message for each.",[],2020-02-19 20:14:11+00:00,2020-03-09 16:48:49+00:00,2020-03-12 16:01:29+00:00,Closed,13286319,DAFFODIL-2283
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Namespace bindings aren't properly computed.

Currently the schema compiler computes them, which assumes that they don't need to change based on nesting of elements.

Now since DAFFODIL-1444 was fixed, we share more elements, and so the namespace bindings for an element added as a child can vary depending on which parent element it is added under.

Now this problem doesn't seem to affect current schemas nor tests. So it's possible this issue can have a test created to illustrate it, and then be parked for the future. But just fixing it is preferable. 

See design note: https://daffodil.apache.org/dev/design-notes/namespace-binding-minimization/
 

 ",[],2020-02-18 19:09:25+00:00,,2021-02-18 21:06:15+00:00,Open,13286078,DAFFODIL-2282
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"isHidden is currently implemented as a schema-compile-time analysis.

It needs to be done via a runtime counter so that a group can be both hidden and non-hidden in the same schema.

Tests that use a group both shared and not need to be created.",[],2020-02-18 19:06:29+00:00,2020-03-25 18:52:15+00:00,2020-03-26 20:36:01+00:00,Closed,13286075,DAFFODIL-2281
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Before the various design notes can be finalized some cleanups have to be done to wrap up DAFFODIL-1444 which is functionally complete.

This ticket is for cleaning up the various factories which insert backpointers, and removal of all the unique-backpointer cruft which in principle isn't used anymore, as well as chasing down those usages and changing them to what they should be, which is using the non-unique backpointers in the Root.refMap. ",[],2020-02-18 19:01:41+00:00,2020-03-19 19:50:02+00:00,2020-04-13 18:16:47+00:00,Closed,13286074,DAFFODIL-2280
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"These two tests:
 * test_escaping
 * test_not_2_1

They pass on 'sbt test', but fail under eclipse using the 2.6.0 development master with git hash a6c563bddfc00f9cf65b8bec4799c8c37c2c6818

 

 ",[],2020-02-15 23:47:38+00:00,2020-05-14 16:10:08+00:00,2020-06-23 13:56:16+00:00,Closed,13285535,DAFFODIL-2279
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Lots of example schemas are written using discriminators, because they predated the choiceDispatchKey feature.

These schemas should be revised to use choiceDispatchKey, which is a tighter more declarative specification of a format, and also more efficient.

See issue: [https://github.com/DFDLSchemas/PCAP/issues/4](DONE!) also, which is about rewriting discriminators for PCAP specifically",['beginner'],2020-02-15 19:23:04+00:00,2020-08-03 13:46:14+00:00,2020-08-03 13:46:14+00:00,Closed,13285524,DAFFODIL-2278
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Daffodil should issue a warning, possibly even an SDE, about misplaced discriminators:

I observed that many things with discriminators are coded like this:
 ```
 <xs:sequence>
 <xs:annotation><xs:appinfo source=""http://www.ogf.org/dfdl/"">
 <dfdl:discriminator ....../>
 </xs:appinfo></xs:annotation>
 ....rest of sequence...
 </xs:sequence>
 ```
 So, it's quite unintuitive, but that discriminator will be executed AFTER the rest of the sequence.
 I'm not sure why we decided that is how DFDL should work, but to get the discriminator to run BEFORE the rest of the sequence, which is typically what you want from a discriminator, you must nest it within ANOTHER sequence inside the first like so:
 ```
 <xs:sequence>
 <xs:sequence>
 <xs:annotation><xs:appinfo source=""http://www.ogf.org/dfdl/"">
 <dfdl:discriminator ....../>
 </xs:appinfo></xs:annotation>
 </xs:sequence>
 ....rest of sequence...
 </xs:sequence>
 ```
 Daffodil should issue warnings about the former style (which can also occur on choices), since it is so unintuitive.

But for PCAP, all the discrimnators have to change.

See: [https://github.com/DFDLSchemas/PCAP/issues/4]",['beginner'],2020-02-15 06:53:26+00:00,2020-09-11 16:49:20+00:00,2020-09-25 20:03:17+00:00,Closed,13285487,DAFFODIL-2277
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"The nitf_1t_5k_20000_unparse and nitf_10t_5k_15000_unparse tests fail with the following exception. The 1m nitf unparsed tests pass!

 

Exception:

Wed Jan 29 08:03:14 2020: (1) Error running test nitf_1t_5k_20000_unparse (1 of 10)

Wed Jan 29 08:03:14 2020: Output is: [u'bash: no job control in this shell\n', u'\n', u'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n', u'!!   An unexpected exception occurred. This is a bug!   !!\n', u'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n', u'\n', u' Please report this bug and help us fix it:\n', u'\n', u' [https://daffodil.apache.org/community/#issue-tracker\n]', u'\n', u' Please include the following exception, the command you\n', u' ran, and any input, schema, or tdml files used that led\n', u' to this bug.\n', u'\n', u'\n', u'java.lang.ClassCastException: java.lang.Long cannot be cast to java.math.BigInteger\n', u'\tat org.apache.daffodil.infoset.DataValue$.getBigInt$extension(DataValue.scala:91)\n', u'\tat org.apache.daffodil.dpath.UnsignedLongToLong$.computeValue(ConverterOps3.scala:83)\n', u'\tat org.apache.daffodil.dpath.UnsignedLongToLong$.computeValue(ConverterOps3.scala:81)\n', u'\tat org.apache.daffodil.dpath.Converter.run(DPathRuntime.scala:293)\n', u'\tat org.apache.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:139)\n', u'\tat org.apache.daffodil.dpath.CompiledDPath.runExpression(DPathRuntime.scala:71)\n', u'\tat org.apache.daffodil.dpath.RuntimeExpressionDPath.evaluateExpression(DPath.scala:241)\n', u'\tat org.apache.daffodil.dpath.RuntimeExpressionDPath.evaluateMaybe(DPath.scala:256)\n', u'\tat org.apache.daffodil.dpath.RuntimeExpressionDPath.evaluate(DPath.scala:269)\n', u'\tat org.apache.daffodil.processors.ExprEvalMixin.eval(Evaluatable.scala:434)\n', u'\tat org.apache.daffodil.processors.ExprEvalMixin.eval$(Evaluatable.scala:418)\n', u'\tat org.apache.daffodil.processors.EvaluatableExpression.eval(Evaluatable.scala:459)\n', u'\tat org.apache.daffodil.processors.EvaluatableExpression.compute(Evaluatable.scala:469)\n', u'\tat org.apache.daffodil.processors.ExplicitLengthEv.compute(EvElement.scala:63)\n', u'\tat org.apache.daffodil.processors.ExplicitLengthEv.compute(EvElement.scala:45)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache(Evaluatable.scala:91)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache$(Evaluatable.scala:69)\n', u'\tat org.apache.daffodil.processors.ExplicitLengthEv.getCachedOrComputeAndCache(EvElement.scala:45)\n', u'\tat org.apache.daffodil.processors.Evaluatable.evaluate(Evaluatable.scala:277)\n', u'\tat org.apache.daffodil.processors.LengthInBitsEv.lengthInLengthUnits(EvElement.scala:179)\n', u'\tat org.apache.daffodil.processors.LengthInBitsEvBase.compute(EvElement.scala:139)\n', u'\tat org.apache.daffodil.processors.LengthInBitsEvBase.compute(EvElement.scala:128)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache(Evaluatable.scala:91)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache$(Evaluatable.scala:69)\n', u'\tat org.apache.daffodil.processors.LengthInBitsEvBase.getCachedOrComputeAndCache(EvElement.scala:128)\n', u'\tat org.apache.daffodil.processors.Evaluatable.evaluate(Evaluatable.scala:277)\n', u'\tat org.apache.daffodil.processors.UnparseTargetLengthInBitsEv.compute(EvElement.scala:234)\n', u'\tat org.apache.daffodil.processors.UnparseTargetLengthInBitsEv.compute(EvElement.scala:213)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache(Evaluatable.scala:91)\n', u'\tat org.apache.daffodil.processors.InfosetCachedEvaluatable.getCachedOrComputeAndCache$(Evaluatable.scala:69)\n', u'\tat org.apache.daffodil.processors.UnparseTargetLengthInBitsEv.getCachedOrComputeAndCache(EvElement.scala:213)\n', u'\tat org.apache.daffodil.processors.Evaluatable.evaluate(Evaluatable.scala:277)\n', u'\tat org.apache.daffodil.processors.unparsers.TargetLengthOperation.test(SpecifiedLength2.scala:323)\n', u'\tat org.apache.daffodil.processors.SuspendableOperation.doTask(SuspendableOperation.scala:64)\n', u'\tat org.apache.daffodil.processors.SuspendableOperation.doTask$(SuspendableOperation.scala:57)\n', u'\tat org.apache.daffodil.processors.unparsers.TargetLengthOperation.doTask(SpecifiedLength2.scala:304)\n', u'\tat org.apache.daffodil.processors.Suspension.runSuspension(Suspension.scala:83)\n', u'\tat org.apache.daffodil.processors.Suspension.runSuspension$(Suspension.scala:82)\n', u'\tat org.apache.daffodil.processors.unparsers.TargetLengthOperation.runSuspension(SpecifiedLength2.scala:304)\n', u'\tat org.apache.daffodil.processors.unparsers.UStateMain.evalSuspensions(UState.scala:610)\n', u'\tat org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:335)\n', u'\tat org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:308)\n', u'\tat org.apache.daffodil.Main$.$anonfun$run$9(Main.scala:1047)\n', u'\tat org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)\n', u'\tat org.apache.daffodil.Main$.$anonfun$run$8(Main.scala:1045)\n', u'\tat scala.concurrent.Future$.$anonfun$apply$1(Future.scala:654)\n', u'\tat scala.util.Success.$anonfun$map$1(Try.scala:251)\n', u'\tat scala.util.Success.map(Try.scala:209)\n', u'\tat scala.concurrent.Future.$anonfun$map$1(Future.scala:288)\n', u'\tat scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:29)\n', u'\tat scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:29)\n', u'\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)\n', u'\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n', u'\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n', u'\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n', u'\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n', u'\tat java.lang.Thread.run(Thread.java:748)\n']",[],2020-02-07 19:09:39+00:00,2020-02-12 19:12:44+00:00,2020-02-13 20:57:30+00:00,Closed,13283995,DAFFODIL-2276
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"We want to integrate Sonarqube into our development workflow, using Github Actions. We're awaiting creation on Apache's Sonarcloud.io https://issues.apache.org/jira/browse/INFRA-19812 , after which, we can proceed with configuring Github Actions to add this functionality.",[],2020-02-05 19:34:54+00:00,,2021-02-18 21:04:32+00:00,In Progress,13283560,DAFFODIL-2275
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"See test testSeparatorSuppressionNeverBadDiagnostic, added to illustrate the problem.

The problem is that the diagnostic mentions the missing element, but the element is supposed to be allowed to be missing. The fact that no separator is found corresponding to it , which is how ssp=""never"" works, .... well there is no diagnostic mentioning the separator.",['beginner'],2020-02-05 15:20:19+00:00,,2021-03-05 17:47:39+00:00,Open,13283508,DAFFODIL-2274
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The proposal for enumerations and typeValueCalc is here:

[https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal:+Feature+to+support+enumerations+and+typeValueCalc]

There are comments on this wiki page about ways it can/should be simplified before we really start exploiting it in generated schemas that make extensive use of enums.

The mechanism should be revised so that far simpler expression of enums can be achieved that avoids the need for complex types.

 ",[],2020-02-04 16:43:58+00:00,,2021-02-18 21:22:22+00:00,Open,13283282,DAFFODIL-2273
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"h4. Bugs (10)
 * Branches in conditional structure with same implementation (4)
 ** 1 is false positive
 ** 2 are code smells
 ** 1 is bug
 * DBI: Double Brace Initialization (1)
 * Attempt to write class that isn’t serializable
 * Arrays.toString bug (3) in test udfs
 * Unused return val (1) in test udfs

h4. Vulnerabilities (4)
 * Class variable field with public accessibility
 * Publicly mutable enum fields

h4. Code Smells (5.6k)
 * Critical (469)
 ** Duplicated string literals (316: Scala + 9: Java)
 ** Empty methods with no comments explaining why (73: Scala + 1: Java)
 ** Code with high cognitive complexity (58)
 ** Non-compliant constant and enum names (11)
 ** Switch statement with no default (1)
 * Major (625)
 ** Commented out code (478: Scala + 32: XML + 3: Java)
 ** Collapsible if statements (22: Scala)
 ** Address FIXMEs (22: Scala)
 ** Unused function parameter (14)
 ** Function with too many parameters (13)
 ** Conditional branches of code with same implementation (13)
 ** Match statement with too many cases (6)
 ** Missing override annotation over function (5)
 ** Methods with duplicate code (5: Scala + 3: Java)
 ** Generic exception thrown (3)
 ** Unused Private Methods (2)
 ** Useless assignment to local variable (1)
 ** Returning null instead of empty collection (1)
 ** Not using static class initializers/constructor (1)
 ** Empty conditional blocks of code (1)
 * Minor (4.3k)
 ** Non-compliant method names (4.1k: Scala + 3: Java)
 ** Non-compliant local variables and function parameters (64)
 ** Non-compliant package names (23)
 ** Non-compliant class names (7)
 ** Redundant Boolean literals (45)
 ** Unused local variables (22)
 ** Not using diamond operator (9)
 ** Empty comments (5)
 ** Declaring and immediately returning local variable (3)
 ** Using inverted Boolean checks (3)
 ** Throws declaration of runtime exceptions (2)
 ** Packages with only “package-info.java” (2)
 ** Switch statement instead of if resulting in decreased readability
 ** Abstract class instead of interface (1)
 ** size instead of .isEmpty (1)
 ** Improper modifier order (1)
 ** Check cross-platform compatibility of hardcoded URIs (1)
 * Info (195)
 ** Track TODO tags (193: Scala + 2: Java)

h4. Security Hotspots (3)
 * Verify command line args are safe and sanitized
 * Verify hashing is secure
 * Verify deserialization of object is secure",[],2020-01-28 15:24:24+00:00,2020-02-05 19:44:18+00:00,2020-04-13 18:29:26+00:00,Closed,13281962,DAFFODIL-2272
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2020-01-13 14:18:03+00:00,2020-01-14 15:09:26+00:00,2020-01-29 16:32:06+00:00,Closed,13279099,DAFFODIL-2271
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,We need to make sure the proposal at [https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal:+Feature+to+Support+User+Defined+Functions] matches the final design of the daffodil udf feature.,[],2020-01-09 15:04:46+00:00,2020-01-23 16:16:29+00:00,2020-04-13 19:18:29+00:00,Closed,13278476,DAFFODIL-2270
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Many of our depedencies have newer versions released than what we currently depend on. We should look into updating these dependencies to make sure we have the latest security and bug fixes. The results of the sbt-updates plugin currently show the following (where the right side shows the version we depend on -> the newest minor version -> the newest major version):
{code}
com.fasterxml.jackson.core:jackson-core         : 2.9.6  -> 2.9.10  -> 2.10.2
com.fasterxml.woodstox:woodstox-core            : 5.1.0  -> 5.3.0   -> 6.0.3
com.ibm.icu:icu4j                               : 62.1   -> 62.2    -> 65.1
com.typesafe.genjavadoc:genjavadoc-plugin       : 0.11              -> 0.15
junit:junit                                     : 4.12              -> 4.13
org.rogach:scallop                              : 3.1.3  -> 3.1.5   -> 3.3.2
org.scala-lang.modules:scala-parser-combinators : 1.1.1  -> 1.1.2
org.scala-lang.modules:scala-xml                : 1.1.0  -> 1.1.1   -> 1.2.0
org.scala-lang:scala-library                    : 2.12.6 -> 2.12.10 -> 2.13.1
org.scala-lang:scala-reflect                    : 2.12.6 -> 2.12.10 -> 2.13.1
org.scalacheck:scalacheck                       : 1.14.0 -> 1.14.3
{code}
Also, the plugins we use have updates:
{code}
com.typesafe.sbt:sbt-native-packager            : 1.3.17 -> 1.3.25  -> 1.5.2 
org.scoverage:sbt-scoverage                     : 1.5.1             -> 1.6.1 
{code}",[],2020-01-08 17:21:02+00:00,2020-10-26 18:23:42+00:00,2020-11-17 16:01:38+00:00,Closed,13278210,DAFFODIL-2269
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We currently have a TextNumberEv Evalutable that creates a ThreadLocal DecimalFormat. And every single numeric text element will have it's own unique TextNumberEv (and thus DecimalFormat), even if all the text number properties are exactly the same. Most schemas will probably have at most just a handful of unique text number properties so having a unique TextNumberEv and DecimalFormat for every one is wasteful. Instead, we should have some sort of cache so that TextNumberEv's with the same properties can reuse an already created DecimalFormat.

A thing to keep in mind is that DecimalFormat is not thread safe, this this cache must use ThreadLocals or something avoid racey code. ",[],2020-01-07 23:48:26+00:00,2021-02-18 20:58:15+00:00,2021-02-18 20:58:20+00:00,Closed,13278032,DAFFODIL-2268
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"Suppose you have a schema which causes Daffodil to output a compile time warning.

Currently, when you use this schema to make a pre-compiled parser, this warning would be outputs both when you compile the parser, and everytime you load the parser.

We should avoid outputing these warnings when the parser is loaded, so that they become only compile time warnings.",[],2020-01-06 17:07:50+00:00,,2021-02-18 20:55:24+00:00,Open,13277739,DAFFODIL-2267
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"In general, we do not claim to support untrusted input as pre-compiled parsers, so not validating pre-compiled parsers is reasonable.

However, a common mistake users are likely to make is using a parser compiled with a different version of Daffodil. While this is not supported, we do not fail gracefully, instead throwing the below unhandled exception. We should instead detect this case, and issue a user-friendly error indicating the problem.

{quote}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://daffodil.apache.org/community/#issue-tracker

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.io.InvalidClassException: org.apache.daffodil.processors.DataProcessor; local class incompatible: stream classdesc serialVersionUID = 875658728054701677, local class serialVersionUID = 886020291118569922
	at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:699)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1885)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1885)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1751)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2042)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
	at org.apache.daffodil.compiler.Compiler.reload(Compiler.scala:293)
	at org.apache.daffodil.compiler.Compiler.reload(Compiler.scala:276)
	at org.apache.daffodil.Main$.$anonfun$createProcessorFromParser$1(Main.scala:638)
	at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
	at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
	at org.apache.daffodil.Main$.createProcessorFromParser(Main.scala:638)
	at org.apache.daffodil.Main$.run(Main.scala:819)
	at org.apache.daffodil.Main$.main(Main.scala:1388)
	at org.apache.daffodil.Main.main(Main.scala{quote}",[],2020-01-06 17:02:37+00:00,,2021-02-18 20:53:38+00:00,Open,13277735,DAFFODIL-2266
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,In daffodil repo in NOTICE files and website,[],2020-01-03 12:07:43+00:00,2020-01-03 15:25:27+00:00,2021-05-20 12:33:52+00:00,Closed,13277363,DAFFODIL-2265
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The new new release candidate container (DAFFODIL-2227) was used to do an actual release for 2.5.0-rc1. While the release process worked, the final release steps of pushing changes could be automated and various parts of the process can be claned up (e.g. wix script installation, popd suppression, cleanup of old release candidates if there's an rc2).",[],2020-01-02 12:49:05+00:00,2020-01-02 17:44:12+00:00,2021-05-20 12:34:22+00:00,Closed,13277202,DAFFODIL-2264
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," 
{code:java}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Please report this bug and help us fix it: 
  https://daffodil.apache.org/community/#issue-tracker
Please include the following exception, the command you
ran, and any input, schema, or tdml files used that led
to this bug.
 
{code}
 

 
{code:java}
org.apache.daffodil.exceptions.Abort: Invariant broken: state.arrayPos.==(arrayIndexBefore.+(1))
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.processors.unparsers.OrderedSeparatedSequenceUnparser.unparseWithSuppression(SeparatedSequenceUnparsers.scala:326)
org.apache.daffodil.processors.unparsers.OrderedSeparatedSequenceUnparser.unparse(SeparatedSequenceUnparsers.scala:177)
org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:72)
        at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
        at org.apache.daffodil.processors.unparsers.OrderedSeparatedSequenceUnparser.unparseWithSuppression(SeparatedSequenceUnparsers.scala:326)
        at org.apache.daffodil.processors.unparsers.OrderedSeparatedSequenceUnparser.unparse(SeparatedSequenceUnparsers.scala:177)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:72)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
        at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
        at org.apache.daffodil.processors.unparsers.DelimiterStackUnparser.unparse(ChoiceAndOtherVariousUnparsers.scala:145)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:72)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
        at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
        at org.apache.daffodil.processors.unparsers.ElementUnparserBase.runContentUnparser(ElementUnparser.scala:180)
        at org.apache.daffodil.processors.unparsers.ElementUnparserBase.unparse(ElementUnparser.scala:193)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:72)
        at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
        at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
        at org.apache.daffodil.processors.DataProcessor.doUnparse(DataProcessor.scala:356)
        at org.apache.daffodil.processors.DataProcessor.unparse(DataProcessor.scala:304)
        at org.apache.daffodil.Main$.$anonfun$run$15(Main.scala:1135)
        at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
        at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
        at org.apache.daffodil.Main$.run(Main.scala:1135)
        at org.apache.daffodil.Main$.main(Main.scala:1363)
        at org.apache.daffodil.Main.main(Main.scala)
{code}
 ",[],2019-12-30 19:58:55+00:00,2020-01-03 15:38:03+00:00,2021-05-20 12:34:11+00:00,Closed,13276942,DAFFODIL-2263
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Reported on users mailing list.

Section 14.2.2 of the DFDL specification says this:

{color:#000000}When dfdl:occursCountKind is 'expression' the number of occurrences is given by dfdl:occursCount and exactly that many occurrences are always expected along with their separators. The dfdl:separatorSuppressionPolicy is not applicable and the implied behaviour is 'never'.{color}

The below schema has dfdl:occursCountKind=""expression"" and yet I am not observing the expected implied behavior of 'never'. That is, with this input:
{code:java}
header1,header2
 a,{code}
After parsing and then unparsing I get this:
{code:java}
header1,header2
 a{code}
Notice that the comma separator has been suppressed after ‘a’ but the specification says that the implied behavior is to never suppress the separator. This seems like a bug to me. Do you agree?  
{code:java}
<xs:element name=""input"">
     <xs:complexType>
         <xs:sequence dfdl:separator=""%NL;"" dfdl:separatorPosition=""infix"">
             <xs:element name=""header"">
                 <xs:complexType>
                     <xs:sequence dfdl:separator="","" dfdl:separatorPosition=""infix""  dfdl:separatorSuppressionPolicy=""anyEmpty"">
                         <xs:element name=""title"" maxOccurs=""unbounded"" type=""xs:string"" />
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
             <xs:element name=""row"" maxOccurs=""unbounded"">
                 <xs:complexType>
                     <xs:sequence dfdl:separator="","" dfdl:separatorPosition=""infix"" dfdl:separatorSuppressionPolicy=""anyEmpty"">
                         <xs:element name=""field"" maxOccurs=""unbounded"" type=""xs:string""
                             dfdl:occursCount=""{ fn:count(../../header/title) }""
                             dfdl:occursCountKind=""expression"" />
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
         </xs:sequence>
     </xs:complexType>
 </xs:element>{code}
 ",[],2019-12-30 18:01:04+00:00,2020-01-02 16:28:33+00:00,2021-05-20 12:33:46+00:00,Closed,13276917,DAFFODIL-2262
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"A user discovered an issue with optional elements inside unordered sequences.  Specifically, when the first element of an unordered sequence has minOccurs=""0"" and does not have maxOccurs > 1, the unparse attempt will fail with the following error message:

""Expected element start event for {}x, but received element end event for {}y.""

Attached is a test case demonstrating this behavior.",[],2019-12-30 15:05:09+00:00,2019-12-30 18:01:09+00:00,2021-05-20 12:34:20+00:00,Closed,13276899,DAFFODIL-2261
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," 

Suppose you have an array or optional element with dfdl:occursCountKind=""expression"".

Suppose when unparsing, that expression evaluates to 1.

Suppose the element is complex type.

Suppose its entire contents can be filled in via dfdl:outputValueCalc.

In this case, it should unparse 1 occurrence, and when unparsing, the outputValueCalc should be evaluated to fill in the contents of child elements.

Then it should successfully unparse.

Unfortunately, right now, the unparser sees no incoming events that match the element, and does not unparse anything.

Note that in the case where I discovered this bug, the entire array with OCK 'expression' is inside a hidden group, so there will *never* be any infoset events corresponding to it. 

 ",[],2019-12-26 22:36:21+00:00,2020-01-03 15:06:01+00:00,2020-06-12 18:16:06+00:00,Closed,13276512,DAFFODIL-2260
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Still isolating the bug, but from dev at daffodil email:

eventUnparserMaps are not being properly populated.

Given an incoming infoset event these maps steer the unparser to select the correct choice branch to unparse.

In the schema for mil-std-2045 version 0.0.4, there is a choice between control_release_marking_D1 and control_release_marking_C, so the choice branch map should be a table matching those elements to corresponding branches in the schema.

But the eventUnparserMap contains *only* a mapping for control_release_marking_C.

There is no test in the mil-std-2045 schema project itself that runs into this bug.

There is a test in the vmf project which runs into this (The quite old master branch, which I am updating to use mil-std-2045 version 0.0.4 headers). The test is of a mil-std-2045-header-rev-D1, with a VMF message payload. This test has the control_release_marking_D1 element in it, which is the correct element given that the header says it is rev D1.  But the unparser looks for *only* control_release_marking_C.

The VMF test is test_K07_1.",[],2019-12-26 14:48:36+00:00,2019-12-26 22:35:26+00:00,2021-05-20 12:34:10+00:00,Closed,13276481,DAFFODIL-2259
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-12-20 12:37:29+00:00,2019-12-23 16:04:01+00:00,2021-05-20 20:01:31+00:00,Closed,13275726,DAFFODIL-2258
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"We use the AnyVal types of Maybe (and specialized MaybeFoo types) and DataValue to avoid the need to box objects. However, there are times when these get boxed unexpectedly. We should look through and make sure non of this boxing happens at a time when we care if it gets boxed or not.

To check, we can dissasemble the compiled code:

javap -c -l `find . -name *.class | grep scala-2.12` > src.bytecode

then search the resulting assembly for strings along the lines of DataValue.""<init>"", which would indicate boxing. ",[],2019-12-18 21:36:56+00:00,,2019-12-18 21:36:56+00:00,Open,13275341,DAFFODIL-2257
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"We have switched to using only Java's implementation of BigInteger and BigDecimal. However, we still have some lingering usages of Scala's version.

We can find such uses by using the dissasembler:

javap -c -l `find . -name *.class | grep scala-2.12` > src.bytecode

Then searching the resulting file for ""scala/math/BigInt"" and ""scala/math/BigDecimal""

Since all our tests pass, these appear to not cause any functional issue, but should be cleaned up for purposes of consistency.",[],2019-12-18 21:31:52+00:00,2019-12-19 22:01:07+00:00,2021-05-20 20:01:42+00:00,Closed,13275340,DAFFODIL-2256
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Currently, lengthKind 'delimited' accepts finding a delimiter or end-of-data as satisfying the need for a delimiter.

This is not DFDL spec compliant. The DFDL spec allows for one case where a delimiter that is required (by lengthKind 'delimited') is not present, and that is by way of the property dfdl:documentFinalTerminatorCanBeMissing. This suggests no other exception to finding a required delimiter should be allowed. 

Fixing this may require a compatibility mode tunable that can be set to obtain this prior behavior. However, tests in our test suite should not be made to work using this compatibility mode. 
",[],2019-12-16 16:45:44+00:00,2021-02-18 20:51:44+00:00,2021-02-18 20:51:49+00:00,Closed,13274801,DAFFODIL-2255
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"To keep the initial BLOB imlementation relatively simple, it only supports lengthKind=""explicit"". However, some formats may need a scanning mechanism to find the end of the BLOB. One example of this is RPM, which has a compressed payload at the end of the file, and the length is just everything from one point to the end of the file. We ideally want to treat this payload as a blob, but since there is no explicit length for it, some sort of scanning must occurr.

Some initial thoughts for potential solutions:
1. lengthKind=""delimited"" allows for the end of the data stream to be a delimiter. So we could just make changes to delimiter scanning to support outputting the field to a blob file rather than somewhere in internal memory. This would allow for supporting delimited blobs in cases more than just end of stream, but could be some what challenging of a change.
2. Support endOfParent for blobs, or perhaps a new lengthKind, or a blob specific property that can be used for end of data. The logic here would likely be much simpleer than delimier scanning, but is pretty single purpose. ",[],2019-12-16 16:25:46+00:00,2021-02-18 20:49:41+00:00,2021-02-18 20:49:45+00:00,Closed,13274797,DAFFODIL-2254
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We currently run apt-get to install dependencies like RPM and SBT as part of our Github Actions workflow. Unfortunately, GitHub has updated their container to include a microsoft repository that is buggy and started breaking builds. We could remove just this buggy repo, but other repos could break as well.

However, it looks like the container now includes SBT and RPM so our dependnecies are already met. So we should just remove the install linux dependencies step and not have to worry about random repositories breaking our build.",[],2019-12-13 14:02:29+00:00,2019-12-13 15:40:31+00:00,2019-12-19 13:09:33+00:00,Closed,13274422,DAFFODIL-2253
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Often times we add multiple fixup commits to a pull request based on review comments, but forget to squash before merging. This leads to a slightly messier commit history where a single commit doesn't show the full story of what chnaged.

To avoid this, we should add a custom GithubActions check that determines the number of commits in a pull request and either shows a check failure, or disalllows merging completely.",['beginner'],2019-12-11 13:15:18+00:00,,2021-02-18 20:48:08+00:00,Open,13273878,DAFFODIL-2252
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"There is a newer drafty-draft of the DFDL spec which has all errata and typo fixes in it. 

We should publish this on the daffodil web site so that a limited audience of people can review it and see if it is solid or has problems. Because there are 60 errata to the earlier DFDL spec., this could also save people some time if they are looking things up in areas where there have been changes or clarifications. 

As this new version is unofficial, temporary, and will be replaced by the official version eventually,  the URL needs to be such that this is clear. 
",[],2019-12-10 23:08:30+00:00,2019-12-17 14:46:39+00:00,2021-05-20 20:01:22+00:00,Closed,13273721,DAFFODIL-2251
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Lots of code uses RuntimeData or ElementRuntimeData when it can get away with just DPathCompileInfo or DPathElementCompileInfo.

Cleaning this up will assist with DAFFODIL-1444. Unless things need the representational information, they don't need RuntimeData. E.g., expression compiling only needs DPathCompileInfo. Evaluatables only need DpathCompileInfo since they are about evaluatable expressions. 
",[],2019-12-10 01:45:06+00:00,2019-12-17 14:47:33+00:00,2021-05-20 20:01:23+00:00,Closed,13273493,DAFFODIL-2250
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"There are quite a few places where scala match-case logic is used in the daffodil schema compiler. This is typical of compilers, in that they often have algorithms that operate over a number of types that benefit from keeping the whole algorithm in one class.

The scala compiler will produce valuable warnings that improve maintainability of the code if the types involved in the case analysis are sealed - that is, if the scala compiler knows the complete set of possibilities. 

The DSOM types can be refactored so that the primary traits/classes used in case statements are all in one file where they can all be sealed, enabling the scala compiler's checking.

These classes/traits are large and rich, so their definitions do not all want to be centralized into that one file.

Hence, each DSOM type that ultimately derives from SchemaComponent should be split into a ""Primary"" trait that lives in the existing file, and a part that lives in a new central file for the sealed traits/classes.  Using ElementBase as an example, the centralized file will have
{code}
sealed abstract class ElementBase(....) 
extends Term(....)
with ElementBasePrimaryMixin
{code}
And the existing ElementBase.scala file would have:
{code}
final trait ElementBasePrimaryMixin
extends ... list of everything already in the extends of ElementBase....
{ self : ElementBase =>
 .... all existing contents of ElementBase class
}
{code}
This enables us to also cleanup the schema compiler in that we can insure the traits/classes defined in the centralized file are all properly named so that those are the only traits/classes one uses in case statements. I.e., use of traits/classes whose names end in ""...Mixin"" would be exclusively in the extends-with clauses of trait/class definitions, and not in case analysis. 

",[],2019-12-09 12:17:26+00:00,,2021-02-18 20:46:19+00:00,Open,13273343,DAFFODIL-2249
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"
Recent emails on users@daffodil.apache.org have shown that when parsing, if an array element results in no-forward-progress that we don't terminate the array, but rather the failure occurs outside of the scope of the speculative parse of the array element; hence, the entire PoU containing the array fails.

This is wrong. The failure should occurs within the scope of speculation for the next array element. A forward progress failure should terminate the array, preserving any previously successfully parsed elements, not fail the entire thing. ",[],2019-12-05 16:31:44+00:00,,2021-02-18 20:44:42+00:00,Open,13272547,DAFFODIL-2248
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"Using maxOccurs=""unbounded"" is likely to cause a no-forward-progress parse error when used on an element that could have an empty representation.

Daffodil should attempt to detect such a situation and issue a warning should it arise.",[],2019-12-05 00:51:22+00:00,,2021-02-18 20:41:34+00:00,Open,13272360,DAFFODIL-2247
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We need a performance test - very simple one that uses built-in non-restricted DFDL schemas that are small and easily maintained. 

This should be easily run as part of regression testing by developers as part of normal developer edit-compile-test workflow.

The goal is to catch significant performance regressions earlier. 

This is not a substitute for more serious performance testing on a controlled platform using realistic customer-centric DFDL schemas. That is still needed, and should cover things like multi-threaded ""throughput"" tests.

This is a quicker/simpler thing. Single thread. 

Thoughts:

* Measure performance relative to Tak calls aka ""Takeon"" units. This makes the timings self-relative to the speed of the JVM so that different people with different speed systems have a chance of still getting somewhat consistent timings. 
* Isolate parsing and unparsing timings.
* Avoid I/O - we should read from in-memory buffers, write to in-memory buffers, which should be small enough (maybe 1 Mbyte) to not introduce memory-allocation/memory-footprint artifacts. 
* Single threaded only.
* Use message-streaming API calls to parse repeatedly to create modest-sized infoset objects. 
* Isolate basic parse to create a DFDL Infoset from InfosetOutputter overhead. 
Isolate basic unparse from a DFDL Infoset from InfosetInputter overhead. 
* Test performance of schema compilation also (e.g., save parser saving to a stream that just discards the data) 
* Maintain per-developer history - each developer will have a file or something on their development system which is updated with timings and baselines so that when running these perf tests, results are compared to the prior-results for that same developer on that same machine. 
** This also allows for computation of standard-deviation and Z-score which make performance results far easier to analyze - as one can flag performance variations which are out of the norm not in some absolute timing sense, but relative to the standard-deviation of timings for that same test. (E.g., Z-Score more than 1.05 - more than 5% slower for the test relative to that test's own typical performance)


Once we have the framework, we will want to put perf-tests that isolate performance of specific features so as to focus attention when regressions are seen. E.g., a perf test may want to use say,  lengthKind 'prefixed' exclusively. Another test may focus on delimited text data, another on non-byte-sized/aligned data. 

",[],2019-12-03 17:49:47+00:00,,2021-02-18 20:38:33+00:00,Open,13272019,DAFFODIL-2246
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"On a ClassNotFoundException, we get 
{code:java}
[error] %s
 The class may not exist in this Java JVM version (%s),or it is missing from the classpath which iscom.missing.class
{code}
rather than the intended
{code:java}
[error] com.missing.class
 The class may not exist in this Java JVM version (1.8.0_232-ea), or it is missing from the classpath which is:
 ...[classpath details]...
{code}
 due to improper separation of a string to be formatted",[],2019-12-03 16:38:10+00:00,2020-01-28 20:36:45+00:00,2020-02-25 16:54:12+00:00,Closed,13272000,DAFFODIL-2245
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"ResolvesProperties is a mixin that implements scoped property lookups.

Only Terms should do full scoped lookups since they're the things that have all the properties all the way from the Element/Group Ref, to the Def/Decl, to the type, etc. 

Some things need to lookup local properties like the typeCalc properties or dfdl:choiceDispatchKey for a choice. 

So split ResolvesProperties into 
ResolvesScopedProperties that requires mixin to a Term,
and ResolvesLocalProperties, that can be mixed in to any annotated schema component. 

",[],2019-11-27 16:01:07+00:00,2019-12-02 16:24:52+00:00,2021-05-20 20:01:21+00:00,Closed,13271038,DAFFODIL-2244
Improvement,[],adeutschmann,Alexander Deutschmann,adeutschmann,Alexander Deutschmann,Minor,"Hello,

can you make a runAllTest() method available? In Version 2.4.0 i cant find any method. 
Or is it possible to read all testcases from the Runner class? 
I found this in the DfdlTestSuite Class.

Thank you :)",['beginner'],2019-11-25 08:33:20+00:00,,2021-02-18 20:37:16+00:00,Open,13270389,DAFFODIL-2243
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Currently the tunables are stored on the DPathCompileInfo objects, which are runtime objects created by the schema compiler.

This is a mistake. Many tunables mostly can vary at runtime. If at runtime one gets tunables from the RuntimeData by mistake, one will not get the new values. 

The ones that are needed at schema compile time (e.g., unqualifiedPathStepPolicy)  should be passed and saved separately in the DPathCompileInfo objects and RuntimeData objects that need it. 

It is possible that DaffodilTunables should not be serializable to prevent this problem. ",[],2019-11-22 16:40:06+00:00,2019-12-17 14:44:41+00:00,2021-05-20 20:01:22+00:00,Closed,13270127,DAFFODIL-2242
Bug,[],adeutschmann,Alexander Deutschmann,adeutschmann,Alexander Deutschmann,Major,"If i create the following small junit test

{code:java|borderStyle=solid}
public class TestTDML {

	
	private DFDLTestSuite testSuite;

	@BeforeEach
	public void setup() {
		String tpktProtocolTestCases = ""handshake.tdml"";
		testSuite = new DFDLTestSuite(Misc.getRequiredResource(tpktProtocolTestCases), true, true, true,
				Runner.defaultRoundTripDefaultDefault(), Runner.defaultValidationDefaultDefault(), Runner.defaultImplementationsDefaultDefault(), true, true);

	}

	@Test
	public void testFirst() {
				
		Option<Node> node = scala.Option.apply(this.testSuite.ts() );
		this.testSuite.runAllTests(node);
	}
}

{code}
With this tdml file:

[https://github.com/apache/incubator-daffodil/blob/master/tutorials/src/main/resources/tdmlTutorial.tdml.xml]

 

I get the following error:
{noformat}
org.apache.daffodil.tdml.TDMLExceptionImpl: (Implementation: daffodil) SchemaDefinitionError: Schema Definition Error: The file [file:/C:/Users/E521642/AppData/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd|file:///C:/Users/E521642/AppData/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd] did not contain a schema element as the document element. Found testSuite in namespace [http://www.ibm.com/xmlns/dfdl/testData].
 Schema context: [file:AppData/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd|file://appdata/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd] Location in [file:AppData/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd|file://appdata/Local/Temp/dateTimeTest5799978260534849438.dfdl.xsd]
{noformat}
 

I cant execute any tests. 

Can you help me or assist what i can do?

Thanks

Greetings

Alex",[],2019-11-22 08:42:39+00:00,2019-11-25 14:02:05+00:00,2021-05-20 12:34:07+00:00,Closed,13270052,DAFFODIL-2241
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"There are a number of features and diagnostic messages that JSON can exercise, but XML doesn't. These are mostly around differences due to JSON lack of namespaces.

We need a test rig for JSON that lets you unparse from XML to data, parse from data to JSON, unparse from JSON to data, and compare to see if you get the same data. 

This could be added to TDML runner as a different mode for tests. Or possibly we just want the ability to have 
{code:xml}
<tdml:infoset>
   <tdml:jsonInfoset><![CDATA[.... string of json here ...]]></tdml:jsonInfoset>
</tdml:infoset>
{code}

But it could also just be a stand alone junit-style test rig.",[],2019-11-22 03:58:17+00:00,,2019-12-23 16:08:45+00:00,Open,13269994,DAFFODIL-2240
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"namespaces.tdml  file exists in daffodil-test in two places. 

src/test/resources/org/apache/daffodil/section06/namespaces.tdml
src/test/resources/test space/test1/namespaces.tdml
(note that filename has a space in the name ""test space"")

They have a lot of similarity and much identical content. 

Redundant tests should be removed. 

",['beginner'],2019-11-22 01:01:42+00:00,,2021-02-18 20:35:17+00:00,Open,13269980,DAFFODIL-2239
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Many optimizations depend on the couldHaveSuspensions attribute, such as eliding out the expensive CaptureStart/End  of Content/Value length for unparsing. 

This appears to be true far too often. The calculation is far too pessimistic. 

E.g., in an example I have which is 100% text, with only constant dfdl:outputValueCalc expressions (because there are hidden flags that must be set to constant ""1"" or ""0""), this attribute is true, yet there is no possibility of suspension in this example. 

We need unit tests to insure this is being computed correctly so that the optimizations it enables will in fact take place. 
",[],2019-11-18 21:11:02+00:00,,2021-02-18 20:34:17+00:00,Open,13269163,DAFFODIL-2238
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"A comment here causes an error.
{code:xml}
<dfdl:defineEscapeScheme name='Quotes'>
            <!--
                Commas in a field are escaped by wrapping the field
                in double quotes. A quote in a field is escaped by
                preceding it with a double quote.
            -->
            <dfdl:escapeScheme escapeKind='escapeBlock'

{code}
",['beginner'],2019-11-18 15:05:58+00:00,,2021-02-18 20:30:54+00:00,Open,13269096,DAFFODIL-2237
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"When using JSON, because there are no namespaces there are ambiguous situations where the unparser gets an element name, but it doesn't know what element to synthesize in the infoset because it has more than one possibility that differ only by namespace.

No test elicits this message.

The message string (you can search for) is:

""Found multiple matches for element %s because infoset implementation ignores namespaces""

 ",['beginner'],2019-11-15 22:18:32+00:00,,2021-02-24 18:31:46+00:00,Open,13268740,DAFFODIL-2236
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"While we check if UDF classes are serializable, we don't check if the initialized UDF object is serializable, which can lead to the below exception when compiling. We should do a check during UDF initialization to see if it's serializable and error out if it's not.
{code:java}
                                                                                                                                                                                                                 java.io.IOException: unexpected exception type
        at java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1736)
        at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1146)
        at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496)
        at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
        at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
        at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:441)
        at org.apache.daffodil.util.PreSerialization.serializeObject(Serialize.scala:46)
        at org.apache.daffodil.util.PreSerialization.serializeObject$(Serialize.scala:42)
        at org.apache.daffodil.dsom.DPathCompileInfo.serializeObject(CompiledExpression1.scala:202)
        at org.apache.daffodil.dsom.DPathCompileInfo.writeObject(CompiledExpression1.scala:229)
....
Caused by: org.apache.daffodil.exceptions.Abort: Could not serialize member of class com.example.NonSerializableClass, found within class ElementRuntimeData
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.util.PreSerialization.serializeObject(Serialize.scala:49)
org.apache.daffodil.util.PreSerialization.serializeObject$(Serialize.scala:42)
org.apache.daffodil.processors.TermRuntimeData.serializeObject(RuntimeData.scala:99)
        at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
        at org.apache.daffodil.util.PreSerialization.serializeObject(Serialize.scala:49)
        at org.apache.daffodil.util.PreSerialization.serializeObject$(Serialize.scala:42)
        at org.apache.daffodil.processors.TermRuntimeData.serializeObject(RuntimeData.scala:99)
        at org.apache.daffodil.processors.ElementRuntimeData.writeObject(RuntimeData.scala:741)
        at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)



{code}",[],2019-11-15 20:25:17+00:00,2019-11-22 16:07:29+00:00,2019-12-10 14:29:58+00:00,Closed,13268724,DAFFODIL-2235
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Pretty printing is undesirable for many use cases.

This applies to both XML pretty printing and JSON pretty printing.",['beginner'],2019-11-14 16:08:42+00:00,,2021-02-18 20:27:01+00:00,Open,13268360,DAFFODIL-2234
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Need to introduce runtime1 package in schema compiler, and add mixins there that contain the runtime1-specific things such as computation of the ElementRuntimeData and TermRuntimeData data structures, which are specific to Runtime1.

There are many calculations that are specific to Daffodil Runtime1 streaming unparser for example, that can be isolated so that it is clear they are runtime1 specific.

 ",[],2019-11-14 00:25:34+00:00,2019-11-22 02:45:15+00:00,2021-05-20 20:01:30+00:00,Closed,13268161,DAFFODIL-2233
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Users have reported that XML output contains things like
  
 <x>foo &amp;quot;bar&amp;quot; baz</x>
  
 which could just as reasonably be output as:
  
 <x>foo ""bar"" baz</x>
  
 We should really have an escapeForElementValueIfNeeded routine that returns either the escaped string, or the original string if no escaping was necessary. This would assume you are creating an XML element value, i.e., so no quoting is necessary of quotation marks.
  
 The standard XML library escapify routines don't distinguish escaping for elements from escaping for attributes which is why they always convert quotation marks to entities. We already have to do our own escaping to deal with ASCII NUL so that we can carry that via a PUA remap.
  
 It's also recommended in the XML 1.1 spec, that all the C0 and C1 control characters other than TAB and LF are converted to entities.
  
 DAFFODIL-1559 is our ticket about dealing with the CR, CRLF preservation issue. It suggests CR should be converted to whether alone or in a CRLF pair. 
  
 DAFFODIL-919 is also about preserving whitespace generally, and escaping, dealing with CDATA regions.
  
  ",[],2019-11-12 00:43:31+00:00,,2020-08-05 18:17:59+00:00,Open,13267582,DAFFODIL-2232
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"See the attached schema, and the following data
{quote}
Year,Make,Model,Description,Price
1997,Ford,E350,""ac, abs, moon"",2999.99
1999,Chevy,Venture Extended Edition,,4900.00
1999,Chevy,Venture Extended Edition,Very Large,5000.00
1996,Jeep,Grand Cherokee,""MUST SELL! air, moon roof, loaded"",4799.00
{quote}
If the 'header' variable is set to ""none"" then this schema correctly does not create a <header> element because occursCount evaluates to 0. However, on unparse even though there is no header element, Daffodil still creates a separator, causing an empty newline to be output as the first line.
",[],2019-11-11 19:23:36+00:00,,2019-11-11 19:23:36+00:00,Open,13267541,DAFFODIL-2231
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"As part of work on DAFFODIL-2192 I ran into a bunch of small cleanup items.

This ticket is for those. None have any functional impact.",[],2019-11-08 05:16:42+00:00,2019-11-08 22:11:41+00:00,2019-11-21 12:46:06+00:00,Closed,13267026,DAFFODIL-2230
Improvement,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Minor,"The Runner class has a primary constructor that 9 arguments. Its companion object provides alternate constructors (1 arg or 2 args), but Java doesn't have access to this, requiring a user to manually fill in the defaults.

It'd be nice to have similar constructors that Java programs can call.",[],2019-11-05 22:24:28+00:00,2019-11-07 14:03:44+00:00,2021-05-20 20:01:16+00:00,Closed,13266439,DAFFODIL-2229
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When building the UserDefinedFunctionProvider, the following warnings are reported about the Javadocs, would be good to fix them:
{code}
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-udf/src/main/java/org/apache/daffodil/udf/UserDefinedFunctionProvider.java:46:1:  no @return
[warn]   abstract public Class<?>[] getUserDefinedFunctionClasses();
[warn]                              ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-udf/src/main/java/org/apache/daffodil/udf/UserDefinedFunctionProvider.java:64:1:  no description for @throws
[warn]    * @throws SecurityException
[warn]      ^
{code}",[],2019-11-05 22:23:19+00:00,2019-11-08 12:11:20+00:00,2019-12-19 13:46:37+00:00,Closed,13266438,DAFFODIL-2228
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The [Release Workflow|https://cwiki.apache.org/confluence/display/DAFFODIL/Release+Workflow] is pretty throughly documented, but there are a lot of manual steps involved and it requires the release manager to have their environment set up properly, much of which could be automated.

To improve reproducability and minimize the effects of a users environment, we should create a ""release candidate container"" that can be run via docker/podman/etc to perform all the neccesary steps to setup a clean environment to build and publish a release.",[],2019-11-04 19:29:00+00:00,2019-12-16 17:02:54+00:00,2021-05-20 12:33:56+00:00,Closed,13266173,DAFFODIL-2227
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"CLI tests, and tests of some features like UDFs are following a pattern which is unnecessarily redundant:
{code:java}
    val schemaFile = Util.daffodilPath(""daffodil-udf/src/test/resources/org/apache/daffodil/udf/genericUdfSchema.xsd"")

        val (testSchemaFile) = if (Util.isWindows) (Util.cmdConvert(schemaFile)) else (schemaFile)
{code}
Every file path used by every test has this explicit MS-Windows conditionalization in it. Over and over and over.

This should be replaced by things that combine what Util.daffodilPath and Util.cmdConvert do, so that all we require is that people construct a, for example, Util.filePath(....) object from a platform independent (i.e., ""/"" separated) path name. The fact that this requires MS-windows conditionalization should be hidden.",['beginner'],2019-11-01 00:05:07+00:00,,2021-02-18 20:23:38+00:00,Open,13265657,DAFFODIL-2226
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The Github Actions configuration uses mklink to put sbt on the path. Recently, this broke with the following message:
{quote}
mklink : The term 'mklink' is not recognized as the name of a cmdlet, function, script file, or operable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At D:\a\_temp\79a997b0-f0ad-4763-9266-2c7c5be91bd6.ps1:7 char:1
+ mklink ""C:\ProgramData\Chocolatey\bin\sbt"" ""C:\Program Files (x86)\sb ...
{quote}
Need to determine why this no longer works and fix to get windows tests working again.",[],2019-10-31 15:44:15+00:00,2019-11-05 22:12:13+00:00,2021-05-20 12:33:59+00:00,Closed,13265573,DAFFODIL-2225
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"The BMP schema no longer unparses with the development branch. It now errors with the message:
{quote}
[error] Unparse Error: Expected element start event for {}Compression_Method, but received element start event for {}Compression_Method.
Data location was preceding byte 34
{quote}
I suspect this is related to DAFFODIL-2192 since the error message seems similar since it claims two events/ERDs that look the same are different.",[],2019-10-30 15:08:21+00:00,2019-11-22 19:24:47+00:00,2021-05-20 12:34:14+00:00,Closed,13265323,DAFFODIL-2224
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Edit test.
Edit ttest2.",[],2019-10-24 14:27:33+00:00,2019-10-28 18:39:18+00:00,2021-05-20 12:34:52+00:00,Closed,13264273,DAFFODIL-2223
Improvement,[],mmiller84,Michael Miller,mmiller84,Michael Miller,Minor,"Is it possible to allow the {{InfosetInputter,}} and subclasses, to have a {{DaffodilTunables}} object pre-created passed into its constructor?

When profiling unparse performance, some class/resource loaders do not handle the {{DaffodilTunables}} initialization very well. In particular, if your using a container like Wildfly, the ModuleClassLoader is very inefficient, and hits disk io heavily, during the \{{getResource(""/daffodil-config.xml"")}} that happens for every single {{InfoSetInputter}} construction.

Is it necessary to have a newly generated {{DaffodilTunables}} everytime an unparse is called?

If the above is not possible, is there a way to reuse {{InfosetInputter}} objects and reset them for repeated calls to avoid the {{new DaffodilTunables()}} overhead?",['beginner'],2019-10-24 01:25:15+00:00,2020-01-28 19:47:15+00:00,2020-02-10 14:04:25+00:00,Closed,13264153,DAFFODIL-2222
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A DFDL language extension has been requested allowing data to be validated, and unparsed that contains fields computed based on representation of other elements/groups. E.g., checksums, or CRC codes, or parity elements.

 

Seems closely related to the layering features added to Daffodil as an experimental DFDL extension feature, and proposed for inclusion in DFDL v2.0 version of the standard.

But it's not exactly the same, as there needs to be a way to refer to the layer, and obtain a value from the layer when parsing and when unparsing.",[],2019-10-23 15:42:33+00:00,,2020-10-14 11:52:37+00:00,Open,13264054,DAFFODIL-2221
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Our existing NiFi processors hand off XML to NiFi.

This ticket is for a more tightly integrated processor which takes a DFDL schema for data and hands off a NiFi data record, described by the DFDL schema, to NiFi so that its native access and manipulation of data can be applied.

This is different from handing off XML. In the XML case, NiFi can only manipulate or observe things about the XML by invoking XML libraries on it - e.g., extract an element to examine it using an XPath expression, etc.",[],2019-10-17 22:45:35+00:00,2021-02-25 14:54:13+00:00,2021-02-25 14:54:17+00:00,Closed,13262968,DAFFODIL-2220
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Unparser bug with dfdl:separatorSuppressionPolicy=""never"".

See attached TDML. It is the unparser test case ""unparser-test-5"" that illustrates the bug.

The error is pretty egregious. It looks like it is completely messing up what events are expected.

 

 ",[],2019-10-17 22:09:41+00:00,,2019-12-23 16:08:50+00:00,Open,13262960,DAFFODIL-2219
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"ICU libraries changed behavior and now strict behavior is being lax about + signs.

Daffodil should revert back to the latest ICU version that doesn't have this problem.

Likely we have to determine what ICU version this changed in, and back out to a prior one, as this new behavior is not implementing the DFDL spec behavior. 

See also https://issues.apache.org/jira/browse/DAFFODIL-845

This from a DFDL Workgroup email thread on this subject:
{code:java}
Re: [DFDL-WG] Action 313: Plus '+' sign and lax textNumberCheckPolicyInboxxSteve Hanson <smh@uk.ibm.com> Fri, Aug 30, 10:56 AMto me, slawrence, DFDL-WG, Liam ICU changing behaviour in an incompatible
way is not good. 



IBM DFDL is way behind, and is still
on ICU 51.2.  We are limited in what we can do as we try to keep the
same level as IBM Integration Bus & WTX as we have had C namespacing
issues in the past.



Looking at the links, there are other
changes that have crept in when lenient. 



- The string must
contain a complete prefix and suffix. 

For example, if the pattern is ""{#};(#)"", then
""{123}"" or ""(123)"" would match, but ""{123"",
""123}"", and ""123"" would all fail. 

(The latter strings would be accepted in lenient mode.)




-
Minus and plus signs can only appear if specified in the pattern. 

In lenient mode, a plus or minus sign can always precede
a number.










In typical ICU fashion, even this is
not complete. It says nothing about what happens if the pattern has a sign
and the data doesn't.



I suggest you test all the combos with
Daffodil and establish the truth.



Then we need to decide what to do. If
there is no way of controlling this (eg, parameter or env var) then the
safest option is to backoff Daffodil to the latest ICU release that matches
the DFDL 1.0 spec, and change the spec so that the link to ICU is specific
rather than the generic link which is in the spec today (http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
and which floats to the latest release. We can't have a moving target.



Regards

 

Steve Hanson
IBM Hybrid Integration, Hursley, UK

Architect, IBM
DFDL

Co-Chair, OGF
DFDL Working Group

smh@uk.ibm.com

tel:+44-1962-815848

mob:+44-7717-378890

Note: I work Tuesday to Friday 







From:      
 Mike Beckerle <mbeckerle.dfdl@gmail.com>

To:      
 DFDL-WG <dfdl-wg@ogf.org>

Date:      
 29/08/2019 19:49

Subject:    
   [DFDL-WG] Action
313: Plus '+' sign and lax textNumberCheckPolicy

Sent by:    
   ""dfdl-wg""
<dfdl-wg-bounces@ogf.org>








Looks like ICU changed behavior....



From: Steve Lawrence <slawrence@apache.org>

Sent: Thursday, August 29, 2019 1:30 PM

To: users@daffodil.apache.org

Subject: Re: Plus '+' sign and lax textNumberCheckPolicy - was: Re: How
to model a fixed-length integer that may be padded with space on the left?



I think this is a difference in ICU version?



A little grepping through ICU source, I found a change [1] to their

number parsing logic in Dec 2017:



+        if (!isStrict) {

+            parser.addMatcher(WhitespaceMatcher.getInstance());

+            parser.addMatcher(new
PlusSignMatcher());

+        }



That looks to me like a change to make it so plus signs are always

matched in lax/lenient mode regardless of the pattern (Daffodils current

behavior). A couple minor changes have been made to that section, but

nothing that allows you to turn if off if lenient is on.



It's hard to tell in the git history what release that was in, but it

looks like around version 61, which is relatively new (Daffodil is on

version 62).



Also, the latest version of DecimalFormatProperties.java (looks to be an

internal implementation, so no online javadocs), has javadocs that

states that plus signs are always allowed in lenient/lax mode [2].



I think this is a change in ICU behavior in newer versions.



- Steve



[1]

https://github.com/unicode-org/icu/commit/68340c8464bd988477d6c88f46f9dfe4562a6d02#diff-565b07c255337881b4e06f766691667cR119-R122

[2]

https://github.com/unicode-org/icu/blob/master/icu4j/main/classes/core/src/com/ibm/icu/impl/number/DecimalFormatProperties.java#L53-L54



--

  dfdl-wg mailing list

  dfdl-wg@ogf.org

  https://www.ogf.org/mailman/listinfo/dfdl-wg




Unless stated otherwise above:

IBM United Kingdom Limited - Registered in England and Wales with number
741598. 

Registered office: PO Box 41, North Harbour, Portsmouth, Hampshire PO6
3AU
{code}",[],2019-10-17 21:41:17+00:00,2021-02-18 20:18:14+00:00,2021-02-18 20:18:19+00:00,Closed,13262954,DAFFODIL-2218
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This TDML test parse-test-6 should cause an error, but does not.

The trailingEmptyStrict seems not to be checking in this case.

See attached TDML file. (Which is not pasted here because if you do this, then any Jira search that uses a property name matches the ticket because every property is mentioned in the TDML).",[],2019-10-17 21:22:30+00:00,,2021-04-20 16:58:00+00:00,Open,13262952,DAFFODIL-2217
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"The logger functionality is provided by the Logging trait.

This trait is mixed into, for example, the DataProcessor class.

This trait has mutable members.

This is a mistake. The PState/UState also mix in the Logging trait for use at runtime that way each thread (which requires a unique PState/UState) can have its own logger, own state for whether logging is on/off, own logging level, own I/O streams for writing to the log, etc. 

Currently the DataProcessor.doUnparse method is the only thing that calls DataProcessor.log, but it should be calling ustate.log instead.

This change has API implications however, as the API for setting a logger and turning on logging needs to arrange for that information to be recorded on the PState/UState, but those objects aren't directly visible to the API.

Since the logger is mutable state, we really don't want users to establish a single logger on the say, compiler or ProcessorFactory object instance, or even the DataProcessor instance, since that logger really should not get shared if users call parse multiple times on different threads. Rather, each parse/unparse call, which can be done on a separate thread, needs to be able to establish all its own mutable state.

Unfortunately, right now the parse() call takes two arguments, the InputSourceDataInputStream, and the InfosetOutputter.  I suppose the InputSourceDataInputStream, which cannot be shared, could have the logger methods mixed into it..... doesn't seem particularly clean.

There are two different loggers: the compile-time logger, and the runtime logger(s) - the latter is plural since there can be distinct ones per each thread used for a parse or unparse call.

 

 

 ","['beginner', 'thread-safety']",2019-10-15 16:57:56+00:00,2020-10-19 20:44:42+00:00,2020-11-17 22:23:37+00:00,Closed,13262415,DAFFODIL-2216
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A pull request recently failed on TravisCI but showed as passing on GitHub actions. 

https://github.com/apache/incubator-daffodil/pull/273/checks?check_run_id=259695098

Looking at the ""Run Unit Tests"" step, it shows that there were in fact test failures and sbt existed with code ""1"", which should mean failure. Need to figure out why GitHub is not marking this as a failed run. ",[],2019-10-15 11:40:53+00:00,2019-10-17 14:08:22+00:00,2021-05-20 12:34:23+00:00,Closed,13262342,DAFFODIL-2215
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"TDML page - I can find no link from any other page to this one.

Typo error on it:  ""To do expect errors....""",['beginner'],2019-10-14 21:01:42+00:00,,2021-02-18 20:14:37+00:00,Open,13262230,DAFFODIL-2214
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We don't debug the schema compiler using logging, nor do we expect customers to do so.

So all the OOLAG-level logging we do is no longer needed (we never turn it on, except some tests in the daffodil-cli module turn it on.)

Improvement is to remove all logging statements that are log-level OOLAGDebug/OOLAG, and most logging from the schema compiler.

Should be done in an independent commit from any other changes since this will affect many lines of code.",['beginner'],2019-10-04 15:53:50+00:00,,2021-02-18 20:14:04+00:00,Open,13260600,DAFFODIL-2213
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Consider the schema:
{quote}<xs:element name=""a"" type=""SomeEnumType""/>
{quote}
Where SomeEnumType is an enumeration type (eg, has a dfdlx:repType)

If this is the root element, then the schema behaves as expected. However, when this is not the root element, Daffodil extraneously complains invalid settings on a:

 
{quote}[error] Schema Definition Error: String with dfdl:lengthKind='implicit' must have an XSD maxLength facet value.
Schema context: a Location line 25 column 10 in file:/home/bsloane/Documents/incubator-daffodil/test/test/a.dfdl.xsd
{quote}",[],2019-10-03 14:56:30+00:00,,2019-12-23 16:08:55+00:00,Open,13260324,DAFFODIL-2212
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"Attached are two cases, both of which contain:
{quote}<xs:simpleType name=""SomeEnumType"" dfdlx:repType=""xs:unsignedByte"">
 <xs:restriction base=""xs:unsignedShort"">
 <xs:enumeration value=""55"" dfdlx:repValues=""0"" />
 <xs:enumeration value=""56"" dfdlx:repValues=""1"" />
 <xs:enumeration value=""57"" dfdlx:repValues=""2"" />
 </xs:restriction>
</xs:simpleType>
{quote}
In some cases this could potentially make sense (eg. when the document format is such that unsignedByte is automatically 8 bits), but we probably want to disallow this entirely.

In b.dfdl.xsd, the entire document is using representation='text'. This fails with a somewhat reasonable error:
{quote}[error] Schema Definition Error: Type UnsignedShort with dfdl:representation='text' cannot have dfdl:lengthKind='implicit'
Schema context: element reference tns:a Location line 1 in file:/home/bsloane/Documents/incubator-daffodil/test/test/b.dfdl.xsd
[error] Schema Definition Error: Type UnsignedShort cannot have lengthKind='implicit' when representation='text'
Schema context: element reference tns:a Location line 1 in file:/home/bsloane/Documents/incubator-daffodil/test/test/b.dfdl.xsd
{quote}
in c.dfdl.xsd, the document is useing representation='binary', and fails with an unhandled exception:
{quote}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   An unexpected exception occurred. This is a bug!   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 Please report this bug and help us fix it:
  https://daffodil.apache.org/community/#issue-tracker
 Please include the following exception, the command you ran, and any input, schema, or tdml files used that led to this bug.

java.util.NoSuchElementException: None.get at scala.None$.get(Option.scala:349) at scala.None$.get(Option.scala:347) at org.apache.daffodil.grammar.primitives.TypeValueCalc.repTypeUnparser$lzycompute(PrimitivesExpressions.scala:264) at org.apache.daffodil.grammar.primitives.TypeValueCalc.repTypeUnparser(PrimitivesExpressions.scala:264) at org.apache.daffodil.grammar.primitives.TypeValueCalc.unparser$lzycompute(PrimitivesExpressions.scala:276) at org.apache.daffodil.grammar.primitives.TypeValueCalc.unparser(PrimitivesExpressions.scala:272) at org.apache.daffodil.grammar.Gram.maybeUnparser(GrammarTerm.scala:146) at org.apache.daffodil.grammar.primitives.ElementCombinatorBase.eRepTypeUnparser$lzycompute(ElementCombinator.scala:421) at org.apache.daffodil.grammar.primitives.ElementCombinatorBase.eRepTypeUnparser(ElementCombinator.scala:421) at org.apache.daffodil.grammar.primitives.ElementParseAndUnspecifiedLength.unparser$lzycompute(ElementCombinator.scala:332) at org.apache.daffodil.grammar.primitives.ElementParseAndUnspecifiedLength.unparser(ElementCombinator.scala:327) at org.apache.daffodil.grammar.primitives.ElementCombinator.unparser$lzycompute(ElementCombinator.scala:143) at org.apache.daffodil.grammar.primitives.ElementCombinator.unparser(ElementCombinator.scala:119) at org.apache.daffodil.grammar.Prod.unparser$lzycompute(Production.scala:92) at org.apache.daffodil.grammar.Prod.unparser(Production.scala:84) at org.apache.daffodil.grammar.Prod.unparser$lzycompute(Production.scala:92) at org.apache.daffodil.grammar.Prod.unparser(Production.scala:84) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$unparser$1(Compiler.scala:106) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:594) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:594) at org.apache.daffodil.compiler.ProcessorFactory.unparser$lzycompute(Compiler.scala:105) at org.apache.daffodil.compiler.ProcessorFactory.unparser(Compiler.scala:105) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$new$4(Compiler.scala:127) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.$anonfun$checkErrors$2(OOLAG.scala:286) at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12) at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:286) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors$(OOLAG.scala:277) at org.apache.daffodil.dsom.SchemaComponentImpl.checkErrors(SchemaComponent.scala:38) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:345) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError$(OOLAG.scala:344) at org.apache.daffodil.compiler.ProcessorFactory.super$isError(Compiler.scala:141) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:141) at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12) at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:132) at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12) at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58) at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64) at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:132) at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:359) at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:704) at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76) at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35) at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:703) at org.apache.daffodil.Main$.run(Main.scala:816) at org.apache.daffodil.Main$.main(Main.scala:1351) at org.apache.daffodil.Main.main(Main.scala)
{quote}",[],2019-10-03 00:49:09+00:00,,2021-02-18 20:11:22+00:00,Open,13260221,DAFFODIL-2211
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"When the ""base"" attribute of a <restriction> tag starts or ends with a space character, Daffodil fails with an unhandled exception:

 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   An unexpected exception occurred. This is a bug!   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 Please report this bug and help us fix it:
  https://daffodil.apache.org/community/#issue-tracker
 Please include the following exception, the command you ran, and any input, schema, or tdml files used that led to this bug.

org.apache.daffodil.exceptions.Abort: Invariant broken: tryBaseQName.isSuccessorg.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)org.apache.daffodil.dsom.Restriction.baseQName$lzycompute(RestrictionUnion.scala:77)org.apache.daffodil.dsom.Restriction.baseQName(RestrictionUnion.scala:73)org.apache.daffodil.dsom.Restriction.x$4$lzycompute(RestrictionUnion.scala:88) at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129) at org.apache.daffodil.dsom.Restriction.baseQName$lzycompute(RestrictionUnion.scala:77) at org.apache.daffodil.dsom.Restriction.baseQName(RestrictionUnion.scala:73) at org.apache.daffodil.dsom.Restriction.x$4$lzycompute(RestrictionUnion.scala:88) at org.apache.daffodil.dsom.Restriction.x$4(RestrictionUnion.scala:87) at org.apache.daffodil.dsom.Restriction.optBaseTypeDef$lzycompute(RestrictionUnion.scala:87) at org.apache.daffodil.dsom.Restriction.optBaseTypeDef(RestrictionUnion.scala:87) at org.apache.daffodil.dsom.Restriction.optBaseDef(RestrictionUnion.scala:82) at org.apache.daffodil.dsom.SimpleTypeDefBase.$anonfun$optReferredToComponent$1(SimpleTypes.scala:268) at scala.Option.flatMap(Option.scala:171) at org.apache.daffodil.dsom.SimpleTypeDefBase.optReferredToComponent(SimpleTypes.scala:268) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.refersToForPropertyCombining(AnnotatedSchemaComponent.scala:209) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.refersToForPropertyCombining$(AnnotatedSchemaComponent.scala:209) at org.apache.daffodil.dsom.AnnotatedSchemaComponentImpl.refersToForPropertyCombining(AnnotatedSchemaComponent.scala:170) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.$anonfun$nonDefaultPropertySources$1(AnnotatedSchemaComponent.scala:217) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:594) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:594) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources(AnnotatedSchemaComponent.scala:214) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources$(AnnotatedSchemaComponent.scala:213) at org.apache.daffodil.dsom.AnnotatedSchemaComponentImpl.nonDefaultPropertySources$lzycompute(AnnotatedSchemaComponent.scala:170) at org.apache.daffodil.dsom.AnnotatedSchemaComponentImpl.nonDefaultPropertySources(AnnotatedSchemaComponent.scala:170) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.$anonfun$nonDefaultPropertySources$2(AnnotatedSchemaComponent.scala:219) at scala.Option.map(Option.scala:146) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.$anonfun$nonDefaultPropertySources$1(AnnotatedSchemaComponent.scala:218) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:594) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:594) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources(AnnotatedSchemaComponent.scala:214) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources$(AnnotatedSchemaComponent.scala:213) at org.apache.daffodil.dsom.AnnotatedSchemaComponentImpl.nonDefaultPropertySources$lzycompute(AnnotatedSchemaComponent.scala:170) at org.apache.daffodil.dsom.AnnotatedSchemaComponentImpl.nonDefaultPropertySources(AnnotatedSchemaComponent.scala:170) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.$anonfun$nonDefaultPropertySources$2(AnnotatedSchemaComponent.scala:219) at scala.Option.map(Option.scala:146) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.$anonfun$nonDefaultPropertySources$1(AnnotatedSchemaComponent.scala:218) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:594) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:594) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources(AnnotatedSchemaComponent.scala:214) at org.apache.daffodil.dsom.AnnotatedSchemaComponent.nonDefaultPropertySources$(AnnotatedSchemaComponent.scala:213) at org.apache.daffodil.dsom.AbstractElementRef.nonDefaultPropertySources$lzycompute(ElementRef.scala:31) at org.apache.daffodil.dsom.AbstractElementRef.nonDefaultPropertySources(ElementRef.scala:31) at org.apache.daffodil.dsom.ResolvesProperties.findNonDefaultProperty(AnnotatedSchemaComponent.scala:80) at org.apache.daffodil.dsom.ResolvesProperties.lookupProperty(AnnotatedSchemaComponent.scala:143) at org.apache.daffodil.dsom.ResolvesProperties.lookupProperty$(AnnotatedSchemaComponent.scala:140) at org.apache.daffodil.dsom.AbstractElementRef.lookupProperty(ElementRef.scala:31) at org.apache.daffodil.schema.annotation.props.FindPropertyMixin.findPropertyOption(PropertyScoping.scala:129) at org.apache.daffodil.schema.annotation.props.FindPropertyMixin.findPropertyOption$(PropertyScoping.scala:123) at org.apache.daffodil.dsom.AbstractElementRef.findPropertyOption(ElementRef.scala:31) at org.apache.daffodil.schema.annotation.props.gen.ParseUnparsePolicyMixin.optionParseUnparsePolicyLookup(GeneratedCode.scala:6171) at org.apache.daffodil.schema.annotation.props.gen.ParseUnparsePolicyMixin.optionParseUnparsePolicy(GeneratedCode.scala:6172) at org.apache.daffodil.schema.annotation.props.gen.ParseUnparsePolicyMixin.optionParseUnparsePolicy$(GeneratedCode.scala:6172) at org.apache.daffodil.dsom.AbstractElementRef.optionParseUnparsePolicy(ElementRef.scala:31) at org.apache.daffodil.dsom.ElementBase.defaultParseUnparsePolicy(ElementBase.scala:1266) at org.apache.daffodil.dsom.ElementBase.defaultParseUnparsePolicy$(ElementBase.scala:1266) at org.apache.daffodil.dsom.AbstractElementRef.defaultParseUnparsePolicy$lzycompute(ElementRef.scala:31) at org.apache.daffodil.dsom.AbstractElementRef.defaultParseUnparsePolicy(ElementRef.scala:31) at org.apache.daffodil.dsom.Root.rootParseUnparsePolicy$lzycompute(Root.scala:49) at org.apache.daffodil.dsom.Root.rootParseUnparsePolicy(Root.scala:49) at org.apache.daffodil.compiler.ProcessorFactory.x$2$lzycompute(Compiler.scala:86) at org.apache.daffodil.compiler.ProcessorFactory.x$2(Compiler.scala:84) at org.apache.daffodil.compiler.ProcessorFactory.generateUnparser$lzycompute(Compiler.scala:84) at org.apache.daffodil.compiler.ProcessorFactory.generateUnparser(Compiler.scala:84) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$unparser$1(Compiler.scala:106) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:594) at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:594) at org.apache.daffodil.compiler.ProcessorFactory.unparser$lzycompute(Compiler.scala:105) at org.apache.daffodil.compiler.ProcessorFactory.unparser(Compiler.scala:105) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$new$4(Compiler.scala:127) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.liftedTree1$1(OOLAG.scala:549) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny$lzycompute(OOLAG.scala:547) at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.valueAsAny(OOLAG.scala:544) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.$anonfun$checkErrors$2(OOLAG.scala:286) at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12) at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:286) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors$(OOLAG.scala:277) at org.apache.daffodil.dsom.SchemaComponentImpl.checkErrors(SchemaComponent.scala:38) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:345) at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError$(OOLAG.scala:344) at org.apache.daffodil.compiler.ProcessorFactory.super$isError(Compiler.scala:141) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:141) at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12) at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60) at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:132) at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12) at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58) at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64) at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:132) at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:359) at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:704) at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76) at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35) at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:703) at org.apache.daffodil.Main$.run(Main.scala:1158) at org.apache.daffodil.Main$.main(Main.scala:1351) at org.apache.daffodil.Main.main(Main.scala)",['beginner'],2019-10-03 00:42:02+00:00,2020-08-27 13:49:28+00:00,2020-11-20 15:36:30+00:00,Closed,13260219,DAFFODIL-2210
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"Attempts to twoPass test files with MAC style line endings (CR) results in a ""getSimpleText does not match"" error.",[],2019-10-02 15:48:31+00:00,2019-10-03 15:20:57+00:00,2021-05-20 12:33:51+00:00,Closed,13260133,DAFFODIL-2209
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Exerpts here from emails on the [dfdl-wg@ogf.org|mailto:dfdl-wg@ogf.org] mailing list.
{noformat}
Problem: simple format that is impossible to model

InboxxMike Beckerle <mbeckerle.dfdl@gmail.com> 1:47 PM (35 minutes ago)
to DFDL-WG 

I have a dead-simple little format:
    data/data/data/data
    data/data/data/data
it is lines of ""/"" separated strings. All elements are optional. 

I simply want this:
   data//data
to round trip. For that to happen I need it to parse into    <field>data</field><field></field><field>data</field>

That is, I require that empty field element in the middle to be created and put into the infoset.
I can find no way to do this. 

The
 strings have no initiator/terminator, so dfdl:emptyValueDelimiterPolicy
 is not relevant. All the elements are optional, so default values 
aren't relevant.
The spec states:

9.4.2.2      Simple element (xs:string or xs:hexBinary)

Required occurrence: If the element has a default value then an item is 
added to the infoset using the default value, otherwise an item is added
 to the Infoset using empty string (type xs:string) or empty hexBinary 
(type xs:hexBinary) as the value.

Optional occurrence: If dfdl:emptyValueDelimiterPolicy is not 'none'[12] then
an item is added to the Infoset using empty string (type xs:string) or empty hexBinary (type xs:hexBinary) as the value, otherwise nothing is added to the Infoset.
There
 are errata/actions to clarify wording here around 
dfdl:emptyValueDelimiterPolicy being in effect or not (because there is 
no initiator/terminator for it to use as opposed to the property in 
isolation just being 'none'). 
But that doesn't change anything about this issue.

If this very simple format is not possible, then we need a property or new property enum value that makes it possible. 

Thoughts?{noformat}
Subsequently to that I figured out what I believe is the spec flaw.

 
{noformat}
To start discussion on my own issue.....

The problem here may be that for a string (or hexBinary), if there is no initiator/terminator, there is no way to distinguish EmptyRep from NormalRep.

I.e., an empty string is a ""normal"" value for a string.

Sections 9.2.3 and 9.2.4 seem to define EmptyRep and NormalRep such that an empty string will be a EmptyRep, not a NormalRep.

However section 9.2.5 on zero-length says:

   ""The normal representation can be a zero-length representation if the type is xs:string or xs:hexBinary and there is no framing.""

That suggests that when there is no framing, a zero-length string is NormalRep, not EmptyRep, which is the opposite conclusion from what is in sections 9.2.3 and 9.2.4.

If this latter clarification is correct, then my format *should* work as I expect, because the empty string elements will be considered NormalRep and infoset values will be created for them.

It simply doesn't work because of a bug in daffodil which has not interpreted this correctly.{noformat}
That's the bug to fix: Strings and HexBinary with no framing are NormalRep, not EmptyRep.

 

Note that some tests in our test suite will have to be revised to take this into account.

Behavior for public schemas should not change, as the above behavior is all subject to the new property (still a proposal) dfdlx:emptyElementParsePolicy being ""treatAsEmpty"" (the enum names are subject to change).

The IBM-created schemas for EDIFACT and others depend on a behavior in IBM DFDL that we call dfdlx:emptyElementParsePolicy='treatAsMissing' (again enums subject to change). That behavior doesn't allow empty strings to be distinguished from absent strings. Under that policy the behavior of daffodil shouldn't change, so those schemas should still interoperate.

The need for this bug fix is so as to be able to implement a generic schema for a format called USMTF, which is unfortunately, not public. But the simplified examples above illustrate the issue.

 

 

 ",[],2019-09-26 18:34:51+00:00,2021-04-16 18:18:11+00:00,2021-04-16 18:37:14+00:00,Closed,13259113,DAFFODIL-2208
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Users were having trouble with nested choices.

The use case is messages where there is a choice by dispatch nested inside another choice that has an additional alternative to capture ""unrecognized"" messages.

This works, but we couldn't easily point at a test to be confident.

So we need to create a test suite for this pattern of usage.

It should also cover the situation where we have an external variable which controls whether an unknown message causes an error, or is captured as an ""unknown"" element type.",[],2019-09-26 01:30:54+00:00,2019-09-27 15:12:29+00:00,2021-05-20 12:33:46+00:00,Closed,13258937,DAFFODIL-2207
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The content from this page needs to be added to the user web site.

https://cwiki.apache.org/confluence/display/DAFFODIL/For+Contributors

This page exists on the wiki, but isn't the front page anymore, the content seems unlinked. A search for ""japanese"" of the wiki finds it, but there's no links to this. It belongs on the user wiki anyway.

 

 ",['beginner'],2019-09-20 13:09:19+00:00,,2021-02-18 20:06:37+00:00,Open,13257948,DAFFODIL-2206
Bug,[],sramaka,Shashi Ramaka,sramaka,Shashi Ramaka,Major,"This bug report is based on a message Roger Costello posted to the Daffodil Users group.

From the DFDL specification, when emptyValueDelimiterPolicy is set to 'none':
{quote}'none' indicates that if the content region is empty neither the

dfdl:initiator or dfdl:terminator must be present. On unparsing when

the content region is empty nothing will be output.
{quote}
 Based on the above, if in the schema an element has an initiator and a terminator, and if the emptyValueDelimiterPolicy is set to 'none', to represent an empty value neither the initiator nor the terminator should be present in the input.

 In the attached test case,
 * the element *MiddleName* has an initiator and a terminator
 * *emptyValueDelimiterPolicy* is set to 'none'
 * For the test input, John,,Doe we are getting the parse error: [error] Parse Error: Found out of scope delimiter: ',' ','
 * Test input John,(),Doe parses successfully

{code:xml}
  <xs:element name=""input"">
    <xs:complexType>
      <xs:sequence
          dfdl:separator="",""
          dfdl:separatorPosition=""infix""
          dfdl:separatorSuppressionPolicy=""trailingEmpty"">
        <xs:element
            name=""FirstName""
            type=""xs:string"" />
        <xs:element
            name=""MiddleName""
            type=""xs:string""
            dfdl:initiator=""(""
            dfdl:terminator="")""
            dfdlx:emptyElementParsePolicy=""treatAsEmpty""
            dfdl:emptyValueDelimiterPolicy=""initiator"" />
        <xs:element
            name=""LastName""
            type=""xs:string"" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

{code}
 

 Input:

John,(),Doe – parse successful

John,,Doe – Parse error.

[error] Parse Error: Found out of scope delimiter: ',' ','

 

 The files used for testing this scenario are attached.

 ",[],2019-09-18 22:08:38+00:00,,2019-12-23 16:08:55+00:00,Open,13257524,DAFFODIL-2205
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Not enough info to figure out what's wrong.

Need a hex dump as well as the quasi-text iso-8859-1 dump.",[],2019-09-17 23:39:35+00:00,2019-09-27 13:35:30+00:00,2021-05-20 20:01:18+00:00,Closed,13257238,DAFFODIL-2204
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,,[],2019-09-12 14:28:54+00:00,2021-02-18 20:04:54+00:00,2021-02-18 20:04:59+00:00,Closed,13256356,DAFFODIL-2203
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We have built a C code generator and runtime2 backend for Daffodil on a dedicated development branch.  Currently the C code generator implements a small but still functional subset of DFDL 1.0 for binary data:

- binary boolean, integer, and real numbers
- arrays of simple and complex elements
- choice groups using dispatch/branch keys
- validation of ""fixed"" attributes
- padding of explicit length complex elements with fill bytes

We have met the following acceptance criteria in order to submit a pull request to merge the runtime2-2202 development branch into the main branch:

- [X] Works on ""real"" messages with sufficient complexity to demonstrate functionality
- [X] Contains test schemas and TDML test cases covering all supported features
- [X] Fully integrates these tests into Daffodil's build process
- [X] Has instructions how to setup required C tool-chain elements on Linux and Windows

We are documenting reviewer requested changes in [Runtime2 ToDos|https://daffodil.apache.org/dev/design-notes/runtime2-todos/].  We plan to address these changes while continuing to build out the C code generator to implement more of the ""[Runtime 2|https://cwiki.apache.org/confluence/display/DAFFODIL/WIP%3A+Daffodil+Runtime+2] Design"" table.  Build requirements and instructions are in the top-level README.md and BUILD.md files.
",[],2019-09-12 14:02:13+00:00,2021-04-22 12:22:04+00:00,2021-05-12 19:40:40+00:00,Closed,13256352,DAFFODIL-2202
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"GraalVM is openjdk based. It *should* be able to run Daffodil as it can run Scala code.

It features mechanism to output native binaries which massively increases startup speed.

It supposedly also makes scalac and other scala things run faster than they do on ordinary openjdk.

We should evaluate it.",['beginner'],2019-09-11 22:52:43+00:00,,2021-02-04 21:30:10+00:00,Open,13256215,DAFFODIL-2201
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"In dfdlx.xsd there are two xs:import statements. These are importing schemas where the schemaLocation is the same directory where dfdlx.xsd resides. Hence, the schemaLocation attributes should just be the filenames, not ""xsd/filename.xsd"" as they are now. The ""xsd/"" prefix on the file names should be removed.

In XMLSchema_for_DFDL.xsd, there is an import of the dfdl namespace. This has no schemaLocation attribute. It should have schemaLocation=""DFDL_part3_model.xsd"".

 ",['pull-request-available'],2019-09-10 20:00:04+00:00,2019-09-27 13:25:02+00:00,2021-05-20 12:33:43+00:00,Closed,13255962,DAFFODIL-2200
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This schema fragment does not cause an SDE as required by the DFDL spec:

 
{code:java}
<xs:element name=""input"">
    <xs:complexType>
         <xs:sequence dfdl:initiatedContent=""yes"">
             <xs:element name=""A"" type=""xs:string"" dfdl:initiator=""%ES;"" />
         </xs:sequence>
     </xs:complexType>
 </xs:element>{code}
{color:#003296}Note that the DFDL spec says that when initiatedContent is yes, the initiator may not be empty string, but this is ambiguous. Clearly dfdl:initiator="""" is not allowed, but a check for dfdl:initiator=""%ES;"" should also be rejected. {color}

 

{color:#003296}Actually, dfdl:initiator=""%WSP*;"" should also be rejected in this case.{color}

 

{color:#003296}dfdl:initiator=""%ES;"" should uniformly, always be rejected, because it is meaningless in all cases. {color}",[],2019-09-10 19:34:30+00:00,2020-06-24 18:21:21+00:00,2020-06-24 18:21:21+00:00,Closed,13255958,DAFFODIL-2199
Improvement,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"In InfosetImpl.scala's sortChildNodesByPosition() we are creating a sorted copy of the childNodes, instead of sorting in place.  Scala 2.13 has a sortInPlace function for ArrayBuffers, so we should use that once it is available.",[],2019-09-10 11:38:58+00:00,,2019-09-10 11:38:58+00:00,Open,13255859,DAFFODIL-2198
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"An abort occurs with message ""There are no references to this component"" for schemas (e.g., VMF)

This should either be a warning, or should just be silently ignored.

 ",[],2019-09-06 20:17:40+00:00,2019-09-09 19:54:15+00:00,2021-05-20 12:34:54+00:00,Closed,13255358,DAFFODIL-2197
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The XML Schema for DFDL Schemas contains a broken, circular, type definition for boolean.

  !image-2020-09-14-15-15-08-117.png!",['beginner'],2019-09-06 17:53:00+00:00,2020-10-13 21:48:35+00:00,2020-11-19 15:00:54+00:00,Closed,13255338,DAFFODIL-2196
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"URLs stored for diagnostic purposes in compiled schemas contain absolute file names present in the compilation environment.

This is problematic because it leaks information such as the userID of whomever built it.

These URLs should be shortened to just be relative URLs and exclude a prefix of the directory structure so that part that is provided is meaningful and useful, but does not include home directory information of a user.

See related DAFFODIL-1200 and DAFFODIL-2072.",[],2019-09-04 15:29:33+00:00,,2019-12-23 16:08:53+00:00,Open,13254736,DAFFODIL-2195
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A buffered data outupt stream is backed by a growable ByteArrayOutputStream, which can only grow to 2GB in size. So if we ever try to write more than 2GB to a buffered output stream during unparse (very possible with large blobs), we'll get an OutOfMemoryError.

One potential solution is to be aware of the size of a ByteArrayOutputStream when buffering output and automatically create a split when it gets to 2GB in sizes. This will still require a ton of memory since we're buffering these in memoary, but we'll at least be able to unparse more than 2GB of continuous data. 

Note that we should still be able to unparse more than 2GB of data total, as long as there so single buffer that's more than 2GB.",[],2019-08-28 13:21:31+00:00,2019-12-09 21:59:11+00:00,2021-05-20 12:33:49+00:00,Closed,13253499,DAFFODIL-2194
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"{code}
3ABC
{code}
That data can be described with the following schema:
{code:xsd}
<xs:element name=""D""type=""xs:string""
    dfdl:lengthUnits=""characters""
    dfdl:lengthKind=""prefixed""
    dfdl:prefixLengthType=""D-type""
    dfdl:prefixIncludesPrefixLength=""no""/>

<xs:simpleType name=""D-type""
    dfdl:lengthKind=""explicit""
    dfdl:length=""1""> 
  <xs:restrictionbase=""xs:integer""/>
</xs:simpleType>
{code}

DAFFODIL-114 added support for lengthKind=""characters"", but upon testing it looks like it created an Assert.invariant if the lengthKind=""characters"" for a prefixed length element. On 2.4.0, that invariant doesn't happen, but the lenght is calculated incorrectly. In 2.4.0, it only parses a single character, even though the prefix length is 3.

Also see related DAFFODIL-2029, which is to add support for unparsing lengthKind=""characters"" prefixed length elements.

If we don't support this yet, we might just want to make it a notYetImplemented error.",[],2019-08-28 11:27:55+00:00,,2020-02-07 17:18:33+00:00,Open,13253481,DAFFODIL-2193
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"There are some schemas where the following incorrect warning is displayed:
{quote}
Schema Definition Warning: Neighboring QNames differ only by namespaces. Infoset representations that do not support namespacess cannot differentiate between these elements and may fail to unparse. QNames are: {}DupElement, {}DupElement
{quote}
This original was noticed on the BMP schema, but it has been seen in other schemas. A minimal schema that reproduces the is:
{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" elementFormDefault=""qualified"">

  <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd""/>

  <xs:annotation>
    <xs:appinfo source=""http://www.ogf.org/dfdl/"">
      <dfdl:format ref=""GeneralFormat"" representation=""binary""/>
    </xs:appinfo>
  </xs:annotation>

  <xs:element name=""root"">
    <xs:complexType>
      <xs:sequence>
        <xs:choice>
          <xs:element ref=""branch1""/>
          <xs:element ref=""branch2""/>
          <xs:element ref=""branch3""/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name=""branch1"">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref=""group1""/>
        <xs:element name=""otherElement"" type=""xs:int""/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name=""branch2"">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref=""group1""/>
        <xs:group ref=""group2""/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name=""branch3"">
    <xs:complexType>
      <xs:sequence>
        <xs:group ref=""group1""/>
        <xs:group ref=""group2""/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:group name=""group1"">
    <xs:sequence>
      <xs:element name=""elementOfInterest"" type=""xs:int""/>
    </xs:sequence>
  </xs:group>

  <xs:group name=""group2"">
    <xs:sequence>
      <xs:element name=""dupElement"" type=""xs:int""/>
    </xs:sequence>
  </xs:group>

</xs:schema>
{code}

From what I can tell, the issue has to do when determining the elements that could possibly appear after {{elementOfInterest}}. It's not clear to me why {{branch1}} needs to exist to trigger this, but is is. However, the generic {{elementOfInterest}} could potentially be followed by two two elements:
# {{branch1/group[1]/dupElement}}
# {{branch2/group[1]/dupElement}}.

It is true that both these elements have the same namespace and have the same name, so the arning sortof makes sense. But there is actually no way for any confusion to occur when unparsing, since {{dupElement}} always appears after {{elementOfInterest}} in separate branches ({{branch1}} vs {{branch2}}). So this error is just confusing.

Furthermore, there may actually be a real problem here when unparsing. In this case, it looks like the two {{dupElement}}s have completely different instances with different ERDS. This means that during unparsing, when trying to determine which ERD is next after unparsing {{elementOfInterest}}, it will be ambiguous which ERD to unparse, and this could potentially cause unparse errors, or even the inability to unparse in certain branches.

This may have implications with how DAFFODIL-1444 is implemented, since the same element could have different {{potentialNextElements}} based on which branch the element is referenced. And potentialNextElements is used during unparsing, so it almost seems this needs to be branch aware...

This bug looks to be added in commit ae3fba0a08cb: Incremental progress on schema compilation space/speed issue.",[],2019-08-21 15:27:41+00:00,2019-11-22 19:25:11+00:00,2021-05-20 12:33:55+00:00,Closed,13252160,DAFFODIL-2192
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Diagnostic warning about alignment is issued for attached schema and TDML, but if you remove the maxOccurs=""unbounded"" from Section 3, then there is no warning.

So we get the warning for dfdl:occursCountKind=""implicit"" when maxOccurs=""unbounded"" but not when bounded.

 ",[],2019-08-05 17:56:12+00:00,,2019-12-23 16:08:51+00:00,Open,13248940,DAFFODIL-2191
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor," 
{code:java}
[warning] Schema Definition Warning: Section_3 is an optional element or a variable-occurrence array and its alignment (1) is not the same as group[4]'s alignment (8).{code}
 

{color:#333333}In the schema associated with this message, there is only one group definition, and the group reference referring to it is the 4th child of the enclosing element, but it is a xs:sequence with dfdl:hiddenGroupRef.{color}

{color:#333333}Referring to this as ""group[4]"" is not helpful. Some sort of schema component ID, or an XPath that identifies the component at issue usefully is required. {color}

 ",['beginner'],2019-08-05 17:02:51+00:00,,2021-02-04 21:25:10+00:00,Open,13248928,DAFFODIL-2190
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I tried to trace a round-trip test. The parse side works. The unparse does not.
{code:java}
org.apache.daffodil.exceptions.Abort: Invariant broken: org.apache.daffodil.util.Maybe.WithNulls.isDefined[org.apache.daffodil.infoset.DINode](UState.this.currentInfosetNode)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.processors.unparsers.UState.infoset(UState.scala:124)
org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoInfoset$.act(InteractiveDebugger.scala:1506)
org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.$anonfun$act$20(InteractiveDebugger.scala:1209)
    at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
    at org.apache.daffodil.processors.unparsers.UState.infoset(UState.scala:124)
    at ....
{code}",['beginner'],2019-07-26 19:06:08+00:00,,2021-02-04 21:21:35+00:00,Open,13247400,DAFFODIL-2189
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"In working with DFDL schemas that use the inputTypeCalc function, it is sometimes passed a java.math.BigInteger (aka JBigInt by our conventions), when what is stored in the hash-table it uses are scala.math.BigInt objects.

 ",[],2019-07-26 18:25:00+00:00,2019-12-19 20:17:50+00:00,2021-05-20 12:34:41+00:00,Closed,13247390,DAFFODIL-2188
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The volume of output created by sbt it:test is so large that when something fails in a travis CI build, it is almost impossible to see what went wrong.

Most of this output is created by tests that turn on various levels of logging that really aren't relevant any more.

Tests that turn on debug or oolagdebug level of detail should be revisited to see whether they should still be run with those settings off, or just disabled.",[],2019-07-23 11:45:15+00:00,2020-06-24 18:21:20+00:00,2020-06-24 18:21:20+00:00,Closed,13246545,DAFFODIL-2187
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Some things cannot be reasonably expressed in DFDL's DPath expression language.

A good example of this is the abililty to convert between elevation measured in height above geoid (aka elevation above mean sea level or MSL), and height-above-elipsoid or HAE. This requires a table of numbers and interpolation. Nevertheless a DFDL schema needs to convert units of measure and it is very convenient to have the output of a DFDL parse to be normalized into a desired unit of measure.

The ability to define a function in a separate jar library, and call it from a DPath expression, having registered it somehow so Daffodil can find it, is what I'm calling a user-defined function.

 

 

 ",[],2019-07-22 20:38:58+00:00,2019-11-08 16:30:37+00:00,2020-04-13 19:21:43+00:00,Closed,13246412,DAFFODIL-2186
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A variety of formats require some odd character encodings. These need to be added.

A 2-bit encoding which can produce character 0, 1, 2, 3 is needed.

A 3-bit octal variant which roduces 1 to 8 (not 0 to 7)

And several others are needed for data formats such as link16.

 ",[],2019-07-22 17:45:45+00:00,2019-08-09 16:41:38+00:00,2021-05-20 20:01:32+00:00,Closed,13246376,DAFFODIL-2185
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"user reports this diagnostic, which in prior revisions of Daffodil would have had a line number in it.

 
{code:java}
[error] Parse Error: Assertion failed: { . eq 9 } failed

Schema context: HiddenLabel Location in test.dfdl.xsd

Data location was preceding byte 1
{code}
 

this is pretty egregious if no assert failures get line numbers any more.",[],2019-07-16 18:11:21+00:00,2019-07-17 15:40:09+00:00,2019-07-17 15:40:14+00:00,Closed,13245298,DAFFODIL-2184
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"This schema uses a nillable complex element.
{code:java}
<xs:element name=""input"">
     <xs:complexType>
         <xs:sequence dfdl:separator=""%NL;"" dfdl:separatorPosition=""infix"">
             <xs:element name=""person"" maxOccurs=""unbounded"" dfdl:occursKind=""implicit"" dfdl:initiator=""Person:"" nillable=""true"" dfdl:nilValue=""%ES;"" dfdl:nilValueDelimiterPolicy=""initiator"">
                 <xs:complexType>
                     <xs:sequence dfdl:separator="","" dfdl:separatorPosition=""infix"">
                         <xs:element name=""name"" type=""xs:string"" />
                         <xs:element name=""age"" type=""xs:string"" />
                     </xs:sequence>
                 </xs:complexType>
             </xs:element>
         </xs:sequence>
     </xs:complexType>
 </xs:element>{code}
Parsing this data:

 
{code:java}
Person:John Doe,29
Person:Sally Smith,34
Person:
Person:Bob Jones,51{code}
 

 That produces this infoset when parsing:
{code:java}
<input xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
   <person>
     <name>John Doe</name>
     <age>29</age>
   </person>
   <person>
     <name>Sally Smith</name>
     <age>34</age>
   </person>
   <person xsi:nil=""true""></person>
   <person>
     <name>Bob Jones</name>
     <age>51</age>
   </person>
 </input>{code}
Unparsing dies with error:
{code:java}
Unparse Error: Element {}person does not have a value.{code}",[],2019-07-16 14:57:13+00:00,2021-05-06 14:34:52+00:00,2021-05-20 12:34:25+00:00,Closed,13245236,DAFFODIL-2183
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"See test_array_self_expr1.

I believe when an element is an array, that .[i] should be meaningful.

It appears that the DPath compiler is creating an implementation that just gets the value of the current element ignoring the indexing.

 ",[],2019-07-12 19:20:38+00:00,,2021-02-04 21:20:32+00:00,Open,13244685,DAFFODIL-2182
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-07-12 16:55:20+00:00,2019-07-15 12:40:49+00:00,2021-05-20 12:34:05+00:00,Closed,13244653,DAFFODIL-2181
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Experimental features are supposed to have a property that enables/disables them.

Layering does not currently have such a property.

TypeCalc and enums feature also needs to have such.

hexBinary with length in bits also.

There may be others. They should all get added en-masse, not one by one.

 ",[],2019-07-11 17:44:29+00:00,2019-07-11 17:49:15+00:00,2019-07-11 17:49:23+00:00,Closed,13244428,DAFFODIL-2180
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Daffodil has numerous dfdlx features.

These do have documentation scattered on the developers wiki under design notes, and intermixed with other things that aren't documentation users would need. Users aren't going to be able to find this.

Since these are dfdlx features, a wiki page with links to their doc is the right thing, but we should have a link on the user web site that reaches this summary page, with links to all the dfdlx extension page wiki pages.  Copious warnings about ""subject to change without backward compatibility support."" can then be clearly displayed, and the dfdlx features can be grouped into those we want people to experiement with, and those we don't (which we might possibly just decide not to mention at all.)

The above is intended to add minimum work to adding a dfdlx extension to DFDL while giving users a clue about dfdlx features they may see in a DFDL schema, or need to use.",[],2019-07-03 14:28:58+00:00,,2021-03-10 16:49:58+00:00,Open,13243017,DAFFODIL-2179
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"TravisCI is somewhat unreliable. We've have lots of issues with random test freezes or issues installing the right Java version. We have an azure pipelines config, but that cannot be enabled on the main repo since it requires write access, which ASF will not allow.

Another alternative is ASF jenkins. We should look into enabling that for our continuous integration: https://builds.apache.org/",[],2019-07-03 11:36:34+00:00,2020-05-01 15:54:50+00:00,2020-11-19 15:09:53+00:00,Closed,13242979,DAFFODIL-2178
Documentation,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"The current proposal for enumerations and typeCalcs has become outdated [https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+Feature+to+support+enumerations+and+typeValueCalc]

It still shoes many of the DPath functions having a separate *Int and *String version, which is no longer true. There may be additional changes that need to be reflected as well.",[],2019-07-03 02:32:28+00:00,,2020-10-05 22:02:23+00:00,Open,13242875,DAFFODIL-2177
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"In DPathRuntime, runExpressionForConstant uses exceptions to signal when the expression in question cannot be compiled to a constant. 

In most cases, this exception would be either InfosetException or VariableException, which are expected, as the core reason an expression cannot be reduced to a constant would be a dependence on the infoset or DFDL variables.

However, we also check for IllegalStateException, which could also be thrown as a result of a geniune error. We should track down why we need to catch this exception and replace it with a more appropriate type.

I suspect that all the usages of IllegalStateException that we need to catch, are throwing it explictly as a sentinal to trigger runExpressionForConstant to bail, so this should be straightforward.",[],2019-07-02 19:04:12+00:00,,2021-02-04 21:18:29+00:00,Open,13242828,DAFFODIL-2176
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The daffodil site has a link to XML Calabash from the Getting Started page which is actually to the NiFi integration.

We should fix this, or redirect people to the parent where all the NCSA-hosted extensions are.",[],2019-07-02 14:01:54+00:00,2019-10-17 22:41:58+00:00,2021-05-20 12:34:15+00:00,Closed,13242764,DAFFODIL-2175
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-07-02 14:01:23+00:00,2019-07-03 11:27:46+00:00,2021-05-20 12:34:52+00:00,Closed,13242763,DAFFODIL-2174
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"Data dumps print out bytes without regard to the bit offset. So if some bits have already been consumed, the dumps might include those already consumed bits.

Ideally we would like to be bit sensitive. A possible solution would be to track if the first byte of the left over data, already had consumed bytes i.e ended mid-byte, and only display those non consumed bits. That is, if the data ended at bit 5, and bit order is mostSignificantBitFirst, then this picture would look like xxxxx000 (where the 0's are the actual left over data bits in that first byte of the left over data.) If bitOrder is leastSignificantBitFirst the picture would look like 000xxxxx.

inStream.fillByteArray takes the bit offset into accound and can be utilized.",[],2019-06-28 16:58:48+00:00,2019-07-10 16:04:12+00:00,2021-05-20 12:34:56+00:00,Closed,13242196,DAFFODIL-2173
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"This seems mostly related to some of the recent typeCalc stuff, but Scala's BigInt is sneaking into the system and causing issues.",[],2019-06-28 16:05:23+00:00,2020-05-01 15:26:12+00:00,2021-05-20 12:34:33+00:00,Closed,13242184,DAFFODIL-2172
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When scanning for delimiters, we can sometimes scan for delimiters that we shouldn't. See test {{delmiterScanning_03}} in {{SequenceGroupDelimiters.tdml}} as an example where we scan for comma separator that, while it is in scope, should be ignored because the element is the last in the sequence with an infix separator.

I've confirmed that the DelimitedStringParser scans for and finds the wrong delimiter, but it's possible that this is a problem in the delimiter stack. Perhaps we need to manipulate the delimiter stack when we determine that the current scope of delimiters should be ignored due to being the last in the sequence? With the correct stack, all the delimiter scanning and delimite consuming sould just work.",[],2019-06-28 13:14:08+00:00,,2021-02-04 21:16:56+00:00,Open,13242162,DAFFODIL-2171
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The DFDL Workgroup has concluded that this feature is on the list for DFDL v2.0. (Few things that don't have multiple implementations are going to be added to DFDL v1.0 any more.)

That means this has to become an experimental feature which means it has to have a property for enabling/disabling it.",[],2019-06-27 17:57:27+00:00,,2021-02-04 21:14:56+00:00,Open,13242007,DAFFODIL-2170
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Currently our DPath runtime (and, I believe, main infoset) pass around values of type AnyRef, which affords almost no protection through the Scala type system.

This was done to avoid the boxing overhead normaly associated with creating case classes. However, it should be possible to create an unboxed type that can provide some level of type safety. 

Simmilar to our current Maybe type, can can create a new value type that wraps AnyRef. Being a value type, it will not require boxing. We can then make the main constructor hidden, and provide constructors only for those types that we want to allow as DPath variables.

This should provide us type safty in assiging to DPath variables. Reading the values will still involve dealing with AnyRef however.",[],2019-06-27 16:52:11+00:00,2019-12-18 21:27:15+00:00,2021-05-20 20:01:37+00:00,Closed,13241996,DAFFODIL-2169
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"Certain unicode characters are [combining characters|https://en.wikipedia.org/wiki/Combining_character] and can combine with the characters surrounding them, modifying them. This can lead to misalignment in our debugger.

A possible solution could be to detect when a character is a non-spacing
 (or other combining character) and insert the appropriate number of spaces around it. Java's Character.getType method will return an enum about what type a character is. Many of these character types might need this alignment assistance.

Attached is a pictorial example of the problem and the files that can be used to recreate the issue. 

Command run:
{code:java}
daffodil --trace parse -Dtransport:Protocol=6 transport:DataLength=79 -s tcp.dfdl.xsd test.dump{code}",[],2019-06-26 16:13:42+00:00,2019-07-22 18:30:11+00:00,2021-05-20 12:34:12+00:00,Closed,13241744,DAFFODIL-2168
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"Fails with the following exception:
{code:java}
java.lang.ClassCastException: org.apache.daffodil.infoset.DISimple cannot be cast to org.apache.daffodil.infoset.DIArray, took 7.024 sec
[error] at org.apache.daffodil.infoset.InfosetInputter.handleStartElement(InfosetInputter.scala:311)
[error] at org.apache.daffodil.infoset.InfosetInputter.reallyFill(InfosetInputter.scala:262)
[error] at org.apache.daffodil.infoset.InfosetInputter.fill(InfosetInputter.scala:247)
[error] at org.apache.daffodil.util.CursorImplMixin.doAdvance(Cursor.scala:226)
[error] at org.apache.daffodil.util.CursorImplMixin.advance(Cursor.scala:176)
[error] at org.apache.daffodil.util.CursorImplMixin.advance$(Cursor.scala:173)
[error] at org.apache.daffodil.infoset.InfosetInputter.advance(InfosetInputter.scala:54)
[error] at org.apache.daffodil.processors.unparsers.UStateMain.advance(UState.scala:483)
[error] at org.apache.daffodil.util.Cursor.advanceMaybe(Cursor.scala:118)
[error] at org.apache.daffodil.util.Cursor.advanceMaybe$(Cursor.scala:117)
[error] at org.apache.daffodil.processors.unparsers.UState.advanceMaybe(UState.scala:72)
[error] at org.apache.daffodil.processors.unparsers.UStateMain.advanceOrError(UState.scala:501)
[error] at org.apache.daffodil.processors.unparsers.OVCStartEndStrategy.unparseBegin(ElementUnparser.scala:476)

 {code}",[],2019-06-26 13:11:27+00:00,2019-06-27 12:20:33+00:00,2021-05-20 12:33:49+00:00,Closed,13241714,DAFFODIL-2167
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"TravisCI tries to download Oracle JDK 11 from oracles website. Recently Oracle updated something and now that download fails:

[https://travis-ci.community/t/cannot-install-oracle-jdk-11/3892]

Reports are that OpenJDK11 works fine, and is virtually the same. We should just swith to that.",[],2019-06-26 11:20:07+00:00,2019-06-26 13:57:06+00:00,2021-05-20 12:34:53+00:00,Closed,13241691,DAFFODIL-2166
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"For reasons of type safety, most of the functions relating to typeCalc are specialized by their return type. Currently, only Integer and String functions are defined.

This leave a clear gap where Double is missing, which would be nessasary to use this feature to support a unit-normalization use-case (eg. mil-std style DFI DUI, where degrees may be specified in units of 1/2^n . It is natural to intereperat this using a Int -> Double typeCalc. 

In theory, we need functions for all primitive types. However, I believe Double should be sufficient for most usecases.",[],2019-06-25 15:26:39+00:00,2019-07-03 02:29:23+00:00,2021-05-20 20:01:34+00:00,Closed,13241515,DAFFODIL-2165
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,,[],2019-06-24 14:58:00+00:00,2019-06-27 13:52:48+00:00,2021-05-20 20:01:32+00:00,Closed,13241273,DAFFODIL-2164
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"This seems potentially related to DAFFODIL-2162. That issue was resolved, but it now results in a warning about dfdl:choiceBranchKey property is unused. The tests clearly show that direct dispatch works so the branch key isn't actually usnused. Perhaps the property is being cached on something that we aren't looking at to see which properties have been used, or the property is being used in a way that isn't caching at all.",[],2019-06-21 16:23:34+00:00,2019-06-26 17:02:30+00:00,2021-05-20 12:33:41+00:00,Closed,13240911,DAFFODIL-2163
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"This schema has a direct dispatch where a choice branch is an array:
{code:xml}
  <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />

  <xs:annotation>
    <xs:appinfo source=""http://www.ogf.org/dfdl/"">
      <dfdl:format ref=""ex:GeneralFormat""
          lengthKind=""implicit""
          representation=""binary"" />
    </xs:appinfo>
  </xs:annotation>

  <xs:element name=""root"">
    <xs:complexType>
      <xs:sequence>
        <xs:element name=""index"" type=""xs:int"" />
        <xs:choice dfdl:choiceDispatchKey=""{ xs:string(./index) } "">
          <xs:element name=""values1"" type=""xs:int"" minOccurs=""1"" maxOccurs=""2"" dfdl:choiceBranchKey=""1"" />
          <xs:element name=""values2"" type=""xs:int"" dfdl:choiceBranchKey=""2"" />
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
{code}

{quote}
org.apache.daffodil.exceptions.Abort: Not to be called on choice branches.
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.exceptions.Assert$.usageError(Assert.scala:117)
org.apache.daffodil.dsom.ChoiceBranchImpliedSequence.emptyFormatFactory(SequenceGroup.scala:413)
org.apache.daffodil.dsom.AnnotatedMixin.$anonfun$formatAnnotation$1(AnnotatedSchemaComponent.scala:352)
	at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
	at org.apache.daffodil.exceptions.Assert$.usageError(Assert.scala:117)
	at org.apache.daffodil.dsom.ChoiceBranchImpliedSequence.emptyFormatFactory(SequenceGroup.scala:413)
	at org.apache.daffodil.dsom.AnnotatedMixin.$anonfun$formatAnnotation$1(AnnotatedSchemaComponent.scala:352
 ...
{quote}

If i remove the choice dispatch or change maxOccurs=""1"" the exception goes away.",[],2019-06-20 19:26:26+00:00,2019-06-21 14:07:59+00:00,2021-05-20 12:34:05+00:00,Closed,13240719,DAFFODIL-2162
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If a branch of a direct dispatch choice has the dfdl:inputValueCalcProperty, you get an error that contains the SSCD, which for a very deeply nested choice is not all that short. For example:
{quote}
[error] Schema Definition Error: Branch of choice foo::LocalComplexTypeDef::sequence[1]::foo::LocalComplexTypeDef::sequence[1]::choice[2]::baz cannot have the dfdl:inputValueCalc property.
{quote}

The SchemaContext provides enough information to figure out where the offending element is, so this provides no extra information and is too verbose. We should just remove the sscd from this error.",['beginner'],2019-06-20 18:39:43+00:00,,2021-02-04 21:13:02+00:00,Open,13240713,DAFFODIL-2161
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,Update .gitignore to include vim temp files.,[],2019-06-20 16:37:28+00:00,2019-06-21 14:23:48+00:00,2021-05-20 20:01:21+00:00,Closed,13240694,DAFFODIL-2160
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When a TDML file has an embedded schema, the TDML Runner creates a temporary schema file and then compiles and uses that for running a parse/unparse tests. However, when there is an error, the error message does not reference the TDML file but instead references the temporary schema file. This isn't heplful, especially since the temp file is usually deleted.

We need to make sure that the TDML runner is correctly setting the dafint file name attribute on the generated schema, and that that file name is used for error messages.",['beginner'],2019-06-20 13:27:39+00:00,,2021-02-18 13:46:48+00:00,Open,13240647,DAFFODIL-2159
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Look at the DFDLSchemas/MagVar project.

In that schema, which is siimple fixed-length data, there are columns of integers (xs:int) and of floats.

The textNumberPattern *was* ""###0.0###;-###0.0###"".

When I tested this for portability with IBM DFDL, it errored because the xs:int elements were unparsing as 0.0, 1.0, not just 0, or 1.  One of the integer columns is only 2 characters wide, so even 0.0 doesn't fit and was giving a runtime error.

So I had to introduce a separate named DFDL format so that the integer elements and the float elements could have different textNumberPattern values, because the integers need ""###0.###;-###0.###"", the floats need the pattern above to work right.

So now it works portably.

But.... why didn't Daffodil unparse the integers as 0.0, 1.0, and so forth the way IBM DFDL did? It seems Daffodil is somehow not using the textNumberPattern for these integers.

And that seems like a bug to me.",[],2019-06-19 22:13:25+00:00,,2019-07-03 12:52:56+00:00,Open,13240517,DAFFODIL-2158
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"[https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+choiceBranchKeyRanges]

This is analogous to the existing repValueRanges, and complements the choiceBranchKeys annotation to allow for an efficient annotation of a large number of sequential branch integer keys.",[],2019-06-19 17:44:30+00:00,2019-06-27 13:54:13+00:00,2021-05-20 20:01:17+00:00,Closed,13240470,DAFFODIL-2157
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Some failures have crept into this test suite, which used to work portably on daffodil and IBM DFDL via the cross-tester.

 ",[],2019-06-19 17:11:46+00:00,2019-06-21 14:08:34+00:00,2021-05-20 12:33:59+00:00,Closed,13240464,DAFFODIL-2156
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Link16 (mil-std-6016) reivisionf1 makes use of a non-standard 6 bit character encoding not currently support by Daffodil.

While this encoding is used by other elements, for lack of a better name, I intend to refer to it by an arbitrary element that uses it: DFI311 DUI002",[],2019-06-18 18:24:26+00:00,2019-06-20 16:19:59+00:00,2021-05-20 20:01:41+00:00,Closed,13240257,DAFFODIL-2155
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Another bug identified using EDIFACT.

See test test_edifact1a in section13 tests on nillables.

The problem was that a complex element that is optional was being omitted from the infoset (removed), if it was zero-length regardless of whether it had nilled child elements that were NOT defaulted.",[],2019-06-18 15:14:56+00:00,2019-06-19 17:14:25+00:00,2021-05-20 12:35:00+00:00,Closed,13240228,DAFFODIL-2154
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"The attached schema triggers an uncaught StackOverflowError.

The attached schema happens to be invalid due to ripping out just the offending line (which now references non-existing elements). Ignoring those problems, it is probably still reasonable to refuse to compile the attached schema just because the expression is so long that I suspect the runtime performance to be such that no one actually will want to use it.

 

Interestingly, attempting to remove the dfdl:outputTypeCalcInt turns this into an SDE. This might be because I accidently mis-balanced paranthesies allowing the parser to fail normally before overflowing.
{quote}Exception in thread ""main"" java.lang.StackOverflowError
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.WholeExpression.text(Expression.scala:576)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText$lzycompute(Expression.scala:146)
 at org.apache.daffodil.dpath.Expression.wholeExpressionText(Expression.scala:146)
 at org.apache.daffodil.dpath.StepExpression.relPathErr(Expression.scala:849)
 at org.apache.daffodil.dpath.Up.$anonfun$stepElement$8(Expression.scala:1025)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dpath.Up.stepElement$lzycompute(Expression.scala:1025)
 at org.apache.daffodil.dpath.Up.stepElement(Expression.scala:1013)
 at org.apache.daffodil.dpath.NamedStep.$anonfun$stepElement$18(Expression.scala:1151)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dpath.NamedStep.stepElement$lzycompute(Expression.scala:1150)
 at org.apache.daffodil.dpath.NamedStep.stepElement(Expression.scala:1134)
 at org.apache.daffodil.dpath.StepExpression.inherentType$lzycompute(Expression.scala:946)
 at org.apache.daffodil.dpath.StepExpression.inherentType(Expression.scala:943)
 at org.apache.daffodil.dpath.PathExpression.inherentType$lzycompute(Expression.scala:721)
 at org.apache.daffodil.dpath.PathExpression.inherentType(Expression.scala:721)
 at org.apache.daffodil.dpath.ParenthesizedExpression.inherentType(Expression.scala:2201)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject$lzycompute(Expression.scala:1563)
 at org.apache.daffodil.dpath.FunctionCallExpression.functionObject(Expression.scala:1333)
 at org.apache.daffodil.dpath.FunctionCallExpression.text(Expression.scala:1314)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.ParenthesizedExpression.text(Expression.scala:2203)
 at org.apache.daffodil.dpath.IfExpression.text(Expression.scala:651)
 at org.apache.daffodil.dpath.FunctionCallBase.$anonfun$text$2(Expression.scala:1711)
 at scala.collection.immutable.List.map(List.scala:283)
 at org.apache.daffodil.dpath.FunctionCallBase.text(Expression.scala:1711)
{quote}",[],2019-06-12 15:06:05+00:00,,2021-02-04 21:09:23+00:00,Open,13239068,DAFFODIL-2153
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Scala 2.13 has been released and has some nice updates: https://github.com/scala/scala/releases/tag/v2.13.0

We should enable cross compilation support for it.",[],2019-06-11 15:06:06+00:00,,2021-02-04 21:08:05+00:00,Open,13238791,DAFFODIL-2152
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"We need a way to specifcy some form of compatability mode that will disable or enable certain features of Daffodil so a user can be alerted if their schema may not be portable.

See comments in DAFFODIL-2096 for original and more detailed discussions.

",['beginner'],2019-06-11 12:30:57+00:00,,2021-02-04 21:15:22+00:00,Open,13238757,DAFFODIL-2151
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If a schema has a need for the emptyElementParsePolicy property, but it's not defined, you end up with a lot of duplicate warnings like:
{quote}
[warning] Schema Definition Warning: Property 'dfdl:emptyElementParsePolicy' is required but not defined, using tunable 'treatAsEmpty' by default.
{quote}
This warning is helpful, but it is repeated for what seems like every element in the schema, which makes it not very user friendly.

Maybe we should only record the first instance of each WarnID, but add a warning that other instances were hidden. And add a tunable flag to enable recording of all instances if the user wants it all.

Additinoally or alternatively, we might want to think about not recording warnings at all for extensions. They are extensions after all. If someone's schema is DFDL v1.0 compliant, there's an argument that we shouldn't output warnings for things related to extensions. ",[],2019-06-10 17:31:21+00:00,2019-06-18 18:39:12+00:00,2021-05-20 12:34:26+00:00,Closed,13238600,DAFFODIL-2150
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"DAFFODIL-598 modified the DFDL schema to support schema validation of short-form and attribute-form properties. However, it is not possible to use schema validation to validate element-form properties. As described in DAFFODIL-598:

The fix for this problem should be to modify the propgen.scala properties code generator to generate a validator for element-form annotations. Then this code can be explicitly called in the front end as each element-form construct is encountered.",[],2019-06-10 17:05:28+00:00,,2021-02-04 21:06:29+00:00,Open,13238587,DAFFODIL-2149
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Consider schema such as:
{quote}<xs:simpleType name=""nonExistantTypeCalc"" type=""xs:int"" dfdl:lenthKind=""explicit"" dfdl:length=""1"" />
 <xs:element name=""root"" type=""xs:int"" dfdl:inputValueCalc=""\{ dfdl:inputTypeCalcInt('tns:nonExistantTypeCalc', 0) }""/>
{quote}
Or
{quote}<xs:element name=""root"" type=""xs:int"" dfdl:inputValueCalc=""\{ dfdl:inputTypeCalcInt('tns:nonExistantType', 0) }""/>
{quote}
In principle, it should be possible to report this as an SDE at compile time. However, at the moment no error is reported until the expression is evaulated at runtime.",[],2019-06-07 17:06:06+00:00,2019-07-03 02:18:48+00:00,2021-05-20 12:34:06+00:00,Closed,13238256,DAFFODIL-2148
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Wrong default for this. It is ""0"" which means even if the textNumberPattern specifies say, ##0.00## a zero value unparses as ""0"", not ""0.00"".

The right default for this is empty string - no special zero rep, not ""0"".

 ",[],2019-06-07 01:09:16+00:00,,2021-02-04 21:05:57+00:00,Open,13238089,DAFFODIL-2147
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Bug in the new enum support system.

The schema: 
{quote}<xs:simpleType name=""f"" dfdl:repType=""xs:int"">
 <xs:restriction base=""xs:string"">
 <xs:enumeration value=""one"" dfdl:repValues=""1""/>
 <xs:enumeration value=""zero"" dfdl:repValues=""0""/>
 </xs:restriction>
 </xs:simpleType>

<xs:element name=""a"" type=""xs:string"" dfdl:inputValueCalc=""\{dfdl:inputTypeCalcString('tns:f',0)}"" />
{quote}
fails to compile with:
{quote}Schema Definition Error: Identity transform requires that the basetype and reptype have a common primitive type
{quote}
 ",[],2019-06-06 20:24:57+00:00,2019-06-10 17:53:18+00:00,2021-05-20 12:34:44+00:00,Closed,13238035,DAFFODIL-2146
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"DAFFODIL-1652 removed the follwoing scalac flag warnings when adding suport for scala 2.12 because the build flags changed:

* -Ybackend:GenBCode
* -Ydead-code
* -Yinline
* -Yinline-warnings
* -Yopt:inline-global
* -Yopt-warnings
* -Ywarn-inaccessible
* -Ywarn-infer-any
* -Ywarn-nullary-override
* -Ywarn-unused
* -Ywarn-unused-import

In some of these cases scala 2.12 just changed the name of the warning (e.g. -Ywarn-unused-import became -Ywarn-unused:imports). We should find the equivalent 2.12 warnings if they exist and add conditional logic to apply the correct flags based on scala version a scala version.",['beginner'],2019-06-06 19:17:34+00:00,,2021-04-21 16:53:25+00:00,Open,13238024,DAFFODIL-2145
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The example build.sbt is the old-style.

We should update to the new style.",['beginner'],2019-06-06 14:17:59+00:00,2021-02-26 17:45:07+00:00,2021-03-02 12:56:19+00:00,Closed,13237972,DAFFODIL-2144
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"EDIFACT uses sequences which have dfdl:initiatedContent=""yes"" but one or more of the child elements of the sequence is required, not optional.

Daffodil appears to execute a discriminator=true behavior even for these required elements, which means the point of uncertainty being discriminated is some enclosing one, as the element itself in the sequence doesn't have one.

The DFDL Spec clearly says that the initiatedContent only affects optional elements.

The right thing is for a required child to ignore initiatedContent.

If all children of a sequence are required and the sequence has initiatedContent, that should at least be a warning, because the initiatedContent property would then be entirely ignored. This case does come up in EDIFACT.

 ",[],2019-06-05 20:28:27+00:00,2019-06-19 17:14:53+00:00,2021-05-20 12:33:53+00:00,Closed,13237811,DAFFODIL-2143
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"If you put an annotation block inside a complex type, it is silently ignored.

E.g.,
{code:java}
 <xsd:element name=""ORDCHG"">
                <xsd:complexType>
                  <xsd:annotation>
                    <xsd:appinfo source=""http://www.ogf.org/dfdl/"">
                      <dfdl:assert>
                        {fn:contains(../UNH/S009,'ORDCHG')}
                      </dfdl:assert>
                    </xsd:appinfo>
                  </xsd:annotation>
                  <xsd:sequence>
                ....
{code}
That annotation belongs inside the element, not inside the complex type. But nothing warns you about that, or suggests anything is wrong. it's just ignored.",[],2019-06-05 19:09:18+00:00,2019-06-19 19:45:54+00:00,2021-05-20 12:35:11+00:00,Closed,13237795,DAFFODIL-2142
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"If you run the CSV example, the Infoset XML from parse looks like:

 
{code:java}
<file xmlns=""http://example.com"">
    <header xmlns="""">
        <title>last</title>
        <title>first</title>
        <title>middle</title>
        <title>DOB</title>
    </header>
    <record>
        <item>smith</item>
        <item>robert</item>
        <item>brandon</item>
        <item>1988-03-24</item>
    </record>
    <record>
        <item>johnson</item>
        <item>john</item>
        <item>henry</item>
        <item>1986-01-23</item>
    </record>
    <record>
        <item>jones</item>
        <item>arya</item>
        <item>cat</item>
        <item>1986-02-19</item>
    </record>
</file>
{code}
The above is simply wrong, because the elementFormDefault is 'unqualified', so the record element is a local element declaration in no namespace. The above sets the default no-prefix namespace to the example namespace, and that definition applies not to the header element, which overrides it, but to all the record elements and their children.

 

This is simply incorrect. Every record element needs the same xmlns="""" on it as well as the header element.

A better output infoset would reuse the ""ex"" prefix definition from the CSV.dfdl.xsd schema and output this:

 
{code:java}
<ex:file xmlns:ex=""http://example.com"">
  <header>
    <title>last</title>
    <title>first</title>
    <title>middle</title>
    <title>DOB</title>
  </header>
  <record>
    <item>smith</item>
    <item>robert</item>
    <item>brandon</item>
    <item>1988-03-24</item>
  </record>
  <record>
    <item>johnson</item>
    <item>john</item>
    <item>henry</item>
    <item>1986-01-23</item>
  </record>
  <record>
    <item>jones</item>
    <item>arya</item>
    <item>cat</item>
    <item>1986-02-19</item>
  </record>
</ex:file>
{code}
 ",[],2019-06-04 21:44:41+00:00,2019-06-04 21:51:45+00:00,2019-06-04 21:51:45+00:00,Closed,13237585,DAFFODIL-2141
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Implement dfdl:lookAhead proposed here: [https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+DFDL+lookAhead]

 

 ",[],2019-05-31 20:53:40+00:00,2019-06-06 14:01:06+00:00,2021-05-20 20:01:44+00:00,Closed,13236969,DAFFODIL-2140
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Unparse of this number: 15418418292323521689 which is within range for an XSD xs:unsignedLong type, gives a NumberFormatException while trying to convert this from the text of the infoset into a value.

 
{noformat}
java.lang.NumberFormatException: For input string: ""15418418292323521689""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Long.parseLong(Long.java:592)
    at java.lang.Long.parseLong(Long.java:631)
    at scala.collection.immutable.StringLike.toLong(StringLike.scala:306)
    at scala.collection.immutable.StringLike.toLong$(StringLike.scala:306)
    at scala.collection.immutable.StringOps.toLong(StringOps.scala:29)
    at org.apache.daffodil.dpath.NodeInfo$PrimType$UnsignedInt$.fromXMLString(NodeInfo.scala:491)
    at org.apache.daffodil.dpath.NodeInfo$PrimType$UnsignedInt$.fromXMLString(NodeInfo.scala:488)
    at org.apache.daffodil.infoset.InfosetInputter.createElement(InfosetInputter.scala:385)
 
{noformat}
 ",[],2019-05-29 21:54:32+00:00,2019-06-07 18:50:57+00:00,2021-05-18 14:38:28+00:00,Closed,13236349,DAFFODIL-2139
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"When a DFDL expression uses attempts to resolve a path relative to the document root, subsequent errors are reported as occurring at the document root, with no indication of where the faulty expression is.

Consider the following schema (attached):
{quote}<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema""
    xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/""
    xmlns:tns=""urn:a""
    xmlns:ex=""http://example.com""
    xmlns:fn=""http://www.w3.org/2005/xpath-functions""
    targetNamespace=""urn:a"" >
 <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />

 <xs:annotation>
   <xs:appinfo source=""http://www.ogf.org/dfdl/"">
     <dfdl:format ref=""tns:GeneralFormat""/>
   </xs:appinfo>
 </xs:annotation>

<xs:element name=""a1"">
  <xs:complexType>
    <xs:sequence>
      <xs:element name=""b1"" type=""tns:b2""/>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:complexType name=""b2"">
  <xs:sequence>
    <xs:element name=""b3"" type=""xs:int"" dfdl:inputValueCalc=""\{ /c }"" />
  </xs:sequence>
</xs:complexType>

</xs:schema>
{quote}
Note that the IVC on element b3 makes reference to ""/c"", which does not exist. The error reported by Daffodil is:

 
{quote}[error] Schema Definition Error: No element corresponding to step {}c found. Possibilities for this step include: tns:a1.
Schema context: element reference tns:a1 Location line 1 in file:/home/bsloane/Documents/incubator-daffodil/test/test/a.dfdl.xsd
{quote}
Which gives no indication that the problem is with b3. Further, where b3 to be in a different file than the schema root, the file displayed is still the file containing the schema root, not b3.",[],2019-05-29 15:25:57+00:00,,2019-05-29 15:47:20+00:00,Open,13236274,DAFFODIL-2138
Bug,[],sebastiancadena,Juan Sebastian Cadena,sebastiancadena,Juan Sebastian Cadena,Major,"IBM4690 SA TLOG infosets should be comprised of one *Transactions* element that contains many *Transaction* elements that in turn contain many *TransactionRecord*, but when the output format is *json*, the daffodil CLI creates one *Transactions* object that contains {color:#FF0000}one{color} *Transaction* array that contains all the *TransactionRecords* of the TLOG.

I get the correct structure when the infoset output is in XML. (I'm using the sample TLOG [EAMTRANA_2.DAT|https://github.com/DFDLSchemas/IBM4690-TLOG/blob/master/SA/TestData_SA/EAMTRANA_2.DAT]):

./daffodil parse --schema ~/IBM4690-TLOG/SA/TlogSA.xsd -I *xml* -o ~/Downloads/tlog-a-2.xml ~/IBM4690-TLOG/SA/TestData_SA/EAMTRANA_2.DAT

<?xml version=""1.0"" encoding=""UTF-8"" ?>
*<sa:Transactions* xmlns:sa=""http://www.ibm.com/dfdl/Tlog/SA"">
 *<sa:Transaction>*
 <TransactionRecord>
...
 </TransactionRecord>
 *</sa:Transaction>*
 *<sa:Transaction>*
...

...

*</sa:Transaction>*

...

*</sa:Transactions>***

{color:#FF0000}However, when the output format is json, I get the following invalid format:{color}

./daffodil parse --schema ~/IBM4690-TLOG/SA/TlogSA.xsd -I *xml* -o ~/Downloads/tlog-a-2.xml ~/IBM4690-TLOG/SA/TestData_SA/EAMTRANA_2.DAT

{
 *""Transactions""*: {
 *""Transaction""*: [
 {
 ""TransactionRecord"": [
 {
 ""TransactionRecord20_17"": {
 ""TerminalNumber"": ""0001"",
 ""TransactionNumber"": ""0001"",
 ""DateTime"": ""1010151416"",
 ""SubStringType"": ""17"",
 ""Indicat0"": ""2""
 }
 }
 ]
 },

 

] }}

I've tried this with the 2.3.0 and the master branch, using the DFDL from [https://github.com/DFDLSchemas/IBM4690-TLOG] . I've even tried with the schema in [https://github.com/DFDLSchemas/IBM4690-TLOG/pull/1]

 ",[],2019-05-27 17:35:52+00:00,2019-05-27 17:40:50+00:00,2019-05-27 17:40:50+00:00,Closed,13235853,DAFFODIL-2137
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Several files in a recent check in had incorrect spacing/alignment settings in the scala formatting resulting in many whitespace changes. These should be reverted.,[],2019-05-24 20:51:55+00:00,2019-06-20 16:56:15+00:00,2021-05-20 12:34:45+00:00,Closed,13235534,DAFFODIL-2136
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Since git hash 53d6b4f342140f9a807ee1ca087dbeaf0367ade7 which was merged 2019-05-22, some formats no longer work.

For one such format, the reason is clear. nillable optional elements with zero-length aren't being treated correctly.

Specifically nilValue=""%ES;"" and nilValueDelimiterPolicy=""none""

An element that is nillable, but also minOccurs 0 maxOccurs 1 should appear in the infoset as nilled, but current behavior is it is being omitted.

Even when the element is optional, nil takes precedence over optionality.

 ",[],2019-05-23 20:26:14+00:00,2019-05-28 16:01:07+00:00,2021-05-20 12:34:43+00:00,Closed,13235229,DAFFODIL-2135
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"New warnID was not edited in daffodil-propgen dafext.xsd.

An older stale version emptyElementPolicyError is still in there.",[],2019-05-23 16:56:26+00:00,2019-05-28 16:01:47+00:00,2021-05-20 12:34:41+00:00,Closed,13235185,DAFFODIL-2134
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"We should enable the [sbt-scalariform|https://github.com/sbt/sbt-scalariform] plugin to enable style checks to fail builds that do not meet style guidelines. This probably means fixing a bunch of code that doesn't follow the guidelines before we can actual turn it on in builds.

The configuration of the plugin can also be used as guidance for how to configure IDE's that do autoformatting.",['beginner'],2019-05-21 23:07:19+00:00,,2021-03-31 18:34:07+00:00,Open,13234748,DAFFODIL-2133
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"There are many optimizations based on whether a term (element or model group) has framing, which is defined as meaning if it has initiator/terminator, for example, and the expressions for those satisfy ""isKnownNonEmpty"".

This is a bad mixup. The property being ""isKnownNotEmpty"" means that the property in the schema doesn't have """" as its value.

That's not at all what is being asked of the these delimiter expressions. What the optimizations want to know is if the delimiter is able to occupy zero bits in the data stream, or known to require some non-zero number of bits in the data stream.

Currently this expression:

dfdl:terminator='\{ if (...) then ""%WSP*;"" else ""%#x7F;"" }

satisfies the isKnownNonEmpty test. But depending on the predictate test, if this returns ""%WSP*;"", which is allowed when dfdl:lengthKind is NOT delimited, then this could match zero bits.

To fix this, scaladoc has been added to hasInitiator, hasTerminator, and hasSeparator to warn about this.

But we really need to define isKnownNonZeroLength for delimiters so that calculations for terms like isKnownNonZeroLength can be correct.

isKnownNonZeroLength can be false for  delimiters that have expressions as their values, always for initiators, and false for terminators/separators when lengthKind is not 'delimited'. So that it does not have to involve analysis of the expression.

 

 ",[],2019-05-20 20:52:06+00:00,,2021-02-04 20:59:15+00:00,Open,13234394,DAFFODIL-2132
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"There are numerious FIXME comments in ElementBase about the inadequacies of the isFixedLength method and related methods.

These methods do not clearly separate whether they are computing length in lengthUnits, vs. lengthInBits.

Because of variable-width charset encodings, and because the dfdl:encoding property can be computed at run time, textual things can have fixed length measured in lengthUnits of characters, but actually have variable length at runtime in terms of the actual number of bits in the data stream.

These two concepts should be distinguished by using naming suffixes ""InLengthUnits"" and ""InBits"".

All these need to be rewritten in terms of optionLengthInBits or optionLengthInLengthUnits which will eliminate code duplication between the boolean-valued isFixedLength... style predicates and the methods which provide the length value.

 ",[],2019-05-20 17:05:42+00:00,,2021-02-04 20:58:24+00:00,Open,13234362,DAFFODIL-2131
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Daffodil ungracefully fails when compiling a schema split across many files.

Running under strace shows that the last open call fails with:

openat(AT_FDCWD, ""<redacted>.dfdl.xsd"", O_RDONLY) = -1 EMFILE (Too many open files)

Preceding this is a large number of successful open/read sequences of other schema files. None of those other schema files appear to be closed.

 

I suspect that the issue is that Daffodil is just neglected to close files when it is done reading them (as I do not see a reason it needs to keep schema files open long term).

System: Ubuntu 18.04

 

Max open files (from ulimit -n): 1024

A quick find+grep of my src tree suggests I have about 415 dfdl.xsd files.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !! An unexpected exception occurred. This is a bug! !!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

[https://daffodil.apache.org/community/#issue-tracker]

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.

org.apache.daffodil.exceptions.Abort: Invariant broken. Unexpected exception type org.apache.daffodil.exceptions.Abort: Invariant broken. found resource but couldn't open
 org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
 org.apache.daffodil.xml.DFDLCatalogResolver.resolveResource(DaffodilXMLLoader.scala:244)
 org.apache.xerces.util.DOMEntityResolverWrapper.resolveEntity(Unknown Source)
 org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
 org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$iiXMLSchemaDocument$1(DFDLSchemaFile.scala:155)
 org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$iiXMLSchemaDocument$1(DFDLSchemaFile.scala:155)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.iiXMLSchemaDocument$lzycompute(DFDLSchemaFile.scala:137)
 at org.apache.daffodil.dsom.DFDLSchemaFile.iiXMLSchemaDocument(DFDLSchemaFile.scala:137)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:182)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:181)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:180)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:172)
 at scala.Option.map(Option.scala:146)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:172)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:171)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.$anonfun$allSchemaFiles$1(SchemaSetIncludesAndImportsMixins.scala:63)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles(SchemaSetIncludesAndImportsMixins.scala:61)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles$(SchemaSetIncludesAndImportsMixins.scala:61)
 at org.apache.daffodil.dsom.SchemaSet.allSchemaFiles(SchemaSet.scala:61)
 at org.apache.daffodil.dsom.SchemaSet.$anonfun$isValid$2(SchemaSet.scala:128)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.SchemaSet.isValid$lzycompute(SchemaSet.scala:127)
 at org.apache.daffodil.dsom.SchemaSet.isValid(SchemaSet.scala:126)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:110)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:109)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
 at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:109)
 at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:320)
 at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:717)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:716)
 at org.apache.daffodil.Main$.run(Main.scala:829)
 at org.apache.daffodil.Main$.main(Main.scala:1361)
 at org.apache.daffodil.Main.main(Main.scala)",[],2019-05-15 20:19:27+00:00,2019-05-22 03:36:28+00:00,2021-05-20 12:33:52+00:00,Closed,13233588,DAFFODIL-2130
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," 

Even if an element is declared with minOccurs=""0"" and maxOccurs=""1"" (or just has default maxOccurs, which is 1), we're still requiring that expresions index them using the square-bracket notation.

This is not portable. For example ISO8583 does this everywhere. We have to modify it to use the brackets to make it work on daffodil. This should not be necessary.",[],2019-05-15 17:47:33+00:00,2019-05-15 17:55:28+00:00,2021-05-18 14:38:44+00:00,Closed,13233549,DAFFODIL-2129
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When using the CLI to unparse XML using the ""xml"" infoset type, we have the following code:
{code:scala}
case ""xml"" => {
  val rdr = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(anyRef.asInstanceOf[Array[Byte]])))
  new XMLTextInfosetInputter(rdr)
}
{code}
In order to create the XMLTextInfosetInputter, we create an InputStreamReader, but we do not specify an encoding. This means the Java ""file.encoding"" system property will be used to decode this XML. So on machines where that property isn't UTF-8 (e.g. Windows), this can result in UTF-8 data in the XML not decoded correctly, which leads to incorrect unparsed data.

I believe Woodstox has the ability to inspect XML and determine the encoding based on the preamble, so we should just take advantage of that. So we should change the XMLTextInfosetInputter to accept an InputStream in the constructor instead of a Reader, and deprecate the Reader constructor.",[],2019-05-15 11:57:15+00:00,2019-05-16 17:32:14+00:00,2021-05-20 12:34:37+00:00,Closed,13233457,DAFFODIL-2128
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," 

This doc is not correct. Incorrect text is highlighted in red.

 

{{twoPass}}

_tdml:parserTestCase:_ Parse given data, {color:#d04437}compare to expected infoset, expect failure.{color} Unparse infoset, compare to given data, expect failure. Parse output data to a second infoset. Compare to first infoset, expect success.

_tdml:unparserTestCase:_ Invalid

{{threePass}}

_tdml:parserTestCase:_ Parse given data, compare to expected infoset, expect failure. Unparse infoset to first output data, compare to given data, expect failure. Parse first output data to second infoset. Compare to expected infoset, {color:#d04437}expect failure{color}. Unparse second infoset to second output data, compare to first output data, expect success.

 

In a two pass test, the original infoset is not even compared.

In a three pass test, the reparsed infoset is expected to match and be the steady state infoset.

Arguably these are not the only possible definitions of what a twoPass test or threePass test should be, but they are most consistent with our test cases to date, and seem useful for testing going forward.

 

 ",['beginner'],2019-05-14 23:11:47+00:00,,2020-07-30 22:29:34+00:00,Open,13233338,DAFFODIL-2127
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When an import/include namespces resolves to a name in an XML ctalog, we do not do any further processing of the URI in the ctalog. We just treat it as a URI. For relative paths, that means we'll endup looking relative to the current working directory. This should probably use the same semantics as the schemaLocation attribute in include/import, allowing it to resolve to jars on the classpath and other semantics that uses.

Additionally, resovleResource in DaffodilXMLLoader.scala has teh following code:
{code:scala}
case Some(uri) => {
  val resourceAsStream =
    try {
      uri.toURL.openStream() // This will work.
    } catch {
      case e: java.io.IOException => Assert.invariantFailed(""found resource but couldn't open"")
    }
}
{code}

There are plenty of valid reasons for openStream to fail. The most common being a URI specific in the XML catalog doesn't exist. By making this an assert, it makes it difficult to figure out why the stream failed to open. We should instead convert this IOException to an SDE so the user will have some idea of what went wrong.",[],2019-05-09 16:25:21+00:00,2019-05-14 12:12:46+00:00,2021-05-20 12:34:32+00:00,Closed,13232495,DAFFODIL-2126
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Full example attached demonstrating the round trip behaviour of schema.dfdl.xsd.

Relevent schema is:

 
{quote}<xs:sequence>
 <xs:element name=""zero"" type=""xs:int"" dfdl:length=""8"" dfdl:outputValueCalc=""\{ ../body/zero }""
 dfdl:bitOrder=""mostSignificantBitFirst"" dfdl:byteOrder=""bigEndian""
 />
 <xs:element name=""body"" dfdl:lengthKind=""implicit"">
  <xs:complexType>
   <xs:sequence>
    <xs:element name=""a"" type=""xs:int"" dfdl:length=""4""/>
    <xs:element name=""b"" type=""xs:int"" dfdl:length=""4"" dfdl:outputValueCalc=""\{ ../zero }""/>
    <xs:element name=""zero"" type=""xs:int"" dfdl:inputValueCalc=""\{ 0 }""/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>
 </xs:sequence>
{quote}
Note that there are 2 suspensions involved in unparsing the above.  The first byte, and second nimble of the second byte both suspend until the last element is computed.

Also note that the bit-order changes between byte 1 and 2.

 

Given the input:
{quote}<tns:root xmlns:tns=""urn:example"">
 <zero>0</zero>
 <body>
  <a>2</a>
  <b>0</b>
  <zero>0</zero>
 </body>
</tns:root>
{quote}
We expect unparse to reproduce input.bin exactly:
{quote}00 02
{quote}
But instead see:
{quote}00 00
{quote}
As if something is clobbering the value of <a>",[],2019-05-08 20:12:30+00:00,2019-05-14 12:35:54+00:00,2021-05-20 12:34:03+00:00,Closed,13232317,DAFFODIL-2125
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"On unparse, daffodil appears to try parsing numeric strings as a long regardless of the bit length, potentiall causing issues when length>64. Example attached.

 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.lang.NumberFormatException: For input string: ""7089904312036126320""
 at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
 at java.lang.Integer.parseInt(Integer.java:583)
 at java.lang.Integer.parseInt(Integer.java:615)
 at scala.collection.immutable.StringLike.toInt(StringLike.scala:301)
 at scala.collection.immutable.StringLike.toInt$(StringLike.scala:301)
 at scala.collection.immutable.StringOps.toInt(StringOps.scala:29)
 at org.apache.daffodil.dpath.NodeInfo$PrimType$Int$.fromXMLString(NodeInfo.scala:459)
 at org.apache.daffodil.dpath.NodeInfo$PrimType$Int$.fromXMLString(NodeInfo.scala:457)
 at org.apache.daffodil.infoset.InfosetInputter.createElement(InfosetInputter.scala:347)
 at org.apache.daffodil.infoset.InfosetInputter.handleStartElement(InfosetInputter.scala:242)
 at org.apache.daffodil.infoset.InfosetInputter.reallyFill(InfosetInputter.scala:226)
 at org.apache.daffodil.infoset.InfosetInputter.fill(InfosetInputter.scala:213)
 at org.apache.daffodil.util.CursorImplMixin.doAdvance(Cursor.scala:174)
 at org.apache.daffodil.util.CursorImplMixin.advance(Cursor.scala:144)
 at org.apache.daffodil.util.CursorImplMixin.advance$(Cursor.scala:141)
 at org.apache.daffodil.infoset.InfosetInputter.advance(InfosetInputter.scala:53)
 at org.apache.daffodil.processors.unparsers.UStateMain.advance(UState.scala:482)
 at org.apache.daffodil.util.Cursor.advanceMaybe(Cursor.scala:104)
 at org.apache.daffodil.util.Cursor.advanceMaybe$(Cursor.scala:103)
 at org.apache.daffodil.processors.unparsers.UState.advanceMaybe(UState.scala:72)
 at org.apache.daffodil.processors.unparsers.UStateMain.advanceOrError(UState.scala:499)
 at org.apache.daffodil.processors.unparsers.RegularElementUnparserStartEndStrategy.unparseBegin(ElementUnparser.scala:382)
 at org.apache.daffodil.processors.unparsers.RegularElementUnparserStartEndStrategy.unparseBegin$(ElementUnparser.scala:377)
 at org.apache.daffodil.processors.unparsers.ElementSpecifiedLengthUnparser.unparseBegin(ElementUnparser.scala:264)
 at org.apache.daffodil.processors.unparsers.ElementUnparserBase.unparse(ElementUnparser.scala:178)
 at org.apache.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:72)
 at org.apache.daffodil.processors.unparsers.Unparser.unparse1$(Unparser.scala:39)
 at org.apache.daffodil.processors.unparsers.CombinatorUnparser.unparse1(Unparser.scala:128)
 at org.apache.daffodil.processors.DataProcessor.doUnparse(Runtime.scala:356)
 at org.apache.daffodil.processors.DataProcessor.unparse(Runtime.scala:304)
 at org.apache.daffodil.Main$.$anonfun$run$14(Main.scala:1133)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.run(Main.scala:1133)
 at org.apache.daffodil.Main$.main(Main.scala:1361)
 at org.apache.daffodil.Main.main(Main.scala)

 

 ",[],2019-05-08 17:09:52+00:00,2020-06-24 18:21:18+00:00,2020-06-24 18:21:18+00:00,Closed,13232276,DAFFODIL-2124
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"When trying to parse hex data with an xsd than causes an error with trace on, I get the error below. 
{code:java}
org.apache.daffodil.exceptions.Abort: Invariant broken: nConsumedBytes.>(0)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.io.DataDumper.convertToChar(Dump.scala:489)
org.apache.daffodil.io.DataDumper.textDump(Dump.scala:150)
org.apache.daffodil.io.DataDumper.$anonfun$dumpHexAndTextBytes$2(Dump.scala:297)
at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
at org.apache.daffodil.io.DataDumper.convertToChar(Dump.scala:489)
at org.apache.daffodil.io.DataDumper.textDump(Dump.scala:150)
at org.apache.daffodil.io.DataDumper.$anonfun$dumpHexAndTextBytes$2(Dump.scala:297)
at scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.java:12)
at scala.collection.immutable.NumericRange.foreach(NumericRange.scala:71)
at org.apache.daffodil.io.DataDumper.dumpHexAndTextBytes(Dump.scala:264)
at org.apache.daffodil.io.DataDumper.dump(Dump.scala:129)
at org.apache.daffodil.processors.DataLoc.dumpStream(DataLoc.scala:144)
at org.apache.daffodil.processors.DataLoc.dump(DataLoc.scala:104)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.printData(InteractiveDebugger.scala:1313)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.act(InteractiveDebugger.scala:1346)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.$anonfun$act$20(InteractiveDebugger.scala:1202)
at scala.collection.IndexedSeqOptimized.foreach(IndexedSeqOptimized.scala:32)
at scala.collection.IndexedSeqOptimized.foreach$(IndexedSeqOptimized.scala:29)
at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:38)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.act(InteractiveDebugger.scala:1200)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommandBase$.act(InteractiveDebugger.scala:682)
at org.apache.daffodil.debugger.InteractiveDebugger$DebugCommand.apply(InteractiveDebugger.scala:472)
at org.apache.daffodil.debugger.InteractiveDebugger.runCommand(InteractiveDebugger.scala:433)
at org.apache.daffodil.debugger.InteractiveDebugger.$anonfun$debugStep$4(InteractiveDebugger.scala:174)
at scala.collection.immutable.List.foreach(List.scala:389)
at scala.collection.generic.TraversableForwarder.foreach(TraversableForwarder.scala:35)
at scala.collection.generic.TraversableForwarder.foreach$(TraversableForwarder.scala:35)
at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:44)
at org.apache.daffodil.debugger.InteractiveDebugger.$anonfun$debugStep$1(InteractiveDebugger.scala:173)
at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
at org.apache.daffodil.ExecutionMode$.$anonfun$usingUnrestrictedMode$1(ExecutionMode.scala:66)
at org.apache.daffodil.debugger.InteractiveDebugger.debugStep(InteractiveDebugger.scala:153)
at org.apache.daffodil.debugger.InteractiveDebugger.startElement(InteractiveDebugger.scala:209)
at org.apache.daffodil.events.MultipleEventHandler.$anonfun$startElement$1(ParseEventHandler.scala:117)
at org.apache.daffodil.events.MultipleEventHandler.$anonfun$startElement$1$adapted(ParseEventHandler.scala:117)
at scala.collection.immutable.List.foreach(List.scala:389)
at org.apache.daffodil.events.MultipleEventHandler.startElement(ParseEventHandler.scala:117)
at org.apache.daffodil.events.MultipleEventHandler.startElement$(ParseEventHandler.scala:115)
at org.apache.daffodil.processors.DataProcessor.startElement(Runtime.scala:92)
at org.apache.daffodil.processors.parsers.ElementParserBase.parse(ElementCombinator1.scala:141)
at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:76)
at org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:70)
at org.apache.daffodil.processors.parsers.CombinatorParser.parse1(Parser.scala:154)
at org.apache.daffodil.processors.DataProcessor.doParse(Runtime.scala:223)
at org.apache.daffodil.processors.DataProcessor.$anonfun$parse$1(Runtime.scala:196)
at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
at org.apache.daffodil.ExecutionMode$.$anonfun$usingRuntimeMode$1(ExecutionMode.scala:65)
at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:188)
at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:184)
at org.apache.daffodil.Main$.$anonfun$run$1(Main.scala:862)
at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
at org.apache.daffodil.Main$.run(Main.scala:862)
at org.apache.daffodil.Main$.main(Main.scala:1361)
at org.apache.daffodil.Main.main(Main.scala)
{code}
To replicate the error, the following can be done
{code:java}
daffodil --trace parse -Dtransport:Protocol=6 transport:DataLength=79 -s tcp.dfdl.xsd test.dump{code}
If run without --trace, one gets the error below
{code:java}
[warning] Schema Definition Warning: Expression result type (Decimal) should be manually cast to the expected type (UnsignedInt) with the appropriate constructor. Performing deprecated automatic conversion.
Schema context: DataOffset Location line 136 column 16 in file:tcp.dfdl.xsd
[error] Parse Error: Insufficient bits in data. Needed 96 bit(s).
Schema context: Options Location line 143 column 16 in file:tcp.dfdl.xsd
Data location was preceding byte 20
{code}
 Attached is the extracted form of tcp from the public PCAP schema: [https://github.com/DFDLSchemas/PCAP/blob/master/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd]",[],2019-05-08 14:30:55+00:00,2019-06-27 12:21:43+00:00,2021-05-20 12:34:48+00:00,Closed,13232238,DAFFODIL-2123
Bug,[],susmita.munshi,Susmita,susmita.munshi,Susmita,Major,"Hi Team,

We are using daffodil 2.2.0. for one of our schema file we are getting some errors if we change the root node.

for the attached schema file there is 2 root node 
 # Input
 # Output

with root selected as Input we are getting the correct test result but If change the root node to Output we are getting errors from daffodil's code.",['beginner'],2019-05-08 13:38:28+00:00,2020-09-11 16:50:48+00:00,2020-09-24 23:37:01+00:00,Closed,13232222,DAFFODIL-2122
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"We don't implement dfdl:occursCountKind=""stopValue"", so the presence of occursStopValue=""-1"" in our schemas is unnecessary.

The current version of IBM DFDL we are cross testing against for portability doesn't tolerate this, so we should just remove it everywhere. IBM has a bug ticket about this. This should let tests for schemas AF.dfdl.xsd, AX.dfdl.xsd, AY.dfdl.xsd, AZ.dfdl.xsd, etc. all work portably now.

 ",[],2019-05-07 15:56:04+00:00,2019-05-23 17:25:45+00:00,2021-05-20 12:33:44+00:00,Closed,13232050,DAFFODIL-2121
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,This same bug might exist for other properties.,[],2019-05-07 15:16:55+00:00,2020-06-24 18:21:25+00:00,2020-06-24 18:21:25+00:00,Closed,13232042,DAFFODIL-2120
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This is what the debugger outputs for parsing one of the tests for mil-std-2045, test2045msghdr1.

It detects that this is bitOrder leastSignificantBitFirst data and so presents the data Right-to-Left order, which is good.
{code:java}
     fedcba9876543210  ffee ddcc bbaa 9988 7766 5544 3322 1100  87654321
   cø€␀␀␀wü␚’gU€␀gä  368f 0800 0000 77cf a129 7655 0800 764e :00000000
          ␀␀␁›¶þ␐HD                   00 0010 b96b ef01 8444 :00000010{code}
 

However, this is gibberish, as the bytes of this data (left-to-right) are E4 67 00 80 55....

So presented Right-to-left the values in the bytes shouldn't change. But if you look at the data dump above, the bytes are 4e 76 00 08 55.... which means the nibbles of each byte have been swapped.

That's just plain wrong. Bit order doesn't change the numeric value of any byte.

These displays are useless.

 ",[],2019-05-04 19:28:31+00:00,2019-06-21 14:24:37+00:00,2021-05-20 12:34:31+00:00,Closed,13231609,DAFFODIL-2119
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"BMP doesn't work if you change build.sbt to require daffodil-tdml-processor ""2.3.0"".

It fails with java out of memory error.

 ",[],2019-05-04 02:58:37+00:00,2019-06-19 23:59:19+00:00,2019-06-19 23:59:19+00:00,Closed,13231574,DAFFODIL-2118
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Adding a new property, given the need to create tunables to require it or not, provide tunable default value for it or not, etc. is all WAY too hard, error prone, etc.

If you look at newly created dfdl:emptyElementPolicy property (which should move to DFDLX namespace per DAFFODIL-2096), the sheer number of files that have to be touched is way too large.

There's the
 * property itself (several changes to XSDs in daffodil-propgen)
 * a tunable for requiring it or allowing it to default (dafext.xsd, and DaffodilTunables.scala)
 * a tunable (of option type) for specifying its default value as a tunable.
 * a WarnID for issuing warning that it is required but being defaulted (dafext.xsd and WarnID.scala)
 * the code that actually computes the defaulted property (e.g., in ElementBase.scala)
 ** a library is needed here, as we do this quite a lot.
 ** Note: must detect conflict of a specified property with the tunable if they are in conflict, and issue a warning (this one is a generic TunableBeingIgnored warning. Phew!)

We should add a generator to daffodil-propgen to generate these files off of dafext.xsd and place them in daffodil-lib/src_managed:
 * DaffodilTunables.scala
 * WarnID.scala

Any information, such as things that are to get option types, can be added to dafext.xsd as annotations on the elements or attributes so that the generator can find that info there and generate the correct thing.

While we're at it, the documentation for all the tunables, warnIDs, etc. should be written into dafext.xsd and we should generate
 * scaladoc in the generated scala code files
 * (if needed)  HTML doc for the user-doc on the daffodil user site.

 ",[],2019-05-04 00:06:13+00:00,2019-06-04 11:40:13+00:00,2021-05-20 20:01:19+00:00,Closed,13231570,DAFFODIL-2117
Bug,[],okilo@tresys.com,Olabusayo Kilo,okilo@tresys.com,Olabusayo Kilo,Major,"When daffodil can't find a file/resource during parsing, it outputs the error below. Attached is the sample xsd from the [Git repo|[https://github.com/DFDLSchemas/CSV/blob/master/src/main/resources/com/tresys/csv/xsd/csv.dfdl.xsd]] where I've introduced an error in the DFDLGeneralFormat include.
{code:java}
<xs:include schemaLocation=""org/NOTapache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />{code}
On attempting to parse the sample csv from the [repo|[https://github.com/DFDLSchemas/CSV/blob/master/src/test/resources/com/tresys/csv/data/simpleCSV.csv]]
{code:java}
daffodil parse -s csv.dfdl.xsd simpleCSV.csv
{code}
it produces the error below.
{code:java}
java.lang.ClassCastException: class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader and java.net.URLClassLoader are in module java.base of loader 'bootstrap')
at org.apache.daffodil.util.Misc$.classPath$lzycompute(Misc.scala:145)
at org.apache.daffodil.util.Misc$.classPath(Misc.scala:139)
at org.apache.daffodil.dsom.IIBase.classPath(IIBase.scala:277)
at org.apache.daffodil.dsom.IIBase.whereSearched$lzycompute(IIBase.scala:280)
at org.apache.daffodil.dsom.IIBase.whereSearched(IIBase.scala:279)
at org.apache.daffodil.dsom.Include.$anonfun$resolvedLocation$1(Include.scala:59)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.Include.resolvedLocation$lzycompute(Include.scala:50)
at org.apache.daffodil.dsom.Include.resolvedLocation(Include.scala:49)
at org.apache.daffodil.dsom.Include.$anonfun$mapPair$1(Include.scala:40)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.Include.mapPair(Include.scala:38)
at org.apache.daffodil.dsom.IIBase.$anonfun$notSeenThisBefore$1(IIBase.scala:140)
at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.IIBase.notSeenThisBefore(IIBase.scala:139)
at org.apache.daffodil.dsom.IIBase.$anonfun$iiSchemaFileMaybe$1(IIBase.scala:257)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.IIBase.iiSchemaFileMaybe(IIBase.scala:256)
at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:165)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:164)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
at scala.collection.Iterator.foreach(Iterator.scala:944)
at scala.collection.Iterator.foreach$(Iterator.scala:944)
at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
at scala.collection.IterableLike.foreach(IterableLike.scala:71)
at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$3(DFDLSchemaFile.scala:183)
at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$seenAfter$1(DFDLSchemaFile.scala:182)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter$lzycompute(DFDLSchemaFile.scala:181)
at org.apache.daffodil.dsom.DFDLSchemaFile.seenAfter(DFDLSchemaFile.scala:181)
at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$2(IIBase.scala:165)
at scala.Option.map(Option.scala:146)
at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:165)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:164)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
at scala.collection.Iterator.foreach(Iterator.scala:944)
at scala.collection.Iterator.foreach$(Iterator.scala:944)
at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
at scala.collection.IterableLike.foreach(IterableLike.scala:71)
at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.$anonfun$allSchemaFiles$1(SchemaSetIncludesAndImportsMixins.scala:63)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles(SchemaSetIncludesAndImportsMixins.scala:61)
at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles$(SchemaSetIncludesAndImportsMixins.scala:61)
at org.apache.daffodil.dsom.SchemaSet.allSchemaFiles(SchemaSet.scala:61)
at org.apache.daffodil.dsom.SchemaSet.$anonfun$isValid$2(SchemaSet.scala:128)
at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
at org.apache.daffodil.dsom.SchemaSet.isValid$lzycompute(SchemaSet.scala:127)
at org.apache.daffodil.dsom.SchemaSet.isValid(SchemaSet.scala:126)
at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:110)
at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:109)
at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:109)
at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:336)
at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:715)
at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:714)
at org.apache.daffodil.Main$.run(Main.scala:827)
at org.apache.daffodil.Main$.main(Main.scala:1341)
at org.apache.daffodil.Main.main(Main.scala)
{code}
 

 ",[],2019-05-02 13:06:14+00:00,2019-05-02 14:54:03+00:00,2021-05-18 14:38:30+00:00,Closed,13231254,DAFFODIL-2116
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"Consider the following (incorrect) DFDL snippet:

 
{quote}<xs:element name=""root"" dfdl:lengthKind=""implicit"">
 <xs:complexType>
 <xs:sequence>
 <xs:element ref=""a:a_element"" />
 <xs:element name=""b"" type=""tns:b_type"" dfdl:inputValueCalc=""\{ ../a_element }"" />
 </xs:sequence>
 </xs:complexType>
 </xs:element>
{quote}
Note that the dfdl:inputValueCalc should specify the namespace of the element it is referring to ""a:a_element"".

In attempting to compile the above, Daffodil reports the error as:
{quote}[error] Schema Definition Error: No element corresponding to step {}a_element found. Possibilities for this step include: tns:a_element, {}b.
{quote}
Following Daffodils advice, results in a more reasonable suggestion:

 
{quote}
[error] Schema Definition Error: No element corresponding to step tns:a_element found,but elements with the same local name were found (a:a_element).Perhaps a prefix is incorrect or missing on the step name?
{quote}
 

Schema needed to reproduce is attached. Reproduce with:
{quote}daffodil save-parser -s b.dfdl.xsd parser.bin
{quote}",[],2019-04-30 18:52:59+00:00,,2021-04-28 20:49:36+00:00,Open,13230981,DAFFODIL-2115
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"Currently we are generating parse errors via StringToNonEmptyString for some instances where an expression returns an empty string that cannot be empty.  For many cases this is OK, but for the case of delimters (initiator, terminator, separator, etc.) it is an SDE if the expression returns an empty string.",[],2019-04-29 14:40:39+00:00,2019-05-13 13:10:22+00:00,2021-05-20 12:35:01+00:00,Closed,13230716,DAFFODIL-2114
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Fix eclipse classpaths so that they aren't asking for scala-debug directories that no longer exist.,[],2019-04-29 11:54:02+00:00,2019-05-23 17:24:14+00:00,2021-05-20 12:34:35+00:00,Closed,13230673,DAFFODIL-2113
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"See the disussion in this thread:

[https://lists.apache.org/thread.html/21630109b76d337f0bc1d01be82e27cfb26c7bb81cad2759f2950824@%3Cusers.daffodil.apache.org%3E]

In that schema, the initiator and terminator are DFDL expressions that can return the empty string. This shouldn't be allowed and should throw an SDE, but it looks like we are failing to cleanup the delmiter stack when this SDE occurs which leads to the delimiter stack not being cleaned up and an Invaraint error.",[],2019-04-24 18:23:13+00:00,2019-04-24 18:31:12+00:00,2021-05-18 14:38:40+00:00,Closed,13229939,DAFFODIL-2112
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"During a TravisCI build  on Java 11, I noticed the following error output related to building JavaDocs with {{sbt daffodil-japi/genjavadoc:doc}}:

{code:java}
[error] Loading source file /home/travis/build/apache/incubator-daffodil/daffodil-japi/target/java/org/apache/daffodil/japi/ParseResult.java...
[error] /home/travis/build/apache/incubator-daffodil/daffodil-japi/target/java/org/apache/daffodil/japi/ParseResult.java:35:1: error: illegal start of type
[error] *
[error] ^
[error] /home/travis/build/apache/incubator-daffodil/daffodil-japi/target/java/org/apache/daffodil/japi/ParseResult.java:36:1: error: <identifier> expected
[error] * @deprecated Use parse(ReadableByteChannel, InfosetInputter) to parse the data and get the infoset representation from the InfosetOutputter. Since 2.0.0.
[error] ^
[error] /home/travis/build/apache/incubator-daffodil/daffodil-japi/target/java/org/apache/daffodil/japi/ParseResult.java:36:1: error: <identifier> expected
[error] * @deprecated Use parse(ReadableByteChannel, InfosetInputter) to parse the data and get the infoset representation from the InfosetOutputter. Since 2.0.0.
[error] ^
[error] /home/travis/build/apache/incubator-daffodil/daffodil-japi/target/java/org/apache/daffodil/japi/ParseResult.java:36:1: error: ';' expected
[error] * @deprecated Use parse(ReadableByteChannel, InfosetInputter) to parse the data and get the infoset representation from the InfosetOutputter. Since 2.0.0. 
{code}

I can't reproduce this on my machine, but it's reproducable in this TravisCI build:

https://travis-ci.org/apache/incubator-daffodil/jobs/523539231

Might be an OracleJDK specific check? Or TravisCI just has a different java version than I do. This does not seem to fail the build due to a bug in sbt not detecting javadoc errors, and it looks like the javadoc is still generated, but this should be resolved.",[],2019-04-24 12:23:10+00:00,2020-04-06 18:17:41+00:00,2020-04-13 16:55:13+00:00,Closed,13229858,DAFFODIL-2111
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Setting the bitOrder in the middle of a schema appears to have no effect.

Consider the following schema:
{quote}<xs:element name=""changeOnSequence"" dfdl:lengthKind='implicit'>
 <xs:complexType>
 <xs:sequence>
 <xs:sequence dfdl:bitOrder=""mostSignificantBitFirst"">
 <xs:element name=""A"" type=""xs:unsignedInt"" dfdl:length=""8""/>
 <xs:element name=""B"" type=""xs:unsignedInt"" dfdl:length=""8""/>
 </xs:sequence>
 <xs:sequence dfdl:bitOrder=""leastSignificantBitFirst"" dfdl:byteOrder=""littleEndian"">
 <xs:element name=""C"" type=""xs:unsignedInt"" dfdl:length=""8"" dfdl:bitOrder=""leastSignificantBitFirst"" dfdl:byteOrder=""littleEndian""/>
 <xs:element name=""D"" type=""xs:unsignedInt"" dfdl:length=""8""/>
 </xs:sequence>
 </xs:sequence>
 </xs:complexType>
 </xs:element>
{quote}
With the following test:
{quote}<tdml:parserTestCase name=""bitOrderChangeOnSequence""
 root=""changeOnSequence"" model=""s6"" description=""Tests changing bitOrder when on a byte boundary."">
 <document xmlns=""http://www.ibm.com/xmlns/dfdl/testData"">
 <documentPart type=""bits"">
 0000 0001
 0000 0001
 1000 0000
 1000 0000
 </documentPart>
 </document>
 <tdml:infoset>
 <tdml:dfdlInfoset xmlns:xs=""http://www.w3.org/2001/XMLSchema""
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://example.com"">
 <changeOnSequence>
 <A>1</A>
 <B>1</B>
 <C>1</C>
 <D>1</D>
 </changeOnSequence>
 </tdml:dfdlInfoset>
 </tdml:infoset>
 </tdml:parserTestCase>
{quote}
(both snippets are in attached tdml as test name bitOrderChangeOnSequence. The attached TDML is an uncommited modified version of section05/simple_types/BitOrder.tdml )

The actual result of parsing is:
{quote}<changeOnSequence>

<A>1</A>

<B>1</B>

<C>128</C>

<D>128</D>

</changeOnSequence>
{quote}
Note that the above schema attempts to change the bit order in 2 different ways:

1) On a sequence, and

2) On an element itself.

Neither approach has any results.

A possibly related issue is that ommiting the dfdl:byteOrder=""littleEndian"" on the xs:element results in an SDE, despite the fact that such is set on the enclosing sequence.",[],2019-04-22 21:15:00+00:00,2019-04-23 03:50:34+00:00,2021-05-18 14:38:39+00:00,Closed,13229453,DAFFODIL-2110
New Feature,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Some formats may pad data by inserting extra bits in the middle of the data stream. These formats can be handled with an additional layer transform, described [here|https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+Data+Layering+Addendum] which moves a single contiguas bit-string from the middle of a layer's content area to the end.",[],2019-04-22 14:34:36+00:00,2019-05-23 19:32:28+00:00,2019-05-23 19:33:35+00:00,Closed,13229387,DAFFODIL-2109
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If you have something like this:

{code:xml}
<xs:element name=""foo"">
  <xs:simpleType>
    <xs:restriction base=""xs:decimal"">
      <xs:minInclusive value=""0"" />
      <xs:maxInclusive value=""10"" />
    </xs:restriction>
  </xs:simpleType>
</xs:element>
{code}

You get the following unhelpful error message:
{quote}
[error] Schema Definition Error: checkValueSpaceFacetRange - Unrecognized primitive type: Decimal
{quote}
Which prevents you from being able to use facet restrictions on xs:decimal types.

It looks like we are just missing a case for Decimal in the checkValueSpaceFacetRange function.

While we're at it, the SDE should also be changed to an Assert, since the catch-all case should never happen except when we have a bug in the logic (like we have now).",['beginner'],2019-04-12 20:44:14+00:00,2019-04-24 14:22:44+00:00,2021-05-20 12:35:00+00:00,Closed,13227793,DAFFODIL-2108
Improvement,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,Implement [proposal|https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+Feature+to+support+enumerations+and+typeValueCalc] to support enumerations,[],2019-04-10 22:25:34+00:00,2019-05-23 19:07:47+00:00,2021-05-20 20:01:40+00:00,Closed,13227340,DAFFODIL-2107
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The line counter that we used to create status pie-charts about our code base is obsolete now.

It needs to be updated.

 ",[],2019-04-08 19:17:10+00:00,2019-05-28 18:25:54+00:00,2021-05-20 20:01:51+00:00,Closed,13226768,DAFFODIL-2106
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Our TravisCI builds consistent take at least 40 minutes to complete. TravisCI kills a build after 50 minutes, which we periodically hit and causes the build to fail. This makes it difficult to validate the pull requests didn't break anything.

We need to figure out a way to make our builds take less time. Maybe we can disable a few long runing tests that aren't actually that important, or maybe change our TravisCI matrix to just build certain tests on each matrix. ",[],2019-04-05 14:50:00+00:00,2019-06-14 12:30:57+00:00,2021-05-20 12:34:18+00:00,Closed,13226381,DAFFODIL-2105
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor," 

A TDML parserTestCase must contain a document (for the data), and either a tdml:errors for a negative test, or a tdml:infoset for a positive test case. If the test has neither, and is invoked from the CLI via 'daffodil test -iii my.tdml my_test' you get the ""This is a bug"" printout due to an abort.

The TDML is XML. Before we run it, it should be validated (by Xerces) and the XML schema for TDML should enforce that either tdml:errors or tdml:infoset is present, so that you get an invalid XML diagnostic message.",[],2019-04-05 01:04:05+00:00,,2021-05-11 20:30:46+00:00,Open,13226287,DAFFODIL-2104
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Test test_unparse_property_scoping_02 seems to be correctly set up, but on unparse the data is too long.",[],2019-03-28 18:37:06+00:00,,2021-02-04 20:53:53+00:00,Open,13224670,DAFFODIL-2103
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"There is a commented test that appears to be correctly set up, but fails with Parse Error :Convert to Integer (for xs:int): Unable to parse '0�122'

This may be because one of the characters being used as a delimiter requires multiple bytes in UTF-8

The test in question is test_byte_entities_6_10",[],2019-03-28 18:15:53+00:00,,2021-02-04 20:53:01+00:00,Open,13224665,DAFFODIL-2102
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"There are 3 tests involving nested delimiters that seem like correctly set up tests but fail with ""Terminator not found"" parse errors.  The tests are as follows:

 

test_nested_separator_delimited_nest1

test_nested_separator_delimited_nest2

test_BG000",[],2019-03-28 17:23:05+00:00,,2021-02-04 20:51:55+00:00,Open,13224652,DAFFODIL-2101
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"ProcessingError.toParseError erronausly passes itself as the maybeCause. Compare its definition with that to toUnparseError:

 

{{def toParseError = new ParseError(schemaContext, dataContext, Maybe(this), maybeFormatString, args: _*)}}

def toUnparseError = new UnparseError(schemaContext, dataContext, maybeCause, maybeFormatString, args: _*)

 

This is particuarly problamatic because ParseError requires one of the maybeFormatString and maybeCause may be defined. If maybeFormatString is defined, then they both would be within ParseError, so no useful error will be reported.",[],2019-03-18 18:19:28+00:00,2019-05-23 19:09:16+00:00,2021-05-20 12:34:00+00:00,Closed,13222388,DAFFODIL-2100
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"The Runtime.scala doParse function looks roughly like:

{{try{}}

  try{

    //parse logic

  } finally{

    state.verifyFinalState(wasThrow)

  }

} catch{

//actually handle exceptions

}

 

verifyFinalState disables some checks when there was an excpetion, but some get run regardless. In the case where verifyFinalState fails, it will throw a new exception, thereby surpressing the original excpetion; even though it is likely that the original exception was the actual cause of the problem. ",[],2019-03-18 15:17:34+00:00,2019-03-19 13:07:18+00:00,2021-05-20 12:34:46+00:00,Closed,13222340,DAFFODIL-2099
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"There are a few grammatical errors in our readme and some unnecessary text that be updated. Also, it's fairly stardard to include badges that show things like build status, code coverage, etc. Since the README is often the first thing people see, we should make sure this is all consistent any attractive.",[],2019-03-18 11:21:17+00:00,2019-03-18 14:08:25+00:00,2021-05-20 12:33:42+00:00,Closed,13222290,DAFFODIL-2098
Task,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When we use the EvCalendar, this results in a calendar that is often shared among threads. Since this calendar is modify by the SimpleDateTime parse and format functins, different threads using the same calendar could interact and cause spurious failures.",[],2019-03-15 13:48:39+00:00,2019-03-15 19:29:46+00:00,2021-05-20 20:01:43+00:00,Closed,13221916,DAFFODIL-2097
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Turns out Daffodil is not the only DFDL project creating extensions to DFDL.

In order that schemas that are portable/non-portable can be distinguished, the DFDL workgroup has decided to bless a specific extension namespace, which is the current dfdl namespace plus the word ""extensions"".

All the properties that we've added to dfdl that are beyond the DFDL v1.0 spec should appear in this new dfdlx namespace instead.

When they appear inside a dfdl:format or other long-form annotation, they would need the dfdlx namespace prefix, unlike standard dfdl properties which omit this prefix when used in long-format.

When referenced from <dfdl:property name=""dfdlx:newProp"">.... they would use a QName, not just the bare name as DFDL v1.0 properties do.

This same new prefix should be used for extension functions we add to DPath.

Since this change would break existing Daffodil schemas, it is sensible for both the current and new namespace both work for a while (co-exist) based on a tunable flag, and we issue a (suppressable) warning about the older style.

 

 ",[],2019-03-13 13:57:25+00:00,2019-06-17 13:53:19+00:00,2021-05-20 20:01:24+00:00,Closed,13221414,DAFFODIL-2096
Task,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Grepping though our tests with something like this
{code:java}
grep -R --include *.scala -e '//.*@Test'{code}
finds about 300 tests that are commented out, presumably because they fail. Some of these tests have bug numbers in the comments, but a large percentage do not.

We should uncomment these tests and enable any that now pass and close associated bugs. For those that don't pass, we should verify that they have an associated bug, and if not, create a bug to track the test.",[],2019-03-13 13:51:59+00:00,2019-04-01 16:07:15+00:00,2021-05-20 20:01:26+00:00,Closed,13221413,DAFFODIL-2095
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"4 of the tests in the NITF schema project contain text segments that when the expected results are loaded by TDMLRunner something is happening that is causing the text to change when it is loaded by TDMLRunner.

 

For example, test_i_3114e has a TextSegment that contains some strangely encoded text values, that when parsed show up like so:
{code:java}
229␣␣␣␣␣?␊{code}
However, when this same line is loaded by the TDMLRunner as an expected result, it becomes:
{code:java}
229␣␣␣␣␣￥␍␊
{code}
Just to be clear that this is indeed an issue with how the TDMLRunner loads the expected results file, you can parse the data from this test and use the output as the expected result and when TDMLRunner compares the files, it will fail due to these sort of encoding related issues.",[],2019-03-12 18:10:59+00:00,2019-03-18 15:53:15+00:00,2021-05-18 14:38:35+00:00,Closed,13221195,DAFFODIL-2094
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-03-12 15:11:57+00:00,2019-03-15 17:19:06+00:00,2021-05-20 12:33:57+00:00,Closed,13221152,DAFFODIL-2093
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This test actually shows up two bugs.

One bug, which appears in both 2.2.0 and 2.3.0 is that if you have
{code:java}
dfdl:separator=""{ ./sep }""{code}
and the value of the sep element is a string containing a single NUL character, then on 2.2.0 it complains the separator cannot be an empty string. Clearly this string is not empty.

On 2.3.0, the diagnostic message also complains about what is in the string somewhat differently however. The message is:
{code:java}
[error] Schema Definition Error: The property 'null' cannot start or end with the string "" "", did you mean to use '%SP;' instead?
Schema context: sequence[2] Location line 80 column 10 in file:/home/mbeckerle-unencrypted/DFDLSchemas/CSV/src/test/resources/com/tresys/my.dfdl.xsd{code}
Note that there are two problems here. First is ""The property 'null' cannot ...."" that's broken because the property name isn't being provided. Instead it somehow has 'null' as the property name.

Second it somehow thinks there is whitespace/space in the delimiter.

The DFDL schema and test data file are attached to this bug.  If placed in the same directory, the test can be run from the CLI using:
{code:java}
daffodil -v parse  -s my.dfdl.xsd  my2.csv{code}
The data consists of a header row, then a set of data row lines. Each data row begins with a single character, which goes into the Sep element, and that element's value is to be used as the separator for the remaining elements of the row.

When this value of Sep is an ordinary character such as "","" or ""|"", things work fine.

When this value of Sep is an Ascii NUL, these errors occur.

 

 ",[],2019-03-08 17:41:46+00:00,2019-03-11 15:09:41+00:00,2021-05-20 12:34:18+00:00,Closed,13220510,DAFFODIL-2092
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Users currently have to juggle the DFDL spec, the Errata document, and the Daffodil unimplemented features page. A user basically has to memorize the errata and unimplemented features so that when they are reading the DFDL spec they can implicitly apply knowledge of these other documents.

This is really pretty unreasonable.

We should maintain a rolling version of the DFDL spec., which has change-tracking (relative to the official spec.), and which has all errata integrated, and visually identifies all features that are unimplemented by Daffodil.  This would be MUCH easier for people to use.

 

 ",[],2019-03-07 17:53:52+00:00,2021-02-04 20:51:17+00:00,2021-02-04 20:51:22+00:00,Closed,13220271,DAFFODIL-2091
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"During some training work, users were running TDML files via the CLI.

Most were surprised (negatively) that the default behavior for a failing test is just to print out a single line indicating ""[Failed]"", but no diagnostic messages.

One can turn on diagnostic messages by providing the ""-iii"" option (3x ""i"" for ""info"").

We should consider changing the default behavior to output the diagnostics but have an option to disable this for times when you want only pass/fail output.",[],2019-03-07 17:50:17+00:00,,2021-02-04 20:50:03+00:00,Open,13220268,DAFFODIL-2090
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When unparsing, suppose you have a sequence with an escape scheme defined, and multiple separators:

<xs:sequence dfdl:separator=""| ; ,"">

Suppose dfdl:generateEscapeBlock='whenNeeded'

When unparsing, the sequence's children will be output using ""|"" separators.

Any ""|"" found in the data will cause escaping (either with the escape character or by surrounding the element value with escape block.)

The bug is this. If the data contains any of the OTHER separators, no escaping is done.

That means the output data might contain unescaped separators.

This will cause a subsequent re-parse of this data to interpret those unescaped separators as actual separators, which is broken.

The escaping of the data on unparsing needs to escape not only the canonical first separator, but all separators.

 

 

 ",[],2019-03-07 17:43:51+00:00,2019-04-24 14:22:15+00:00,2021-05-20 12:35:05+00:00,Closed,13220265,DAFFODIL-2089
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Use of tdml:warnings feature causes assertion-failed/abort.,[],2019-03-05 17:08:27+00:00,2021-02-04 20:48:49+00:00,2021-02-04 20:48:54+00:00,Closed,13219611,DAFFODIL-2088
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When running a test at CLI that gets left over data, the output line says ""warning"".

When testing the same thing with TDML, this ""left over data"" is visible in the <tdml:errors>, so the ""warning"" is misleading.

 ",[],2019-03-05 17:07:11+00:00,2021-02-04 20:47:15+00:00,2021-02-04 20:47:22+00:00,Closed,13219609,DAFFODIL-2087
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Similar to running daffodil in cygwin, some users want to run run daffodil in a Git For Windows shell. Just like cygwin, this requires the Daffodil shell script to convert linux style paths to windows style paths in the classpath. Cygpath is used for that in the shell script when we detect a user is running under cygwin. We should do someting similar for Git For Windows.",[],2019-03-04 13:35:43+00:00,2021-02-04 20:44:38+00:00,2021-02-04 20:44:42+00:00,Closed,13219286,DAFFODIL-2086
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"A user reported the following files failed a rat check:
{code}
== File: org.apache.daffodil.tdml.TestTDMLRunner.dfdl.xsd
== File: org.apache.daffodil.tdml.TestTDMLRunner.tdml
== File: org.apache.daffodil.tdml.UnitTestTDMLRunner.tdml
== File: org.apache.daffodil.xml.TestXMLLoaderWithLocation.xml
{code}
These files look like are generated by some test that uses the classname or something, and just not properly cleaned up, (might be windows/cygwin related?). So not an issue as far as rat check goes, but these files really shouldn't be generated in in the root directory. They should either go in target/ or /tmp.",['beginner'],2019-03-02 20:34:41+00:00,,2021-02-04 20:43:17+00:00,Open,13219109,DAFFODIL-2085
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"attributeFormDefault=""unqualified"" appears in SchemaUtils.scala, and is added to some of the schemas it assembles. 

I don't know why this would be there, this utility is synthesizing DFDL schemas, which don't have attributes.

This causes a schema definition warning about attributeFormDefault.

This should simply not be there.

 

 ",['beginner'],2019-02-28 22:14:40+00:00,2019-03-11 15:09:10+00:00,2021-05-20 12:35:10+00:00,Closed,13218761,DAFFODIL-2084
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This TDML contains a test named ""nameDOB_test2"".

It is a test that uses an expression for dynamic computing the separator from the first part of the record.

This test results in
{code:java}
org.apache.daffodil.exceptions.Abort: Invariant broken: MPState.this.delimitersLocalIndexStack.length.==(1)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.processors.parsers.MPState.verifyFinalState(PState.scala:141)
org.apache.daffodil.processors.parsers.PState.verifyFinalState(PState.scala:345)
org.apache.daffodil.processors.DataProcessor.doParse(Runtime.scala:238){code}
The TDML is:
{code:java}
<?xml version=""1.0"" encoding=""UTF-8""?>
<testSuite suiteName=""NameDOB""
  xmlns:xs=""http://www.w3.org/2001/XMLSchema"" 
  xmlns:fn=""http://www.w3.org/2005/xpath-functions""
  xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" 
  xmlns:tdml=""http://www.ibm.com/xmlns/dfdl/testData""
  xmlns:ex=""http://example.com""
  defaultRoundTrip=""onePass"">
  
  <tdml:defineSchema name=""test2"" elementFormDefault=""unqualified"">
      <xs:include schemaLocation=""org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"" />

      <dfdl:defineEscapeScheme name=""eb1"">
        <dfdl:escapeScheme
          escapeKind=""escapeBlock""
          escapeBlockStart=""&quot;""
          escapeBlockEnd='""'
          escapeEscapeCharacter='\'
          generateEscapeBlock=""whenNeeded"" 
          extraEscapedCharacters=""""
        />
      </dfdl:defineEscapeScheme>
      <dfdl:format ref=""tns:GeneralFormat"" escapeSchemeRef=""tns:eb1"" 
        separator="""" initiator=""""
        terminator="""" leadingSkip='0' textTrimKind=""none"" initiatedContent=""no""
        alignment=""implicit"" alignmentUnits=""bits"" trailingSkip=""0"" ignoreCase=""no""
        separatorPosition=""infix"" occursCountKind=""implicit""
        emptyValueDelimiterPolicy=""both"" representation=""text"" textNumberRep=""standard""
        lengthKind=""delimited"" encoding=""ASCII"" />
 
    <xs:element name=""file2"" dfdl:initiator=""sep,last,middle,first,DOB%NL;%WSP*;"">
    <xs:complexType>
      <xs:sequence dfdl:separator=""%NL;"" dfdl:separatorPosition=""postfix"">
        <xs:element name=""record"" maxOccurs=""unbounded"">
          <xs:complexType>
            <xs:sequence dfdl:separator=""| // %HT; ,"">
              <xs:element name=""sep"" type=""xs:string""/>
              <xs:sequence dfdl:separator='{ ./sep }'>
                <xs:element name=""lastName"" type=""xs:string"" />
                <xs:element name=""middleName"" type=""xs:string"" />
                <xs:element name=""firstName"" type=""xs:string"" />
                <xs:element name=""DOB"" type=""xs:date""
                   dfdl:calendarPattern=""MM/dd/yyyy"" 
                   dfdl:calendarPatternKind=""explicit""/>
              </xs:sequence>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  
  </tdml:defineSchema>
  
  <tdml:parserTestCase name=""nameDOB_test2"" root=""file2""
    model=""test2"" 
    roundTrip=""onePass"">
    <tdml:document><![CDATA[sep,last,middle,first,DOB
,|""smith, jr."",robert,brandon,03/24/1988
|,johnson|john|henry|01/23/1986
[SEP],jones[SEP]arya[SEP]cat[SEP]02/19/1986
]]></tdml:document>
    <tdml:infoset>
      <tdml:dfdlInfoset>
        <ex:file2>
          <record>
            <lastName>smith, jr.</lastName>
            <middleName>robert</middleName>
            <firstName>brandon</firstName>
            <DOB>1988-03-24</DOB>
          </record>
          <record>
            <lastName>johnson</lastName>
            <middleName>john</middleName>
            <firstName>henry</firstName>
            <DOB>1986-01-23</DOB>
          </record>
          <record>
            <lastName>jones</lastName>
            <middleName>arya</middleName>
            <firstName>cat</firstName>
            <DOB>1986-02-19</DOB>
          </record>
        </ex:file2>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>
  
  
</testSuite>{code}
 ",[],2019-02-28 18:13:57+00:00,2019-05-13 13:09:56+00:00,2021-05-20 12:34:30+00:00,Closed,13218713,DAFFODIL-2083
Bug,[],sebb,Sebb,sebb,Sebb,Major,"Download page links to hashes, signatures and KEYS should use https please",[],2019-02-28 10:31:06+00:00,2019-02-28 12:24:43+00:00,2021-05-20 12:34:11+00:00,Closed,13218597,DAFFODIL-2082
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The description of twoPass parserTestCases is not correct.

The first parse happens and creates infoset1.

The doc says infoset1 must not match the expected infoset, but that's not correct. It may or may not match. Often it will match.

Then the unparse happens and creates outData1

OutData1 must not match the original input data. If it did a onePass test would be sufficient.

So that part is correct.

Then the second parse happens and creates infoset2.

Infoset2 must match the expected infoset.

This can be verified by editing the CSV example. Add a second separator by changing dfdl:separator="","" to dfdl:separator=""| ,"" so that pipe or comma are accepted as separators, but pipe will be output by the unparser since it is listed first.

Parser test cases that are default onePass will now fail, because the unparse produces data with pipes, but the input data had commas.

However, the infoset created by the first parse does match what is expected.

Changing these tests to ""twoPass"" makes them work. That means the fact that the first infoset comparison matched the expected is tolerated. The doc says it is not.

Note that besides the doc page, the tdml.xsd in daffodil-lib has documentation in comments in it, and that is also wrong.

 

 

 

 

 

 

 

 ",[],2019-02-28 01:34:25+00:00,2020-07-30 20:35:33+00:00,2020-07-30 20:35:33+00:00,Closed,13218510,DAFFODIL-2081
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-02-27 18:55:22+00:00,2019-02-27 21:47:12+00:00,2021-05-20 12:34:04+00:00,Closed,13218420,DAFFODIL-2080
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Daffodil fails with an unexpected exception error when a <choice> element has an empty sequence as a target. Full schema attached. Relevent section is:

```

<xs:element name=""x"">
 <xs:complexType>
 <xs:choice>
 <xs:sequence>
 <xs:sequence/>
 </xs:sequence>
 <xs:choice>
 </xs:complexType>
 </xs:element>

```

Error is:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


scala.xml.parsing.FatalError: expected closing tag of xs:choice
 at scala.xml.parsing.MarkupParser.errorNoEnd(MarkupParser.scala:39)
 at scala.xml.parsing.MarkupParser.errorNoEnd$(MarkupParser.scala:39)
 at scala.xml.parsing.ConstructingParser.errorNoEnd(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParserCommon.xEndTag(MarkupParserCommon.scala:94)
 at scala.xml.parsing.MarkupParserCommon.xEndTag$(MarkupParserCommon.scala:91)
 at scala.xml.parsing.ConstructingParser.xEndTag(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.element1(MarkupParser.scala:588)
 at scala.xml.parsing.MarkupParser.element1$(MarkupParser.scala:572)
 at scala.xml.parsing.ConstructingParser.element1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:432)
 at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:418)
 at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:458)
 at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:441)
 at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.element1(MarkupParser.scala:587)
 at scala.xml.parsing.MarkupParser.element1$(MarkupParser.scala:572)
 at scala.xml.parsing.ConstructingParser.element1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:432)
 at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:418)
 at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:458)
 at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:441)
 at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.element1(MarkupParser.scala:587)
 at scala.xml.parsing.MarkupParser.element1$(MarkupParser.scala:572)
 at scala.xml.parsing.ConstructingParser.element1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:432)
 at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:418)
 at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:458)
 at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:441)
 at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.element1(MarkupParser.scala:587)
 at scala.xml.parsing.MarkupParser.element1$(MarkupParser.scala:572)
 at scala.xml.parsing.ConstructingParser.element1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:432)
 at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:418)
 at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:458)
 at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:441)
 at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.element1(MarkupParser.scala:587)
 at scala.xml.parsing.MarkupParser.element1$(MarkupParser.scala:572)
 at scala.xml.parsing.ConstructingParser.element1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:432)
 at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:418)
 at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:458)
 at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:441)
 at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
 at scala.xml.parsing.MarkupParser.document(MarkupParser.scala:243)
 at scala.xml.parsing.MarkupParser.document$(MarkupParser.scala:224)
 at scala.xml.parsing.ConstructingParser.document(ConstructingParser.scala:48)
 at org.apache.daffodil.xml.DaffodilConstructingLoader.load(DaffodilConstructingLoader.scala:168)
 at org.apache.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:530)
 at org.apache.daffodil.dsom.DFDLSchemaFile.$anonfun$loadedNode$1(DFDLSchemaFile.scala:124)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.DFDLSchemaFile.loadedNode(DFDLSchemaFile.scala:111)
 at org.apache.daffodil.dsom.DFDLSchemaFile.node$lzycompute(DFDLSchemaFile.scala:134)
 at org.apache.daffodil.dsom.DFDLSchemaFile.node(DFDLSchemaFile.scala:134)
 at org.apache.daffodil.dsom.IIBase.$anonfun$iiSchemaFile$1(IIBase.scala:268)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.iiSchemaFile(IIBase.scala:266)
 at org.apache.daffodil.dsom.Import.$anonfun$mapPair$3(Import.scala:65)
 at scala.Option.getOrElse(Option.scala:121)
 at org.apache.daffodil.dsom.Import.$anonfun$mapPair$1(Import.scala:45)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.Import.mapPair(Import.scala:43)
 at org.apache.daffodil.dsom.IIBase.$anonfun$notSeenThisBefore$1(IIBase.scala:140)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.notSeenThisBefore(IIBase.scala:139)
 at org.apache.daffodil.dsom.IIBase.$anonfun$iiSchemaFileMaybe$1(IIBase.scala:257)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.iiSchemaFileMaybe(IIBase.scala:256)
 at org.apache.daffodil.dsom.IIBase.$anonfun$seenAfter$1(IIBase.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.IIBase.seenAfter(IIBase.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$getImportsOrIncludes$1(SchemaDocIncludesAndImportsMixin.scala:147)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.$anonfun$foldLeft$1$adapted(TraversableOnce.scala:157)
 at scala.collection.Iterator.foreach(Iterator.scala:944)
 at scala.collection.Iterator.foreach$(Iterator.scala:944)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1432)
 at scala.collection.IterableLike.foreach(IterableLike.scala:71)
 at scala.collection.IterableLike.foreach$(IterableLike.scala:70)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
 at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
 at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes(SchemaDocIncludesAndImportsMixin.scala:143)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.getImportsOrIncludes$(SchemaDocIncludesAndImportsMixin.scala:139)
 at org.apache.daffodil.dsom.XMLSchemaDocument.getImportsOrIncludes(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$ismli_$1(SchemaDocIncludesAndImportsMixin.scala:158)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.ismli_(SchemaDocIncludesAndImportsMixin.scala:157)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.importStatementsMap$(SchemaDocIncludesAndImportsMixin.scala:155)
 at org.apache.daffodil.dsom.XMLSchemaDocument.importStatementsMap(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.$anonfun$sali_$1(SchemaDocIncludesAndImportsMixin.scala:165)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.sali_(SchemaDocIncludesAndImportsMixin.scala:164)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.SchemaDocIncludesAndImportsMixin.seenAfter$(SchemaDocIncludesAndImportsMixin.scala:162)
 at org.apache.daffodil.dsom.XMLSchemaDocument.seenAfter(SchemaDocument.scala:64)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.$anonfun$allSchemaFiles$1(SchemaSetIncludesAndImportsMixins.scala:63)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles(SchemaSetIncludesAndImportsMixins.scala:61)
 at org.apache.daffodil.dsom.SchemaSetIncludesAndImportsMixin.allSchemaFiles$(SchemaSetIncludesAndImportsMixins.scala:61)
 at org.apache.daffodil.dsom.SchemaSet.allSchemaFiles(SchemaSet.scala:61)
 at org.apache.daffodil.dsom.SchemaSet.$anonfun$isValid$2(SchemaSet.scala:128)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.dsom.SchemaSet.isValid$lzycompute(SchemaSet.scala:127)
 at org.apache.daffodil.dsom.SchemaSet.isValid(SchemaSet.scala:126)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:110)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:109)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
 at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:109)
 at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:336)
 at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:715)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:714)
 at org.apache.daffodil.Main$.run(Main.scala:827)
 at org.apache.daffodil.Main$.main(Main.scala:1341)
 at org.apache.daffodil.Main.main(Main.scala)",[],2019-02-26 20:56:39+00:00,2019-04-04 17:51:04+00:00,2021-05-18 14:38:38+00:00,Closed,13218172,DAFFODIL-2079
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"DFDL schema which uses the dfdl:contentLength on a parent node fails to compile, even when the length is explicit.

I am unsure if the attached schema should compile. In general it is not possible to use dfdl:contentLength on a parent node, as said node has not yet finished parsing. However, when the lengthKind is explicitly the value is knowable. Regardless, if this is not allowed, a better error message is needed.

 

To reproduce, run ``` daffodil save-parser -s test.dfdl.xsd test.dfdl.xsd.bin ``` on the attached schema. Relevent portion reproduced below:

```

<xs:element name=""x"" dfdl:lengthKind=""explicit"" dfdl:length=""\{ 1 }"">
 <xs:complexType>
 <xs:sequence>
 <xs:element name=""y"" type=""xs:int"" dfdl:occursCountKind=""expression"" dfdl:occursCount='\{ if(dfdl:contentLength(.., ""bits"") eq 0) then 1 else 2 }' dfdl:inputValueCalc=""\{ 1 }"" />
 </xs:sequence>
 </xs:complexType>
 </xs:element>

```

 

Full error is:

 

```

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.lang.NullPointerException
 at org.apache.daffodil.infoset.InfosetLengthUnknownException.<init>(InfosetImpl.scala:192)
 at org.apache.daffodil.infoset.InfosetContentLengthUnknownException.<init>(InfosetImpl.scala:201)
 at org.apache.daffodil.infoset.ContentLengthState.throwUnknown(InfosetImpl.scala:558)
 at org.apache.daffodil.infoset.LengthState.lengthInBits(InfosetImpl.scala:488)
 at org.apache.daffodil.dpath.DFDLLengthFunctionBase.$anonfun$getLength$1(DFDLFunctions2.scala:35)
 at org.apache.daffodil.dpath.DFDLLengthFunctionBase.$anonfun$getLength$1$adapted(DFDLFunctions2.scala:34)
 at org.apache.daffodil.dpath.DState$.withRetryIfBlocking(DState.scala:364)
 at org.apache.daffodil.dpath.DFDLLengthFunctionBase.getLength(DFDLFunctions2.scala:34)
 at org.apache.daffodil.dpath.DFDLLengthFunctionBase.computeValue(DFDLFunctions2.scala:70)
 at org.apache.daffodil.dpath.FNTwoArgsNodeAndValue.run(FNBases.scala:163)
 at org.apache.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:127)
 at org.apache.daffodil.dpath.CompareOperator.run(DPathRuntime.scala:230)
 at org.apache.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:127)
 at org.apache.daffodil.dpath.IF.run(DPathRuntime.scala:193)
 at org.apache.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:127)
 at org.apache.daffodil.dpath.CompiledDPath.runExpressionForConstant(DPathRuntime.scala:81)
 at org.apache.daffodil.dpath.DFDLPathExpressionParser.compile(DFDLExpressionParser.scala:55)
 at org.apache.daffodil.dsom.ExpressionCompiler.compileExpression1(CompiledExpression.scala:208)
 at org.apache.daffodil.dsom.ExpressionCompiler.compileExpression(CompiledExpression.scala:50)
 at org.apache.daffodil.dsom.ExpressionCompiler.compileProperty(CompiledExpression.scala:73)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.$anonfun$occursCountExpr$1(RuntimePropertyMixins.scala:453)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$occursCountExpr(RuntimePropertyMixins.scala:450)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$occursCountExpr$(RuntimePropertyMixins.scala:450)
 at org.apache.daffodil.dsom.LocalElementDecl.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$occursCountExpr$lzycompute(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.LocalElementDecl.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$occursCountExpr(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.occursCountEv(RuntimePropertyMixins.scala:457)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.occursCountEv$(RuntimePropertyMixins.scala:456)
 at org.apache.daffodil.dsom.LocalElementDecl.occursCountEv$lzycompute(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.LocalElementDecl.occursCountEv(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.$anonfun$localElementPropertyReferencedElements$2(RuntimePropertyMixins.scala:484)
 at org.apache.daffodil.dsom.PropertyReferencedElementInfosMixin.ev$lzycompute$1(RealTermMixin.scala:32)
 at org.apache.daffodil.dsom.PropertyReferencedElementInfosMixin.ev$1(RealTermMixin.scala:32)
 at org.apache.daffodil.dsom.PropertyReferencedElementInfosMixin.propExprElts(RealTermMixin.scala:33)
 at org.apache.daffodil.dsom.PropertyReferencedElementInfosMixin.propExprElts$(RealTermMixin.scala:29)
 at org.apache.daffodil.dsom.LocalElementDecl.propExprElts(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.localElementPropertyReferencedElements(RuntimePropertyMixins.scala:484)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$myPropertyContentReferencedElementInfos(RuntimePropertyMixins.scala:514)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$myPropertyContentReferencedElementInfos$(RuntimePropertyMixins.scala:513)
 at org.apache.daffodil.dsom.LocalElementDecl.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$myPropertyContentReferencedElementInfos$lzycompute(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.LocalElementDecl.org$apache$daffodil$dsom$ElementRuntimeValuedPropertiesMixin$$myPropertyContentReferencedElementInfos(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.propertyContentReferencedElementInfos(RuntimePropertyMixins.scala:517)
 at org.apache.daffodil.dsom.ElementRuntimeValuedPropertiesMixin.propertyContentReferencedElementInfos$(RuntimePropertyMixins.scala:516)
 at org.apache.daffodil.dsom.LocalElementDecl.propertyContentReferencedElementInfos(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos(Term.scala:751)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos$(Term.scala:750)
 at org.apache.daffodil.dsom.LocalElementDecl.contentLengthParserReferencedElementInfos$lzycompute(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.LocalElementDecl.contentLengthParserReferencedElementInfos(LocalElementDecl.scala:22)
 at org.apache.daffodil.dsom.Term.$anonfun$contentLengthParserReferencedElementInfos$1(Term.scala:755)
 at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:122)
 at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:118)
 at scala.collection.immutable.List.foldLeft(List.scala:86)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos(Term.scala:755)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos$(Term.scala:750)
 at org.apache.daffodil.dsom.ModelGroup.contentLengthParserReferencedElementInfos$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.contentLengthParserReferencedElementInfos(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.Term.$anonfun$contentLengthParserReferencedElementInfos$1(Term.scala:755)
 at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:122)
 at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:118)
 at scala.collection.immutable.List.foldLeft(List.scala:86)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos(Term.scala:755)
 at org.apache.daffodil.dsom.Term.contentLengthParserReferencedElementInfos$(Term.scala:750)
 at org.apache.daffodil.dsom.AbstractElementRef.contentLengthParserReferencedElementInfos$lzycompute(ElementRef.scala:31)
 at org.apache.daffodil.dsom.AbstractElementRef.contentLengthParserReferencedElementInfos(ElementRef.scala:31)
 at org.apache.daffodil.dsom.ElementBase.isReferencedByContentLengthParserExpressions(ElementBase.scala:177)
 at org.apache.daffodil.dsom.ElementBase.isReferencedByContentLengthParserExpressions$(ElementBase.scala:173)
 at org.apache.daffodil.dsom.AbstractElementRef.isReferencedByContentLengthParserExpressions$lzycompute(ElementRef.scala:31)
 at org.apache.daffodil.dsom.AbstractElementRef.isReferencedByContentLengthParserExpressions(ElementRef.scala:31)
 at org.apache.daffodil.grammar.primitives.CaptureContentLengthStart.parser(ElementCombinator.scala:229)
 at org.apache.daffodil.grammar.SeqComp.$anonfun$parserChildren$2(Grammar.scala:95)
 at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:234)
 at scala.collection.immutable.List.foreach(List.scala:389)
 at scala.collection.TraversableLike.map(TraversableLike.scala:234)
 at scala.collection.TraversableLike.map$(TraversableLike.scala:227)
 at scala.collection.immutable.List.map(List.scala:295)
 at org.apache.daffodil.grammar.SeqComp.parserChildren$lzycompute(Grammar.scala:95)
 at org.apache.daffodil.grammar.SeqComp.parserChildren(Grammar.scala:95)
 at org.apache.daffodil.grammar.SeqComp.parser$lzycompute(Grammar.scala:98)
 at org.apache.daffodil.grammar.SeqComp.parser(Grammar.scala:97)
 at org.apache.daffodil.grammar.Prod.parser$lzycompute(Production.scala:80)
 at org.apache.daffodil.grammar.Prod.parser(Production.scala:76)
 at org.apache.daffodil.grammar.Gram.maybeParser(GrammarTerm.scala:127)
 at org.apache.daffodil.grammar.primitives.ElementCombinatorBase.eParser$lzycompute(ElementCombinator.scala:443)
 at org.apache.daffodil.grammar.primitives.ElementCombinatorBase.eParser(ElementCombinator.scala:443)
 at org.apache.daffodil.grammar.primitives.ElementParseAndUnspecifiedLength.parser$lzycompute(ElementCombinator.scala:350)
 at org.apache.daffodil.grammar.primitives.ElementParseAndUnspecifiedLength.parser(ElementCombinator.scala:339)
 at org.apache.daffodil.grammar.primitives.ElementCombinator.parser$lzycompute(ElementCombinator.scala:95)
 at org.apache.daffodil.grammar.primitives.ElementCombinator.parser(ElementCombinator.scala:89)
 at org.apache.daffodil.grammar.Prod.parser$lzycompute(Production.scala:80)
 at org.apache.daffodil.grammar.Prod.parser(Production.scala:76)
 at org.apache.daffodil.grammar.Prod.parser$lzycompute(Production.scala:80)
 at org.apache.daffodil.grammar.Prod.parser(Production.scala:76)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$parser$1(Compiler.scala:79)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.compiler.ProcessorFactory.parser$lzycompute(Compiler.scala:78)
 at org.apache.daffodil.compiler.ProcessorFactory.parser(Compiler.scala:78)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$new$3(Compiler.scala:103)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:579)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost.$anonfun$checkErrors$2(OOLAG.scala:287)
 at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:287)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost.checkErrors$(OOLAG.scala:278)
 at org.apache.daffodil.dsom.SchemaComponentImpl.checkErrors(SchemaComponent.scala:37)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:346)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost.isError$(OOLAG.scala:345)
 at org.apache.daffodil.compiler.ProcessorFactory.super$isError(Compiler.scala:118)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$3(Compiler.scala:118)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$isError$1(Compiler.scala:109)
 at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.java:12)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
 at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:109)
 at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:336)
 at org.apache.daffodil.Main$.$anonfun$createProcessorFromSchema$1(Main.scala:715)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:714)
 at org.apache.daffodil.Main$.run(Main.scala:1166)
 at org.apache.daffodil.Main$.main(Main.scala:1341)
 at org.apache.daffodil.Main.main(Main.scala)

```",[],2019-02-25 22:09:57+00:00,2019-03-08 13:29:20+00:00,2021-05-20 12:33:47+00:00,Closed,13217927,DAFFODIL-2078
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Currently the root attribute only defines the local name, and the namespace is determined based on the infoset root namespace or is hard coded in the TDML Runner logic. Instead, we should allow the root attribute to contain a QName to specify a namespace.",[],2019-02-25 20:03:38+00:00,2021-02-04 20:41:52+00:00,2021-02-04 20:41:59+00:00,Closed,13217903,DAFFODIL-2077
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"The fn:ceiling function (and likely other related functions that do rounding-like operations) does not correctly work on xs:decimal's. For example:
{code}
fn:ceiling(xs:decimal(0.125))
{code}
results in 0.125. The expected value is 1.

Floats and doubles do round correctly, so a temporary work around is to cast any decimals that are passed into fn:ceiling to xs:doubles.

Note that commit a20ff4172807f5e0264ce68142f15f9798df1e8b changed the behavior of {{div}} to always return an xs:decimal instead of an xs:float/double, so any functions that try to fn:ceiling a division will likely run into this issue and require the xs:double cast as a workaround.",[],2019-02-25 15:27:11+00:00,2019-03-15 18:46:26+00:00,2021-05-20 12:35:01+00:00,Closed,13217858,DAFFODIL-2076
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When the parameter to {{dfdl:hexBInary}} is an xs:integer, it is supposed to create 1, 2, 4, or 8 bytes based on the value of the xs:integer. But if the value is greater than Short.MaxValue, it uses 8 bytes, regardless if it would fit in 4 bytes.

For example
{code}
dfdl:hexBinary(xs:integer(32768)))
{code}
returns {{0000000000008000}} but should return {{00008000}}. It looks like the reduce function in XSHexBinary.scala does the right thing to reduce the value to an Integer, but then the wrong toHexBinary function is called in HexBinaryConversions.scala.",[],2019-02-25 14:58:48+00:00,2019-03-21 14:48:38+00:00,2021-05-20 12:34:57+00:00,Closed,13217847,DAFFODIL-2075
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"To test, run the following:
{code}
export SBT_OPTS=""-Xss2M -Xmx5G -Xms5G -Duser.country=DE -Duser.language=de""
sbt test
{code}
Some tests appear to be issues with comma vs period in number grouping separators, some tests look related to date/time differences.

This means that Daffodil is getting some settings from the systems environment, which is incorrect. All parameters (e.g. grouping separator) should come from the DFDL schema.",[],2019-02-25 13:32:06+00:00,2019-03-05 13:10:14+00:00,2021-05-20 12:34:50+00:00,Closed,13217824,DAFFODIL-2074
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"The README.md file in the daffodil root directory and in the daffodil-cli directory has two issues related to getting help that need to be fixed:
* They reference the user@d.a.o email address, but it should be users@d.a.o
* They reference HipChat. This is defunct, and isn't even heavily used. We should remove this and just point people to the mailing lists instead.",[],2019-02-23 15:47:41+00:00,2019-03-04 19:06:57+00:00,2021-05-20 12:35:12+00:00,Closed,13217606,DAFFODIL-2073
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"When used as a library, Daffodil does not produce a meaningfull error when provided with an invalid schema file.

Consider the following Scala program (Main.scala):
{quote}package com.tresys.test

import org.apache.daffodil.sapi.Daffodil
import org.apache.daffodil.sapi.Compiler
import org.apache.daffodil.util.Misc
import org.apache.daffodil.sapi.ProcessorFactory
import org.apache.daffodil.sapi.DataProcessor
import org.apache.daffodil.api.URISchemaSource

object Main extends App {
 override def main(args: Array[String]): Unit = {
 val dfdlCompiler: Compiler = Daffodil.compiler()
 val model = Misc.getRequiredResource(""test.dfdl.xsd"")
 val pf: ProcessorFactory = dfdlCompiler.compileSource(URISchemaSource(model).uriForLoading)
 val df: DataProcessor = pf.onPath(""/"")
 }
}
{quote}
The relevent portion of test.dfdl.xsd is:
{quote}<xs:element name=""top"" type=""tns:nonexistant"" />
{quote}
where tns:nonexistant is never defined.
{quote}Executing Main.scala produces the following error:

Exception in thread ""main"" org.apache.daffodil.exceptions.Abort: Usage error: ProcessorFactory.this.isError.unary_!
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.compiler.ProcessorFactory.$anonfun$onPath$1(Compiler.scala:131)
scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
 at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 at org.apache.daffodil.compiler.ProcessorFactory.$anonfun$onPath$1(Compiler.scala:131)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$.$anonfun$usingCompilerMode$1(ExecutionMode.scala:64)
 at org.apache.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:130)
 at org.apache.daffodil.sapi.ProcessorFactory.onPath(Daffodil.scala:273)
 at com.tresys.test.Main$.main(Main.scala:16)
 at com.tresys.test.Main.main(Main.scala)
{quote}
For reference, using the CLI produces the following (good) error:
{quote}[error] Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/bsloane/workspace/Test/src/test.dfdl.xsd; lineNumber: 35; columnNumber: 51; src-resolve: Cannot resolve the name 'tns:nonexistant' to a(n) 'type definition' component.
Schema context: file:/home/bsloane/workspace/Test/src/test.dfdl.xsd Location in file:??
{quote}","['beginner', 'dev-verify']",2019-02-22 14:44:07+00:00,,2021-02-18 17:20:20+00:00,Open,13217457,DAFFODIL-2072
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Steve Lawrence reports that under profiling, it is observable that schema files are being loaded many times redundantly.

Substantial compile-time speedup is available by eliminating this redundant file loading. Since XML objects in scala are immutable, repeated loading of the same file should never be necessary.

 ",[],2019-02-20 20:23:57+00:00,2019-02-27 21:49:00+00:00,2021-05-20 20:01:43+00:00,Closed,13217022,DAFFODIL-2071
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"People should really be using the KEY file at [https://dist.apache.org/repos/dist/release/incubator/daffodil/KEYS] instead of the one in the repo or in the source release.

Probably the right solution is to add a {{.gitattributes}} file that uses the {{export-ignore}} flag on the KEYS file. This will cause the {{git archive}} commnd to ignore that file when generating releases.",[],2019-02-20 12:48:47+00:00,2019-03-04 19:07:53+00:00,2021-05-20 12:33:48+00:00,Closed,13216914,DAFFODIL-2070
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I don't know if we should block release 2.3.0 for this fix or not.

It seems like a quite serious issue. It was discovered because one of the unit tests of mil-std-2045 schema fails now on the 2.3.0-RC1. test_2045msghdr2 fails now.

I isolated this and created a test in daffodil-test module.

When in bitOrder=""leastSignificantBitFirst"", a hexBinary element seems to interact with the following element, but only in the case where there is an outputValueCalc.

The situation occurs when you have a length element which has an OVC that gets the valueLength of a hexBinary element following it. In this case, parsing works fine, but unparsing it seems that the bitOrder LSBF after the hexBinary element is lost. The bits are positioned in MSBF position, not LSBF.

If you replace the hexBinary element with a string, the problem does not occur.

See test test_ovcHexBinaryLSBF1

 ",[],2019-02-20 00:25:00+00:00,2019-03-05 13:12:59+00:00,2021-05-20 12:34:21+00:00,Closed,13216780,DAFFODIL-2069
New Feature,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,[The main scoverage page|https://github.com/scoverage/scalac-scoverage-plugin] talks about codecov.io and a way to upload coverage reports. There's already a bunch of Apache projects with Codecov.io integration: [https://codecov.io/gh/apache/]. I think it would be great to enable the scoverage plugin for Daffodil and modify our travis CI configuration to generate coverage reports for the master branch and upload them to codecov.io for every commit.,[],2019-02-15 14:33:26+00:00,2019-02-15 18:48:52+00:00,2021-05-18 14:38:44+00:00,Closed,13215992,DAFFODIL-2068
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"The TDML Runner has a compile time dependency on JUnit4. This means that the Junit4 jar and its dependencies are included in our binary distributions, and that affects licensing. The new dependencies do have compatible licenses with Apache, but it really seems unnecessary to include something intended for testing as a compile dependency.

To avoid that and any potential licensing issues, we should remove this compile dependency and handle it somehow else, e.g. reflection.",[],2019-02-13 16:41:03+00:00,2019-02-14 14:49:07+00:00,2021-05-20 12:34:08+00:00,Closed,13215541,DAFFODIL-2067
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"DAFFODIL-2047 adds support for building a windows MSI installer. It does this by using the sbt native-packager plugin which uses WiX tools for building MSI's. Unfortunately, WiX tools are windows only right now.

Our release script requires Linux for building tars and rpms. And it's important that that tar/rpm/msi that we build are build at the same time to ensure the Jars are exatly the same. So we need a way to run WiX tools on linux. There are some reports that WiX tools can run under wine, so we need to A) figure out and document steps to get WIX tools to run under wine and B) determine how we can get the sbt-native-packager plugin to run wine rather than run WiX tools directly.",[],2019-02-12 13:16:17+00:00,2019-02-13 18:00:59+00:00,2021-05-20 12:35:10+00:00,Closed,13215247,DAFFODIL-2066
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"When adding a signed and unsigned type, Daffodil attempts to cast the signed value to unsigned. The correct behaviour would be to cast the unsigned to signed.

When running the attached schema on an empty file, the following error is produced:
{quote}[error] Schema Definition Error: Cannot convert '-1' from Long type to UnsignedInt (Negative value -1 cannot be converted to an unsigned int.).
Schema context: element reference tns:x Location line 3 in file:/home/bsloane/Documents/incubator-daffodil/test/test.dfdl.xsd

The relevent piece of schema is:

<xs:element name=""x"" type=""xs:int"" dfdl:inputValueCalc=""\{ xs:unsignedInt(1) + (-1) }"" />
{quote}",[],2019-02-11 16:02:28+00:00,2019-02-14 16:24:32+00:00,2021-05-20 12:33:47+00:00,Closed,13215038,DAFFODIL-2065
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Imagine we have a schema with a compex element that has all optional children and data where the none of the children exist. Or a similar case where all the children of a complex element are hidden. In such cases, the XMLTextInfosetOutputter will output something like this:
{code:xml}
<root>
  <complex_with_no_children>
  </complex_with_no_children>
</root>
{code}
To a non-schema aware XML parser, complex_with_no_children will look like a simple type with whitespace content instead of an empty complex type, which can cause problems.

Instead, the XMLTextInfosetOutputter should detect when a complex element will not have any text output (i.e. no children, or all children are hidden), and instead output an element with no content , so the above should look more like:
{code:xml}
<root>
  <complex_with_no_children />
</rot>
{code}",[],2019-02-08 20:40:30+00:00,2019-04-24 14:23:14+00:00,2021-05-20 12:34:58+00:00,Closed,13214708,DAFFODIL-2064
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Expression ( (9 * xs:long(5) ) div 1600) results in a double. This is because it creates the DivLong operation internally, which incorrectly produces double type as result when it should be decimal.

 ",[],2019-02-01 17:02:15+00:00,2019-02-11 18:30:40+00:00,2021-05-20 12:33:58+00:00,Closed,13213364,DAFFODIL-2063
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Assume the following schema:
{code:xml}
  <xs:element name=""test"">
    <xs:complexType>
      <xs:sequence>
        <xs:element name=""count"" type=""xs:int"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" />
        <xs:element name=""record"" dfdl:lengthKind=""explicit"" dfdl:length=""2"" maxOccurs=""unbounded""
          dfdl:occursCountKind=""expression"" dfdl:occursCount=""{ ../count }"">
          <xs:complexType>
            <xs:sequence>
            <!--
              <xs:element name=""value1"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" type=""xs:string"" />
              <xs:element name=""value2"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" type=""xs:string"" />
            -->
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
{code}

This schema works if we uncomment the value1 and value2 elements. However, with them commented out, this schema should still work. The {{record}} element has an explciit length, so this should just skip over 2 bytes, count number of times. Instead, it results in the following exception:
{code}
org.apache.daffodil.exceptions.Abort: NadaParsers are all supposed to optimize out!
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.processors.parsers.NadaParser.parse(Parser.scala:150)
org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:76)
org.apache.daffodil.processors.parsers.Parser.parse1$(Parser.scala:70)
	at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
	at org.apache.daffodil.processors.parsers.NadaParser.parse(Parser.scala:150)
	at org.apache.daffodil.processors.parsers.Parser.parse1(Parser.scala:76)
{code}
So the empty sequence results in a NadaParser, which should have been optimized out.",[],2019-02-01 13:13:45+00:00,2019-02-14 12:31:27+00:00,2021-05-20 12:35:03+00:00,Closed,13213310,DAFFODIL-2062
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-01-29 14:39:52+00:00,2019-02-14 17:48:05+00:00,2021-05-20 12:34:47+00:00,Closed,13212560,DAFFODIL-2061
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2019-01-29 13:08:46+00:00,2019-01-29 14:25:00+00:00,2021-05-20 12:34:50+00:00,Closed,13212540,DAFFODIL-2060
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We changed how we compare expected and actual infosets to always use computeDiffOne. However, for very large XML it results in the following stack overflow:
{code}
[error]     at java.lang.String.valueOf(String.java:2994)
[error]     at scala.collection.mutable.StringBuilder.append(StringBuilder.scala:200)
[error]     at scala.collection.TraversableOnce.$anonfun$addString$1(TraversableOnce.scala:359)
[error]     at scala.collection.immutable.List.foreach(List.scala:389)
[error]     at scala.collection.TraversableOnce.addString(TraversableOnce.scala:357)
[error]     at scala.collection.TraversableOnce.addString$(TraversableOnce.scala:353)
[error]     at scala.collection.AbstractTraversable.addString(Traversable.scala:104)
[error]     at scala.collection.TraversableOnce.mkString(TraversableOnce.scala:323)
[error]     at scala.collection.TraversableOnce.mkString$(TraversableOnce.scala:322)
[error]     at scala.collection.AbstractTraversable.mkString(Traversable.scala:104)
[error]     at scala.collection.TraversableOnce.mkString(TraversableOnce.scala:325)
[error]     at scala.collection.TraversableOnce.mkString$(TraversableOnce.scala:325)
[error]     at scala.collection.AbstractTraversable.mkString(Traversable.scala:104)
[error]     at org.apache.daffodil.xml.XMLUtils$.zPath$lzycompute$1(XMLUtils.scala:784)
[error]     at org.apache.daffodil.xml.XMLUtils$.zPath$1(XMLUtils.scala:784)
[error]     at org.apache.daffodil.xml.XMLUtils$.computeDiffOne(XMLUtils.scala:833)
[error]     at org.apache.daffodil.xml.XMLUtils$.computeDiffOne(XMLUtils.scala:825)
[error]     at org.apache.daffodil.xml.XMLUtils$.computeDiffOne(XMLUtils.scala:826)
[error]     at org.apache.daffodil.xml.XMLUtils$.computeDiffOne(XMLUtils.scala:826)
...
{code}
This causes tests on existing real world schemas to fail during TDML testing.",[],2019-01-25 16:19:00+00:00,2019-01-28 13:32:57+00:00,2021-05-20 12:34:32+00:00,Closed,13211873,DAFFODIL-2059
Test,[],motto@tresys.com,Mark C. Otto,motto@tresys.com,Mark C. Otto,Major,Some CLI tests don't work well on Windows. Many do not account for EOL differences.,[],2019-01-24 14:44:41+00:00,2019-01-29 14:27:51+00:00,2021-05-20 20:01:30+00:00,Closed,13211577,DAFFODIL-2058
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Users report doc is unclear about what calls can be made on different threads.

Given large memory footprint of a compiled schema this sharing ability needs to be discussed in javadoc/scaladoc of API.

 

 ",[],2019-01-23 17:29:25+00:00,,2019-07-03 12:52:44+00:00,Open,13211335,DAFFODIL-2057
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Assume the following schema snippet:
{code:xml}
<xs:element name=""xs:hexBinary"" type=""xs:hexBinary"" dfdl:inputValueCalc=""{ xs:string('DEADBEEF') }"" />
{code}
As of Daffodil 2.3.0, we allow implicit conversions between the result of an expression and the expected type. So this should insert an implicit conversion from xs:string (the resulting type) to xs:hexBinary (the expected type). But this results in the following exception: 
{code}
java.lang.ClassCastException: org.apache.daffodil.dpath.XSHexBinary$ cannot be cast to org.apache.daffodil.dpath.RecipeOp
	at org.apache.daffodil.dpath.Conversion$.conversionOps(Conversions.scala:147)
	at org.apache.daffodil.dpath.Expression.conversions$lzycompute(Expression.scala:120)
	at org.apache.daffodil.dpath.Expression.conversions(Expression.scala:117)
	at org.apache.daffodil.dpath.FNOneArgExpr.compiledDPath$lzycompute(Expression.scala:1869)
	at org.apache.daffodil.dpath.FNOneArgExpr.compiledDPath(Expression.scala:1865)
	at org.apache.daffodil.dpath.FunctionCallExpression.compiledDPath$lzycompute(Expression.scala:1317)
	at org.apache.daffodil.dpath.FunctionCallExpression.compiledDPath(Expression.scala:1317)
	at org.apache.daffodil.dpath.WholeExpression.compiledDPath$lzycompute(Expression.scala:636)
	at org.apache.daffodil.dpath.WholeExpression.compiledDPath(Expression.scala:636)
	at org.apache.daffodil.dpath.DFDLPathExpressionParser.compile(DFDLExpressionParser.scala:54)
{code}
Eventually this implicit conversion will be disabled, but since it is allowed we should fix this.

The workaround is to be explicit about the conversion, e.g.:
{code:xml}
<xs:element name=""xs:hexBinary"" type=""xs:hexBinary"" dfdl:inputValueCalc=""{ xs:hexBinary(xs:string('DEADBEEF')) }"" />
{code}",[],2019-01-22 15:46:07+00:00,2019-01-29 15:18:25+00:00,2021-05-20 12:34:43+00:00,Closed,13211005,DAFFODIL-2056
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The TDML page https://daffodil.apache.org/tdml/

""threePass - - parse given data, compare to expected infoset expect failure. If failed, unparse infoset to first output data, compare to given data, expect failure. If failed, parse first output data to second infoset. Compare to expected infoset, expect failure. If failed, unparse second infoset to second output data, compare to first output data, expect success. For unparsing, the values can be""

See the fragment of a sentence at the end? That's not supposed to be part of this paragraph. It is the introduction for the next block of definition items. ",[],2019-01-17 15:51:41+00:00,2019-01-23 14:52:45+00:00,2021-05-20 12:34:38+00:00,Closed,13210192,DAFFODIL-2055
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"DAFFODIL-2021 made expression compilation more strict, requiring that the result of an expression match the expected type. If they did not match an SDE would be thrown. Unfortunately, this broke a large amount existing schemas that were written too laxly. Instead, we should change that SDE to an SDW and mark the behavior as depreated. This will maintain backwards compatability and give people time to fix their shemas, with the eventual goal of changing it to always error.",[],2019-01-16 21:50:23+00:00,2019-01-17 19:39:44+00:00,2021-05-20 12:34:21+00:00,Closed,13210014,DAFFODIL-2054
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"User asked about information that I knew was on this page:

https://daffodil.apache.org/infoset/

But I can find this page with Google, but I knew it existed.

I did not find any way to navigate to any page with a link to this page. ",[],2019-01-16 16:46:11+00:00,2019-01-23 14:52:57+00:00,2021-05-20 12:34:12+00:00,Closed,13209968,DAFFODIL-2053
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"
This method is using a type parameter.

The name is ""F"". 

This is ineffective at explaining what this is for. Choose better name, and enhance this code and surrounding class/trait with scaladoc of this type parameter so that we can understand what it does. 

private def localElementPropertyReferencedElements(f: F)",['beginner'],2019-01-14 22:05:40+00:00,,2021-02-04 20:37:56+00:00,Open,13209503,DAFFODIL-2052
Test,[],motto@tresys.com,Mark C. Otto,motto@tresys.com,Mark C. Otto,Major,"Many tests are not written in an OS-independent manner. Most of these fail due to OS-dependent line termination differences (LF vs. CR/LF). While some of this was covered in DAFFODIL-1360, that bug was insufficient in scope and detail to cover the issues listed here.","['test', 'windows']",2019-01-14 21:14:34+00:00,2019-01-18 17:16:43+00:00,2021-05-20 20:01:19+00:00,Closed,13209497,DAFFODIL-2051
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,Commit 55ddb637732fca7cabc79258c2434d516a87993f created a regression that caused schema definition errors to no longer include line numbers. Need to determine what caused the regression and fix.,[],2019-01-11 16:11:42+00:00,2019-01-23 21:15:14+00:00,2021-05-20 12:34:24+00:00,Closed,13209039,DAFFODIL-2050
Bug,[],ed.jordan,Ed Jordan,ed.jordan,Ed Jordan,Major,"In the old Daffodil bug reporting system, I was asked to transfer this problem forward here, which I have not done until now (sorry).

My sub-command in this case was _save-parser_, but in the past the exception has occurred with _parse_ and _unparse_ as well. 

The DFDL schema contains the following dfdl-format tag:
{quote}<dfdl:format xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" textStringPadCharacter=""%SP;"" textTrimKind=""padChar"" textPadKind=""padChar"" encoding=""x-ibm-1047-s390"" nilKind=""literalCharacter"" nilValue=""%NUL;"" ref=""tpfbase:tpfBaseFmt""/>
{quote}
I received the following exception in the output:
{quote}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !! An unexpected exception occurred. This is a bug! !! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Please report this bug and help us fix it: https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug Please include the following exception, the command you ran, and any input, schema, or tdml files used that led to this bug. java.nio.charset.UnsupportedCharsetException: X-IBM-1047-S390 at java.nio.charset.Charset.forName(Unknown Source) at edu.illinois.ncsa.daffodil.processors.charset.CharsetUtils$.getCharset(CharsetUtils.scala:85) at edu.illinois.ncsa.daffodil.processors.CharsetEv.compute(EvEncoding.scala:99) at edu.illinois.ncsa.daffodil.processors.CharsetEv.compute(EvEncoding.scala:91) at edu.illinois.ncsa.daffodil.processors.Evaluatable.apply(Evaluatable.scala:330) at edu.illinois.ncsa.daffodil.processors.EvaluatableBase$class.compile(Evaluatable.scala:170) at edu.illinois.ncsa.daffodil.processors.Evaluatable.compile(Evaluatable.scala:358) at edu.illinois.ncsa.daffodil.processors.EvaluatableBase$class.compile(Evaluatable.scala:143) at edu.illinois.ncsa.daffodil.processors.Evaluatable.compile(Evaluatable.scala:301) at edu.illinois.ncsa.daffodil.dsom.TermRuntimeValuedPropertiesMixin$class.maybeCharsetEv(RuntimePropertyMixins.scala:130) at edu.illinois.ncsa.daffodil.dsom.Term.maybeCharsetEv$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.maybeCharsetEv(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermRuntimeValuedPropertiesMixin$class.charsetEv(RuntimePropertyMixins.scala:121) at edu.illinois.ncsa.daffodil.dsom.Term.charsetEv$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.charsetEv(Term.scala:51) at edu.illinois.ncsa.daffodil.processors.KnownEncodingMixin$class.knownEncodingName(EncodingRuntimeData.scala:78) at edu.illinois.ncsa.daffodil.dsom.Term.knownEncodingName$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.knownEncodingName(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.knownEncodingAlignmentInBits(TermEncodingMixin.scala:84) at edu.illinois.ncsa.daffodil.dsom.Term.knownEncodingAlignmentInBits$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.knownEncodingAlignmentInBits(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.hasTextAlignment(TermEncodingMixin.scala:226) at edu.illinois.ncsa.daffodil.dsom.Term.hasTextAlignment$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.hasTextAlignment(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.isLocallyTextOnly(TermEncodingMixin.scala:109) at edu.illinois.ncsa.daffodil.dsom.Term.isLocallyTextOnly$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.isLocallyTextOnly(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.summaryEncoding(TermEncodingMixin.scala:198) at edu.illinois.ncsa.daffodil.dsom.Term.summaryEncoding$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.summaryEncoding(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.encodingInfo(TermEncodingMixin.scala:97) at edu.illinois.ncsa.daffodil.dsom.Term.encodingInfo$lzycompute(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.Term.encodingInfo(Term.scala:51) at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$41.apply(ElementBase.scala:533) at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$41.apply(ElementBase.scala:533) at edu.illinois.ncsa.daffodil.processors.TermRuntimeData.encodingInfo$lzycompute(RuntimeData.scala:161) at edu.illinois.ncsa.daffodil.processors.TermRuntimeData.encodingInfo(RuntimeData.scala:161) at edu.illinois.ncsa.daffodil.processors.TermRuntimeData.preSerialization(RuntimeData.scala:174) at edu.illinois.ncsa.daffodil.processors.ElementRuntimeData.preSerialization(RuntimeData.scala:712) at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$2.apply$mcV$sp(ElementBase.scala:110) at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$2.apply(ElementBase.scala:110) at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$2.apply(ElementBase.scala:110) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:579) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:577) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:575) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:573) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply$mcV$sp(OOLAG.scala:281) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:281) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:281) at edu.illinois.ncsa.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:74) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:281) at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:340) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.edu$illinois$ncsa$daffodil$compiler$ProcessorFactory$$super$isError(Compiler.scala:150) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:150) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:141) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:141) at edu.illinois.ncsa.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:74) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:141) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:141) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:141) at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58) at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79) at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79) at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:141) at edu.illinois.ncsa.daffodil.compiler.Compiler.compileSource(Compiler.scala:332) at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:728) at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:727) at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91) at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50) at edu.illinois.ncsa.daffodil.Main$.createProcessorFromSchema(Main.scala:727) at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:1140) at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1316) at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{quote}
My workaround to the exception has been to substitute ""ebcdic-cp-us"" for ""x-ibm-1047-s390"", but this will no longer work for users.

Thanks for your help.",['beginner'],2019-01-10 02:14:59+00:00,,2021-02-09 13:32:25+00:00,Open,13208676,DAFFODIL-2049
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"It is possible for simple regular expression to trigger exponential behavior at run time.

For instance, the regular expression ""(a|a)*x"" is exponential in the number of ""a"" characters that occurs in the beginning of the string.

If the string does not match, this behavior is directly observable.

If the string does match, the behavior may still be observable. Daffodil performs regular expression matches using a fixed size buffer. If such a match fails because it ran out of buffer, Daffodil will try again using a bigger buffer. This means that even if a string will end up matching, if it requires resizing the buffer, we will observe exponential time when trying to match using the smaller buffer.

 

Below is a testcase demonstrating this:
{quote}@Test def testUSASCII7BitEncoderMalformedError {
 val encoder = BitsCharsetUSASCII7BitPacked.newEncoder
 val bb = ByteBuffer.allocate(3)
 val cb = CharBuffer.wrap(""ab"" + 128.toChar) // 128 is not encodable in 7 bits
 val coderResult = encoder.encode(cb, bb, true)
 assertTrue(coderResult.isUnmappable())
 assertEquals(coderResult.length, 1)
 }

@Test def testRegexpMatch{
 
 val regex = ""(a|a)*x"".r
 var baseStr=""""
 
// val regex = ""(a|a)*y*x"".r
// var baseStr=""x""
// for(i <- 0 to 64){
// baseStr = ""y""+baseStr;
// }
 
 val oldDecoder = finfo.decoder
 finfo.decoder=BitsCharsetUSASCII.newDecoder();
 
 for(i <- 0 to 300){
 var str="""";
 for(j <- 0 to i){
 str = str+""a""
 }
 str=str+baseStr;
 val dis = org.apache.daffodil.io.InputSourceDataInputStream(str.getBytes);
 
 val matcher = regex.pattern.matcher(str)
 matcher.reset()
 val start=System.currentTimeMillis();
 val ans = dis.lookingAt(matcher, finfo)
 val stop = System.currentTimeMillis()
 println(i+"": ""+(stop-start)+""ms"")
 }
 
 finfo.decoder=oldDecoder;
 
 }
{quote}
Replace the definition of baseStr and regex with the commented out version to see the behaviour when the match is successful.

 

There are several related issues here:

1) The regular expression above is, in fact, regular. It should be able to run in linear time. The obvious replacement of ""a"" for ""(a|a)"" fixes this. However, this same situation can occur in less obvious situations (for instance, I ran into this by adding the (?s) flag to a regex containing (.|\r)).

2) We currently accept regular expressions that are not actually regular, so there will be ones that genuinely take exponential time. In this case, we should have some form of timeout. (Preferably deterministic)

 ",[],2019-01-08 21:09:16+00:00,2021-02-04 20:35:36+00:00,2021-02-04 20:35:41+00:00,Closed,13208407,DAFFODIL-2048
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,Windows users are usually more familiar with MSI installers rather than dealing with zips. And the sbt-native-packager plugin we to create RPMs also has the abilty to create MSI's. So we should modify our sbt config and release script to create an MSI installer–could be a good way grow the community beyond primiarly linux users.,[],2019-01-07 15:33:53+00:00,2019-02-13 14:55:21+00:00,2021-05-20 12:33:40+00:00,Closed,13208052,DAFFODIL-2047
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"When an appinfo element is present inside an empty sequence inside of a choice, and said appinfo element is missing its source attribute, Daffodil crashes instead of producing a useful error message.

 

A complete schema is attached, but the relevent section is:

 
{quote}<xs:element name=""a"">
 <xs:complexType>
 <xs:choice>
 <xs:sequence>
 <xs:annotation>
 <!-- 
 <xs:appinfo source=""http://www.ogf.org/dfdl/""> 
 -->
 <xs:appinfo>
 <dfdl:discriminator testKind=""pattern"" testPattern="".""/>
 </xs:appinfo>
 </xs:annotation>
 </xs:sequence>
 </xs:choice>
 </xs:complexType>
 </xs:element>

Actual Output:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


org.apache.daffodil.oolag.CircularDefinition: OOLAG Cycle (of 2) through groupMembers@253380088, groupMembers@253380088
 at org.apache.daffodil.oolag.OOLAG$OOLAGValueBase.oolagBefore(OOLAG.scala:492)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:584)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.GroupDefLike$class.groupMembers(GroupDef.scala:70)
 at org.apache.daffodil.dsom.Choice.groupMembers$lzycompute(ChoiceGroup.scala:267)
 at org.apache.daffodil.dsom.Choice.groupMembers(ChoiceGroup.scala:267)
 at org.apache.daffodil.dsom.ModelGroup.sequenceChildren$lzycompute(ModelGroup.scala:201)
 at org.apache.daffodil.dsom.ModelGroup.sequenceChildren(ModelGroup.scala:201)
 at org.apache.daffodil.dsom.ModelGroup$$anonfun$sequencePeers$1.apply(ModelGroup.scala:161)
 at org.apache.daffodil.dsom.ModelGroup$$anonfun$sequencePeers$1.apply(ModelGroup.scala:161)
 at org.apache.daffodil.dsom.ModelGroup.sequencePeers$lzycompute(ModelGroup.scala:161)
 at org.apache.daffodil.dsom.ModelGroup.sequencePeers(ModelGroup.scala:161)
 at org.apache.daffodil.dsom.SequenceTermBase.myPeers$lzycompute(SequenceGroup.scala:54)
 at org.apache.daffodil.dsom.SequenceTermBase.myPeers(SequenceGroup.scala:54)
 at org.apache.daffodil.dsom.ModelGroup$$anonfun$prettyIndex$1.apply(ModelGroup.scala:147)
 at org.apache.daffodil.dsom.ModelGroup$$anonfun$prettyIndex$1.apply(ModelGroup.scala:152)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.ModelGroup.prettyIndex(ModelGroup.scala:152)
 at org.apache.daffodil.dsom.ModelGroup.diagnosticDebugName$lzycompute(ModelGroup.scala:155)
 at org.apache.daffodil.dsom.ModelGroup.diagnosticDebugName(ModelGroup.scala:155)
 at org.apache.daffodil.dsom.SchemaComponent$class.toString(SchemaComponent.scala:180)
 at org.apache.daffodil.dsom.ModelGroup.toString(ModelGroup.scala:129)
 at org.apache.daffodil.exceptions.SchemaFileLocation.<init>(SchemaFileLocatable.scala:52)
 at org.apache.daffodil.exceptions.SchemaFileLocatable$class.schemaFileLocation(SchemaFileLocatable.scala:131)
 at org.apache.daffodil.dsom.ModelGroup.schemaFileLocation$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.schemaFileLocation(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ImplementsThrowsOrSavesSDE$class.SDW(SDE.scala:190)
 at org.apache.daffodil.dsom.ModelGroup.SDW(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.AnnotatedMixin$$anonfun$11.apply(AnnotatedSchemaComponent.scala:288)
 at org.apache.daffodil.dsom.AnnotatedMixin$$anonfun$11.apply(AnnotatedSchemaComponent.scala:284)
 at scala.collection.TraversableLike$$anonfun$filterImpl$1.apply(TraversableLike.scala:248)
 at scala.collection.Iterator$class.foreach(Iterator.scala:893)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1336)
 at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableLike$class.filterImpl(TraversableLike.scala:247)
 at scala.collection.TraversableLike$class.filter(TraversableLike.scala:259)
 at scala.collection.AbstractTraversable.filter(Traversable.scala:104)
 at org.apache.daffodil.dsom.AnnotatedMixin$class.dfdlAppInfos(AnnotatedSchemaComponent.scala:284)
 at org.apache.daffodil.dsom.ModelGroup.dfdlAppInfos$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.dfdlAppInfos(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.AnnotatedMixin$class.annotationObjs(AnnotatedSchemaComponent.scala:325)
 at org.apache.daffodil.dsom.ModelGroup.annotationObjs$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.annotationObjs(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.AnnotatedMixin$$anonfun$formatAnnotation$1.apply(AnnotatedSchemaComponent.scala:355)
 at org.apache.daffodil.dsom.AnnotatedMixin$$anonfun$formatAnnotation$1.apply(AnnotatedSchemaComponent.scala:354)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.AnnotatedMixin$class.formatAnnotation(AnnotatedSchemaComponent.scala:354)
 at org.apache.daffodil.dsom.ModelGroup.formatAnnotation$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.formatAnnotation(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.AnnotatedSchemaComponent$class.nonDefaultFormatChain(AnnotatedSchemaComponent.scala:207)
 at org.apache.daffodil.dsom.ModelGroup.nonDefaultFormatChain$lzycompute(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.ModelGroup.nonDefaultFormatChain(ModelGroup.scala:129)
 at org.apache.daffodil.dsom.AnnotatedSchemaComponent$class.findPropertyOptionThisComponentOnly(AnnotatedSchemaComponent.scala:255)
 at org.apache.daffodil.dsom.SequenceDefMixin$class.hiddenGroupRefOption(SequenceGroup.scala:280)
 at org.apache.daffodil.dsom.Sequence.hiddenGroupRefOption$lzycompute(SequenceGroup.scala:287)
 at org.apache.daffodil.dsom.Sequence.hiddenGroupRefOption(SequenceGroup.scala:287)
 at org.apache.daffodil.dsom.ModelGroupFactory$.apply(ModelGroup.scala:53)
 at org.apache.daffodil.dsom.TermFactory$.apply(ModelGroup.scala:117)
 at org.apache.daffodil.dsom.GroupDefLike$$anonfun$groupMembers$1$$anonfun$apply$2.apply(GroupDef.scala:80)
 at org.apache.daffodil.dsom.GroupDefLike$$anonfun$groupMembers$1$$anonfun$apply$2.apply(GroupDef.scala:78)
 at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
 at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
 at scala.collection.immutable.List.foreach(List.scala:381)
 at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
 at scala.collection.immutable.List.flatMap(List.scala:344)
 at org.apache.daffodil.dsom.GroupDefLike$$anonfun$groupMembers$1.apply(GroupDef.scala:78)
 at org.apache.daffodil.dsom.GroupDefLike$$anonfun$groupMembers$1.apply(GroupDef.scala:70)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.dsom.GroupDefLike$class.groupMembers(GroupDef.scala:70)
 at org.apache.daffodil.dsom.Choice.groupMembers$lzycompute(ChoiceGroup.scala:267)
 at org.apache.daffodil.dsom.Choice.groupMembers(ChoiceGroup.scala:267)
 at org.apache.daffodil.dsom.ModelGroup.elementChildren$lzycompute(ModelGroup.scala:178)
 at org.apache.daffodil.dsom.ModelGroup.elementChildren(ModelGroup.scala:177)
 at org.apache.daffodil.dsom.ElementBase$class.elementChildren(ElementBase.scala:578)
 at org.apache.daffodil.dsom.AbstractElementRef.elementChildren$lzycompute(ElementRef.scala:33)
 at org.apache.daffodil.dsom.AbstractElementRef.elementChildren(ElementRef.scala:33)
 at org.apache.daffodil.dsom.ElementBase$class.checkParseUnparsePolicyCompatibility(ElementBase.scala:1156)
 at org.apache.daffodil.dsom.AbstractElementRef.checkParseUnparsePolicyCompatibility(ElementRef.scala:33)
 at org.apache.daffodil.compiler.ProcessorFactory.x$2$lzycompute(Compiler.scala:89)
 at org.apache.daffodil.compiler.ProcessorFactory.x$2(Compiler.scala:82)
 at org.apache.daffodil.compiler.ProcessorFactory.generateUnparser$lzycompute(Compiler.scala:82)
 at org.apache.daffodil.compiler.ProcessorFactory.generateUnparser(Compiler.scala:82)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$unparser$1.apply(Compiler.scala:104)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$unparser$1.apply(Compiler.scala:103)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.compiler.ProcessorFactory.unparser$lzycompute(Compiler.scala:103)
 at org.apache.daffodil.compiler.ProcessorFactory.unparser(Compiler.scala:103)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$4.apply(Compiler.scala:123)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$4.apply(Compiler.scala:123)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:585)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:583)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:581)
 at org.apache.daffodil.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:579)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply$mcV$sp(OOLAG.scala:287)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:287)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:287)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost$class.checkErrors(OOLAG.scala:287)
 at org.apache.daffodil.oolag.OOLAG$OOLAGHost$class.isError(OOLAG.scala:346)
 at org.apache.daffodil.compiler.ProcessorFactory.org$apache$daffodil$compiler$ProcessorFactory$$super$isError(Compiler.scala:137)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:137)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:128)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:128)
 at org.apache.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:60)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:128)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:128)
 at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:128)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:64)
 at org.apache.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:64)
 at org.apache.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:128)
 at org.apache.daffodil.compiler.Compiler.compileSource(Compiler.scala:333)
 at org.apache.daffodil.Main$$anonfun$71.apply(Main.scala:712)
 at org.apache.daffodil.Main$$anonfun$71.apply(Main.scala:711)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:711)
 at org.apache.daffodil.Main$.run(Main.scala:824)
 at org.apache.daffodil.Main$.main(Main.scala:1297)
 at org.apache.daffodil.Main.main(Main.scala)
{quote}",[],2019-01-02 20:37:17+00:00,2019-01-14 19:32:11+00:00,2021-05-20 12:34:09+00:00,Closed,13207351,DAFFODIL-2046
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"DAFFODIL-2019 modified hexbinary logic so that byteOrder was ignored. It did this by reading in the required amount of data 8-bits at a time. Unfortunately, this resulted in a pretty drastic performance degredation. We should effectively revert that change and instead modify the I/O layer so that it ignores byteOrder, allowing us to read in large chunks of data at once rather than 8 bits at a time.",[],2019-01-02 17:52:44+00:00,2019-01-17 19:37:22+00:00,2021-05-20 12:33:44+00:00,Closed,13207320,DAFFODIL-2045
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"When daffodil is run with a malformed config file, it reports an unexpected excpetion.

For instance, on the config:
{quote}<?xml version=""1.0"" encoding=""UTF-8""?>
<dfdlConfig xmlns=""http://www.w3.org/2001/XMLSchema"">
 <externalVariableBindings>
 <bind name=""a:b"">x</bind>
 </externalVariableBindings>
</dfdlConfig>
{quote}
It outputs:
{quote}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! An unexpected exception occurred. This is a bug! !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

https://daffodil.apache.org/community/#issue-tracker

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


org.apache.daffodil.xml.QNameUndefinedPrefixException: Undefined QName prefix 'a'
 at org.apache.daffodil.xml.RefQNameFactoryBase$$anonfun$resolveRef$1.apply(QNameBase.scala:481)
 at scala.util.Try$.apply(Try.scala:192)
 at org.apache.daffodil.xml.RefQNameFactoryBase$class.resolveRef(QNameBase.scala:471)
 at org.apache.daffodil.xml.RefQNameFactory$.resolveRef(QNameBase.scala:492)
 at org.apache.daffodil.xml.QName$.resolveRef(QNameBase.scala:111)
 at org.apache.daffodil.externalvars.Binding$.apply(Binding.scala:64)
 at org.apache.daffodil.externalvars.ExternalVariablesLoader$$anonfun$getBindings$1.apply(ExternalVariablesLoader.scala:130)
 at org.apache.daffodil.externalvars.ExternalVariablesLoader$$anonfun$getBindings$1.apply(ExternalVariablesLoader.scala:130)
 at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
 at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
 at scala.collection.Iterator$class.foreach(Iterator.scala:893)
 at scala.collection.AbstractIterator.foreach(Iterator.scala:1336)
 at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)
 at scala.collection.AbstractIterable.foreach(Iterable.scala:54)
 at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
 at scala.collection.AbstractTraversable.map(Traversable.scala:104)
 at org.apache.daffodil.externalvars.ExternalVariablesLoader$.getBindings(ExternalVariablesLoader.scala:130)
 at org.apache.daffodil.externalvars.ExternalVariablesLoader$.getVariables(ExternalVariablesLoader.scala:60)
 at org.apache.daffodil.Main$.retrieveExternalVariables(Main.scala:627)
 at org.apache.daffodil.Main$.run(Main.scala:821)
 at org.apache.daffodil.Main$.main(Main.scala:1297)
 at org.apache.daffodil.Main.main(Main.scala)
{quote}",[],2018-12-31 17:19:58+00:00,2019-01-11 14:31:10+00:00,2021-05-20 12:34:36+00:00,Closed,13207059,DAFFODIL-2044
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"fn:round-half-to-even() appears to be returning a decimal string, which causes issues when an integer type is expected.

The following elements both trigger a schema definition error

<xs:element name=""a"" type=""xs:int""
 dfdl:inputValueCalc=""\{ (fn:round-half-to-even( 0.1 )) }""
 />

<xs:element name=""a"" type=""xs:int""
 dfdl:inputValueCalc=""\{ xs:int(fn:round-half-to-even( 0.1 )) }""
 />

[error] Schema Definition Error: Cannot convert '0.0' from String type to Long (Cannot convert to type long: For input string: ""0.0"").

In contrast, casting to a double, as below, appears to work as expected:

<xs:element name=""a"" type=""xs:int""
 dfdl:inputValueCalc=""\{ xs:double(fn:round-half-to-even( 0.1 )) }""
 />

 

What appears to be happening is that fn:round-half-to-even( 0.1 ) returns the string ""0.0"", and the type=""xs:int"" on the element triggers an implicit cast to an integer type. Since ""0.0"" contains a decimal point, this cast fail. However, an explict cast to xs:double can succeed, and then the explicit cast to an int from the double works as expected.

Complete example schema attached",[],2018-12-28 18:39:48+00:00,2019-01-11 14:06:20+00:00,2021-05-20 12:34:44+00:00,Closed,13206852,DAFFODIL-2043
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Major,"Schemas that attempt to use the ""/"" character for division do not result in a descriptive error message.

 

Eg. using the expression \{ 4 / 2 } results in the error:

 

[error] Schema Definition Error: Unable to parse expression. Message: `}' expected but `/' found
Next: / 2 }.",[],2018-12-28 16:05:39+00:00,2021-02-04 20:34:16+00:00,2021-02-04 20:34:41+00:00,Closed,13206843,DAFFODIL-2042
Bug,[],brandon.sloane,Brandon Sloane,brandon.sloane,Brandon Sloane,Minor,"In complex dfdl expressions, if statements do not get processed correctly without extraneus parenthesis.

The following expressions produces an error:

    \{ 1 + if(fn:true()) then 1 else 2 }

[error] Schema Definition Error: Unable to parse expression. Message: `}' expected but `t' found
Next: then 1 else 2 }.

In contrast, the following works as expected:

    \{ 1 + (if(fn:true()) then 1 else 2) }

 

Attached is a basic schema demonstrating the issue.",[],2018-12-28 15:58:35+00:00,2019-01-03 13:56:59+00:00,2021-05-18 14:38:41+00:00,Closed,13206842,DAFFODIL-2041
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"An easy error for beginners is to put DFDL entities like %NL; inside a regex as for example in a dfdl:lengthPattern property value.

We should give regexs a quick scan and issue a suppressable warning if they contain anything that looks like a DFDL entity since this syntax is not supported.

",[],2018-12-26 19:37:01+00:00,,2021-02-04 20:32:52+00:00,Open,13206491,DAFFODIL-2040
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When 2.3.0 is released, we need to update this page.

There's too many green checkmarks to wade through now to find the red ones you really need to keep in mind.

I.e., we should sort this so that only the 2.3.0 things still unimplemented (red x) are all at the top. 

The history of how progress is being made is nice to see, but very secondary purpose for this page. 

I'd suggest that current release goes on the left, and prior releases to the right. 

Since the first two categories ""Unparser"" and ""types"" are all green checks, we should either eliminate entirely, or move to the bottom, as these are of historic interest only when thinking about prior releases. 

The category ""Daffodil specific"" is green checks all the way across. Eliminate. In fact I'd argue anything with green checks all the way across from 1.0.0 is pointless on this page and should be dropped. Those are just artfacts from when we had columns for pre-1.0.0 releases where they had red X, but now that there's no red X columns, they should go away. 

",[],2018-12-26 17:05:29+00:00,2019-01-23 14:53:11+00:00,2021-05-20 12:34:53+00:00,Closed,13206480,DAFFODIL-2039
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When a choice has two branches, seleted by dfdl:choiceDispatchKey, and each is a sequence containing an element, and that element has dfdl:inputValueCalc, you get an abort.

",[],2018-12-21 19:46:12+00:00,2018-12-21 20:25:22+00:00,2021-05-20 12:35:06+00:00,Closed,13206047,DAFFODIL-2038
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"We run lots of tests with TravisCI and it results in lots of output. So when something does fail on TravisCI it can be very difficult to figure out what the actual problem is. And TravisCI only show the first 10,000 lines, os if the the error was after that you need to download the full log.

You're suposed to be able to to run ``sbt -error COMMANDS`` to only show errors, but there is currently a bug in SBT where running tests ignores that: https://github.com/sbt/sbt/issues/4480.  A workaround is posted in that thread. We should implement that so that we can reduce the TravisCI cluter. Also, we should modify the JUnit interface options so that test output is only displayed when a test fails.",['beginner'],2018-12-17 17:46:31+00:00,,2021-02-04 20:32:12+00:00,Open,13204950,DAFFODIL-2037
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Suppose you have this choice:

<choice>
   <sequence>
       <element name=""x"" ... minOccurs=""0""/>
    </sequence>
    <sequence>
       <element name=""y"" ... minOccurs=""0""/>
    </sequence>
</choice>
<element name=""foo"" .../>

You get an SDE with this message:

Schema Definition Error: UPA violation. Multiple choice branches begin with {http://example.com}foo
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location in file:/tmp/s1_5963264522094411444.dfdl.xsd
sequence[2] at Location in file:/tmp/s1_5963264522094411444.dfdl.xsd

This occurs because the two branches of the choice meet the letter of the law by bing sequences which are considered ""required"", but as their content is all optional and they have no framing, they are conceptually optional. 

So there's really no way to look at the infoset and decide which arm of the choice.

The error here should be that the content of a choice branch is entirely optional which isn't allowed. ",[],2018-12-13 22:52:25+00:00,2019-01-28 13:01:47+00:00,2021-05-20 12:34:24+00:00,Closed,13204368,DAFFODIL-2036
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Section 12.3.4 of the DFDL says:

{quote}If the prefix type is dfdl:lengthKind 'implicit' or 'explicit' then the dfdl:lengthUnits properties of both the prefix type and the element must be the same.{quote}

This restriction was implemented as part of DAFFODIL-114. However, it was discovered that the Errata that led to this part of the spec was:
{quote}2.76. Section 12.3.4. When property prefixIncludesPrefixLength is ‘yes’ there are some restrictions that need to be added to enable reliable lengths to be calculated: - If the prefix type is lengthKind 'implicit' or 'explicit' then the lengthUnits properties of both the prefix type and the element must be the same.{quote}

It seems this errata was not fully merged into the spec.

I believe this shoudl already work if we just modify the restriction to apply only when prefixIncludesPrefixLength=""yes"". To to make this change and add tests to verify.",[],2018-12-12 18:41:44+00:00,2018-12-13 13:41:49+00:00,2021-05-20 12:34:42+00:00,Closed,13204069,DAFFODIL-2035
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I've discovered many 

            TLRegistersPool.returnToPool(delimReg)

Unprotected by try/catch logic. You can search and find them.

If a test case fails with say, Assert.nyi (such as for encodingErrorPolicy=""error"") such as test_hexBinary_unparse_14, then the pool is not properly cleaned up, and a subsequent test that just so happens to run on the same thread, then gets an error. E.g., test test_hexBinary_unparse_15 fails with a pool error, as does test_hexBinary_unparse_19. Even though if you run each of these tests individually, it passes.

This creates a situation where tests that should be isolated from each other are in fact interacting with eachother. 
",[],2018-12-11 21:35:11+00:00,2018-12-12 15:56:06+00:00,2021-05-20 12:34:28+00:00,Closed,13203826,DAFFODIL-2034
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The defaultValue attribute in the dfdl:defineVariable element is allowed to contain either a DFDL expression or a logical value, for example, the following are equivalent
{code:xml}
<dfdl:defineVariable name=""foo"" type=""xs:boolean"" defaultValue=""false"" />
<dfdl:defineVariable name=""foo"" type=""xs:boolean"" defaultValue=""{ fn:false() }"" />{code}
However, Daffodil always treats the defaultValue as an expression, assuming curly braces if they are missing. So in the case ofthe logical value, Daffodil tries to set the default value to
{code:xml}
{ false }{code}
Which isn't valid and result in an error. Instead, we should only treat the defaultValue as an expression if curly braces exist. Otherwise, we should convert the logical value to the the type using standard string-to-type XML conversion methods.",[],2018-12-11 18:10:10+00:00,2018-12-12 22:05:36+00:00,2021-05-20 12:34:02+00:00,Closed,13203788,DAFFODIL-2033
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Add some sub-projects to eclipse-projects so that we can have two simultaneously open projects under eclipse, one of which has Daffodil TDML on the classpath, the other has the IBM DFDL Cross tester on the classpath. 

This facilitates running tests against either or both from a convenient IDE right-click menu. ",[],2018-12-11 17:28:56+00:00,2018-12-11 19:37:07+00:00,2021-05-20 20:01:49+00:00,Closed,13203780,DAFFODIL-2032
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If a simple type is specified as xs:hexBinary, we currently get an SDE if the dfdl:binaryNumberRep property is not defined. That property does not a apply to hexBInary types and should not be required.",[],2018-12-11 14:43:01+00:00,2018-12-14 19:40:21+00:00,2021-05-20 12:34:29+00:00,Closed,13203740,DAFFODIL-2031
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"DAFFODIL-114 added support for prefixed lengths, but did not implemented nested prefix lengths. Parsing should work without any modifications (one the nested SDE is removed) but unparsing still requires updates. The difficulty is that nested prefix lengths results in nested suspensions, which is not supported in the current unparse design. All suspensions split off of the main state. We either need to support nested suspensions, or figure out a way to make it so the suspensions aren'tnested.",[],2018-12-11 12:32:42+00:00,,2019-06-21 21:59:51+00:00,Open,13203700,DAFFODIL-2030
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"DAFFODIL-114 added support for lengthKind=""prefixed"", but does not yet support unparsing when lengthUnits=""characters"". However this is implemented can likely be shared with the implementation for dfdl:content-length and dfdl:value-length functions where the second paramter is ""characters"", which is also unimplemented.",[],2018-12-11 12:28:27+00:00,,2019-05-17 19:16:18+00:00,Open,13203699,DAFFODIL-2029
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"See wiki page: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=97553895
which is about experience in interoperability.

Mike Beckerle created a branch which automatically detects tests that use inputValueCalc/OutputValueCalc and hiddenGroups, and skips them, also doesn't run negative tests.

This is on github at https://github.com/mbeckerle/incubator-daffodil branch daffodil-2028-crossTest.

It does things like globally replace all encodingErrorPolicy=""replace"" with encodingErrorPolicy=""error"". 

",[],2018-12-11 01:44:02+00:00,,2019-06-20 16:37:41+00:00,Open,13203591,DAFFODIL-2028
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"If a test succeeds, warnings captured at compile time are not captured.

So if a test specifies both an infoset and warnings, it will always fail on the warning checks.",[],2018-12-10 19:43:03+00:00,2018-12-10 21:31:20+00:00,2018-12-10 21:31:20+00:00,Closed,13203517,DAFFODIL-2027
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"TDML runner needs to be able to implement type-specific comparisons when comparing actual and expected infosets.

This is because there are representations of types like dates and times that are equivalent.
E.g.,
<date1>2010-12-30Z</date1>
and
<date1>2010-12-30+00:00</date1>
These are entirely equivalent.

We need to perform type-specific comparison here. 

This needs to occur based on the DFDL schema's type information. 

DFDL implementations aren't going to provide uniform (or even any) projection of type information into the infoset when represented in XML. So we can't depend on say, xsi:type information (DAFFODIL-182) functionality to tell us to compare as dates. 

This means the XML comparison logic must be an XML-schema-aware walk of the data. 


",[],2018-12-10 18:06:17+00:00,2018-12-17 17:50:34+00:00,2021-05-20 20:01:31+00:00,Closed,13203489,DAFFODIL-2026
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Looks like TravisCI no longer suports OracleJDK7 so those builds are failing. Reports are that OpenJDK7 still works, so we should switch that that, or drop Java7 entirely if those reports are wrong. Would be better to keep it since users are still stuck on Java7.",[],2018-12-07 19:54:58+00:00,2018-12-10 19:21:17+00:00,2021-05-20 12:34:37+00:00,Closed,13203138,DAFFODIL-2025
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I got Parse Error: Initiator ';' not found. 

Except the ';' is the terminator of the element, not the initiator.
",[],2018-11-29 03:14:13+00:00,2019-02-15 19:06:31+00:00,2021-05-18 14:38:28+00:00,Closed,13201234,DAFFODIL-2024
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"For JAPI, SAPI, and the regular internals, the use of Channels everywhere instead of regular java io streams is annoying.

For DataProcessor.save, and compiler.reload, we should accept ordinary java.io.InputStream and java.io.OutputStream. 

No point in making a java programmer understand Channels to use a simple API like this. 

Our use of channels may be ill-advised here anyway. I can't recall the rationale for choosing them to begin with. 

",[],2018-11-28 16:03:35+00:00,2021-02-04 20:27:36+00:00,2021-02-04 20:27:40+00:00,Closed,13201144,DAFFODIL-2023
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I have a schema where the delimiters and lengthPatterns have quasi-XML syntax in them; hence, I am using the extra-long-form annotations e.g.,
{{{
<xs:annotation><xs:appinfo source=""http://www.ogf.org/dfdl"">
   <dfdl:element>
      <dfdl:property name=""initiator""><![CDATA[<rdf:RDF%SP;]]></dfdl:property>
  </dfdl:element>
</xs:appinfo></xs:annotation>
}}}

I am finding that compiling the schema seems to go into an infinite loop. 

Even an egregious error like forgetting that <dfdl:property...> must appear inside a <dfdl:element> results in infinite loop, not a diagnostic message.

So there are bugs here to chase down. We need a ""torture test"" for this dfdl:property style. It's for exactly the use case I have here... where the property values are ""unfriendly"" to XSD syntax. ",[],2018-11-22 03:14:18+00:00,2018-11-30 21:55:33+00:00,2021-05-20 12:33:48+00:00,Closed,13199986,DAFFODIL-2022
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
Recently discovered that IBM DFDL properly detects an error in test BC000.

This test uses an element with this property:
{{{
dfdl:textBooleanTrueRep=""{ 1*10 }""
}}}

DFDL spec section 23.3 says:

* Every property that accepts an expression states exactly what the expression is expected to return. To ensure the returned value is of the correct type, an expression must use XPath constructors or the correct literal values.

* No extra auto-casting is performed over and above that provided by XPath 2.0. XPath 2.0 has rules for when it promotes types and when it allows types to be substituted. These are in Appendix B.1 of the XPath 2.0 spec.

Note the use of 'must' in the first bullet. 

Daffodil 2.2.0 actually knows this property wants a string, so compiles in an automatic conversion of this number to a string. This is incorrect. It should be insisting that the property expression return the proper type. 

For portability the test has been modified to have:
{{{
dfdl:textBooleanTrueRep=""{ xsd:string(1*10) }""
}}}
This of course passes both IBM DFDL and Daffodil. 

However, the bug remains in Daffodil that the auto-conversion was inserted rather than detecting what was, most likely, a user error. Writing a numeric expression for textBooleanTrueRep, or most other string-valued properties is almost certainly an error by the schema author, not something where they're expecting a numeric value to be used for the string. So this is just going to potentially match silly mistakes by schema authors. 
",[],2018-11-21 04:25:55+00:00,2019-01-11 14:05:26+00:00,2021-05-20 12:34:39+00:00,Closed,13199746,DAFFODIL-2021
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Daffodil gets stuck in what appears to be an infinite loop if you have an {{xs:sequence}} that defines a {{dfdl:hiddenGroupRef}} where the reference does not resolve to anything, e.g.:
{code:xml}
...
<xs:sequence dfdl:hiddenGroupRef=""doesNotExist"" />
...{code}",[],2018-11-20 18:25:22+00:00,2018-12-14 15:05:17+00:00,2021-05-20 12:34:27+00:00,Closed,13199666,DAFFODIL-2020
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"We need a property to turn on/off the daffodil extension where xs:hexBinary elements can have length expressed in bits.

This functionality, as implemented today (Nov 2018) is backwards incompatible with the DFDL spec, so is unlikely to be accepted as part of the DFDL standard; hence, a way to turn this on and off, with the default setting to be off, is needed.

Specifically, this feature of Daffodil makes the hexBinary infoset contents of a hexbinary element dependent on the byteOrder and bitOrder properties. Today, in the DFDL spec, xs:hexBinary is independent of these properties, making it suddenly dependent on them will change behavior of existing schemas. That just won't fly. 

Probably we need to deprecate this functionality and remind users to model such data as xs:nonNegativeInteger instead. 

The xs:hexBinary type is really heavily constrained by its role in XSD. E.g., it has length facets. This really makes it much more like a text string than any sort of universal blob that can represent binary data. It's behavior really should be like text strings. My preferred concept for hexBinary is that you parse a text string as iso-8859-1 then convert each character to 2 hex digits one by one for the infoset. That keeps you out of trouble with length facets, etc. 

Users will still want to be able to express that some number of unaligned bits, not a multiple of 4 or 8 long, and not starting, nor ending, on a byte boundary, is in their data and is not numeric data, so base 10 numeric presentation in the infoset is not natural.

Such data can be best modeled as a xs:nonNegativeInteger. Changing the infoset presentation of this data so that it looks like hex, not base 10, is not really DFDL's primary purpose. It is always possible to convert to xs:hexBinary via dfdl:inputValueCalc, and for unparsing, converted back by dfdl:outputValueCalc. Alas this is always going to run into the ""value element problem"", i.e., the data would be like:

<myDataBits><hexvalue>F34A37</hexvalue></myDataBits>

where the extra <hexvalue>...</hexvalue> is needed to support the dfdl:inputValueCalc/dfdl:outputValueCalc pair, and a hidden group that hides the base 10 nonNegativeInteger representation.




",[],2018-11-20 16:54:44+00:00,2018-12-11 15:43:12+00:00,2021-05-20 12:33:53+00:00,Closed,13199645,DAFFODIL-2019
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"IBM DFDL and Daffodil don't have same behavior for this test.

Daffodil passes. Below is the trace output from IBM DFDL:

{{Schema Definition Error: CTDV1425W : For a sequence, the DFDL properties 'separator' and 'terminator' are not unique. Sequence: #xscd(/schemaElement::myStringSeq4/type::0/model::sequence).
Schema Definition Error: CTDV1425W : For a sequence, the DFDL properties 'separator' and 'terminator' are not unique. Sequence: #xscd(/schemaElement::myStringSeq4/type::0/model::sequence).
Schema Definition Error: CTDV1425W : For a sequence, the DFDL properties 'separator' and 'terminator' are not unique. Sequence: #xscd(/schemaElement::myStringSeq4/type::0/model::sequence).
TraceListener : info() Offset: 0. Parsing will start from root element 'myStringSeq4'.
TraceListener : info() The default value of '%LF;' was assigned to variable 'outputNewLine' in namespace 'http://www.ogf.org/dfdl/dfdl-1.0/'.       
TraceListener : info() The default value of 'ieee' was assigned to variable 'binaryFloatRep' in namespace 'http://www.ogf.org/dfdl/dfdl-1.0/'.       
TraceListener : info() Offset: 0. Starting to process element 'myStringSeq4'.
TraceListener : info() Offset: 0. Starting to process element 'seq1'.
TraceListener : info() Offset: 0. Starting to process element 'element1'.
TraceListener : info() Offset: 0. Found delimited value 'abcde' for element 'element1'. The delimiter was '|'. 
TraceListener : info() Offset: 5. Finished processing element 'element1'.
TraceListener : info() Offset: 5. Found separator '|' owned by the 'sequence' group contained within element 'seq1'.
TraceListener : info() Offset: 6. Starting to process element 'element2'.
TraceListener : info() Offset: 6. Found delimited value 'fghij' for element 'element2'. The delimiter was '|'. 
TraceListener : info() Offset: 11. Finished processing element 'element2'.
TraceListener : info() Offset: 11. Found separator '|' owned by the 'sequence' group contained within element 'seq1'.
TraceListener : info() Offset: 12. Starting to process element 'element3'.
TraceListener : info() Offset: 12. Found delimited value 'klmno' for element 'element3'. The delimiter was '::'. 
TraceListener : info() Offset: 17. Finished processing element 'element3'.
TraceListener : info() Offset: 17. Finished processing element 'seq1'.
TraceListener : error() Separator '::' not found at offset '17'  for sequence within element  '/myStringSeq4[1]'.
TraceListener : fatal() Separator '::' not found at offset '17'  for sequence within element  '/myStringSeq4[1]'.}}",['ForInteroperabilityTest'],2018-11-19 22:31:48+00:00,2019-01-29 13:40:39+00:00,2021-05-18 14:38:31+00:00,Closed,13199456,DAFFODIL-2018
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Ran under IBM DFDL. The test failed.

Differences are 
* IBM uses ""Z"" where Daffodil uses ""+00:00""
* IBM shows ""000"" for fractional seconds where Daffodil does not

Question is: which one is correct and why. If ""both"" behaviors are ""allowed"", then we likely need a switch in Daffodil to prefer the same behavior as IBM DFDL, vs. staying with the current behavior (which we still need to preserve for existing users.)

Here's the output when running on IBM DFDL.

{{org.apache.daffodil.tdml.TDMLExceptionImpl: (Implementation: ibm) 
Comparison failed.
Expected
          <calendar_group><date1>2010-12-30+00:00</date1><time1>04:05:06+01:00</time1><datetime1>2010-12-30T04:05:06+00:00</datetime1></calendar_group>
Actual
          <calendar_group><date1>2010-12-30Z</date1><time1>04:05:06.000+01:00</time1><datetime1>2010-12-30T04:05:06.000Z</datetime1></calendar_group>
Differences were (path, expected, actual):
 (calendar_group/date1,'2010-12-30+00:00','2010-12-30Z')
(calendar_group/time1,'04:05:06+01:00','04:05:06.000+01:00')
(calendar_group/datetime1,'2010-12-30T04:05:06+00:00','2010-12-30T04:05:06.000Z')}}

The same issues arise for these tests:

test_simple_type_properties_text_calendar_13_03
test_simple_type_properties_text_calendar_13_04
test_simple_type_properties_bin_calendar_13_01
test_simple_type_properties_bin_calendar_13_02
test_length_delimited_12_01
test_length_delimited_12_02
	
These tests originated with IBM (a LONG time ago), though it's possible we changed them to match Daffodil behavior if we thought the behavior was correct the way we changed it. 

",['ForInteroperabilityTest'],2018-11-19 22:28:32+00:00,2019-02-07 16:12:34+00:00,2021-05-20 12:34:49+00:00,Closed,13199455,DAFFODIL-2017
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When building on TravisCI with Java 10, an error is reported that Java 10 is deprecated. This causes our builds to fail. We should just remove Java 10 support",[],2018-11-05 15:51:41+00:00,2018-11-05 17:23:51+00:00,2021-05-20 12:34:06+00:00,Closed,13196274,DAFFODIL-2016
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"This old property name appears in some schemas used with IBM DFDL, including samples that come with the distribution of IBM DFDL. 

Accepting this is going to avoid a lot of hassles. ",['ForInteroperabilityTest'],2018-10-26 22:39:06+00:00,2018-11-30 21:57:06+00:00,2021-05-20 12:34:01+00:00,Closed,13194532,DAFFODIL-2015
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Need to correct case in the XML schemas for DFDL properties (in daffodil-propgen), and then everywhere it appears. 

Needed for IBM compatibility. ",['ForInteroperabilityTest'],2018-10-25 15:35:45+00:00,2018-11-30 21:57:55+00:00,2021-05-20 12:34:07+00:00,Closed,13194176,DAFFODIL-2014
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Behind the scenes we treat optional elements (e.g. minOccurs=""1"" dfdl:lengthKind=""implicit""), as arrays that should just always have either zero or one elements. This means that when an expression attempts to access this element, a predicate of [1] is required. Otherwise you get an error about ""Query-style paths not supported"". We should have logic to treat optional elements special so that the predicate is not mandatory.",[],2018-10-22 17:26:45+00:00,,2021-02-04 20:26:49+00:00,Open,13193313,DAFFODIL-2013
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Error messages contains the string:

{quote}Use DFDL Entities for whitespace charaters.{quote}

Missing a ""c"" in characters.",[],2018-10-15 15:23:30+00:00,2018-10-16 13:29:14+00:00,2021-05-20 12:35:04+00:00,Closed,13191629,DAFFODIL-2012
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If we do not specify a file encoding, then the system default is used, which can result in unexpected output or lose of characters if that encoding is limited. By always using UTF-8, we should not have these issues, and it matches the <?xml ?> header that the XMLTextInfosetOutputter uses.",['beginner'],2018-10-10 21:01:02+00:00,2018-11-27 18:10:56+00:00,2021-05-20 12:34:29+00:00,Closed,13190748,DAFFODIL-2011
Bug,[],jimwelchok,James L Welch,jimwelchok,James L Welch,Major,"FYI: I have about 60 other ""elements"" that work OK for 60 different files (.cfg). I have not figured out what the cause is yet. TFpumpLog.dfdl.xsd is the new file that crashes.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 !! An unexpected exception occurred. This is a bug! !!
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it:

[https://daffodil.apache.org/community/#issue-tracker]

Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.

org.apache.daffodil.exceptions.Abort: Invariant broken. Pool MarkPool leaked 1 instance(s).
 poolDebugLabel = before occurrence
 org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
 org.apache.daffodil.util.Pool.finalCheck(Pool.scala:103)
 org.apache.daffodil.util.Pool.finalCheck$(Pool.scala:99)
 at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
 at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
 at org.apache.daffodil.util.Pool.finalCheck(Pool.scala:103)
 at org.apache.daffodil.util.Pool.finalCheck$(Pool.scala:99)
 at org.apache.daffodil.processors.parsers.PState$MarkPool.finalCheck(PState.scala:431)
 at org.apache.daffodil.processors.parsers.PState.verifyFinalState(PState.scala:348)
 at org.apache.daffodil.processors.DataProcessor.doParse(Runtime.scala:242)
 at org.apache.daffodil.processors.DataProcessor.$anonfun$parse$1(Runtime.scala:200)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at org.apache.daffodil.ExecutionMode$.$anonfun$usingRuntimeMode$1(ExecutionMode.scala:65)
 at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:192)
 at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:188)
 at org.apache.daffodil.Main$.$anonfun$run$1(Main.scala:860)
 at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
 at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
 at org.apache.daffodil.Main$.run(Main.scala:860)
 at org.apache.daffodil.Main$.main(Main.scala:1341)
 at org.apache.daffodil.Main.main(Main.scala)",[],2018-10-08 18:29:56+00:00,2018-10-15 14:02:47+00:00,2021-05-20 12:34:10+00:00,Closed,13190177,DAFFODIL-2010
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A comment for a release vote on the incubator list mentioned that the --binary flag should be used when generating checksums. On some systems, it is possible for different checksums to be generated for --text vs --binary. GNU systems don't have this issue, but --binary does have slightly different output by adding an asterisk to signify that binary mode should be used when validating.",[],2018-10-04 11:49:19+00:00,2018-10-15 14:01:09+00:00,2021-05-20 12:34:16+00:00,Closed,13189409,DAFFODIL-2009
Task,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A DOAP or Description of a Project is an important file. Description of the project, keywords for searching, etc. 

First heard of it at ApaceCon. ",[],2018-09-27 02:49:51+00:00,2018-10-02 12:37:37+00:00,2021-05-20 20:01:45+00:00,Closed,13187780,DAFFODIL-2008
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
Users trying to test VMF on windows report that 'sbt test' works fine on mil-std-2045, but fails for VMF.

Some debugging shows that when the DaffodilConstructingLoader creates a scala.io.Source from the URI, the resulting source faults on the first hasNext call.

I added some instrumentation to DaffodilConstructingLoader.scala:

{{class DaffodilConstructingLoader(uri: URI, errorHandler: org.xml.sax.ErrorHandler)
  extends ConstructingParser({
    //
    // Note: we must open the XML carefully since it might be in some non
    // default encoding (we have tests that have UTF-16 for example)
    //
    val is = uri.toURL.openStream()

    System.err.println(""URI to open: "" + uri)

    val rdr = new XmlStreamReader(is) // apache has a good thing for determining XML charset
    val csName = rdr.getEncoding

    System.err.println(""Charset is: "" + csName)

    import collection.JavaConverters._
    val lines = IOUtils.readLines(rdr).asScala
    System.err.println(""First line is "" + lines.headOption.getOrElse(""Nothing.""))

    rdr.close()
    val source = Source.fromURL(uri.toURL, csName) // tbd: can one create a Source somehow directly from the rdr?

    val hn = source.hasNext
    System.err.println(""First hasNext call succeeded with result: "" + hn)

    source
  }, true) {}}

The resulting print out for running the single test TestVMFFullMessages.test_K00_1 is below. It never gets to the last println in the above code. It fails on the hasNext call on the Source. Prior print statements show the file can be opened and accessed, so it's something to do with the scala.io.Source, and creating one from a URL that is the problem it seems.

Here's the error:

{{URI to open: file:/E:/dataiti/git/fouo-schemas/vmf/schema/target/classes/com/tresys/mil-std-6017/xsd/vmf.main.gen.dfdl.xsd
Charset is: UTF-8
First line is <?xml version='1.0' encoding='UTF-8'?>
[error] Test com.tresys.vmf.TestVMFFullMessages.test_K00_1 failed: java.nio.charset.MalformedInputException: Input length = 1, took 4.901 sec
[error]     at java.nio.charset.CoderResult.throwException(CoderResult.java:281)
[error]     at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:339)
[error]     at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
[error]     at java.io.InputStreamReader.read(InputStreamReader.java:184)
[error]     at java.io.BufferedReader.fill(BufferedReader.java:161)
[error]     at java.io.BufferedReader.read(BufferedReader.java:182)
[error]     at scala.io.BufferedSource.$anonfun$iter$2(BufferedSource.scala:38)
[error]     at scala.io.Codec.wrap(Codec.scala:69)
[error]     at scala.io.BufferedSource.$anonfun$iter$1(BufferedSource.scala:38)
[error]     at scala.runtime.java8.JFunction0$mcI$sp.apply(JFunction0$mcI$sp.java:12)
[error]     at scala.collection.Iterator$$anon$9.next(Iterator.scala:170)
[error]     at scala.collection.Iterator$$anon$15.hasNext(Iterator.scala:652)
[error]     at scala.collection.Iterator$$anon$10.hasNext(Iterator.scala:456)
[error]     at scala.io.Source.hasNext(Source.scala:246)
[error]     at scala.xml.parsing.MarkupParser.ch(MarkupParser.scala:103)
[error]     at scala.xml.parsing.MarkupParser.ch$(MarkupParser.scala:101)
[error]     at scala.xml.parsing.ConstructingParser.ch(ConstructingParser.scala:48)
[error]     at scala.xml.parsing.MarkupParser.eof(MarkupParser.scala:129)
[error]     at scala.xml.parsing.MarkupParser.eof$(MarkupParser.scala:129)
[error]     at scala.xml.parsing.ConstructingParser.eof(ConstructingParser.scala:48)
[error]     at scala.xml.parsing.MarkupParser.xComment(MarkupParser.scala:392)
[error]     at scala.xml.parsing.MarkupParser.xComment$(MarkupParser.scala:389)
[error]     at scala.xml.parsing.ConstructingParser.xComment(ConstructingParser.scala:48)
[error]     at scala.xml.parsing.MarkupParser.content1(MarkupParser.scala:428)
[error]     at scala.xml.parsing.MarkupParser.content1$(MarkupParser.scala:419)
[error]     at scala.xml.parsing.ConstructingParser.content1(ConstructingParser.scala:48)
[error]     at scala.xml.parsing.MarkupParser.content(MarkupParser.scala:459)
[error]     at scala.xml.parsing.MarkupParser.content$(MarkupParser.scala:442)
[error]     at scala.xml.parsing.ConstructingParser.content(ConstructingParser.scala:48)
[error]     at scala.xml.parsing.MarkupParser.document(MarkupParser.scala:244)
[error]     at scala.xml.parsing.MarkupParser.document$(MarkupParser.scala:225)
[error]     at scala.xml.parsing.ConstructingParser.document(ConstructingParser.scala:48)
[error]     at org.apache.daffodil.xml.DaffodilConstructingLoader.load(DaffodilConstructingLoader.scala:178)
[error]     at org.apache.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:530)}}",[],2018-09-19 19:53:42+00:00,,2018-11-14 15:42:39+00:00,Open,13186149,DAFFODIL-2007
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"If DFDLGeneralFormat.dfdl.xsd is going to provide a default for most properties then this one should also be provided.

The unix epoch is the right value to use. 

This is a backward compatible change in that users who have schemas now have to provide this property themselves if it is needed; hence, if we provide a default in DFDLGeneralFormat then whatever the user provides will override our value, and their schema will not change in behavior. ",[],2018-09-14 20:50:15+00:00,2018-10-16 13:30:54+00:00,2021-05-20 12:34:56+00:00,Closed,13185243,DAFFODIL-2006
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"When we output a time to the infoset, we also output it with milliseconds precision (i.e. the pattern contains ss.SSSSSS). The extra precision is completely valid according to the XSD specification, but the canonical representation should not contain the extra precision if it is zero. We already have this logic to not include the timezone if one does not exist, so we just need similar logic if the seconds is an integer vs decimal.",[],2018-09-14 19:42:11+00:00,2018-10-18 15:16:31+00:00,2021-05-20 12:34:51+00:00,Closed,13185233,DAFFODIL-2005
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We host the DFDL spec (HTML version) on the daffodil site.

Our tiny (but hopefully growing) set of TDML-based tutorial pages, and associated stylesheet to make them presentable, should be hosted on the daffodil-site also.

I think this is a matter of just copying some files from the daffodil/tutorials module over into the site.  These TDML files are run as part of regression however, so they really do need to live someplace where they can be run as tests as well as being presented on the site. 
",[],2018-09-13 21:40:50+00:00,2020-03-25 19:20:19+00:00,2020-04-13 18:08:56+00:00,Closed,13185016,DAFFODIL-2004
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Test coverage report would be of value to our user community, particularly those using Daffodil in cybersecurity applications to scrutinize data.

Synopsys Coverty is available for free for open-source projects. There may be other tools as well, but Coverty does say it works with Scala.",[],2018-09-13 14:49:21+00:00,2019-02-15 18:47:27+00:00,2021-05-20 20:01:42+00:00,Closed,13184925,DAFFODIL-2003
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Due to [SBT bug 4350|https://github.com/sbt/sbt/issues/4350], the {{daffodil-japi/genjavadoc:doc}} command fails to generate the Java API documentation with JDK 10 and newer. There also appears to be a bug in SBT that when this command fails, sbt does not see it as an error, so fortunately we can still run the command during integration tests and it will just silently fail on newer versions of Java.

When SBT fixes this issue, we should update the version in {{project/build.properties}} so that we can generate Java API documentation using any version of Java.",[],2018-09-12 13:47:43+00:00,2018-12-10 19:44:55+00:00,2021-05-20 12:33:42+00:00,Closed,13184602,DAFFODIL-2002
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"According to the DFDL spec, only regex features available in both Java 7 and ICU are allowed, and other features should cause an SDE. To check this, we simply compile a regex with both Java and ICU, and if either fails then we assume the regex is invalid, either because it actually is invalid or it uses a feature that the DFDL spec does not allow.

However, newer versions of Java support newer regex capabilities, so some regex's that are invalid in Java 7 are valid in later Java versions. This means that when using a new version of Java, a regex could be allowed that isn't portable and isn't valid according to the DFDL spec.

So we should manually inspect regular expressions rather for validity than relying on the Java/ICU regex compilers to determine if a regular expression is DFDL compliant and issue an error, or issue a warning that the regex may contain non-portable features, perhaps controlled by a tunable.",[],2018-09-11 13:09:57+00:00,2021-02-04 20:23:45+00:00,2021-02-04 20:23:49+00:00,Closed,13184343,DAFFODIL-2001
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Implement the CCSID feature.

Note: Insure compatibility with IBM DFDL when implementing.",[],2018-09-05 12:35:17+00:00,2021-02-04 20:22:04+00:00,2021-02-04 20:22:08+00:00,Closed,13183119,DAFFODIL-2000
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This page:

https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=75966202

Is obsolete as significant sections of it about the streaming input layer/bucket algorithm are implemented now. The section on regex is suspect also. 

This page needs to be updated. 

If the material here is useful, it should get revamped into code comments in some package scaladoc, since it is now implemented in the code. Either way it should get deleted from this web page.

Assigning to Steve L., as he implemented the message-streaming API changes, which involved these I/O layer changes, so he knows to what extent the bucketing in the code matches what was described here, and what doc is in the code already. 
",[],2018-08-29 20:49:22+00:00,,2019-07-03 12:52:52+00:00,Open,13181993,DAFFODIL-1999
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The README includes documentation on how to run the various tests on Daffodil, but does not mention how to increase the memory. Daffodil requires a pretty sizable amount of memory, the default value that sbt uses is usually not enough and can lead to out of memory exceptions. We should document how to bump up this usage, both via editing sbtopts or via the -mem option.",[],2018-08-28 21:27:52+00:00,2018-09-20 18:44:36+00:00,2021-05-20 12:34:13+00:00,Closed,13181730,DAFFODIL-1998
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,The release candidate script needs to be updated to not generate sha1 sums and the website needs to be updated to not show sha1 sums.,[],2018-08-28 21:25:13+00:00,2018-09-25 17:49:41+00:00,2021-05-20 12:34:20+00:00,Closed,13181729,DAFFODIL-1997
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"Should be ""Open Grid Forum""",[],2018-08-28 21:24:10+00:00,2018-09-20 18:45:20+00:00,2021-05-20 12:33:43+00:00,Closed,13181728,DAFFODIL-1996
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"There is an IP-Clearance page that we're supposed to maintain, in a SVN repo here.

https://svn.apache.org/repos/asf/incubator/public/trunk/content/ip-clearance/

This has no entry at all for Daffodil.

These XML files are used to create this overall IP Clearance status page: 

http://incubator.apache.org/ip-clearance/

I believe we have completed all these steps, so this is a matter of just filling in status indicating that these steps have been taken.

Here's a page for a project that has updated it to reflect completion of these steps. Perhaps we should do something similar, which is just to put various CONFIRMED bolded text into the various items with descriptions of how the requirements were met. 

http://incubator.apache.org/ip-clearance/brooklyn-ui-angular.html

Assigning to Steve Lawrence, as he did most of the IP-clearance work for Daffodil upon entry into the incubator prior to the first release. 


",[],2018-08-28 18:34:33+00:00,2018-08-28 20:04:56+00:00,2018-08-28 20:05:18+00:00,Closed,13181691,DAFFODIL-1995
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This page

https://incubator.apache.org/guides/website.html#help_wanted

Says we're responsible to maintain our own podling status info, and even the IP clearance info pages via git/svn repos.

This is our page generated automatically from the above mentioned git/svn I believe.

http://incubator.apache.org/projects/daffodil.html

It is 100% stub info currently, which makes us look very different than what our status actually is.

It would seem to me that this page would want to be updated roughly same time as the quarterly podling status report. (Last one I find is here: https://wiki.apache.org/incubator/June2018) and/or at each significant release. 

",[],2018-08-28 16:58:37+00:00,2018-09-06 19:36:44+00:00,2018-09-06 19:36:54+00:00,Closed,13181665,DAFFODIL-1994
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The release candidate script should perform more validation (e.g. rpmbuild existence, output directory existence, autogenerate scala/javadoc).",[],2018-08-20 19:03:44+00:00,2018-08-21 13:28:01+00:00,2021-05-20 12:34:38+00:00,Closed,13180037,DAFFODIL-1993
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2018-08-20 18:15:11+00:00,2018-08-21 13:29:13+00:00,2018-10-08 20:34:38+00:00,Closed,13180033,DAFFODIL-1992
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2018-08-20 18:14:30+00:00,2018-08-21 13:29:26+00:00,2018-10-08 19:42:42+00:00,Closed,13180032,DAFFODIL-1991
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,,[],2018-08-16 17:05:10+00:00,2018-09-06 19:37:57+00:00,2018-09-06 19:38:07+00:00,Closed,13179407,DAFFODIL-1990
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Per DFDL Erratum 5.18, if the dfdl:lengthKind is explicit, the facet minLength is NOT used to determine the target length. The target length is the value of the length expression (or constant) directly. The minLength facet is only used for validation (if enabled).

Code in Daffodil e.g., UnparseTargetLengthInCharactersEv, MinLengthInBitsEv, and UnparseTargetLengthInBitsEv, all take minLength into account even for lengthKind explicit, and do not consider whether the expression is a constant or not. (That check occurs elsewhere, so need not be taken into account, but minLength needs to be disregarded as far as the target length is concerned, but still kept around for validation purposes.)

Similarly, for types other than string/hexBinary that are text, textOutputMinLength should be ignored if dfdl:lengthKind is explicit, though it is an error if the length is a constant and is out of range for textOutputMinLength.  (Similarly for minLength/maxLength, except that is an SDW)

",[],2018-08-16 13:54:20+00:00,2018-10-29 14:36:35+00:00,2021-05-20 12:33:45+00:00,Closed,13179360,DAFFODIL-1989
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This logic
{{
    val isTypeUsingTextOutputMinLength = typeDef.typeNode match {
      case s: NodeInfo.String.Kind => false
      case s: NodeInfo.HexBinary.Kind => false
      case s: NodeInfo.AnySimpleType.Kind if (impliedRepresentation eq Representation.Binary) &&
        this.textOutputMinLength > 0 => true
      case _ => false
    }
}}

The sense of the ""if (impliedRepresentation eq Representation.Binary) is backward. It should be asking if it is Representation.Text.

This is used to issue an SDE about explicit length being out of range for textOutputMinLength, but will clearly not do so in the right way.",[],2018-08-16 12:48:53+00:00,2018-09-07 14:36:20+00:00,2021-05-20 12:33:57+00:00,Closed,13179341,DAFFODIL-1988
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,Setting the bucket size to something small prevents any buckets from being released. Need to investigate and fix.,[],2018-08-16 12:29:08+00:00,2018-08-16 15:11:06+00:00,2018-10-08 18:44:23+00:00,Closed,13179337,DAFFODIL-1987
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"See test test_comparison_operators_46a()

This test doesn't override the default value for dfdl:calendarTimeZone of """", meaning unknown time zone. It fails with assertion failed about ""hasTimeZone"".

test test_comparison_operators_46() overrides that with dfdl:calendarTimeZone=""UTC"" so it passes.

Bug was undiscovered because DFDLGeneralFormat used to define dfdl:calendarTimeZone to be ""UTC"", but it should be """" (not defined) by default, so when changed to this, the assertion failure if no timezone defined occurs. ",[],2018-08-15 21:43:17+00:00,2018-09-07 14:40:55+00:00,2021-05-20 12:35:09+00:00,Closed,13179180,DAFFODIL-1986
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The refactoring/rewrite of sequences used two saved states for arrays with Points of uncertainty, a beforeState at the very start of the array, and a priorState which the state prior to the current attempt to parse an occurrance. 

In a  code review it was observed that this beforeState prevents streaming by holding onto the I/O layer mark state for the entire array. 

Arguably, the beforeState is not only unnecessary, but incorrect. Arrays don't need a PoU before the entire array that doesn't advance when occurrences are found. If the array is determined to exist, because at least one occurrence exists, then failure of the entire array causes the enclosing PoU to be determined, not an artificial one created at the start of the array. 

Remove beforeState to fix. ",[],2018-08-15 12:39:01+00:00,2018-08-15 14:55:12+00:00,2018-10-08 14:00:33+00:00,Closed,13179063,DAFFODIL-1985
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"Regression in new separator/sequences code.

When the separator is a prefix of the terminator, or any other piece of in-scope terminating markup, then the separator match is preferred to the longest match, and that makes any format that depends on longest-match disambiguation to fail.

The one example we have of this is in VMF's spec scraper. 

So we also need a test of this in daffodil-test to have better coverage.",[],2018-08-14 15:56:38+00:00,2018-08-15 14:57:41+00:00,2018-10-08 14:26:12+00:00,Closed,13178889,DAFFODIL-1984
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Every time library versions are updated, the eclipse classpaths in eclipse-projects must be updated. We have a tool to do this, located in daffodil-propgen module, (formerly daffodil-lib), but it requires DAFFODIL_ROOT and so only can be run under eclipse. 

Not all developers use eclipse, so there's always this two-part change where library versions change, then the eclipse classpaths have to be fixed up to match. 

Ideally, we would run this tool from sbt when updateClassifiers is run and we would thereby completely eliminate the need to maintain the eclipse classpath files at all.  Every time you sbt clean ; sbt updateClassifiers, you need to refresh all the eclipse projects anyway.

So the task is to run this from sbt as part of updateClassifiers (perhaps), and eliminate the dependency on DAFFODIL_ROOT. ",[],2018-08-13 19:18:33+00:00,2020-05-13 22:36:07+00:00,2020-06-29 16:50:00+00:00,Closed,13178675,DAFFODIL-1983
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Libraries updated to latest.

Need to update eclipse project classpath files to match. ",[],2018-08-13 18:54:57+00:00,2018-08-13 20:31:54+00:00,2018-08-13 20:32:13+00:00,Closed,13178672,DAFFODIL-1982
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The DFDL specification states if testStandardExponentRep is the empty string, then no exponent character separates the mantissa from the exponent, allowing numbers like ""123+2"" to be valid. However, the version of ICU used by Daffodil does not handle the empty string expontent rep correctly, and so this feature is missing.",[],2018-08-13 13:54:58+00:00,,2018-12-13 19:30:23+00:00,Open,13178597,DAFFODIL-1981
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The code isn't consistent about whether the name for suppressing warnings is ""suppressWarnings"" or ""suppressSchemaDefinitionWarnings"". This made it impossible to use the feature. 

Change to suppressSchemaDefinitionWarnings since that is the name of the actual tunable.

Or if we like suppressWarnings better we should change the name uniformly. ",[],2018-08-10 16:47:34+00:00,2018-08-13 16:47:35+00:00,2018-10-05 16:46:19+00:00,Closed,13178321,DAFFODIL-1980
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
It is classifying some valid characters as ""overlong"" and erroring out.

The PNG schema on DFDLSchemas github has 1 test that runs into this bug on 3 byte Devangari script characters.

This is 6 devangari characters: e0 a4 b6 e0 a5 80 e0 a4 b0 e0 a5 8d e0 a4 b7 e0 a4 95
Should be: शीर्षक

But is coming out all substitution chars.

In 3 byte utf-8, the bits that at least one of must be non-zero are shown here in M, notice one of them is in the second byte. This second byte wasn't being tested.

1110MMMM 10Mxxxxx 10xxxxxx

In 4 byte utf-8, the bits that must at least one of be non-zero are:

11110 MMM 10MMxxxx 10xxxxxx 10xxxxxx



",[],2018-08-10 14:08:27+00:00,2018-08-13 16:34:35+00:00,2018-10-01 12:21:03+00:00,Closed,13178287,DAFFODIL-1979
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The runtime should be using Vector, not Seq/List.

Change childProcessors and runtimeDependencies to Vector types, and all usages then as well.

The core/compiler primtives layer is the bridge between DSOM and the grammar, which deal in List/Seq, and the runtime, which uses Vectors.",[],2018-08-09 21:15:29+00:00,2018-08-13 20:34:08+00:00,2018-10-09 13:25:54+00:00,Closed,13178129,DAFFODIL-1978
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The word ""recieve"" is spelled incorrectly in the documentation for the Java and Scala API documentation.",['beginner'],2018-08-06 12:16:57+00:00,2018-08-13 16:35:57+00:00,2018-10-02 12:04:55+00:00,Closed,13177101,DAFFODIL-1977
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Test ""scenario1_7"" was made ""threePass"" to get it to pass, but really it should be onePass, and the underlying Daffodil behavior needs to change.

Specifically, an empty <y/> element appears in the infoset from the first parse pass, and that element should NOT be present, as the element is optional, the content is zero-length, and the type is xs:string.  This <y/> element should only be created if there is some empty value syntax defined by way of initiator/terminator/emptyValueDelimiterPolicy. 

See the shouldRemoveZLStringHexBinaryValue method, which the code has wired to 'false' currently. Note that the parse must be attempted so that asserts/discriminators and setVars are executed. 

Furthermore, note that this does NOT terminate the array, as it is not a processing error. 

This test, and other tests that construct these empty 'y' elements should be corrected, and should not require threePass treatment from the TDML runner. 
",['ForInteroperabilityTest'],2018-08-02 17:11:12+00:00,2019-05-23 17:24:16+00:00,2021-05-20 12:34:46+00:00,Closed,13176476,DAFFODIL-1976
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Consider the following

{{    <xs:element name=""NS_13a"">
      <xs:complexType>
        <xs:sequence dfdl:separator="",""  dfdl:separatorPosition=""infix""><!-- OUTER -->
            <xs:sequence> <!-- INNER -->
              <xs:annotation>
              <xs:appinfo source=""http://www.ogf.org/dfdl/"">
                <dfdl:assert>{fn:true()}</dfdl:assert>
              </xs:appinfo>
              </xs:annotation>
          </xs:sequence>
          <xs:element name=""e2"" type=""xs:int"" minOccurs=""1"" maxOccurs=""unbounded"" dfdl:textNumberPattern=""#####""
               dfdl:occursCountKind=""implicit"" />
        </xs:sequence>
      </xs:complexType>
    </xs:element>}}

The sequence labeled INNER has no syntax, only an assertion. However, the OUTER sequence specifies infix separator.

Per clarifying discussion on the DFDL workgroup mailing list, and tests with IBM DFDL, daffodil behavior is wrong if it suppresses the separator after the INNER sequence. Separator suppression applies only to ""optional"" children, not required children. All model group instances are considered required, even if empty. 

Hence, valid data to match the above schema looks like

,1,2,3

The leading comma there is required. 

Daffodil must be doing something clever to detect that this initial sequence is empty and so is suppressing the separator for it. But this is incorrect.

Test test_NumSeq_13a illustrates the bug. (Test added as part of sequence and separators refactoring 2018-08-01)

Fixing this may cause many tests to break. This is a major non-backward-compatible change, and so should be fixed carefully. Schemas outside of daffodil for delimited formats may be impacted also. 


",[],2018-08-01 13:43:14+00:00,2019-05-23 17:24:14+00:00,2021-05-20 12:34:23+00:00,Closed,13176129,DAFFODIL-1975
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"There are tons of logging calls in Daffodil code that aren't costly (they use macros to avoid as much overhead as possible), but they also aren't necessary anymore.

The vast bulk of them do not represent points where we really would want logging in a deployed system. They are mostly just debug print statements disguised as logging calls, from way back when we didn't have trace/debug features.

The logging calls that are sensible for logging purposes should be retained. The others should be removed.

These statements do sometimes have some documentation value, so if removed, one should consider replacing them with a comment that makes the same point. 

But logging calls should be for logging, and not a replacement for a trace/debug. ",[],2018-07-31 12:46:55+00:00,,2019-07-03 12:52:54+00:00,Open,13175827,DAFFODIL-1974
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This from the dependencyUpdates sbt plugin (which is quite useful)

We're not *way off* from the latest, but before we release next we should be current.

{{sbt:daffodil> dependencyUpdates
dependencyUpdates
[info] Found 10 dependency updates for daffodil-lib
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-runtime1
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-propgen
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-macro-lib
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-io
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-runtime1-unparser
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-core
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-tdml
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-tutorials
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-sapi
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-test
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-japi
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-test-ibm1
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 10 dependency updates for daffodil-test-stdlayout
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[info] Found 12 dependency updates for daffodil-cli
[info]   com.fasterxml.jackson.core:jackson-core         : 2.8.8  -> 2.8.11 -> 2.9.6         
[info]   com.fasterxml.woodstox:woodstox-core            : 5.0.3            -> 5.1.0         
[info]   com.ibm.icu:icu4j                               : 51.1             -> 51.2   -> 62.1
[info]   commons-io:commons-io                           : 2.5              -> 2.6           
[info]   jline:jline                                     : 2.12.1           -> 2.14.6        
[info]   junit:junit:it,test                             : 4.11             -> 4.12          
[info]   net.sf.expectit:expectit-core:it,test           : 0.8.1  -> 0.8.3  -> 0.9.0         
[info]   org.fusesource.jansi:jansi                      : 1.14             -> 1.17.1        
[info]   org.scala-lang.modules:scala-parser-combinators : 1.0.4  -> 1.0.7  -> 1.1.1         
[info]   org.scala-lang.modules:scala-xml                : 1.0.6            -> 1.1.0         
[info]   org.scalacheck:scalacheck:it,test               : 1.13.4 -> 1.13.5 -> 1.14.0        
[info]   xerces:xercesImpl                               : 2.10.0           -> 2.12.0        
[success] Total time: 1 s, completed Jul 27, 2018 12:31:24 PM
sbt:daffodil> }}
",[],2018-07-27 16:35:38+00:00,2018-08-13 16:38:07+00:00,2018-10-05 12:51:10+00:00,Closed,13175220,DAFFODIL-1973
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"While the issue of having the same character represent the escapeEscapeCharacter as well as the escapeBlockEnd has been resolved (DAFFODIL-1923), the fix was incomplete.  For example, if escapeEscapeCharacter='+' and escapeBlockEnd='++' then the string ""+++"" will not be escaped to ""++"" as it should.

 

A test case for this has been added as test_escBlkMultipleEEC in section07/escapeScheme/TestEscapeSchemeDebug.scala",[],2018-07-26 20:01:30+00:00,,2018-09-13 14:34:26+00:00,Open,13174975,DAFFODIL-1972
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Per the DFDL spec section 9.5, the order of evaluation of statements for model groups is not correct.

This appears in the grammar
{code}
  final override lazy val termContentBody = prod(""termContentBody"") {
    dfdlStatementEvaluations ~ groupLeftFraming ~ _content ~ groupRightFraming
  }
{code}

This puts all the statement evaluations first. 

However, asserts or discriminators with test expressions (not patterns) are executed AFTER the content of the group. So this needs to be split up so that the statements that are supposed to execute before appear before, and the ones that execute after are after.

Note that per DFDL spec section 7.4.1, discriminators and asserts are mutually exclusive, and while there can be multiple asserts, there can be only one discriminator at a single annotation point.

Note also DFDL spec section 9.5.2, which specifies that discriminators are evaluated even if the parsing of the content fails. This will also require special treatment in the model group combinators to be sure discriminators execute. The same problem does not occur for elements because the element combinators explicitly execute discriminators regardless of failure of the element, and after they are parsed. 

test test_discrimExpression_04 behaves incorrectly because of this bug.



",[],2018-07-24 17:38:12+00:00,,2021-04-29 19:47:48+00:00,Open,13174158,DAFFODIL-1971
Bug,[],jimwelchok,James L Welch,jimwelchok,James L Welch,Minor,"org.apache.daffodil.exceptions.Abort: Invariant broken: RelativePathExpression.this.steps2.apply(0).isInstanceOf[org.apache.daffodil.dpath.Up]



DFDL file dfdl:occursCount=""\{./Reg_Count}""

should be dfdl:occursCount=""\{../Reg_Count}""",[],2018-07-23 18:57:24+00:00,2018-07-23 19:18:47+00:00,2018-09-27 23:08:32+00:00,Closed,13173894,DAFFODIL-1970
Bug,[],jimwelchok,James L Welch,jimwelchok,James L Welch,Minor,"java.lang.StringIndexOutOfBoundsException: String index out of range: 64

 <xs:element name=""AppParms"" type=""xs:string"" dfdl:lengthKind=""explicit"" dfdl:length=""64"" dfdl:textOutputMinLength=""64"" />

 Removed dfdl:textOutputMinLength - same error

Attached file AppTable.cfg is the original binary file {color:#FF0000}parsed{color} into AppTable.xml

Unparsing gives exception on first AppParms element",[],2018-07-19 16:58:02+00:00,2018-08-06 13:44:59+00:00,2018-10-01 11:29:04+00:00,Closed,13173246,DAFFODIL-1969
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"The performance subcommand currently works by creating a ByteBuffer and just repeatedly calling parse on that. In order to test streaming performance we would need to create an InputStream and continuously provide data to it, perhaps via a PipeInput/OutputStream pair or something similar. This only applies when testing parse performance (i.e. having both --stream and --unparse options should be an error).",[],2018-07-17 14:38:20+00:00,2020-08-03 11:46:18+00:00,2020-11-16 13:28:21+00:00,Closed,13172677,DAFFODIL-1968
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The --stream option for the parse subcommand currently outputs repetitions of XML data, e.g.
{code:xml}
<foo>...</foo>
<foo>...</foo>
<foo>...</foo>
{code}

Since there is no root element, this is not valid XML data and the libraries we use to parse the XML string throw and error. So, in order support streaming XML data into unparsing we need to manually split the XML before giving it to the XML parsing libraries. Parsing XML ourselves and just not caring about not having a root element is an option, but might be more effort than it is worth. Another option is to output some sort of delimiter in between each XML and just split the data on that. Extra care needs to be done to ensure that we do not split if the XML content contains that delimiter.",[],2018-07-16 14:29:43+00:00,2018-07-17 14:40:04+00:00,2021-05-20 20:01:52+00:00,Closed,13172413,DAFFODIL-1967
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The CLI performance command is using an excessive amount of memory, resulting in out of memory exceptions. Needs to investigate and fix.",[],2018-07-16 11:35:54+00:00,2018-07-17 12:10:16+00:00,2018-09-25 11:28:02+00:00,Closed,13172376,DAFFODIL-1966
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The message attribute for dfdl:assert and dfdl:discriminator is allowed to be a DFDL expression, for example:
{code:java}
<dfdl:assert message=""{ fn:concat('unknown case ', ../data1) }"">...</dfdl:assert>{code}
However, we currently treat the message as a string, and never evaluate the expression, even if it contains braces. To resolve this issue, we should create a new Evaluatable for the message attribute and pass that into the assert/discriminator parsers.",['beginner'],2018-07-13 14:19:07+00:00,2018-09-25 17:50:03+00:00,2021-05-20 12:33:50+00:00,Closed,13172039,DAFFODIL-1965
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A user reported an error when unparsing in the array combinator.

The schema looks something like this:
{code}
...
<xs:sequence>
  <xs:element name=""foo"" ... />
  <xs:element name=""bar"" minOccurs=""1"" maxOccurs=""6"" dfdl:occursCountKind=""implicit"">
    <xs:complexType>
      <xs:sequence>
        <xs:annotation>
          <xs:appinfo source=""http://www.ogf.org/dfdl/"">
            <dfdl:discriminator>{ expression }</dfdl:discriminator>
          </xs:appinfo>
        </xs:annotation>
        <xs:sequence dfdl:hiddenGroupRef=""hiddenGrouPRef"" />
        <xs:group ref=""someGroupWithRequiredElement""/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:sequence>
...
{code}

With XML that looks like this:
{code}
<foo>...</foo>
{code}

So the bar element is an array that requires at least one instance, but the infoset has zero instances. Trying to unparse this resultsin the following:

{code}
org.apache.daffodil.exceptions.Abort: Invariant broken: event.isStart.&&(event.node.isInstanceOf[org.apache.daffodil.infoset.DIArray])
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.processors.unparsers.ArrayCombinatorUnparser.unparse(ElementKindUnparsers.scala:254)
org.apache.daffodil.processors.unparsers.Unparser$class.unparse1(Unparser.scala:72)
... 
{code}

The expected result is to return an UnaparseError about expecting a start array event but not getting one. I think the assertion just needs to be changed to an UnparseError, since there is clearly a case where the assertion doesn't hold.
",[],2018-07-11 16:23:05+00:00,2018-08-15 14:53:27+00:00,2018-10-08 13:38:20+00:00,Closed,13171458,DAFFODIL-1964
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"We changed toe parse() method to deprecated use of ReadableByteChannels in favor of our new InputSourceDataInputStream, which allows repeated calls to parse on the same stream. We probably don't really need to ReadableByteChannel for saving/reloading parsers, should hose just be changed to Input/OutputStreams?",['beginner'],2018-07-09 18:19:47+00:00,,2021-02-04 20:16:00+00:00,Open,13170930,DAFFODIL-1963
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The Travis CI builds seem to fail randomly with a ""Killed"" message and error 137. It seems this is do to running out of memory.

We should investigate if we're used excessive amounts of memory during testing, or determine if there is a way to bump the available memory given by the TravisCI build system.",[],2018-07-05 14:03:59+00:00,2018-07-09 14:15:16+00:00,2018-08-24 14:14:14+00:00,Closed,13170278,DAFFODIL-1962
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"TDML Runner does parse-unparse round-trip tests.

Some tests the input data is not cannonical, but after parse-unparse, the data *IS* cannonical. Hence, a Parse-Unparse-Parse is required before the Infoset matches. 

However, very few tests require this. Those should be explicitly identified by changing the TDML roundTrip='true/false' attribute into an enumeration:

roundTrip=""false/true/simple/multiPass""

The values true and simple mean the same thing. The value multi-pass means that a parse-unparse-parse cycle is needed for a parse test, and an unparse-parse-unparse cycle is needed for an unparse test.

TBD: are longer cycles actually needed? If so then tests that require P-U-P-U should be distinghished from those that require only P-U-P, perhaps by changing the enums for round trip to ""twoPass"" and ""threePass"". 

By specifying this more specific need for passes, the intent of the test writer is clearer.

This also avoids cascading errors where a test that should not require multiple passes, is failing, multiple-passes are attempted, and the failure one observes is the multi-pass failure. This can just be some artifact, and not have much useful value when debugging. You want the first failure, in the case of a simple round-trip test. You don't want it to try multi-pass looping.

Right now I have 140-or-so failures in our TDML-based test suite (daffodil-test). I'd very much like to know which of these are simple failures, and debug those, and ignore the multi-pass failures for now, but I have no way of distinguishing them currently. 

This change could also improve test time - because re-running tests in the multi-test loops wouldn't even be attempted for tests that don't require it. 
",[],2018-07-03 14:33:56+00:00,2018-07-13 16:13:06+00:00,2018-10-05 13:15:49+00:00,Closed,13169836,DAFFODIL-1961
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The RepUnboundedParser currently creates two marks: startState and priorState. The priorState mark changes as we go through each repetition of the array. The startState mark never changes. If an error occurs during a repetition and a discriminator *IS NOT* set, we reset to the prior mark, effectively backtracking the single failed repetition and keep all successful repetitions of the array. However, if an error occurs during a repetition and a discriminator *IS* set, then we backtrack the entire array back to the startState mark.

This behavior is not correct. This behavior treats the beginning of an array as if it were a point of uncertainty, but that is not the case. Only each element of the array is a point of uncertainty. So there is no need for the startState mark. It should be removed, and if a repetition fails and a discriminator is set then we should simply discard priorState mark and backtrack to whatever point of uncertainty enclosed the array (i.e. just return from the parse call and let containing parsers handle it).

We should also examine the other repetition parsers and ensure they have the correct behavior.",[],2018-07-02 16:39:50+00:00,2018-08-15 12:49:30+00:00,2018-10-09 13:09:42+00:00,Closed,13169567,DAFFODIL-1960
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Create EXI (dense binary XML) representation using an EXI-specific InfosetInputter and InfosetOutputter.

These would be very similar to the XML InfosetInputter and Outputter - as EXI libraries such as EXIfficient https://github.com/EXIficient/exificient already have SAX/StAX, APIs, etc. 
",['beginner'],2018-07-02 15:24:49+00:00,,2020-06-10 17:15:16+00:00,Open,13169551,DAFFODIL-1959
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Many of the options in the Scallop configuration in Main.scala is duplicate. For example, all subcommands except for ""test"" accept the ""-s"" option. The configuration for the -s is currently duplicated among all the commands. To clean up this code, we should create traits that contain shared options and mix them into the subcommands. See the scallop wiki for how to create traits and mix them in to work with Scallop:

https://github.com/scallop/scallop/wiki/Subcommands#sharing-arguments-with-inheritance",['beginner'],2018-06-21 13:46:19+00:00,,2021-02-04 20:13:49+00:00,Open,13167406,DAFFODIL-1958
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Minor,"Ran into an issue where passing in a unicode control character, in this case 0x80, was not being converted to its correct hex value.  Instead it ended up being 0xC280 which is how this character is represented in UTF-8.",[],2018-06-18 20:37:41+00:00,2018-06-19 15:07:53+00:00,2018-06-19 15:07:53+00:00,Closed,13166792,DAFFODIL-1957
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"User reported that dfdl:terminator="" %LF;"" causes the following exception, likely due to the space at the beginning of property value. If this property (and likely others) start or end with a space, it should probably be an SDE, since they probably meant to do something like dfdl:terminator=""%SP;%LF;"". Exception below:
{code}
Exception in thread ""main"" java.lang.AssertionError: assertion failed
	at scala.Predef$.assert(Predef.scala:156)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.buildTransitions(CreateDelimiterDFA.scala:119)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.apply(CreateDelimiterDFA.scala:56)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.apply(CreateDelimiterDFA.scala:69)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$$anonfun$apply$1.apply(CreateDelimi…fun$apply$1.apply(CreateDelimiterDFA.scala:88)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.immutable.List.map(List.scala:285)
	at org.apache.daffodil.processors.dfa.CreateDelimiterDFA$.apply(CreateDelimiterDFA.scala:88)
{code}",['beginner'],2018-06-13 20:16:33+00:00,2018-11-01 19:11:34+00:00,2021-05-20 12:33:58+00:00,Closed,13165926,DAFFODIL-1956
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"A user reported the attached schema that does not properly close the dfdl:format tag causes the following exception:
{code}
scala.xml.parsing.FatalError: expected closing tag of dfdl:format
	at scala.xml.parsing.MarkupParser$class.errorNoEnd(MarkupParser.scala:40)
	at scala.xml.parsing.ConstructingParser.errorNoEnd(ConstructingParser.scala:48)
        ...
	at scala.xml.parsing.MarkupParser$class.document(MarkupParser.scala:244)
	at scala.xml.parsing.ConstructingParser.document(ConstructingParser.scala:48)
	at org.apache.daffodil.xml.DaffodilConstructingLoader.load(DaffodilConstructingLoader.scala:168)
{code}
This error needs to be handled and turned into a SDE.",['beginner'],2018-06-13 19:52:44+00:00,2018-11-09 17:58:01+00:00,2021-05-20 12:34:08+00:00,Closed,13165920,DAFFODIL-1955
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"If you try to use Daffodil with Java 10, you get a failure with the exception:
{code}
java.lang.NumberFormatException: Not a version: 10
	at scala.util.PropertiesTrait$class.parts$1(Properties.scala:184)
	at scala.util.PropertiesTrait$class.isJavaAtLeast(Properties.scala:188)
	at scala.util.Properties$.isJavaAtLeast(Properties.scala:17)
	at org.apache.daffodil.util.CheckJavaVersion$.checkJavaVersion(CheckJavaVersion.scala:29)
	at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:166)
	at org.apache.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:149)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at org.apache.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:64)
	at org.apache.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:64)
	at org.apache.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:149)
	at org.apache.daffodil.Main$$anonfun$71.apply(Main.scala:714)
	at org.apache.daffodil.Main$$anonfun$71.apply(Main.scala:711)
	at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
	at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
	at org.apache.daffodil.Main$.createProcessorFromSchema(Main.scala:711)
	at org.apache.daffodil.Main$.run(Main.scala:824)
	at org.apache.daffodil.Main$.main(Main.scala:1297)
	at org.apache.daffodil.Main.main(Main.scala)
{code}
It looks like Java changed their version schema to not use a dot (e.g. 10 vs 1.10) and Scala 2.11's checker could handle that, so a NumberFormatException is thrown.

It looks like scala 2.12 has better checking for this (see DAFFODIL-1652), but we should also catch a NumberFormatException here and treat that as if it is not a valid Java version.

This was reported on Java 10, but I suspect the same issues happens for Java 9. Also, we should run our tests on Java 9/10 to ensure tests still pass with a newer Java.",['beginner'],2018-06-13 19:48:54+00:00,2018-12-17 14:23:23+00:00,2021-05-20 12:34:33+00:00,Closed,13165917,DAFFODIL-1954
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"When an OutOfMemoryError is throw, the CLI reports it as as a bug with the banner:
{code}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Please report this bug and help us fix it: ...
{code}

Although this is an unexpected exception, it probably isn't really a bug in most cases. It usually means that default JVM memory was not sufficient for the size of files to be parsed. Instead of saying this is a bug, we should print out a message that says how one can increase this limit (e.g. setting DAFFODIL_JAVA_OPTS environment variable).",['beginner'],2018-06-12 13:22:31+00:00,2018-11-14 14:19:22+00:00,2021-05-20 12:34:14+00:00,Closed,13165564,DAFFODIL-1953
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Found a ??? (Unimplemented stub for scala) in file SpecifiedLength2.scala.

This is clearly just an oversight and should be implemented or replaced with an appropriate SDE/PE/UE, or Assert. ",[],2018-06-11 14:03:26+00:00,,2021-02-04 20:12:17+00:00,Open,13165334,DAFFODIL-1952
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"
Our XML Diff algorithm is of utility outside of the rest of Daffodil, and user community has requested API access and documentation of it (from Java), and CLI, for its use.

Note however, there are other tickets calling into question whether we actually should be finding someone else's more comprehensive XML diff solution so as to not have to maintain our own such infrastructure. 

See DAFFODIL-1891, DAFFODIL-1887, DAFFODIL-288",[],2018-06-11 13:45:30+00:00,,2018-10-23 16:49:11+00:00,Open,13165330,DAFFODIL-1951
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
This code may exist in our JAPI unit tests already. 

A common usage pattern for our user community is to parse, inspect, sanitize, and reassemble (unparse) data to provide guaranteed spec-compliant clean data to applications. 

Left over data past the normal end marker or length of a file is a common thing people want to eliminate.

However, whether left over data is a problem or not depends on the application need. For some applications, e.g, message streaming, the ""left over"" data is really just the first part of the next message, and must be where we pick up to keep parsing after finishing a first message. 

Since both (and perhaps other) modes of operation are reasonable and expected, we need examples of how to implement these patterns, and they need to be implementable from our Java API. 

There may already be unit tests illustrating this in the JAPI unit test set. Our TDML runner certaily does that, but it is written in Scala.  If so then this issue is really just requesting a Wiki documentation page highlighting this code and the usage pattern of interest. 

This issue may be subsumed by the Message streaming API issue, which is adding a new mode of operation where left-over data is expected, and doesn't indicate any problem with the data stream.  (DAFFODIL-1565, DAFFODIL-1065)
",['beginner'],2018-06-11 13:37:30+00:00,,2021-02-04 20:10:52+00:00,Open,13165329,DAFFODIL-1950
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"User community requests ability to add XML comments to elements based on schema annotations.

Also processing instructions similarly. This allows ascribing validation or other errors to parts of a specification such as an Inspection/Sanitization Guide for data. 

Note that a feature is present to add Processing instructions that contain a dump of what is called the node-cache of computed property values - this is for debugging purposes but does show how to add PI to a node so it illustrates part of what is needed for this new feature.",[],2018-06-11 13:20:12+00:00,2021-02-04 20:08:14+00:00,2021-02-04 20:08:18+00:00,Closed,13165325,DAFFODIL-1949
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Defaulting dfdl:occursCountKind to 'parsed' creates lots of undesirable behaviors. E.g., even optional elements (maxOccurs=1) are treated as possible arrays. 

The right default behavior here is given by dfdl:occursCountKind 'implicit'. ",[],2018-06-04 19:51:55+00:00,2018-08-15 17:13:07+00:00,2018-10-08 14:49:34+00:00,Closed,13163965,DAFFODIL-1948
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"When a test runs round trip, if the test parse succeeds, but the unparse creates an extra character in the output, on reparse we get a left-over-data error, but the error message is bogus because it says 0 bits remaining, which makes no sense for left-over data.

org.apache.daffodil.tdml.TDMLException: Left over data. Consumed 48 bit(s) with 0 bit(s) remaining.

In general, the round-trip logic should be a bit smarter. The output should indicate what phase of the test it was in when the failure occurred. In this specific case, the unparsed output doesn't match the size of the original input. That might be ok on round trip, but in most cases we want parse/unparse to work without having to reparse.

We need to fix the bug so that this doesn't report incorrect left-over-data info. We also need to change roundTrip to have a mode for one-pass only, meaning that the unparse is expected to create exactly the same as the input data (for parse tests), so that it should not try to reparse the unparsed output, but should immediately report the error. 
",[],2018-06-01 21:52:59+00:00,2018-08-15 20:26:57+00:00,2018-10-08 18:05:03+00:00,Closed,13163542,DAFFODIL-1947
Bug,[],efahl,Elizabeth Fahl,efahl,Elizabeth Fahl,Minor,"When trying to parse an invalid date, due to being out of the valid range for Calendar, currently the date overflows to a valid date, but then it is incorrect. This should be a failure instead. This affects both text and binary representation.

See test_dateTimeImplicitPatternFail5 in TestSimpleTypesDebug.Scala",[],2018-05-31 17:39:20+00:00,2018-11-05 16:00:13+00:00,2021-05-20 12:34:26+00:00,Closed,13163215,DAFFODIL-1946
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Five tests are failing when a user runs sbt test, all appear to be related to calendar patterns that use ""weeks in year"" elements. Unclear how to reproduce the issue so far. Errors copied below. For more information, see https://lists.apache.org/thread.html/68c22e44ecdb5cf383e5078bdd7aac92d2a68bbe6b5a63cac3e2d99e@%3Cdev.daffodil.apache.org%3E

{code}
One in daffodil-test-ibm1/test:
	[error] Test org.apache.daffodil.IBMTestsThatPass.test_simple_type_properties_text_calendar_13_01 failed: java.lang.Exception: 
	[error] Comparison failed.
	[error] Expected
	[error]           <myDateTime>2010-12-27T04:05:06.000000+00:00</myDateTime>
	[error] Actual
	[error]           <myDateTime>2010-12-20T04:05:06.000000+00:00</myDateTime>


Four in daffodil-test/test:
	[error] Test org.apache.daffodil.section05.simple_types.TestSimpleTypes.test_dateCalendarDaysInFirstWeek3 failed: java.lang.Exception: 
	[error] Comparison failed.
	[error] Expected
	[error]           <date17>2012-01-01+00:00</date17>
	[error] Actual
	[error]           <date17>2012-12-23+00:00</date17>

	[error] Test org.apache.daffodil.section05.simple_types.TestSimpleTypes.test_dateCalendarDaysInFirstWeek5 failed: java.lang.Exception: 
	[error] Comparison failed.
	[error] Expected
	[error]           <date20>2013-02-24+00:00</date20>
	[error] Actual
	[error]           <date20>2013-02-10+00:00</date20>

	[error] Test org.apache.daffodil.section05.simple_types.TestSimpleTypes.test_dateCalendarFirstDayOfWeek03 failed: java.lang.Exception: 
	[error] Comparison failed.
	[error] Expected
	[error]           <date06>2013-02-03+00:00</date06>
	[error] Actual
	[error]           <date06>2013-02-02+00:00</date06>

	[error] Test org.apache.daffodil.section05.simple_types.TestSimpleTypes.test_dateCalendarFirstDayOfWeek04 failed: java.lang.Exception: 
	[error] Comparison failed.
	[error] Expected
	[error]           <date06>2013-02-04+00:00</date06>
	[error] Actual
	[error]           <date06>2013-02-03+00:00</date06>
{code}",[],2018-05-24 17:37:14+00:00,2021-04-07 20:43:16+00:00,2021-04-09 13:00:49+00:00,Closed,13161840,DAFFODIL-1945
Task,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Scaladex is a index site for scala libraries and projects that scala developers can contribute to.

Daffodil should clearly be listed there, but is not.

https://www.scala-lang.org/blog/2017/08/28/gsoc-connecting-contributors-with-projects.html#how-to-add-your-project

",[],2018-05-24 03:42:35+00:00,2018-10-09 18:23:32+00:00,2018-10-09 18:23:48+00:00,Closed,13161658,DAFFODIL-1944
New Feature,[],efahl,Elizabeth Fahl,efahl,Elizabeth Fahl,Major,Add the value 'ibm4690Packed' for 'binaryCalendarRep' property.,[],2018-05-22 16:27:57+00:00,2018-08-15 16:02:58+00:00,2018-10-09 13:02:35+00:00,Closed,13161125,DAFFODIL-1943
New Feature,[],efahl,Elizabeth Fahl,efahl,Elizabeth Fahl,Major,Add the value 'packed' for 'binaryCalendarRep' property.,[],2018-05-22 16:26:32+00:00,2018-08-15 16:03:16+00:00,2018-10-09 12:47:42+00:00,Closed,13161122,DAFFODIL-1942
New Feature,[],efahl,Elizabeth Fahl,efahl,Elizabeth Fahl,Major,Add the value 'bcd' for 'binaryCalendarRep' property.,[],2018-05-22 16:24:25+00:00,2018-07-30 21:03:34+00:00,2018-10-09 12:14:18+00:00,Closed,13161121,DAFFODIL-1941
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Some users want to use the latest and greatest version of Daffodil. Additionally, it would be nice if the schemas on DFDLSchemas github were tested with the latest version of Daffodil when new Daffodil commits are made.

To support this, we need to set up an automated Jenkins build that is triggered on each commit of Daffodil and automatically builds and publishes a SNAPSHOT to repository.apache.org.",[],2018-05-17 13:24:36+00:00,2021-02-04 20:05:42+00:00,2021-02-04 20:05:47+00:00,Closed,13160020,DAFFODIL-1940
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The page in the Apache Daffodil site
https://daffodil.apache.org/unsupported/
that lists the unimplemented features and status w.r.t. the errata, that page is missing entries for errata 5.32 to 5.38.

",[],2018-05-16 21:24:01+00:00,2018-08-15 18:41:29+00:00,2018-10-08 17:19:25+00:00,Closed,13159833,DAFFODIL-1939
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"When generating rpm, zip, and tar for release, the hashes of the daffodil jars are different in the rpm than in the zip and tar. Since it is rebuild, it appears the only changes are things like timestamps--the content is exactly the same. However, this makes it difficult to verify that the jars are the same during a release process. This appears to be a bug with the sbt-native-packager plugin always rebuilding the packaged jars each time it creates an rpm or zip. Issue has been opened on the sbt-native-packager bug tracker to investigate this: https://github.com/sbt/sbt-native-packager/issues/1130",[],2018-05-15 12:07:26+00:00,2018-08-14 15:50:49+00:00,2018-10-05 19:56:32+00:00,Closed,13159395,DAFFODIL-1938
Improvement,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"Running RAT on Daffodil is currently a manual process that reqiures downloading an Apache RAT release and using the right command line arguments. This requires too much effort and so contributors will forget to run it, and we cannot run checks on the automated build.

An sbt-rat plugin started development on github (https://github.com/jvz/sbt-rat). We should investigate if this meets our needs and incorporate it into Daffodil.",[],2018-05-15 11:14:51+00:00,2018-07-09 17:35:42+00:00,2018-07-12 20:02:28+00:00,Closed,13159385,DAFFODIL-1937
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2018-05-15 11:08:33+00:00,2018-05-15 14:28:37+00:00,2018-05-21 10:57:32+00:00,Closed,13159381,DAFFODIL-1936
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Once a layer is created while parsing, if one tries to display the data via the {{info data}} debugger command, the following exception is thrown:

{code}
org.apache.daffodil.exceptions.Abort: Invariant broken. Runtime.scala - Leaked exception: java.lang.IllegalStateException: Must be debugging.
org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
org.apache.daffodil.processors.DataProcessor.org$apache$daffodil$processors$DataProcessor$$doParse(Runtime.scala:278)
org.apache.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:202)
	at org.apache.daffodil.exceptions.Assert$.abort(Assert.scala:129)
	at org.apache.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:175)
	at org.apache.daffodil.processors.DataProcessor.org$apache$daffodil$processors$DataProcessor$$doParse(Runtime.scala:278)
	at org.apache.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:202)
	at org.apache.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:194)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at org.apache.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:65)
	at org.apache.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:65)
	at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:194)
	at org.apache.daffodil.processors.DataProcessor.parse(Runtime.scala:177)
	at org.apache.daffodil.Main$$anonfun$73.apply(Main.scala:852)
	at org.apache.daffodil.Main$$anonfun$73.apply(Main.scala:850)
	at org.apache.daffodil.util.Timer$.getTimeResult(Timer.scala:76)
	at org.apache.daffodil.util.Timer$.getResult(Timer.scala:35)
	at org.apache.daffodil.Main$.run(Main.scala:850)
	at org.apache.daffodil.Main$.main(Main.scala:1297)
	at org.apache.daffodil.Main.main(Main.scala)
{code}

Perhaps the areDebugging flag isn't carried over when creating a new data input stream.

Related, we might want to think about what kindof changes would be useful when debugging layers. For example, it might be useful to be able to decide which layer to show, though maybe we just always want to show the active layer. ",[],2018-05-07 15:36:21+00:00,2018-05-07 21:06:23+00:00,2018-05-21 20:04:46+00:00,Closed,13157632,DAFFODIL-1935
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"I have a schema that has two parts: a header and a body. The header contains an unbounded array of delimited fields. The header has a terminator to signify when the fields are complete. The entire header element is in a lineFolded_IMF layered sequence. Immediately following the layered sequence is a body element, which is just a delimited string. The header fields and terminator are parsed correctly. However, the body is parsed with length zero, and no error is given about left over data. Perhaps the limiting layer is not being reset to the original layer correctly? So the layer IOStream is closed, making it so no data after the layer can be read?",[],2018-05-04 15:08:13+00:00,2018-05-04 17:55:25+00:00,2018-05-04 17:55:25+00:00,Closed,13157232,DAFFODIL-1934
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"Nightly tests showed a fairly drastic performance regression (50% reduction in speed) in commit 1ea2290f28: All properties for Base64/layering implemented.

Skimming the code, one change jumped out at me as a likely cause in ByteBufferDataInputStream.scala:

{code:language=diff}
@@ -91,7 +90,13 @@ object ByteBufferDataInputStream {
       case _ => {
         // copy the contents of the stream into an array of bytes
         val bos = new ByteArrayOutputStream
-        IOUtils.copy(in, bos)
+        var b: Int = 0
+        while ({
+          b = in.read()
+          b != -1
+        }) {
+          bos.write(b)
+        }
         bos.flush()
         bos.close()
         in.close()
{code}

This changes the copy from a bulk copy to a byte-by-byte copy, which appears to have pretty drastic performance. A few simple quick tests shows that reverting this change recovers all performance losses.

Mike, can you confirm if this change can be reverted, or if there was some other reason related to layering to switch to a byte-by-byte copy?",[],2018-05-04 12:24:05+00:00,2018-05-23 11:45:41+00:00,2018-05-25 11:51:43+00:00,Closed,13157133,DAFFODIL-1933
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Now that we have layering support (real soon now) there are some less commonly used layerings that are nevertheless standard, and we ought to support.

Content Transfer Encoding: quoted-printable is part of IMF.

Encoded-Word is part of MIME and it supports Q-encoding (similar to quoted-printable), and base64.

The job is to support all of these ""variations"". The Encoded-word base64 is likely to require another base64 layer variant as well.

Set this as lower priority, but of course it will jump up as soon as somebody in fact needs this.

",[],2018-05-02 20:42:24+00:00,2021-01-21 21:31:24+00:00,2021-01-21 21:31:24+00:00,Closed,13156695,DAFFODIL-1932
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"Whenever I use debug/trace now, every step I see:
{code}
Debugger error: expression evaluation failed: Schema Definition Error: Relative path '..' past root element.
Schema context: element reference ex:e1 Location line 1 in file:/tmp/anon5232752542024144234.dfdl.xsd
{code}

This is due to the debugger/trace own internal use of "".."" in a path evaluation in order to display the infoset I believe. Any step where there is no current infoset element gets this error.

At one time there was code to specifically catch this and suppress it, but code changes must have modified the thrown exception in a way that now bypasses the logic that suppressed this. 

",[],2018-04-30 15:36:43+00:00,2019-06-26 16:56:41+00:00,2021-05-20 12:33:55+00:00,Closed,13156134,DAFFODIL-1931
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Because DFDLGeneralFormat.dfdl.xsd defines calendarTimeZone=""UTC"" dates like ""7/4/1999"" come through in the infoset as 1999-07-04+00:00, that is, with the trailing time-zone specifier.

The right definition for calendarTimeZone for a general purpose format is """", which means ""time zone unknown"".

This avoids the need for all users of DFDLGeneralFormat who have dates to override calendarTimeZone themselves to """" value, and puts the burden on them to define it if they know and want a default time zone.

Note: changing this will likely change the behavior of dateTime type as well as the date type, and we should not be taking time zone information or defaults from the local machine settings. 
",[],2018-04-26 14:17:10+00:00,2018-08-16 16:26:21+00:00,2018-10-08 19:31:49+00:00,Closed,13155424,DAFFODIL-1930
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
Parse of 9/26/2017 with pattern MM/d/yyyy results in 2017-09-26+00:00 which has timezone specifier on it. 

The timezone specifier is incorrect because the data does not say what the timezone is, nor is it otherwise specified, and it is unexpected in an xs:date.

We should suppress a timezone specifier when timezone is unknown.",[],2018-04-25 16:27:05+00:00,2018-04-25 17:38:19+00:00,2018-04-25 17:38:19+00:00,Closed,13155172,DAFFODIL-1929
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Minor,"TDMLRunner removes apostrophes from expected when &apos; is used in infoset. When the test is executed the apostrophes are stripped from the expected result which cause the comparison to fail.

*Infoset in test:*

   <infoset>
     <dfdlInfoset>
             <tns:record>
              <tns:item>1</tns:item>
              <tns:item>Column &apos;Number&apos; Two</tns:item>
              <tns:item>3</tns:item>
              <tns:item>4</tns:item>
              <tns:item>5</tns:item>
            </tns:record>
     </dfdlInfoset>
   </infoset>

*Test Result:*

[error] Test org.apache.daffodil.section07.escapeScheme.TestEscapeSchemeDebug.test_escBlkAposRemoved failed: java.lang.Exception:
[error] Comparison failed.

[error] Expected
[error]          <record><item>1</item><item>Column Number Two</item><item>3</item><item>4</item><item>5</item></record>

[error] Actual
[error]           <record><item>1</item><item>Column 'Number' Two</item><item>3</item><item>4</item><item>5</item></record>
[error] Differences were (path, expected, actual):
[error] (record/item[2],'Column Number Two','Column 'Number' Two'), took 2.114 sec

*See daffodil-tdml Debug Test Case:*

org.apache.daffodil.tdml.TestTDMLRunner3.test_escBlkAposRemoved

 ",[],2018-04-20 17:27:25+00:00,2021-02-01 17:20:49+00:00,2021-02-02 12:58:42+00:00,Closed,13154102,DAFFODIL-1928
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Critical,"Pluggable layering transforms, rather than registering them in a singleton object.

We might want to use the java Services API for this kindof thing. Would prevent users from having to call the register function--just need to put a special file in the META-INF directory in the jar file.

See the file LayerTransformer.scala.",[],2018-04-20 01:12:52+00:00,,2021-06-11 19:48:34+00:00,Open,13153888,DAFFODIL-1927
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We have encodings that have names like:

X-DFDL-USASCII-6-BIT-PACKED, defined to be bitOrder LSBF,

But we found we do in fact need the MSBF flavor, so for symmetry reasons we now have:

X-DFDL-USASCII-6-BIT-PACKED-LSB-FIRST
and
X-DFDL-USASCII-6-BIT-PACKED-MSB-FIRST

the name that is non-specific should be deprecated - produce a warning. ",[],2018-04-20 00:55:25+00:00,2021-01-21 21:28:26+00:00,2021-01-21 21:28:26+00:00,Closed,13153886,DAFFODIL-1926
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"These two files were contributions from Mitre. We never attempted to get an SGA from Mitre since we thought all contributions were removed/replaced. This means that these files were improperly relicensed to Apache License v2. The tests do not provide much value, so should just be removed.",[],2018-04-17 12:00:21+00:00,2018-05-03 20:04:45+00:00,2018-05-25 10:08:58+00:00,Closed,13152977,DAFFODIL-1925
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"The SAXParserFactory.newInstance() method is used to create a new instance of a SAXParser. There are a handful of steps taken to find a SAXParser to use, as documented in the [newInstance() JavaDocs|https://docs.oracle.com/javase/7/docs/api/javax/xml/parsers/SAXParserFactory.html#newInstance()]. The problem with this is that Daffodil sets the entity-resolver property to an instance of the DFDLCatalogResolver, which extends a specific Xerces XMLEntityResolver. In order for this to work, we must be guaranteed that the SAXParserFactory instance we get is the Xerces one, and not some other one overridden by one of the ways described in newInstace().

So instead, we should use the newInstance method that lets you provide a string specifying which factory class to use, and specify our Xerces one.
",[],2018-04-13 12:01:14+00:00,2018-05-23 11:47:18+00:00,2018-06-04 13:47:14+00:00,Closed,13152267,DAFFODIL-1924
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
Excel spreadsheet looks like this:


|1|2|This is ""some fun"" now|3

When exported to CSV, this is created
{code}
1,2,""This is """"some fun"""" now"",3
{code}
Notice the quotations around the string, and the doubling of the quotes inside the string as an escaping mechanism.

One would think that an escape scheme with kind 'escapeBlock' with the block start, block end, escape and escapeEscape all defined to be '""' (doublequote) would work, but it does not. 

Error message is a PE indicating ""delimiter not found"".

I am only 60% sure of this bug. It came up in a project using CSV data exported from excel, but other complexities there may have been interacting. 

Isolated test case is needed to really verify the behavior.



",[],2018-04-12 11:16:41+00:00,2018-07-30 13:32:57+00:00,2018-10-02 11:43:46+00:00,Closed,13151932,DAFFODIL-1923
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Blocker,"incubator-daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I null --parser /home/dfdl/dfdl-testharness/saved_parsers/current/ato-rep.parser.bin /home/dfdl/dfdlTestData/data-formats/usmtf/ATO/parse_data/ATO_1m.txt
 
[error] Parse Error: Failed to populate AirTaskingOrder[1].  Expected 1 item(s). Cause: Parse Error: Failed to populate TaskGroupingSegment[1].  Expected 1 item(s). Cause: Parse Error: Delimiter not found.
Schema context: TaskGrouping Location line 100 column 36 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018.
Schema context: TaskGroupingSegment Location line 96 column 24 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018.
Schema context: AirTaskingOrder Location line 17 column 12 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018
 
[error] Parse Error: Failed to populate TaskGroupingSegment[1].  Expected 1 item(s). Cause: Parse Error: Delimiter not found.
Schema context: TaskGrouping Location line 100 column 36 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018.
Schema context: TaskGroupingSegment Location line 96 column 24 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018
 
[error] Parse Error: Delimiter not found.
Schema context: TaskGrouping Location line 100 column 36 in file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_usmtf/ATO/messages_replicated.xsd
Data location was preceding byte 1297 limit(bytes) 1022018",[],2018-03-30 15:47:25+00:00,2018-04-05 13:18:57+00:00,2018-04-09 15:35:53+00:00,Closed,13149190,DAFFODIL-1922
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Currently Daffodil insists on Java 8+. It refuses to run on Java 7.

Some users need it to run on Java 7, and despite the possible charset decoder issues on decode errors in Java 7, they want to try it anyway.

So some mechanism for bypassing the Java 8 check should be put in place so that the check will not be done. I would suggest an undocumented ""feature"" for now, as we don't really know the implications of running on Java 7, and don't test there. 
",[],2018-03-30 15:44:07+00:00,2018-04-05 14:46:45+00:00,2018-04-10 18:52:27+00:00,Closed,13149189,DAFFODIL-1921
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"It's hard to debug because the printed quasi-XML that we use for the grammar objects and for the parser/unparser objects is not uniform enough.

Improve these so that it's easier to see what is going on when debugging, or looking at a trace.",[],2018-03-29 16:27:54+00:00,2018-04-05 16:04:40+00:00,2018-04-10 18:51:07+00:00,Closed,13148932,DAFFODIL-1920
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Working with Mike on getting the IBMTLOG schema project working, we have come to the conclusion that Daffodil's compiler and runtime cannot correctly support trailing suppression without some major refactoring.

We can currently support separatorSuppresssionPolicy always or never, but trailing suppression requires backtracking that will need its own iterative combinators.

Pull request 55 (which should be pushed upstream soon after the creation of this ticket) includes a couple tests that demonstrate what works and doesn't work with our current implementation.  I believe that we can currently support trailing suppression for required elements, but for optional separated elements things break down when the first element of a sequence is optional and missing.  See org.apache.daffodil.section13.packed.TestPacked.testDelimitedIBM4690IntOptSeq02",['ForInteroperabilityTest'],2018-03-29 13:25:27+00:00,2019-05-23 17:24:17+00:00,2021-05-20 12:34:59+00:00,Closed,13148870,DAFFODIL-1919
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,The JSON schema has a boolean hack in it. This should be replaced by use of real boolean type now that it is fully implemented.,[],2018-03-26 12:51:01+00:00,2018-05-23 11:51:17+00:00,2018-05-30 11:47:58+00:00,Closed,13147929,DAFFODIL-1918
New Feature,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Minor,"Daffodil v2.0 wishlist includes new character class entities LSP, LSP* and LSP+, which are the same as WSP except they do not match line endings. This is useful as currently it is impossible to match an empty line followed by a newline via something like %WSP*;%NL; due to the greediness of WSP* and the inability for our delimiter scanner to backtrack of forward lookahead.

Related, it might be useful to also add NL+ and NL* to match an unbounded number of newlines.

Additionally, it might be a good idea to cause an SDE if a character class that contains * or
+ is immediately followed by a character inside that character class. The reason being that such sequences will always fail without lookahead or backtracking, which probalby isn't worth implementing.

For security reasons, we should also implement a tunable to limit the number or repetitions of these character entities.",[],2018-03-13 14:43:07+00:00,2021-01-21 21:27:12+00:00,2021-01-21 21:27:12+00:00,Closed,13144752,DAFFODIL-1917
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The CSV schema on DFDLSchemas has
leadingSkip='0'  alignment=""implicit"" alignmentUnits=""bits"" trailingSkip=""0""

Presumably this is because Daffodil gives SDE if these are not present. 

As a textual representation, these properties should not be required. Daffodil should not SDE if they are absent. 
",[],2018-03-08 17:44:04+00:00,2019-05-29 19:45:26+00:00,2021-05-20 12:35:03+00:00,Closed,13143623,DAFFODIL-1916
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Steve Hanson of IBM tested some of our schemas on github DFDLSchemas for compatibility with IBM DFDL.

He tested QuasiXML and CSV.

IBM DFDL does not implement encodingErrorPolicy=""replace"". We should consider whether we can change this to encodingErrorPolicy=""error"" without breaking things, or rather, we should change it, and see if too many things break. It would be helpful if every schema trying to be portable did not have to deal with this little detail. 

These properties we don't implement yet are required by IBM DFDL, so without them defined in DFDLGeneralFormat our schemas can't be immediately portable to IBM DFDL even if everything ""real"" in them is portable. The properties are:

floating=""no""
textBiDi=""no""
calendarCenturyStart=""53"" 
calendarObserveDST=""yes""

Daffodil doesn't need these properties yet, but won't reject them I don't think, so we should include them to avoid portability hassles.

",[],2018-03-08 16:46:07+00:00,2018-03-09 19:22:04+00:00,2018-04-10 17:41:20+00:00,Closed,13143602,DAFFODIL-1915
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Rename of src/test to src/it breaks classpath for daffodil-cli for eclipse.
The src/test source entries in the .classpath must be removed. ",[],2018-03-05 21:49:25+00:00,2018-03-09 17:13:13+00:00,2018-04-09 18:19:51+00:00,Closed,13142674,DAFFODIL-1914
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
So I believe this jar is *not* part of Daffodil, nor called by daffodil. It is used at the time we generate the javadoc for Daffodil. Yet the jar ends up in lib_managed.

./lib_managed/docs/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8
./lib_managed/docs/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8/genjavadoc-plugin_2.11.8-0.10-javadoc.jar
./lib_managed/jars/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8
./lib_managed/jars/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8/genjavadoc-plugin_2.11.8-0.10.jar
./lib_managed/srcs/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8
./lib_managed/srcs/com.typesafe.genjavadoc/genjavadoc-plugin_2.11.8/genjavadoc-plugin_2.11.8-0.10-sources.jar

Then when we generate .classpath files for the Eclipse IDE, they contain this library, which is not pulled when you do 'sbt updateClassifiers', but only when you package daffodil-japi I believe.

So why this ends up in lib_managed when other ""tools"" do not is a mystery.
",[],2018-03-05 18:33:36+00:00,2018-03-09 17:12:02+00:00,2018-04-10 18:12:49+00:00,Closed,13142618,DAFFODIL-1913
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"{color:#000000}Pulled the latest updates to incubatlr-daffodil repository. The gmtif schema failed to compile during the nightly test run.{color}

{color:#000000}{color:#000000}Rolled back to commit 075084f5a825bde3168b8e89a02c7e58404cc325 before the gmtif schema/parser successfully compiled.{color}{color}

{color:#000000}{color:#000000}Daffodil commit 6ad629d19b9c53db117155ed4f99ec565a07e274 causes the gmtif schema to fail to compile.{color}{color}

{color:#000000}{color:#000000}Numerous schema validation errors are returned. A subset shown below. {color}{color}

 

{color:#000000}*Error messages are below:* {color}

{color:#000000}Attempting to save parser for gmtif.{color}

{color:#000000}Test name is: gmtif_1t_76b_20000{color}

{color:#000000}CMD: /home/dfdl/incubator-daffodil/daffodil-cli/target/universal/stage/bin/daffodil -v save-parser -s /home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif.dfdl.xsd > /home/dfdl/dfdl-testharness/saved_parsers/0.0.0/gmtif.parser.bin{color}

{color:#000000}process return code: 1{color}

{color:#000000}Failed to Save Parser - gmtif{color}

{color:#000000} {color}

{color:#000000}Error: [error] Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd; lineNumber: 220; columnNumber: 56; src-resolve: Cannot resolve the name 'gmtif:I16' to a(n) 'type definition' component.{color}

{color:#000000}Schema context: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd Location in file:??{color}

{color:#000000}[error] Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd; lineNumber: 230; columnNumber: 54; src-resolve: Cannot resolve the name 'gmtif:I16' to a(n) 'type definition' component.{color}

{color:#000000}Schema context: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd Location in file:??{color}

{color:#000000}[error] Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd; lineNumber: 259; columnNumber: 61; src-resolve: Cannot resolve the name 'gmtif:I16' to a(n) 'type definition' component.{color}

{color:#000000}Schema context: file:/home/dfdl/dfdl-dataformats/data-formats/gmtif/src/main/resources/com/tresys/gmtif/xsd/gmtif_dwell_segment.dfdl.xsd Location in file:??{color}

{color:#000000}.{color}

{color:#000000}.{color}

{color:#000000}.{color}

{color:#000000}.{color}",[],2018-03-02 17:23:07+00:00,2018-03-02 19:35:01+00:00,2018-03-09 13:40:45+00:00,Closed,13142141,DAFFODIL-1912
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"CLI tests take a long time to run, so by default we do not aggregate the daffodil-cli project so that they are no run when you run {{sbt test}}. However, this leads to some bad side effects (e.g. cli stuff not compiling by default, weird behaviors with sbt clean not cleaning daffodil-cli). We want to enable aggregation, but there's not way to disable the a single command (test) for a single subproject (daffodil-cli).

However, SBT has an ""integartion test"" concept, where you can put tests in {{src/it/\{scala,java,resources}}} and they will only be run via {{sbt it}}. This would be a good way to reenable aggregation of daffodil-cli, but prevent CLI tests from running with {{sbt test}}. Need to confirm that this works as expected and that we can maintain the sbt debug capabilities",[],2018-02-28 01:13:34+00:00,2018-03-06 18:13:10+00:00,2018-04-09 17:58:45+00:00,Closed,13141398,DAFFODIL-1911
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"We have a schema like this:
{code:java}
<xs:sequence>
  <xs:sequence>
    <xs:sequence>
      <xs:element name=""foo"" ... />
    </xs:sequence>
    <xs:element ref=""bar"" minOccurs=""0"" maxOccurs=""unbounded"" dfdl:occursCountKind=""implicit"" /> 
  </xs:sequence>
  <xs:element name=""baz"" ... />
</xs:sequence>
{code}
During schema compilation, we determine which elements could potentially appear in the infoset after the ""foo"" element. We correctly determine that ""bar"" could come after ""foo"", but we fail to recognize that ""baz"" could also come after ""foo"", since ""bar"" has minOccurs=""0"". This means that when unparsing, if ""bar"" does not exist, Daffodil outputs an error saying it expected only ""bar"" but did not find it.

 ",[],2018-02-27 14:31:55+00:00,2018-03-01 16:06:43+00:00,2018-04-09 18:48:08+00:00,Closed,13141238,DAFFODIL-1910
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"
Our JAPI and SAPI don't allow one to drill down (into the javadoc/scaladoc) of the DISimple and other DINode subclasses that are passed to the InfosetOutputter methods.

The information on these DINode classes, including the ElementRuntimeData information needed by an infoset outputter needs to be on documented APIs.

This suggests we need to revisit the DINode classes and subclasses, and create a read-only trait that we cast up to when passing these to the InfosetOutputter API methods. 

This is what InfosetElement, InfosetDocument, and InfosetArray were supposed to be, though whether they are suitable is unclear. The DISimple/DIComplex distinction, for example, is very helpful when creating an InfosetOutputter. We may also want to provide an interface to a subset of the ERD data - as many of its members are internally about the needs of parsers/unparsers and not relevant to the external API for Daffodil.

",[],2018-02-22 17:36:59+00:00,,2021-01-21 21:25:42+00:00,Open,13140267,DAFFODIL-1909
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"Pulled latest updates from incubator-daffodil repository, commit 62eea54b75392c3fffcb36060d5bb078dfed3910.

Thee 3 test are intermittently failing on the test machine.

The tests passed 7 times and failed 4 (2 fail, 2 pass, 2 fail then 5 pass).

Did a git clean after 1^st^ 2 fails.

These tests have not failed on my VM.

Tests and failure are below.

[debug] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_01 started

[error] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_01 failed: org.apache.daffodil.tdml.TDMLException: Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd; lineNumber: 1; columnNumber: 1; < expected

[error] Schema context: file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd Location in file:??

[error] Schema Definition Error: No XML Node could be loaded from URISchemaSource(file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd).

[error] Schema context: file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd Location in file:??, took 0.51 sec

[error]     at org.apache.daffodil.tdml.ParserTestCase$$anonfun$runProcessor$2.apply(TDMLRunner.scala:663)

[error]     at org.apache.daffodil.tdml.ParserTestCase$$anonfun$runProcessor$2.apply(TDMLRunner.scala:663)

[error]     at scala.util.Either$LeftProjection.foreach(Either.scala:302)

[error]     at org.apache.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:663)

[error]     at org.apache.daffodil.tdml.TestCase.run(TDMLRunner.scala:612)

[error]     at org.apache.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:325)

[error]     at org.apache.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:313)

[error]     at org.apache.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:107)

[error]     at org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_01(TestNamespaces.scala:150)

[error]     ...

[error] Caused by: Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd; lineNumber: 1; columnNumber: 1; < expected

[error] Schema context: file:/home/dfdl/incubator-daffodil/daffodil-test/target/scala-2.11/test-classes/org/apache/daffodil/section06/namespaces/multi_base_09.dfdl.xsd Location in file:??

[debug] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_01 finished, took 0.512 sec

 

Also these tests:

[debug] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_02 started
[error] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_02 failed:

[debug] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_03 started
[error] Test org.apache.daffodil.section06.namespaces.TestNamespaces.test_multi_encoding_03 failed:",[],2018-02-20 15:07:22+00:00,2019-12-23 16:04:29+00:00,2021-05-20 12:33:50+00:00,Closed,13139683,DAFFODIL-1908
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"A user has an annotation system goes by name ""STF"".

These annotations need to live in the same DFDL schema as DFDL annotations. .

They are isolated in their own xs:appinfo blocks with different source URI.

The problem is that this annotation language uses XML attributes on some of its annotation elements (just as DFDL does).

And there's the problem.... this annotation language has xs:attribute declarations, and Daffodil issues an SDE because of them, because we don't know that they aren't intended to be (mistakenly) used for data. We don't have a way of knowing they're only for an annotation language that we'll be ignoring. 

We need a mechanism to tolerate these without turning off checking for misuse of DFDL-disallowed XML constructs entirely. 

Possibilities might be to issue an SDW, but have a means for suppressing this SDW so that users with this situation don't have to put up with lots of SDW messages. Another idea is to have a dfdl:ignore annotation that can be placed on an xs:include/xs:import telling Daffodil to not carry out that import. Another possibility is to add XSD1.1 features for conditional preprocessing of schemas. 

",[],2018-02-20 13:51:36+00:00,2018-03-01 14:58:38+00:00,2018-04-09 20:22:08+00:00,Closed,13139664,DAFFODIL-1907
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Blocker,"The following updates should be made to the LICENSE/NOTICE files:
 # In the source LICENSE file, for all bundled dependencies we should be more explicit about exactly which files/directories are under a non-Apache license. For example saying ""we bundle sources from Passera"" is not enough. Instead, we should list out the directory paths to the passera files/directories. Also, be more explicit about the license. For example:
  
   daffodil-lib/src/main/scala/passera/
   daffodil-lib/src/test/scala/passera/
 BSD-3-Clause:
  
   (then the license text).
 # Rename the LICENSE/NOTICE in daffodil-cli something different to clarify that they are not the license for that directory, but are for the binary releases. Something like ""LICENSE-bin"" would be acceptable.
 # In the NOTICE, we should list the original authors of all source transferred to ASF (i.e. NCSA, Tresys, and IBM).
 # Determine if we can split partially licensed files. For example, in daffodil-test/src/test/resources/org/apache/daffodil/ibm-tests/, we have multiple files that were originally created by IBM (transferred to ASF via an SGA), but which include DFDL snippets taken from the Open Grid Forum DFDL Spec, which is under a non-Apache license. If possible and if without too much messiness, we should move the snippets out to separate files so that there are no files that are half-Apache/half OGF licensed.
 # Revert the LICENSE and NOTICE changes in PR-43 ([https://github.com/apache/incubator-daffodil/pull/43)] so that the NOTICE file does not contain information about BSD and other licenses (i.e. the copyright information should be moved back to the LICENSE file)",[],2018-02-20 12:36:39+00:00,2018-04-05 14:38:39+00:00,2018-04-09 14:33:13+00:00,Closed,13139649,DAFFODIL-1906
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Found when removing deprecated daf:error() from gif schema, and adding in an initial test.

If you have an element of complex type like:
{code}
<xs:element name=""Header"">
		<xs:complexType>
			<xs:sequence>
				<xs:sequence dfdl:hiddenGroupRef=""hidden_GIF_Signature_Group"" />
				<xs:element name='Signature' type='xs:string' dfdl:inputValueCalc='{
					if (xs:string(../Hidden_Signature) eq ""474946"") then ""GIF""    
					else fn:error(""gif"", ""fn:error called."",  .) <!-- LOOK HERE -->
					}' />
     ...
{code}
The fn:error function call won't compile because of its 3 arguments, the third argument which is a ""."" meaning ""this element"", errors with 
{code}
Caused by: Schema Definition Error: The type Complex cannot be converted to String.
Schema context: element reference {}Global_Color_Table Location line 50 column 18 in file:/home/mbeckerle-unencrypted/DFDLSchemas/gif/bin/com/mitre/gif/xsd/gif.dfdl.xsd

{code}
The daffodil implementation of fn:error says all 3 arguments are type String. This third argument is type Any. It's documented to be ""the object causing the error"" in XPath. 

A fix will loosen this restriction, allowing that 3rd argument to be anything. Of course it then has to accept and do something with anything there. 

In particular, if  a complex type element is passed there, it has to do something meaningful.
",['beginner'],2018-02-16 20:14:21+00:00,,2020-07-30 22:04:26+00:00,Open,13139139,DAFFODIL-1905
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"TravisCI seems to be timing out on random tests when testing CLI. Need to investigate why this is happening, but we might just need to up the Expect timeouts for CLI tests.",[],2018-02-16 17:59:09+00:00,2018-08-24 14:14:14+00:00,2021-05-18 14:38:35+00:00,Closed,13139105,DAFFODIL-1904
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,Moving built-in-formats from daffodil-lib to daffodil-lib-unittest breaks many things. Every eclipse project that depended on that file is broken and must have its eclipse classpath modified.,[],2018-02-14 15:29:12+00:00,2018-02-14 18:35:03+00:00,2018-02-14 19:37:46+00:00,Closed,13138519,DAFFODIL-1903
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Users at NATO report that Daffodil doesn't tolerate the xs:appinfo element carrying additional attributes. They want to combine appinfo DFDL attributes with other appinfo for other purposes on the same schema.

(I will get a clarifying example.)

",[],2018-02-13 18:11:43+00:00,2018-02-16 16:59:40+00:00,2018-02-16 20:58:55+00:00,Closed,13138259,DAFFODIL-1902
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,This files are currently excluded in .rat-excludes because Apache Rat says these files are not allow. It appears that it is not detecting the licenses for these files. Need to figure out what Apache Rat is looking for and why it is not detecting the licenses,[],2018-02-12 22:41:47+00:00,2018-02-16 16:09:38+00:00,2018-02-16 20:41:24+00:00,Closed,13138000,DAFFODIL-1901
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Ideally separate test files, both inputs and expected outputs, would contain the Apache license. In general, include an apache license header in the files would causes tests to fail since the header is not expected. One potential solution to this is to modify the TDML Runner so that if a file begins with an apache license header then the header is stripped off before use. This does add some difficulties (e.g. manual tests require removing the license header, etc.) so care should be taken to make this work without getting in the way.",[],2018-02-12 22:23:16+00:00,2018-09-13 14:30:09+00:00,2021-05-18 14:38:32+00:00,Closed,13137995,DAFFODIL-1900
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,The copyright portions that are in the LICENSE on the various licenses should be moved to the NOTICE. The LICENSE should still include which files are under the other licenses.,[],2018-02-12 22:10:41+00:00,2018-02-16 16:09:57+00:00,2018-02-16 20:41:51+00:00,Closed,13137990,DAFFODIL-1899
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"See test testMixedBigEndianMSBFWithLittleEndianLSBF

Also the test test_ep3 had to work around the bug. See the tdml file for this test and see the comments and work-around. This test ought to be changed to not use the workaround.",[],2018-02-08 19:27:43+00:00,,2018-09-13 14:34:29+00:00,Open,13137244,DAFFODIL-1898
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Blocker,"Attempted to execute the nightly test suite on incubator-daffodil commit add8c5a6f82f25073475a4d6c7ae94fb5ca6e01a.

Four dfdl schemas failed to compile for the following formats: army-drrs,  ato-rep, csvMixedNarrow and pcap.

The command and error are provided below.

Attempting to save parser for army-drrs.
Test name is: army-drrs_10t_all_1000
CMD: /home/dfdl/incubator-daffodil/daffodil-cli/target/universal/stage/bin/daffodil -v save-parser -s /home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/fouo_disa/army_drrs_lh/army_drrs_lh.dfdl.xsd > /home/dfdl/dfdl-testharness/saved_parsers/0.0.0/army-drrs.parser.bin
process return code: 1
Failed to Save Parser - army-drrs

Error: [error] Schema Definition Error: No schema document at location file:/home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/org/apache/daffodil/fouo_disa/army_drrs_lh/army_drrs_lh.dfdl.xsd.
Schema context: Import Location in file:unknown
[warning] Schema Definition Warning: schemaLocation property uses deprecated edu/illinois/ncsa/daffodil path instead of org/apache/daffodil. Converting to new path.
Schema context: Import Location in file:unknown
[info] Time (compiling): 219ms

 

 ",[],2018-02-08 17:23:47+00:00,2018-02-16 16:08:25+00:00,2018-02-16 20:05:54+00:00,Closed,13137204,DAFFODIL-1897
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"For each, the release artifacts should be of the form 

""apache-daffodil-2.1.0-incubating""",[],2018-02-08 17:13:04+00:00,2018-02-12 18:57:54+00:00,2018-02-14 18:31:12+00:00,Closed,13137198,DAFFODIL-1896
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"Need to remove src/main/resources, as that directory no longer exists.",[],2018-02-08 14:53:39+00:00,2018-02-12 19:07:28+00:00,2018-02-13 16:15:00+00:00,Closed,13137166,DAFFODIL-1895
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Accidentally trying to compile the iCalendar.xsd schema (note, not the iCalendar.dfdl.xsd schema) results in the following exception. Note that this schema does not have any DFDL properties, so its a little surprising compilation got so far. Unclear if this error is related to not have DFDL properties or something else.
{code:java}
java.util.NoSuchElementException: None.get
        at scala.None$.get(Option.scala:347)
        at scala.None$.get(Option.scala:345)
        at edu.illinois.ncsa.daffodil.dsom.Union$$anonfun$namedTypes$1.apply(RestrictionUnion.scala:229)
        at edu.illinois.ncsa.daffodil.dsom.Union$$anonfun$namedTypes$1.apply(RestrictionUnion.scala:229)
        at scala.collection.immutable.List.map(List.scala:273)
        at edu.illinois.ncsa.daffodil.dsom.Union.namedTypes$lzycompute(RestrictionUnion.scala:228)
        at edu.illinois.ncsa.daffodil.dsom.Union.namedTypes(RestrictionUnion.scala:228)
        at edu.illinois.ncsa.daffodil.dsom.Union.directMemberTypes$lzycompute(RestrictionUnion.scala:231)
        at edu.illinois.ncsa.daffodil.dsom.Union.directMemberTypes(RestrictionUnion.scala:231)
        at edu.illinois.ncsa.daffodil.dsom.Union.unionMemberTypes$lzycompute(RestrictionUnion.scala:234)
        at edu.illinois.ncsa.daffodil.dsom.Union.unionMemberTypes(RestrictionUnion.scala:233)
        at edu.illinois.ncsa.daffodil.dsom.Union.primType$lzycompute(RestrictionUnion.scala:196)
        at edu.illinois.ncsa.daffodil.dsom.Union.primType(RestrictionUnion.scala:195)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase$$anonfun$primType$2$$anonfun$apply$1.apply(SimpleTypes.scala:61)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase$$anonfun$primType$2$$anonfun$apply$1.apply(SimpleTypes.scala:61)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase$$anonfun$primType$2.apply(SimpleTypes.scala:61)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase$$anonfun$primType$2.apply(SimpleTypes.scala:61)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase$class.primType(SimpleTypes.scala:61)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase.primType(SimpleTypes.scala:135)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase$$anonfun$simpleTypeRuntimeData$7.apply(SimpleTypes.scala:193)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase$$anonfun$simpleTypeRuntimeData$7.apply(SimpleTypes.scala:193)
        at edu.illinois.ncsa.daffodil.processors.SimpleTypeRuntimeData.primType$lzycompute(RuntimeData.scala:270)
        at edu.illinois.ncsa.daffodil.processors.SimpleTypeRuntimeData.primType(RuntimeData.scala:270)
        at edu.illinois.ncsa.daffodil.processors.SimpleTypeRuntimeData.preSerialization(RuntimeData.scala:286)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase$$anonfun$1.apply$mcV$sp(SimpleTypes.scala:142)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase$$anonfun$1.apply(SimpleTypes.scala:142)
        at edu.illinois.ncsa.daffodil.dsom.SimpleTypeDefBase$$anonfun$1.apply(SimpleTypes.scala:142)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:600)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:598)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:596)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:594)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply$mcV$sp(OOLAG.scala:302)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:302)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:302)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$class.checkErrors(OOLAG.scala:302)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$OOLAGHost$class.isError(OOLAG.scala:361)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.edu$illinois$ncsa$daffodil$compiler$ProcessorFactory$$super$isError(Compiler.scala:151)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:151)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:142)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:142)
        at edu.illinois.ncsa.daffodil.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:142)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:142)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:142)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:142)
        at edu.illinois.ncsa.daffodil.compiler.Compiler.compileSource(Compiler.scala:333)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:727)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:726)
        at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
        at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
        at edu.illinois.ncsa.daffodil.Main$.createProcessorFromSchema(Main.scala:726)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:839)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1312)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala){code}",[],2018-02-07 19:32:38+00:00,2020-05-18 20:17:50+00:00,2020-11-19 18:58:28+00:00,Closed,13136936,DAFFODIL-1894
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The TDML runner is supposed to cache compiled schemas so that many tests using the same DFDL schema will compile it only once.

It currently only does this when compileAllTopLevel is true, but the default for this is false.

The cache should be modified to take the root element into account - i.e., compile all top levels need not be true. The cache should hit, avoiding recompilation, so long as the same root element is being used. 

",[],2018-02-07 17:01:55+00:00,2018-03-01 15:07:49+00:00,2018-04-09 19:24:19+00:00,Closed,13136900,DAFFODIL-1893
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"The iCalendar schema (on DI2E.net) has been enhanced to have a couple unit tests that use TDML runner.

These tests are tiny, yet on current 2.1.0 snapshot they take minutes to run. 

Something is wrong.
",[],2018-02-07 16:34:00+00:00,2018-02-07 17:22:11+00:00,2018-02-07 19:06:38+00:00,Closed,13136894,DAFFODIL-1892
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"For the iCalendar schema, the infoset files used for unparser testing, and for comparison of results for parse testing, they carry these attributes on the root element:

xsi:noNamespaceSchemaLocation

or 

xsi:schemaLocation

The Daffodil output from parse doesn't have these attributes, so comparisons fail complaining that these attributes do not match.

The TDML runner should tolerate (i.e., ignore) these xsi namespace attributes when comparing result sets.
",['beginner'],2018-02-07 15:54:51+00:00,,2021-01-21 21:21:21+00:00,Open,13136885,DAFFODIL-1891
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"User related documentation has been moved from the wiki to daffodil.apache.org. Those pages should be removed from the wiki, so links should be updated to reference the daffodil.apache.org pages.",[],2018-02-07 15:00:59+00:00,2018-02-12 18:57:24+00:00,2018-02-13 16:09:28+00:00,Closed,13136877,DAFFODIL-1890
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"Implement the binaryNumberRep 'offsetBinary'. 

This is a good first project for someone new to the Daffodil code base.

This is a proposal for inclusion in the DFDL language, needed for some formats such as STANAG 5516. 

This is also called excess-K, or biased, but I think offset binary is a better description of it.

In this representation you take an unsigned binary, and just subtract an offset. E.g., for a 3-bit number, mostSignificantBitFirst:

bits    unsigned  twos-comp  offsetBinary

000       0         0          -4
001       1         1          -3
010       2         2          -2
011       3         3          -1
100       4        -4           0
101       5        -3           1
110       6        -2           2
111       7        -1           3        

At the moment, users have to work around this in Daffodil using inputValueCalc and outputValueCalc. This is feasible, but really awkward for such a simple concept.

The DFDL spec would change so table 13.7 allows 'offsetBinary' for the signed integer types.

The lengthKind would have to be implicit or explicit. (SDE otherwise).",[],2018-02-02 22:21:31+00:00,,2019-01-23 16:36:09+00:00,Open,13135898,DAFFODIL-1889
New Feature,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"The SISO-J data format requires the 4th combination of byteOrder and bitOrder which DFDL v1.0 currently disallows. DFDL workgroup discussions suggest this restriction will just be lifted. 

This is a good feature for someone new to Daffodil to implement.

This format, which is a envelope format for an envelope-and-payload style of data, describes data as bigEndian, but LSBF.

https://www.sisostds.org/DesktopModules/Bring2mind/DMX/Download.aspx?Command=Core_Download&EntryId=43048&PortalId=0&TabId=105

Thanks to Marshall Miller of Quark Security for this insight. This item extracted from the dev@daffodil.apache.org mailing list.

One can workaround this problem in Daffodil by way of dfdl:inputValueCalc/dfdl:outputValueCalc and hidden groups. But that is, perhaps, unsatisfying.

Example:

Data is comprised of 3 unsigned integer bitfields:
slot1 is 12 bits
slot2 is 32 bits
slot3 is 20 bits

Given an input with the following bytes in hex:
01 23 45 67 89 AB CD EF

Parsed results need to be (in hex):
slot1: 0567
slot2: DEF01234
slot3: 089ABC

Explanation of results:

Since the bit fields need to consume data in a leastSignificantBitFirst
order, it is easier to represent the input in right-to-left order
where bits are consumed starting at the right and moving toward the
left.  Since words are 4 bytes, and in big endian order, the lowest
bit in the 4th byte is the first bit to be consumed.  Reordering the
input data and consuming data from right to left yields the correct
field boundaries.

89 AB CD EF 01 23 45 67      parse fields right to left
05 06 07 08 01 02 03 04      input byte position

slot1 consumes the right 3 nibbles, slot2 consumes the next 8 nibbles,
and slot3 consumes the left 5 nibbles.",[],2018-02-02 22:15:29+00:00,2018-07-17 20:34:08+00:00,2021-05-20 20:01:44+00:00,Closed,13135896,DAFFODIL-1888
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"When comparing large result sets the TDML runner can overflow the stack. 

This happens even when the data being compared is just a long flat list.

Change this to iterative behavior so that it doesn't recursively build up stack. ",[],2018-02-01 20:27:31+00:00,2021-01-21 21:20:01+00:00,2021-01-21 21:20:02+00:00,Closed,13135580,DAFFODIL-1887
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"This bug currently prevents the IBM4690-TLOG schema project from working.

Example schema:
{code:java}
<tdml:defineSchema name=""s15"">
  <dfdl:format ref=""ex:daffodilTest1"" lengthKind=""delimited"" encoding=""ISO-8859-1"" occursCountKind=""implicit"" textNumberCheckPolicy=""strict"" textNumberPadCharacter=""0"" textNumberJustification=""right""
lengthUnits=""bytes"" separatorSuppressionPolicy=""trailingEmpty"" separatorPosition=""prefix""/>

  <xs:element name=""testSeq"" dfdl:lengthKind=""delimited"">
    <xs:complexType>
      <xs:sequence dfdl:initiatedContent=""no"" dfdl:separatorPosition=""infix""
        dfdl:sequenceKind=""ordered"" dfdl:separator="":"">
        <xs:element name=""a"" type=""xs:int""/>
        <xs:element name=""b"" type=""xs:int"" minOccurs=""0""/>
        <xs:element name=""c"" type=""xs:int"" minOccurs=""0""/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</tdml:defineSchema>
{code}
This schema should be able to parse the following scenarios:

1:2:3 -> a=1, b=2, c=3

1:2: -> a=1, b=2

1::3 -> a=1, c=3

1:: -> a=1

Currently scenarios 1,2 and 4 work as expected, but scenario 3 ends up parsing as just a=1 and b and c are just skipped.",['ForInteroperabilityTest'],2018-01-31 20:32:11+00:00,2019-05-23 17:24:16+00:00,2021-05-20 12:34:48+00:00,Closed,13135215,DAFFODIL-1886
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"This is a bug that is currently effecting the compatibility with the IBM4690-TLOG schema project.

In the IBM4690-TLOG schemas there is a parent choice with dfdl:initiatedContent=""yes"" that contains groups of choices.  The child choices define an initiator, but the initiator does not seem to be getting passed down the the elements contained within the choice inside the child choice (3rd level choice), causing the following SDE:

Schema Definition Error: Enclosing group has initiatedContent='yes', but initiator is not defined.

 

Here is a simplified schema as an example:
{code:java}
...
<xs:choice dfdl:initiatedContent=""yes"">
  <xs:group ref=""childChoice""/>
</xs:choice>

<xs:group name=""childChoice"">
  <xs:choice dfdl:initiator=""%#11;:"">
    <xs:element name=""elementWithInheritedInitiator""/>
    <xs:choice>
      <xs:element name=""elementWithoutInheritedInitiator""/>
    </xs:choice>
  </xs:choice.
</xs:group>
...{code}
 ",[],2018-01-31 20:16:53+00:00,2018-02-16 18:28:59+00:00,2018-02-20 15:59:50+00:00,Closed,13135211,DAFFODIL-1885
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"test_bitOrderOVC1 in ./daffodil-test/src/test/scala-new/edu/illinois/ncsa/daffodil/section00/general/TestUnparserGeneral2.scala currently fails. It appears to be a regression with recent changes to how bitOrder works, but was not discovered because the test is in scala-new. This test should be fixed and moved into the scala directory since the scala-new directory is no longer used and ignored.",[],2018-01-31 19:01:53+00:00,2018-02-12 19:06:44+00:00,2018-02-13 20:04:54+00:00,Closed,13135173,DAFFODIL-1884
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"While verifying JIRA ticket DAFFODIL-1876, found that although the majority of the performance degradation from the FormatInfo changes (commit a1d881) has been recovered, there is still performance regression on several data format tests. 

The most significant performance regression occurs with formats army-drss, asterix and nato-stanag tests.",[],2018-01-31 19:00:44+00:00,2021-01-21 21:18:01+00:00,2021-01-21 21:18:01+00:00,Closed,13135172,DAFFODIL-1883
Bug,[],jadams_tresys,Josh Adams,jadams_tresys,Josh Adams,Major,"Implement support for the various formats of binaryCalendarRep:
 * binarySeconds
 * binaryMilliseconds
 * packed
 * bcd
 * ibm4690Packed",[],2018-01-30 14:14:23+00:00,2018-08-16 14:43:44+00:00,2018-10-08 18:17:22+00:00,Closed,13134762,DAFFODIL-1882
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,[],2018-01-29 22:59:03+00:00,2018-02-08 13:28:05+00:00,2018-02-13 20:15:22+00:00,Closed,13134597,DAFFODIL-1881
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major," 

Assume you are unparsing.

If you are positioned on bit 3 of a byte, in bitOrder leastSignificantBitFirst, and what follows that is text in say, US-ASCII, which has mandatory byte alignment, you would expect that the remaining 5 bits would get filled in automatically, and then the unparsing of the US-ASCII text would begin on a byte boundary.

However, note that the 5 bits of the byte that must be filled, must be filled based on LSBF bit order, which is *not* the bit order specified for the US-ASCII encoding.

Two issues:

1) When filling these 5 bits, the bit order to be used is the bit order that was in effect for that byte, which is BEFORE the text string. Daffodil is currently trying to fill this in using the bit order specified for the text, and that's MSBF, so we get an error because we're changing bit order not on a byte boundary.

Tests like test_mixedEncoding2 only work because dummy empty xs:sequences with alignment of 8 bits are inserted so that the LSBF data ends on a byte boundary before the text is considered. This makes the bitOrder change occur on a byte boundary.

2) why does US-ASCII have *any* bit order specified? It's only relevant to have bitOrder for encodings that involve partial bytes. Really we need bitOrder of LSBF, MSBF, or ""none"" for byte-oriented encodings.

3) in general, whenever we are filling alignmentFill regions, any fragment bytes are filled based on the existing current bit order that was used to start them.

To see this issue, find the test test_mixedEncoding2 and modify the ""e2"" element schema, removing the <xs:sequence dfdl:alignment=""8""/>

 

 ",[],2018-01-25 22:15:47+00:00,,2018-09-13 14:04:14+00:00,Open,13133864,DAFFODIL-1880
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"All the *RuntimeData and DPathCompileInfo constructors accept pass-by-name parameters. Some of the arguments passed into these constructors reference objects that are only needed for schema compilation (e.g. dsom, grammar, etc.). Because they are pass by name, these objects are strong reference and thus cannot be garbage collected, leading to the entire compilation state being store in memory.

Fortunately, those parameters are marked as transient and so when serialized and deserialized they are effectively garbage collected. But if one does not save/reload a schema, lots of wasted memory used during schema compilation will stick around. Pass-by-name parameters cannot be vars, so the simple thing of making them vars and then setting to null does not work. These objects should be restructured to allow them to be garbage collected once compiled.",[],2018-01-25 19:39:09+00:00,,2021-02-25 14:54:56+00:00,Open,13133809,DAFFODIL-1879
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"After updating the nightly scripts to use the pre-compiled/saved parsers the result show that for some tests there are significant performance value differences between using runtime compiled parsers and the saved parsers.

Attached is the report email. The Previous Val column is from non-saved parser run. Curr Val column is from previously compiled/saved parsers.",[],2018-01-22 19:54:24+00:00,,2021-02-25 14:55:09+00:00,Open,13132844,DAFFODIL-1878
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Commit 02c8324294ed4395c1231c6ea3ec6ae77139ba46 caused ATO schema compilation time to jump from about 10 seconds to over 2 minutes. Large increases were also seen in VMF schema compilation.

Some debugging showed that the cause is likely in the DFDLPathExpressionCompiler. Wrapping the following code the compiles an individual expression in a Timer shows an average of 9000% increase in time to compile.

```scala

val compiler = new DFDLPathExpressionParser[T](qn,
 nodeInfoKind, namespaces, compileInfoWherePropertyWasLocated, isEvaluatedAbove)
 val compiledDPath = compiler.compile(expr)
 compiledDPath

```

So this most likely has something to do with schema compilation. Nothing jumps out at me in the specified commit as being especially egregious to cause such a performance degredation. All the really changed was passing an extra parameter for error accumulation and changing how isReferencedByExpressions is set. I wouldn't expect that to cause such performance changes. Perhaps it is findNamedMatches now allocating a Seq?",[],2018-01-17 16:40:26+00:00,2018-01-19 19:57:17+00:00,2018-01-22 12:07:09+00:00,Closed,13131628,DAFFODIL-1877
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"FormatInfo changes introduced significant performance degradation.

Changes are needed to win back this performance.",[],2018-01-16 17:35:25+00:00,2018-01-26 16:09:29+00:00,2018-01-31 19:15:57+00:00,Closed,13131293,DAFFODIL-1876
Improvement,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"A server behavior for Daffodil's CLI is needed.

This allows many applications of daffodil parsing and unparsing to be performed but starting the daffodil CLI only once and loading the schemas only once.

One simple way to do this is rather than executing a command and terminating, the CLI would enter a looping mode where it reads a command line from stdin, executes it, and repeats until EOF on the stdin.

An alternative, but more complex thing to do is to implement the Language Server Protocol, which is intended to be for long-running servers that do things like compile and build.

Note that this also adds extra complexity, extra socket permissions, and
 potentially has issues with processor separation if multiple processes
 can communicate with the same server. So this has security implications
 as well. Might be fine for the CLI, but probably not for Java/Scala APIs.


sbt has a server mode:

[https://developer.lightbend.com/blog/2017-11-30-sbt-1-1-0-RC1-sbt-server/#sbt-server]
 

The LSP specification: 

[https://microsoft.github.io/language-server-protocol/specification]

See also DAFFOGIL-1563 which is about plug-ins that might want to make use of a server-mode long-running daffodil instance. Such a plug in might want to use an LSP-based Daffodil server.",[],2018-01-16 17:24:13+00:00,2021-01-21 21:14:05+00:00,2021-01-21 21:14:05+00:00,Closed,13131289,DAFFODIL-1875
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"
NACHA schema (on DFDLSchemas github) has a ticket about suppressing a warning that we get for almost every element in that schema:

https://github.com/DFDLSchemas/NACHA/issues/2

This is the warning we get:
{{{Schema Definition Warning: Element has no empty representation so cannot have XSD default='0' as a default value.
Schema context: element reference {ach:2013}PriorityCode Location line 55 column 18 in file:/home/mbeckerle-unencrypted/DFDLSchemas/NACHA/2013/nacha_records.xsd}}}

The warning is misleading, it should say that for an element with no empty rep the default value can only be applied on unparsing (where the criteria is that the element is not in the infoset).

AND that corrected warning, which we'll still get for every element of NACHA, needs to be suppressable for a schema like NACHA where otherwise you get dozens of them. 
",[],2018-01-11 17:47:22+00:00,2018-02-28 20:13:54+00:00,2018-04-10 13:19:48+00:00,Closed,13130259,DAFFODIL-1874
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"I did these commands to do a completely clean build:
{code}
git checkout master
git clean -xdf
sbt compile
sbt updateClassifiers
{code}
It produces quite a few error/warning messages that are troubling. If these can be eliminated or even reduced it will be much less confusing for new developers.
{code}
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/mbeckerle-unencrypted/daffodil/project
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/project/}daffodil-build...
[info] Done updating.
[warn] Found version conflict(s) in library dependencies; some are suspected to be binary incompatible:
[warn] 	* org.codehaus.plexus:plexus-utils:3.0.17 is selected over {2.1, 1.5.5}
[warn] 	    +- org.apache.maven:maven-settings:3.2.2              (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-repository-metadata:3.2.2   (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-aether-provider:3.2.2       (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-model:3.2.2                 (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-core:3.2.2                  (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-artifact:3.2.2              (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-settings-builder:3.2.2      (depends on 3.0.17)
[warn] 	    +- org.apache.maven:maven-model-builder:3.2.2         (depends on 3.0.17)
[warn] 	    +- org.sonatype.plexus:plexus-sec-dispatcher:1.3      (depends on 1.5.5)
[warn] 	    +- org.eclipse.sisu:org.eclipse.sisu.plexus:0.0.0.M5  (depends on 2.1)
[warn] 	* com.google.guava:guava:18.0 is selected over {10.0.1, 15.0}
[warn] 	    +- com.spotify:docker-client:3.5.13                   (depends on 18.0)
[warn] 	    +- com.fasterxml.jackson.datatype:jackson-datatype-guava:2.6.0 (depends on 15.0)
[warn] 	    +- org.eclipse.sisu:org.eclipse.sisu.plexus:0.0.0.M5  (depends on 10.0.1)
[warn] Run 'evicted' to see detailed eviction warnings
[info] Compiling 1 Scala source to /home/mbeckerle-unencrypted/daffodil/project/target/scala-2.12/sbt-1.0/classes ...
[info] Done compiling.
[info] Loading settings from build.sbt ...
[info] Loading settings from build.sbt ...
[info] Loading settings from build.sbt ...
[info] Loading settings from build.sbt ...
[info] Resolving key references (10042 settings) ...
[info] Set current project to daffodil (in build file:/home/mbeckerle-unencrypted/daffodil/)
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-propgen...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-macro-lib...
[info] Done updating.
[info] Done updating.
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-lib...
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-io...
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-runtime1...
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-runtime1-unparser...
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[error] a required artifact is not listed by module descriptor: *#*!*.*
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-core...
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-japi...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-sapi...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-tdml...
[info] Done updating.
[info] Done updating.
[info] Done updating.
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-tutorials...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-test...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-test-ibm1...
[info] Updating {file:/home/mbeckerle-unencrypted/daffodil/}daffodil-test-stdLayout...
[info] Done updating.
[info] Done updating.
[info] Done updating.
[info] Done updating.
[success] Total time: 6 s, completed Dec 28, 2017 11:49:33 AM
mbeckerle@cat:~/dataiti/git/daffodil$ 
{code}",[],2017-12-28 16:57:00+00:00,2018-01-03 18:10:50+00:00,2018-01-03 19:31:37+00:00,Closed,13127546,DAFFODIL-1873
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"daffodil-io needs to include src/main/scala, but exclude src/test/scala not just from the eclipse source directories but from the entire eclipse project.

Otherwise searching for things found in daffodil-io-unittest will always hit twice. Once in daffodil-io, and again in daffodil-io-unittest. This can be quite confusing.

",[],2017-12-15 17:15:30+00:00,2017-12-18 20:21:58+00:00,2018-02-08 13:59:16+00:00,Closed,13125284,DAFFODIL-1872
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"This an API issue.

Since XMLTextInfosetOutputter doesn't have a flush() method of its own, then it needs to perform a flush() of the java.io.Writer that it is writing to, automatically.

I would suggest that on endDocument it should do a flush(). One can argue it should flush as part of endElement for complex elements as well, but at least on endDocument.

The absence of this flush() behavior caused one JAPI developer using Daffodil to waste time mystified about why she was getting 1/2 of an XML document out. Changing her code to just flush the writer after the return from parse() fixed it, but I think the API design really has to either flush automatically (my preference), or the XMLTextInfosetOutputter should have a flush() method of its own which flushes any state it has (today there is none), then flushes the writer it surrounds. 


",[],2017-12-13 16:34:22+00:00,2018-01-24 17:40:35+00:00,2018-01-25 15:55:43+00:00,Closed,13124728,DAFFODIL-1871
Bug,[],dfthompson,Dave Thompson,dfthompson,Dave Thompson,Major,"Invalid URLs:

* The browseUrl entry in the build.sbt file is incorrect and is not functional. The URL cannot be found, get a ""404 - No such project"" message.  The browseUrl entry should be ""browseUrl = url(""https://gitbox.apache.org/repos/asf?p=incubator-daffodil.git"")"".

*  The ""https://daffodil.apache.org/manual/"" in the DFDLTutorialStylesheet.xsl file is invalid and not functional, get a ""The webpage cannot be found"" message. URL ""https://daffodil.apache.org/"" takes you to the Apache site.",[],2017-12-06 20:15:18+00:00,2017-12-07 19:17:14+00:00,2017-12-07 20:01:50+00:00,Closed,13123289,DAFFODIL-1870
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"From NATO NCIA:

Are you still planning to release a patch? The last Daffodil revision that was working is 3e754f259cbe9c36d96379921bc060acc4f8ab24 (23rd of May 2017).
In later revisions, the compilation of the Link 16 schema is going wrong at J7.5I regarding the choice on ""ActionIffSifManagement_1606-006 and the choice on ""ModeICodeApplicability_1610-001"".

Reproducing this requires access to the Link16 schema, which requires access to DI2E.net DFDL/Daffodil project.

",[],2017-12-05 14:53:57+00:00,2018-01-16 20:38:49+00:00,2018-01-22 12:08:01+00:00,Closed,13122893,DAFFODIL-1869
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"defaultConfig can be specified on the test suite.

This appears to only be checked (to see if there is a corresponding config) if the test case has no config specified. It should be checked no matter what.

Second, defaultConfig doesn't accept name of an embedded config.

Lastly, it seems buggy. Not sure defaultConfig even worked. 
",[],2017-12-01 17:01:35+00:00,2018-01-05 19:02:12+00:00,2018-02-09 19:50:19+00:00,Closed,13122219,DAFFODIL-1868
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Critical,"The charsReadUntilDelim field inside the Registers class is a StringBuilder. It is allocated once, and appended to frequently, but it is never reset or used. Since it is never reset and continually appended to, it will effectively leak memory since Registers are never freed.

We either need to reset this field like other StringBuilders or just remove it entirely.",[],2017-11-29 16:41:03+00:00,2017-11-30 12:35:02+00:00,2017-12-20 15:29:57+00:00,Closed,13121686,DAFFODIL-1867
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Major,"UpdateEclipseClasspaths is putting duplicate entries into the generated .classpath files that result in name conflicts.

Not sure why, but sbt compile updateClassifiers results in duplicate jars in the lib_managed bundles and jars sub-dirs.

On my system, there is also a spurious duplication of the scala-xml library (version 1.0.4 AND version 1.0.6 are found under bundles/org.scala-lang.modules). It's not clear why this is happening. 

Tool needs to be fixed to avoid the duplicates, and the .classpath files of all the eclipse projects fixed to not have the duplicate entries. ",[],2017-11-29 13:28:58+00:00,2017-11-29 23:07:54+00:00,2018-02-08 13:50:13+00:00,Closed,13121649,DAFFODIL-1866
Bug,[],vtguy08,Taylor Wise,vtguy08,Taylor Wise,Minor,"Test: test_array_IndexOutOfBounds_04

We should statically tell that -1 is an invalid index for an expression.  We should be able to error on this 'negative' index without testing that the element exists.",['beginner'],2017-11-28 14:58:27+00:00,2021-01-22 16:19:00+00:00,2021-05-12 12:59:58+00:00,Closed,13121340,DAFFODIL-1865
Bug,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Blocker,"
The isScannable computation is incorrect. For entirely textual formats it still comes up with isScannable false. 

This causes SDE if you are using lengthKind pattern. The SDE says the data must be scannable in order to use lengthKind pattern.",[],2017-11-22 18:00:26+00:00,2018-01-26 18:22:20+00:00,2018-01-26 18:22:24+00:00,Closed,13120292,DAFFODIL-1864
Task,[],mbeckerle,Mike Beckerle,mbeckerle,Mike Beckerle,Minor,"We have an implementation of lengthUnits 'bits' for hexBinary.

A write up of this in the form of an erratum for the DFDL v1.0 spec is needed.",[],2017-11-14 15:09:51+00:00,2018-10-23 13:46:20+00:00,2018-10-23 13:46:20+00:00,Closed,13118273,DAFFODIL-1863
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"It is possible for MarkPool instances to leak, which often be difficult to track down and can lead to denial of service with API users.  We need a mechanism to ensure MarkPools instances are never leaked, and to also discover bugs that would cause them to leak.

See the folloiwng thread for a more detailed discussion of the problems: https://lists.apache.org/thread.html/914d5e7e0e4bf9001cb048aaaa034608b1b6bcffa04de9a10158302e@%3Cdev.daffodil.apache.org%3E",[],2017-11-06 18:37:59+00:00,2017-11-30 12:50:32+00:00,2017-12-19 18:30:03+00:00,Closed,13116476,DAFFODIL-1862
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,,['beginner'],2017-11-02 16:13:37+00:00,2021-01-21 21:09:49+00:00,2021-01-21 21:09:49+00:00,Closed,13115664,DAFFODIL-1861
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"Performance testing found that the slot removal made in DAFFODIL-1854 caused performance degradation, sometimes up to 20% decreases. Profiling found that some of this is due to the allocations of the HashMap used for quickly looking up elements in the Infoset by QName. We should only allocate hashmaps when it's possible an element could be be used in an expression, which should improve performance. ",[],2017-11-02 16:09:38+00:00,2018-01-22 13:43:07+00:00,2018-01-25 17:44:37+00:00,Closed,13115662,DAFFODIL-1860
Bug,[],slawrence,Steve Lawrence,slawrence,Steve Lawrence,Major,"This includes changing the directory layout and package names to org.apache, updating license files where appropriate and checking with Apache Rat.

This is put on hold until all SGA's are submitted.",[],2017-11-02 11:21:20+00:00,2018-02-08 12:51:32+00:00,2018-02-13 14:13:31+00:00,Closed,13115596,DAFFODIL-1859
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-10-26 12:44:20+00:00,2017-11-30 12:27:12+00:00,2017-12-06 17:11:57+00:00,Closed,13115277,DAFFODIL-1858
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"SBT has reached 1.x, which should be more stable and standardizes the syntax, removing a lot of deprecated methods. We should switch to this so that we can stay with the latest.��The new syntax is a bit simpler and should clean things up some. While we update the config, we should also revisit how sbt cli works, and remove the concept of scala-new since that is really just overhead and not needed.",[],2017-10-26 12:41:07+00:00,2017-12-12 12:10:08+00:00,2017-12-14 17:33:28+00:00,Closed,13115276,DAFFODIL-1857
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"Things to do:
 * Remove old files/cruft that might make switching to the Apache license more complicated
 * Switch the the apache.org namespace, including directory layout, packages, and namespaces
 * Change the name to Apache Daffodil (incubating) where appropriate, this may require changes to how versioning works since the version must now include ""-incubating""",[],2017-10-26 12:38:16+00:00,2017-11-29 18:59:45+00:00,2017-12-07 12:51:44+00:00,Closed,13115275,DAFFODIL-1856
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Part of fix for DFDL-1444 is changing the behavior of property resolving so that it is done in a way that enables sharing, and doesn't require backpointers from elements to the elementRef that refers to them.

This ticket is for the task of fixing property resolution so that element refs, group refs, etc. do not get pointed back to, but rather point at, and gather up property resolutions onto themselves.",[],2017-10-23 17:29:17+00:00,2017-11-17 16:25:50+00:00,2018-01-05 14:12:52+00:00,Closed,13115274,DAFFODIL-1855
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Remove the concept of 'slots' from InfosetImpl.scala. ��One of a series of steps towards resolving space compilation issues and also re-enabling unordered sequences.,[],2017-10-23 16:40:39+00:00,2017-10-23 17:52:31+00:00,2017-11-29 20:52:56+00:00,Closed,13115273,DAFFODIL-1854
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"Attempted to parse and unparse ipfix format files. The sample ipfix format��files provide in the repository��failed to parse due to��""Schema Definition Error"".��Additionally��the ipfix��infoset files provided in the repository also fail due to an ""Schema Definition Error"".

Below are the commands used and the associated error message.

*ipfix/data-record.dfdl.xsd:*

]$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I xml -s /home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd /home/dthompson/dfdlTestData/data-formats/ipfix/parse_data/data-record.binary

[error] Schema Definition Error: Property textOutputMinLength is not defined.
Non-default properties were combined from these locations:
Location line 30 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd
Location line 154 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd

Default properties were taken from these locations:
Location line 6 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd

Schema context: Version-number Location line 30 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd

��

]$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil unparse -I xml -s /home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd /home/dthompson/dfdlTestData/data-formats/ipfix/unparse_data/data-record.xml

[error] Schema Definition Error: Property textOutputMinLength is not defined.
Non-default properties were combined from these locations:
Location line 30 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd
Location line 154 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd

Default properties were taken from these locations:
Location line 6 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd

Schema context: Version-number Location line 30 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/data-record.dfdl.xsd


*ipfix/template-record.dfdl.xsd:*

]$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I xml -s /home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd /home/dthompson/dfdlTestData/data-formats/ipfix/parse_data/template-record.binary

[error] Schema Definition Error: Property textOutputMinLength is not defined.
Non-default properties were combined from these locations:
Location line 23 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd
Location line 118 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

Default properties were taken from these locations:
Location line 6 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

Schema context: Version-number Location line 23 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

��

]$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil unparse -I xml -s /home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd /home/dthompson/dfdlTestData/data-formats/ipfix/unparse_data/template-record.xml

[error] Schema Definition Error: Property textOutputMinLength is not defined.
Non-default properties were combined from these locations:
Location line 23 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd
Location line 118 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

Default properties were taken from these locations:
Location line 6 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

Schema context: Version-number Location line 23 column 14 in file:/home/dthompson/dfdl-dataformats/data-formats/ipfix/template-record.dfdl.xsd

��",[],2017-10-05 16:19:15+00:00,2019-05-29 23:36:21+00:00,2021-05-20 12:35:02+00:00,Closed,13115272,DAFFODIL-1853
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Daffodil doesn't pass the datatype for a simple value as part of the StartElement or StartArray events. 

This means that you can't, for example, tell whether to create the JSON member as a string or as a number (i.e. whether to include the """" or not).  

In XML output, this prevents putting an xsi:type=""..."" element on the simple types, which is sometimes of value.

Daffodil ships a JSON outputter, but it just renders everything as a string, and the XML outputter doesn't add xsi:type attributes. 

The infoset datatype member is required part of the DFDL infoset according to the spec, so the lack of this information is non-conformance to the spec.

The xsi:type attribute is planned (JIRA DFDL-182 and DFDL-1633 also) - it would be optional, for the XML outputters, and would either be checked or ignored by XML inputters.

The JSON inputters/outputters would have to be adapted to JSON that does not have the ""..."" around everything.",[],2017-10-04 20:40:09+00:00,,2021-01-21 21:09:20+00:00,Open,13115271,DAFFODIL-1852
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"Although the smaller iCalendar files appear to parse and unparse successfully, the resulting unparsed files are missing much of the calendar data. Below is BeyondCompare Text comparison of the source iCal file and the unparsed iCal file. Source is on the left.

!image-2017-10-04-09-48-16-226.png!

The parsed (infoset) files appear to include all of the data missing from the unparsed file.

Attached the source, infoset and unparsed files for one iCalendar file.

��",[],2017-10-04 13:51:51+00:00,2017-11-30 17:02:57+00:00,2017-12-05 19:06:51+00:00,Closed,13115270,DAFFODIL-1851
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"The full calendar iCalendar file (DTCalendar.ics) fails to parse due to ���Parse Errors���. The full calendar file is 3013156 bytes in size on linux. The parse errors are shown below:

[*error*] *Parse Error*: Failed to populate vcalendar[1]. Expected 1 item(s). Cause: Parse Error: Delimiter not found.

Schema context: vcalendar Location line 65 column 18 in file:/home/dthompson/dfdl-dataformats/data-formats/iCalendar/src/main/resources/com/mitre/iCalendar/xsd/iCalendar.dfdl.xsd

Data location was preceding byte 1112078 limit(bytes) 3013156.

Schema context: vcalendar Location line 65 column 18 in file:/home/dthompson/dfdl-dataformats/data-formats/iCalendar/src/main/resources/com/mitre/iCalendar/xsd/iCalendar.dfdl.xsd

Data location was preceding byte 1112078 limit(bytes) 3013156

[*error*] *Parse Error*: Delimiter not found.

Schema context: vcalendar Location line 65 column 18 in file:/home/dthompson/dfdl-dataformats/data-formats/iCalendar/src/main/resources/com/mitre/iCalendar/xsd/iCalendar.dfdl.xsd

Data location was preceding byte 1112078 limit(bytes) 3013156",[],2017-10-04 13:43:08+00:00,2021-01-21 21:07:37+00:00,2021-01-21 21:07:37+00:00,Closed,13115269,DAFFODIL-1850
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"The infoset test��files for the larger gmtif sample test��files (kirkuk_7d.4607 and kirkuk_20081212.4607) fail unparsing due to the following error. Both file parse without successfully without error.

Resulting Error Message:

[error] Unparse Error: Value 0 is out of range for the '\{urn:nato:stanag:4607}TargetReport' array with length 1",[],2017-10-03 12:00:10+00:00,2018-08-24 13:31:20+00:00,2021-01-08 22:54:33+00:00,Closed,13115268,DAFFODIL-1849
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"The unparsed file does not match (HEX or md5 comparison)��the source test file, kirkuk_dwellSeg_1.4607, used in the parse tests.��The HEX comparison is shown below. The left is the source file. Same result whether unparsing the original or newly created infoset.

!image-2017-10-03-07-20-18-936.png!

Note,��the unparsed results of the other small 4607 files match the associated source file with md5 hash and HEX comparisons.",[],2017-10-03 11:54:50+00:00,2018-08-24 13:54:36+00:00,2021-05-18 14:38:37+00:00,Closed,13115267,DAFFODIL-1848
Task,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"The original gmtif��infoset test��files do not unparsed unless you use the --root option and set it to ���GMTI���. This is the same using the sbt test or daffodil unparsed commands. The original infoset files appear to have been created with the --root option set to ���GMTI��� because they do not have the root element ���GMTIFile���. I recreated the infoset file (not using --root option) for one of the files used in the full file sbt tests and changed the tdml file to use --root set to ���GMTIFile���. Also changed the tdml file to use the new infoset file in the parse (comparison) and unparse tests and both tests past.

Update the full file sbt tests (I believe 2 tests) to use newly created infoset files that include the ���GMTIFile��� root element specified in the schema.",[],2017-10-03 11:14:38+00:00,2017-10-04 15:47:13+00:00,2017-10-04 15:47:25+00:00,Closed,13115266,DAFFODIL-1847
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TDML runner removes all attributes from the Infoset XML that it pulls in from the TDML file. This can result in unparser errors due to loss of namespace bindings.

The Infoset.contents call redundantly calls the utility to remove attributes more than once.

This needs to be cleaned up and is related to DFDL-1384.",[],2017-09-21 17:33:46+00:00,2018-01-26 16:26:54+00:00,2018-01-29 19:56:29+00:00,Closed,13115265,DAFFODIL-1846
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"ScalaXMLInfosetOutputter is not assembling the chain of namespace bindings right

This results in a getNamespace(prefix) call returns null.
This results in no binding for a prefix.

There should be an assertion failure here if there is no binding for a prefix. 

The actual bug is that in assembling the XML objects, the namespace bindings aren't being established properly. 

Test case TBD.",[],2017-09-21 17:27:37+00:00,,2021-01-21 21:06:24+00:00,Open,13115264,DAFFODIL-1845
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"According to [https://www.w3.org/TR/REC-xml/#sec-prolog-dtd], XML documents SHOULD begin with an XML declaration (e.g. <?xml version=""1.0"" encoding=""UTF-8"" ?>. Although this isn't mandatory, some things may not recognized the output as an XML document. For example, the 'file' command says the data is HTML. This isn't a big deal, but is technically more correct.",[],2017-09-18 19:46:19+00:00,2018-01-24 17:40:27+00:00,2018-01-25 13:35:00+00:00,Closed,13115263,DAFFODIL-1844
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test test_bitOrderOVC1.

This issue was discovered in the Link16 DFDL schema, and reproduced here in an isolated context.

This test shows that a spurious Runtime SDE is detected due to a bitOrderChange. This has to do with the unparser having to back-up to fill in a suspension for an outputValueCalc element, and losing the bitOrder that should be maintained/captured for that usage. 

At least that's my theory.

This test should work, but gets a Runtime SDE:

{code}edu.illinois.ncsa.daffodil.tdml.TDMLException: Runtime Schema Definition Error: Data output stream DOS(id=5, Active, Direct Absolute from 0 to 27 (length 27)) with bitOrder 'leastSignificantBitFirst' not on a byte boundary, cannot be populated from DOS(id=6, Finished, Buffered Absolute from 27 to 40 (length 13), data=1F000000000000000000000000000000 no following) with bitOrder 'mostSignificantBitFirst'.
Schema context: NNN Location line 64 column 18 in file:/tmp/s1_9132734461290850031.dfdl.xsd
Data location was preceding byte 3
{code}",[],2017-09-14 21:05:51+00:00,2018-01-05 19:01:17+00:00,2018-02-09 19:49:50+00:00,Closed,13115262,DAFFODIL-1843
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Element references and the elements they reference cannot have the same properties expressed directly on them.

However, they should be able to override the properties that are inherited from the default properties surrounding the global element decl. 

But this error message, from the overlap check, is clearly saying it is looking at a SchemaDocument:format annotation, and complaining about overlap with it.

This is not correct. The overlap check should not be considering the default format of any schema when determining the overlap.

TODO: create a public test case that reproduces this error. Right now it came up in an FOUO schema that is not publicly available.

{code}
edu.illinois.ncsa.daffodil.tdml.TDMLException: Schema Definition Error: Overlapping properties: lengthUnits overlaps between element reference link16:Link16 and {color:#d04437}_+SchemaDocument::format.+_{color} Overlap is not allowed.
Schema context: ms:Link16 Location line 70 column 5 in file:/home/mbeckerle/FOUO/fouo-schemas/nato-stanag-5516/bin/scala-2.11/test-classes/nato/xsd/link16ed6-daffodil-compliant.xsd
{code}",[],2017-09-13 22:33:55+00:00,,2019-07-03 12:52:42+00:00,Open,13115261,DAFFODIL-1842
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Two issues here:
 # running 'sbt publish' or 'sbt publishLocal' will publish a root jar, even though we gave it the 'nopub' setting.
 # the contents of the root jar are exactly the same as the daffodil-cli jar (which is missing the 'nopub' setting).

The root jar shouldn't be published, and even if it were published, it should not contain CLI classes.

We might want to look into upgrading to sbt 1.0 to resolve this problem and switch to the newer sbt syntax. The current stuff is being deprecated if not already removed in 1.0.",[],2017-09-12 16:52:58+00:00,2018-02-05 20:07:16+00:00,2018-02-06 14:12:16+00:00,Closed,13115260,DAFFODIL-1841
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Setting the initiator to just percent sign results in the initator being ignored. This is likely because we are trying to resolve a character class, but there is no valid character class. This should probably produce an error.",[],2017-09-06 13:59:08+00:00,2018-11-16 21:38:49+00:00,2021-05-20 12:35:05+00:00,Closed,13115259,DAFFODIL-1840
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Currently, regardless of whether an element or model group has a required terminator, any delimiters from the enclosing nest must be escaped. 

However, in the situation where the only delimiter can be the terminator the delimiters of the enclosing nest aren't actually needed to be escaped, only the terminator itself needs to be escaped. 

This improves composition properties, and may improve performance.",[],2017-09-03 21:39:57+00:00,2021-04-16 17:18:20+00:00,2021-04-16 17:18:33+00:00,Closed,13115258,DAFFODIL-1839
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We currently have two warnings that can specifically be suppress: multiple choice branches and escape scheme ref undefined. We have many others that cannot be ignore without the use of ""all"". We should enhance of warnings so that they require a warn id so all similar warnings can be suppressed without resorting to disabling all warnings.",[],2017-08-31 13:17:38+00:00,2018-02-28 20:21:00+00:00,2018-04-10 14:22:05+00:00,Closed,13115257,DAFFODIL-1838
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"We don't want to expose the DaffodilTunables object to the user via the API.  Update ExternalVariablesLoader methods to only accept a Map[String,String] for tunables.",[],2017-08-29 21:12:11+00:00,,2021-01-21 20:59:56+00:00,Open,13115256,DAFFODIL-1837
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It looks like the core issue is that lengthKind=""pattern"" and lengthKind=""delimited"" do not have alignment optimized out. Need to correct.",[],2017-08-25 13:04:39+00:00,2017-08-28 13:49:24+00:00,2017-08-30 20:01:30+00:00,Closed,13115255,DAFFODIL-1836
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"See test noByteOrder in:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/BitOrder.tdml

daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala

��

This test will round trip successfully if byteOrder is set to ""littleEndian"" but without the byte order it fails. Test was created for DFDL-1468.",[],2017-08-24 18:52:12+00:00,2017-08-28 13:48:03+00:00,2017-08-28 18:40:08+00:00,Closed,13115254,DAFFODIL-1835
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Executed:

daffodil --debug parse --schema syslog.dfdl.xsd ex_log.log

(debug) info infoset

��

edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Runtime.scala - Leaked exception: java.lang.AssertionError: assertion failed
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:146)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:192)
edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:281)
edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:208)
 at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:146)
 at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:192)
 at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:281)
 at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:208)
 at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:200)
 at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
 at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
 at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
 at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:200)
 at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:183)
 at edu.illinois.ncsa.daffodil.Main$$anonfun$73.apply(Main.scala:865)
 at edu.illinois.ncsa.daffodil.Main$$anonfun$73.apply(Main.scala:863)
 at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
 at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
 at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:863)
 at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1309)
 at edu.illinois.ncsa.daffodil.Main.main(Main.scala)",[],2017-08-18 13:09:37+00:00,2017-08-18 15:08:39+00:00,2017-08-18 16:38:51+00:00,Closed,13115253,DAFFODIL-1834
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"For round-trip tests, the TDML runner tries parse-unparse, then if it doesn't compare it does another parse and unparse.

There needs to be an option to turn this off on a per test case basis so that one can create a test and insist that the round trip work in exactly one cycle of parse and unparse, or for an unparserTestCase unparse-and-parse.",[],2017-08-17 21:16:25+00:00,2018-10-03 23:04:23+00:00,2021-05-18 14:38:42+00:00,Closed,13115252,DAFFODIL-1833
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See new test-stdLayout subproject within daffodil (on branch review-mjb-1832)

The test in scala-debug test_outer_01 fails.

This test fails because the src/main/resources/org1/xsd schema files cannot include/import using schemaLocation=""org2/xsd/...""

You can an error like:
{code}
Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException;
 systemId: file:/home/.../test-stdLayout/target/eclipse/classes/org2/xsd/org2/xsd/payload.xsd; lineNumber: 33; columnNumber: 38; src-resolve: Cannot resolve the name 'tns:Data' to a(n) 'element declaration' component.
{code}

If you look at that file path, notice the org2/xsd/org2/xsd is doubled up. I don't know how exactly this happens, but it happens in Xerces code.

Back when our projects just had src/main/resources/xsd, these paths would come out with ""xsd/xsd"" doubled up, and we put in a hack to look for that and remove it.

But now that we're using package-style directory names, it's not so easy to just hack it, as whatever package name you would have, it will get doubled.",[],2017-08-17 19:42:30+00:00,2017-08-23 14:59:00+00:00,2017-08-31 17:10:10+00:00,Closed,13115251,DAFFODIL-1832
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-08-16 16:06:19+00:00,2017-08-16 16:12:30+00:00,2017-08-16 16:12:36+00:00,Closed,13115250,DAFFODIL-1831
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Blocker,"When attempting to run the pcap performance tests found that the 50m.pcap and 100m.pcap test files did not successfully parse. Executed the daffodil parse command separately for each file and got the following results.

50m.pcap Command with -I null: [~] ()$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I null -s /home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd /home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/pcap/50m.pcap Message: [warning] Left over data. Consumed 12432 bit(s) with 419426128 bit(s) remaining. Command with -I xml: [~] ()$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I xml -s /home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd /home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/pcap/50m.pcap Results: <pcap:PCAP xmlns:pcap=""urn:pcap:2.4""> <PCAPHeader> ���� <MagicNumber>D4C3B2A1</MagicNumber> ���� <Version> �������� <Major>2</Major> �������� <Minor>4</Minor> ���� </Version> ���� <Zone>0</Zone> ���� <SigFigs>0</SigFigs> ���� <SnapLen>65535</SnapLen> ���� <Network>1</Network> </PCAPHeader> <Packet> ���� <PacketHeader> �������� <Seconds>1367244575</Seconds> �������� <USeconds>191642</USeconds> �������� <InclLen>1514</InclLen> �������� <OrigLen>1514</OrigLen> ���� </PacketHeader> ���� <pcap:LinkLayer> �������� <pcap:Ethernet> ������������ <MACDest>3C4A92729886</MACDest> ������������ <MACSrc>001B2134662C</MACSrc> ������������ <Ethertype>2048</Ethertype> ������������ <pcap:NetworkLayer> ���������������� <pcap:IPv4> �������������������� <IPv4Header> ������������������������ <Version>4</Version> ������������������������ <IHL>5</IHL> ������������������������ <DSCP>0</DSCP> ������������������������ <ECN>0</ECN> ������������������������ <Length>1500</Length> ������������������������ <Identification>36974</Identification> ������������������������ <Flags>2</Flags> ������������������������ <FragmentOffset>0</FragmentOffset> ������������������������ <TTL>49</TTL> ������������������������ <Protocol>6</Protocol> ������������������������ <Checksum>20238</Checksum> ������������������������ <IPSrc>146.137.96.7</IPSrc> ������������������������ <IPDest>192.168.177.102</IPDest> �������������������� </IPv4Header> �������������������� <Protocol>6</Protocol> �������������������� <pcap:TransportLayer> ������������������������ <pcap:TCP> ���������������������������� <TCPHeader> ������������������������ ����������<PortSRC>80</PortSRC> �������������������������������� <PortDest>37199</PortDest> �������������������������������� <Seq>802941038</Seq> �������������������������������� <Ack>71825065</Ack> �������������������������������� <DataOffset>8</DataOffset> �������������������������������� <Reserved>0</Reserved> �������������������������������� <Flags>16</Flags> �������������������������������� <WindowSize>54</WindowSize> �������������������������������� <Checksum>40234</Checksum> �������������������������������� <Urgent>0</Urgent> �������������������������������� <Options>0101080A314391951321EA44</Options> ���������������������������� </TCPHeader> ���������������������������� <Data>68C263E237A3DB9073CC9809FF2E3DFFB1C5A686E28FCDA362C25F5615AF4E0D7DD623CF008103C51DF23C88CF155B66AC29B15D65F4BE96D075B441736CBB415B6C2787117ED7AB3F430C86E9177848E6B1070D18B3CDC48E7318E18FC961ECA4398897F076D21CCC4B583B316026B713139E8976129726E9A4F8501AD1666C716E2A06BF669B89DB22F110CC3643B6719D26985E2137EC436D71FB0C3FFD67E34CDC88980B39BC2D6EDCC0131F6FF8697C8A316F7CA6618741ED768107FB5C5BBCCC8BE25B50042FB49FB5C5779BDAF70A78EC5B6DF1C3467B8245B4637F6A4B4837B5978AF69156D47DA6F6ADB2BD1BF53DA676C917F64AB6448B613389696EEDBD025B625ED033719DAFC475065F898174D52E7594D8666ADF21F07F857539B1D79837718F681F85FD240E9ADA4745FBD13AC4648BD13E2D55B4630F6B9B966B6A97FC1E3B84BAD324B7168397692D6E415B249A4DEDD33AA4CC695DE836743DCD74C615B5BD8AFB94B01FC3A7A6ED33E11956B92F986044BB292E5952F8332F9B252D78BDB6A41973591097AAE282DE5912302521ED026745483BF7530B48569382E3159DFF84EC23E45EC0E21672F8761DEA2DFA5EC966D9A29FA9DA2C5BF5B37A9B65BB7E766AB374EB67AD36CB2EFDF99ACDB2573F17B259F64BFF2598F1C8F1DF3A874A98F8DF3C49FC6F0E8EFFD63C1107ACA0CD2A6CC6B6183E685D27DB7D280153BDCD04B3DD54DF69AAEFD1E1B14F37C6C6B61B30D1F1466C9F3A60C4F0980E2356C70C18312A66CCC0139D69F866ACB07F5B5E1AD998E1CBD3C6A45FF0186BE08F36F9754CBC116FAD03069EE86E51CFEFA475C4A039C66DB4C75498D6944E53AC5827FDB48DE283A1C7F81403267AC0A02DBA59C8E166F241295BEB41CAAF0C78EB2143BFD671E1CB36D8A86D4ED8F72E0063ACB3B65463AC4DC6071B60EC2DC27E6C6E2AFA3B6CC06BBCD7616B09DEC372F80E941DB2BE1345C628DB08B3253191EB26053FBFB625E5CAF6E0F75E6C494E4143928FF01A7E94D4663C1793E70FE2CC2147DF83D8945CC3D792DA8DBDA16D67D5C47375CEAFAD44DF7783564326495B0C79266D57C3C69324FB049CF24C3EA9CB38777A20DAD4AE86D290D4457C4E82674FD07991E9EC45D1E5603AF3B1251D32CE7CA6348B3839655BB0CCA76C0BA521660FC68E19BCB314813369CFE4E7184CFA0E2B43A908730ED0613A43C6BCAC2E320CC54CD61C1986E221DB6A7A7FCC784F0CF4847DB7CDDC6E633D91F1D39AC8FA0D9B678391E1696D65A3FA3B6690854143D750A88FD0B3B72ED339CF2379B23D45E8AB2A8CBEA6C787D53BC618744E4F0FAB53EB23A6F7301F6931CDDB2160A6DBA998F0AC8D7C1E4BF1707AD57FF7EC37F8CC647AE8FB0FC01DACEBE9B4A78B337D94972862FEF4EE49DA4DF9C6F441E3AC633AE5A8E1E04D6792776C0B8F7346BC71063223250CCD6B839E7DD86698F2901979466C9951A6187567643C94BBCE680EA24DCFA9667418FA9AB1DD84335E7FEF42E401E2BD0BDB8CAE2AED1DB3E0F65E714EC2C7EE8CAC774E4F5FD858A49DF7729DCED82BF8B5C28F66C8F3C61943CCFA9FE9665E8CF7A2FFD36E92ED90496E2332F662CF3863D40CAF2AAD534D769E20FC7AC678C8793EA761664A68FBCC4C2AC65C33EDC6BA36B3A42AECBA39B3C2583767AE5315FB045F9B095B9DD916AAD3193B0D799E680B3EFB9AB92D147EE64498AE88307CBD9BB927321ED2CBCC7D1161F8FA38F3A05C3B10C7668E8AFA2388C9C9CC9055B26AC82A392D7C8E91AC1AB24ACE318D2D348D2D9D646CA149CE6EBBBE3625AFFDDF79DE64E409C94E2DAF0E9673B2FBFF1A7E9EE325B7193E9BDC113E774AEE12F5E43E9441B116248F04E745C97DE1F3BD594CC6997494B562EC2C77F03A322BDD8845B34C795DF248C4E75C5CFEB3DA429FC189773EEDF2399D6157B3B69BEA3B4CF51EA3AEE3477DE17EF4F5EAEFC9DB66EDF9BF3717C970D63EFD79A86DD660C4F746F8D9C5AC8321F460DC049C63FA7B</Data> ������������������������ </pcap:TCP> �������������������� </pcap:TransportLayer> ���������������� </pcap:IPv4> ������������ </pcap:NetworkLayer> �������� </pcap:Ethernet> ���� </pcap:LinkLayer> </Packet> </pcap:PCAP> [warning] Left over data. Consumed 12432 bit(s) with 419426128 bit(s) remaining. 100m.pcap Command: [~] ()$ daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I xml -s /home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd /home/dfdl/ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/pcap/100m.pcap Error message (same for -I null or -I xml): [error] Parse Error: Failed to populate Packet[1]. Expected 1 item(s). Cause: Parse Error: All alternatives failed. Reason(s): List(Parse Error: Alternative failed. Reason(s): List(Parse Error: Assertion failed. Ethertype is not IPv4 Schema context: sequence Location line 179 column 8 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100, Parse Error: Alternative failed. Reason(s): List(Parse Error: Assertion failed. Ethertype is not IPv6 Schema context: sequence Location line 287 column 8 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd, Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100. Schema context: Packet Location line 29 column 10 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 104858829 [error] Parse Error: All alternatives failed. Reason(s): List(Parse Error: Alternative failed. Reason(s): List(Parse Error: Assertion failed. Ethertype is not IPv4 Schema context: sequence Location line 179 column 8 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100, Parse Error: Alternative failed. Reason(s): List(Parse Error: Assertion failed. Ethertype is not IPv6 Schema context: sequence Location line 287 column 8 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100) Schema context: pcap:IPv4 Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd, Location line 177 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/PCAP/src/main/resources/com/tresys/pcap/xsd/pcap.dfdl.xsd Data location was preceding byte 54 limit(bytes) 100",[],2017-08-16 15:00:48+00:00,2017-08-16 16:45:24+00:00,2017-08-21 19:04:25+00:00,Closed,13115249,DAFFODIL-1830
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Traceback is:
{code:java}
edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken: Diagnostic.this.maybeCause.isDefined.^(Diagnostic.this.maybeFormatString.isDefined)
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:146)
edu.illinois.ncsa.daffodil.api.Diagnostic.init(Diagnostic.scala:135)
edu.illinois.ncsa.daffodil.api.Diagnostic.message$lzycompute(Diagnostic.scala:188)
edu.illinois.ncsa.daffodil.api.Diagnostic.message(Diagnostic.scala:187)
at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:146)
at edu.illinois.ncsa.daffodil.api.Diagnostic.init(Diagnostic.scala:135)
at edu.illinois.ncsa.daffodil.api.Diagnostic.message$lzycompute(Diagnostic.scala:188)
at edu.illinois.ncsa.daffodil.api.Diagnostic.message(Diagnostic.scala:187)
at edu.illinois.ncsa.daffodil.api.Diagnostic.getMessage(Diagnostic.scala:92)
at edu.illinois.ncsa.daffodil.Main$$anonfun$displayDiagnostics$1.apply(Main.scala:623)
at edu.illinois.ncsa.daffodil.Main$$anonfun$displayDiagnostics$1.apply(Main.scala:621)
at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
at edu.illinois.ncsa.daffodil.Main$.displayDiagnostics(Main.scala:621)
at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:868)
at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1309)
at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}
��",[],2017-08-16 11:05:55+00:00,2017-08-16 16:27:46+00:00,2017-08-18 13:43:20+00:00,Closed,13115248,DAFFODIL-1829
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-08-16 11:03:48+00:00,2017-08-16 17:00:10+00:00,2017-08-17 16:21:59+00:00,Closed,13115247,DAFFODIL-1828
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-08-14 17:02:10+00:00,2017-08-16 15:40:20+00:00,2017-08-18 14:24:58+00:00,Closed,13115246,DAFFODIL-1827
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Saxon uses XdmNode's for all of its processing. For anything that uses Saxon as its core (e.g. XMLCalabash) it might be useful for Daffodil to input/output directly to XdmNodes. Currently, one must convert from XML text or something that Daffodil supports, which adds overhead.",['beginner'],2017-08-14 11:40:06+00:00,,2021-01-21 20:59:05+00:00,Open,13115245,DAFFODIL-1826
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"The ICU License link in the generated Daffodil_Licenses.html file and on��the Daffodil site ""Dependencies and Licenses"" page��is no longer valid.

""The requested URL /repos/icu/icu/trunk/license.html was not found on this server.""

The latest license can be found at:

http://source.icu-project.org/repos/icu/icu/tags/latest/LICENSE

��",[],2017-08-11 18:15:45+00:00,2017-08-17 13:34:59+00:00,2017-08-18 16:47:44+00:00,Closed,13115244,DAFFODIL-1825
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Eclipse classpath has errors.

src/test/scala test file has package name that doesn't match the file-system name, which makes it impossible to run unit tests from eclipse. Renamed src/test/scala/com/tresys/mil-std-2045 to use underscores in mil_std_2045, so it matches the code.

All tests work, and VMF works also.",[],2017-08-09 17:32:04+00:00,2017-08-09 17:32:42+00:00,2017-08-28 11:07:17+00:00,Closed,13115243,DAFFODIL-1824
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Our performance reports currently are good at informing us about regrressions.

They are not useful to someone trying to gauge whether Daffodil is fast enough to meet their needs.

The simplest initial fix for this is to provide a KBytes/sec statistic. For parsing this is the rate at which input data is consumed. For unparsing it is the rate at which output data is emitted.

(I.e., I/O related to the infoset in the middle isn't relevant).

That additional measure, which is just (files/sec)  / (kbytes/file)  would be a great improvement to this report. 

As a spreadsheet of data, I would prefer to see the things mashed together into test names spread out into columns:

E.g., army-drrs_1t_1.1m_60

as {code}
{{name           nThreads       file size   file size units    nFiles       
army-drrs           1                   1.1            m                 60     }}
{code}
For file-size I'd prefer to see it standardized to kbytes actually rather than having this separate units column.

For multi-threaded tests, a statistic to add is speedup factor. This is the Nthread speed (kbytes/sec) divided by the 1 thread kbytes/second, divided by N (number of threads).

Perfect scaling up has speedup factor of 1. 
Most things will have speedup factors < 0.5
As you increase the number of threads, the speedup factor should level off and eventually drop. 

The above stats would give users who understand the approximate message size of the data they are handling, to get an intuition for ""messages/sec"" and the speedup curve they should expect from multi-threading. 

E.g., for Link16, a typical message is about 32 bytes long.",[],2017-08-09 15:48:43+00:00,2021-01-21 20:58:08+00:00,2021-01-21 20:58:08+00:00,Closed,13115242,DAFFODIL-1823
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We should keep the slide deck at 

https://www.slideshare.net/mbeckerle/tresys-dfdl-data-format-description-language-daffodil-open-source-public-overview

up to date. It includes slides describing the Java API, which has evolved (they're drawn from the hello-world example).",[],2017-08-07 15:52:39+00:00,2017-08-07 21:40:37+00:00,2017-08-18 14:27:58+00:00,Closed,13115241,DAFFODIL-1822
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"Currently, ParseResult#isError only returns true if there are parse errors. If there are validation errors, it will return false. This is incorrect. Instead, isError should return true if there are either parse errors or validation errors. Furthermore, we should add new API functions (e.g. isParseError, isUnparseError, isValidationError) that can be used to determine specifically what kind of error occurred if the user only cares��about one type of error (e.g. validation vs parse errors).",[],2017-08-03 17:29:07+00:00,2017-08-07 18:37:54+00:00,2017-08-07 20:10:01+00:00,Closed,13115240,DAFFODIL-1821
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2017-08-03 16:27:22+00:00,2017-08-03 17:20:28+00:00,2017-08-03 18:51:07+00:00,Closed,13115239,DAFFODIL-1820
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-08-03 14:10:56+00:00,2017-08-09 12:05:07+00:00,2017-08-09 12:05:40+00:00,Closed,13115238,DAFFODIL-1819
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This feature has been discussed frequently as something missing from DFDL. 

There are formats where this behavior would be very convenient.

It has been suggested that this feature is needed for JPEG2000 format.

This ticket created to track the issue. However, I'm not convinced that dfdl:lengthKind 'pattern' isn't a universal work around for the lack of this feature. If so then the priority of this becomes very low.

It may be that this feature is required because of the lack of streaming-behavior (unlimited data size) for regex matching in dfdl:lengthKind 'pattern'. 

It is possible our regex matching needs to be rewritten in terms of the Scanner class (which operates on InputStream not CharSequence. Existing code uses CharSequence, which due to nature of the interface, must be a finite object, not a stream that is potentially unbounded.",[],2017-08-03 12:44:41+00:00,,2018-09-13 14:04:36+00:00,Open,13115237,DAFFODIL-1818
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A page with a screen shot of the NiFi GUI, and giving links to the various pieces so as to install it this way, plus any example jobs people can try, etc.",[],2017-08-02 14:38:38+00:00,2017-08-03 15:02:58+00:00,2017-08-07 13:39:24+00:00,Closed,13115236,DAFFODIL-1817
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See also DFDL-1814 about CompilerMode/RuntimeMode.

Developer reports that debugging tests in daffodil-core-unittest results in mixtures of compilation lazy evaluation with runtime.

These test rigs used for these unit tests do not serialize/unserialize the parser nor unparser before invoking them. It is the serialization that ultimately forces all the lazy evaluation that the compiler performs to be forced.

In theory, these mixtures can only occur if nobody calls ""isError"" on the ProcessorFactory and then the DataProcessor objects, as that is supposed to cause all the requiredEvaluation(...) forms to evaluate, and that should force everything that is needed to insure the object is without error.

In practice, not everything gets caught that way, and serialization of the parser/unparser runtime objects is the thing that ultimately forces everything (specifically the pre-serialization call).

To fix this we need a synchronized method on Processor that keeps a local object state indicating that the processor has been serialized. If the object is serialized normally by way of call to save() then the local flag should be set. If not, then serializing the object to a /dev/null stream should occur so as to force all the lazy evaluation.",['beginner'],2017-08-02 14:06:30+00:00,2021-05-26 18:15:25+00:00,2021-05-27 19:00:45+00:00,Closed,13115235,DAFFODIL-1816
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Calabash currently not working.,[],2017-08-01 14:28:22+00:00,2017-09-01 18:35:42+00:00,2017-09-01 18:36:09+00:00,Closed,13115234,DAFFODIL-1815
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"These constructs aren't needed any more, as the serialization/deserialization of the parser and unparser provide a strong separation between compilation and runtime.

These can be removed. 
6 occurrences of usingCompilerMode
4 matches of usingRuntimeMode
2 matches of usingUnrestrictedMode
22 matches of ExecutionMode

So it's an easy cleanup.",['beginner'],2017-08-01 13:12:28+00:00,2020-09-11 18:17:25+00:00,2020-09-24 19:11:27+00:00,Closed,13115233,DAFFODIL-1814
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"{code}
s/vmf/VMFSpecScraper.scala:66: variable resultNode in class ScalaXMLInfosetOutputter cannot be accessed in edu.illinois.ncsa.daffodil.infoset.ScalaXMLInfosetOutputter
[error]     val xml1 = outputter.resultNode.get
{code}",[],2017-07-31 19:15:55+00:00,2017-08-09 17:26:50+00:00,2017-08-09 17:27:31+00:00,Closed,13115232,DAFFODIL-1813
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We have a tunable now that can suppress warnings.

NACHA puts out a ton of warnings. We should set this tunable to eliminate them.",[],2017-07-31 19:09:51+00:00,2017-08-08 14:13:39+00:00,2017-08-08 14:13:39+00:00,Closed,13115231,DAFFODIL-1812
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"'sbt cli' runs on Linux, but not windows - there are failures due to the way the echo command is used to inject XML text into the stdin of the CLI. The echo command in MS Windows does not work the same way as Linux echo. (BTW: Linux echo is deprecated, and should be using bash printf instead).

The command echo '<x/>' fails on windows. The can't tolerate the < or > characters, and various quoting attempts don't seem to be able to overcome this.

Installing cygwin, and running sbt cli from the cygwin bash shell is not alone sufficient to fix this problem. Probably PATH settings and/or other environment variables are required to be set up.

Instructions about installing Cygwin have been removed from the Wiki for now, as they are not needed to get regular old 'sbt test' to work.",[],2017-07-31 14:38:50+00:00,2019-01-29 14:26:54+00:00,2021-05-18 14:38:32+00:00,Closed,13115230,DAFFODIL-1811
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This bug looks like a windows line-ending (CRLF) vs. unix line ending (LF) problem. I.e., real bug in test because it is line-ending sensitive. When I look at this in Emacs it shows me the CRs as ^M. Every line ends with a ^M except the ones I marked with ### below.
THere are several of this same failure. These are tests related to internal whitespace preservation, so it's a place where Windows vs. Linux sensitivity may come up.
{code}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_internal_space_preserved3b failed: java.lang.Exception: 
[error] Comparison failed.
[error] Expected
[error]           <expr_space3b><dummy>2</dummy><value>a
[error] b
[error] c</value></expr_space3b>
[error] Actual
[error]           <expr_space3b><dummy>2</dummy><value>a ### no ^M here
[error] b                                                ### no ^M here
[error] c</value></expr_space3b>
[error] Differences were (path, expected, actual):
[error]  (expr_space3b/value,'a
[error] b
[error] c','a                                            ### no ^M here
[error] b                                                ### no ^M here
[error] c'), took 0.618 sec
{code}

We need to change these tests so they are portable somehow.",['beginner'],2017-07-27 17:43:55+00:00,2019-01-18 15:03:13+00:00,2021-05-18 14:38:34+00:00,Closed,13115229,DAFFODIL-1810
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A user reports sbt test fails. 

TestAlignedData.test_fillByte_04 fails as follows:

{code}
[info] Test edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedData.test_fillByte_04 started
[error] Test edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedData.test_fillByte_04 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: ""Diagnostic message(s) were expected but not found.""
[error] Expected: Schema Definition Error
[error] fillByte
[error] single-byte character
[error] encoding
[error] UTF-8
[error] ?
[error] 3 bytes, took 0.078 sec
[error]     at edu.illinois.ncsa.daffodil.tdml.VerifyTestCase$.verifyAllDiagnosticsFound(TDMLRunner.scala:1107)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectErrors(TDMLRunner.scala:1030)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$10.apply(TDMLRunner.scala:905)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$10.apply(TDMLRunner.scala:903)
[error]     at scala.util.Either$RightProjection.foreach(Either.scala:468)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:903)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:623)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:339)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:327)
[error]     at edu.illinois.ncsa.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:122)
[error]     at edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedData.test_fillByte_04(TestAlignedData.scala:206)
{code}

This happens because the test is a negative test, looking for the SDE associated with using a multi-byte character as the fill-byte. The test has  dfdl:fillByte=""���"" (that's a japanese kanji, in case it looks like something odd.).

On MS-Windows, if you don't have Unicode support installed, then that schema file won't read correctly. That kanji will be substituted by a ""?"", and that allows the test to run without issuing the SDE that fill byte must be a single byte character. Hence, the test fails.

Conclusion: We must update wiki instructions to insist that MS Windows users install the Japanese Language Pack. Currently it's just a final detail on the 2nd of two Eclipse-setup pages. But this is needed even if you are just running sbt.",[],2017-07-27 17:39:01+00:00,2017-07-31 17:37:52+00:00,2017-08-21 19:33:02+00:00,Closed,13115228,DAFFODIL-1809
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The JPEG DFDL schema has the problem of being much too permissive. Just blobs of binary data can often be accepted. The schema (to date) just identifies whether the file is any collection of JPEG segments. Alas one segment type is effectively just a datablob, so many datablobs will be accepted. 

To overcome this, additional constraint-checking is needed. This can be expressed using DFDL's dfdl:assert statements in the DFDL schema. There are two there already which enforce the first segment being a SOI segment (start of image), and the last being EOI (end of image); however, a blob of bytes between SOI and EOI would be accepted when it is clearly NOT a jpeg image.

In some cases the constraint rules will require more expressive power than this - where true XPath query capability is required. 

The Schematron rule language could be used. See also DFDL-1807 - for schematron - in case it proves to be needed.

Note that this is not ""validation"" of the data, it is using what we normally think of as a validation language, but using it for checking if the data is well-formed.",[],2017-07-27 16:05:56+00:00,2018-03-09 22:02:09+00:00,2018-03-09 22:02:09+00:00,Closed,13115227,DAFFODIL-1808
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil can run the standard XSD validator that is in Xerces.

We should also be able to provide schematron-based validation. This should allow use of a separate rule file (usually filename.sch extension), or schematron annotations embedded directly in the DFDL schema.

Note: the way schematron validation commonly works is that the schematron rules are converted into an XSLT, and the XSLT is run on the XML infoset to produce the schematron output. We can do this same thing, but should insure that the conversion from schematron rules into XSLT is part of schema compilation so that aspect is done once only, and the XSLT created from that has its corresponding Java ""transformer"" object created only once as well.",[],2017-07-27 15:57:29+00:00,2020-12-02 17:09:29+00:00,2021-01-11 11:10:11+00:00,Closed,13115226,DAFFODIL-1807
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Two README's exist, one distributed in the tar/zip, one for the repo. We should update the repo one to use README.md.��The BUILD file also has a lot of unneccesary information. We should either update that, or just deleted it and and a Building section in the README.",[],2017-07-25 18:13:13+00:00,2017-07-26 11:57:05+00:00,2017-07-28 15:34:04+00:00,Closed,13115225,DAFFODIL-1806
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"AIS = Automated Identification System, a marine system in heavy use. 

aka the ITU M.1371-2 Standard.",[],2017-07-24 20:58:49+00:00,2018-05-07 15:34:07+00:00,2018-05-30 11:16:35+00:00,Closed,13115224,DAFFODIL-1805
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"daf:trace needs to be usable for complex elements.

E.g., fn:exists(/foo/bar) where bar is a complex element - this works
but fn:exists(daf:trace(/foo/bar, ""bar"")) - this fails - silently saying doesn't exist, but
actually an error is being masked that /foo/bar is of the wrong type - simple was expected.

Need to change daf:trace to not care if the argument is simple or complex.",[],2017-07-21 16:44:28+00:00,2017-07-21 19:39:07+00:00,2017-07-28 15:48:54+00:00,Closed,13115223,DAFFODIL-1804
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Because image file formats are popular, but the resulting XML is HUGE, we need the ability to store the expected XML output in a file that is compressed, e.g., for file.jpg, file.jpg.xml.gz.

We need an option where we can specify:
{code:java}
<tdml:dfdlInfoset type=""file"" compression=""gz"">file.jpg.xml.gz</tdml:infoset>{code}

One can always look at the file conveniently using zcat.",[],2017-07-21 16:36:58+00:00,2021-01-21 20:55:30+00:00,2021-01-21 20:55:30+00:00,Closed,13115222,DAFFODIL-1803
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"It was discovered that several of the examples had the incorrect dfdl schema referenced. ��This needs to be corrected.

Also discovered that pertinent information (bitOrder) was being left out for examples that mix bitOrders in their data stream.",[],2017-07-21 15:28:17+00:00,2017-07-21 17:11:15+00:00,2017-08-04 10:44:15+00:00,Closed,13115221,DAFFODIL-1802
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Does not appear to be caused by changes in schemas. Potentially a bug in Daffodil. Needs investigation.,[],2017-07-21 12:14:50+00:00,2017-07-24 11:58:46+00:00,2017-07-28 17:15:53+00:00,Closed,13115220,DAFFODIL-1801
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Using our new Standard DFDL Schema Project Layout, an example command line ends up looking like:
{code:java}
$ ./bin/daffodil parse --schema ~/examples/CSV/src/main/resources/com/tresys/csv/xsd/csv.dfdl.xsd ~/examples/CSV/src/test/resources/com/tresys/csv/data/simpleCSV.csv{code}
Notice how long those file names are.

Now, if I look at the CLI instructions, it describes use of DAFFODIL_CLASSPATH.

I might want to do this in order to shorten my massively long paths:
{code:java}
export DAFFODIL_CLASSPATH=""~/examples/CSV/src/test/resources:~/examples/CSV/src/main/resources""{code}
Then shorten the command line to
{code:java}
$ ./bin/daffodil parse --schema com/tresys/csv/xsd/csv.dfdl.xsd com/tresys/csv/data/simpleCSV.csv{code}
Which is still long, but much more reasonable.

However, this doesn't work because only xs:include and xs:import search the classpath. The CLI doesn't search the classpath when trying to find the schema or the input file.

This improvement would change CLI so that it would try to use the supplied path directly, but if file is not found, it would then search the classpath for it. So that the same path that would be specified in the schemaLocation attribute of an xs:import or xs:include could be used on the command line.

With this change, our standard schema project layout is much less painful for CLI users. As it stands now the standard schema project layout makes it pretty painful for people who want to issue CLI commands and who actually type them.

Note that this change is completely backward compatible.",[],2017-07-20 22:06:17+00:00,2021-01-21 20:53:40+00:00,2021-01-21 20:53:40+00:00,Closed,13115219,DAFFODIL-1800
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This CLI currently reads the input data as a byte array. This is simple and allows for ensuring all data is read into a memory, reducing disk overhead during the preformance command. However, this means the CLI is limited to the maximum size of an array, which is INT_MAX. In order to support the CLI parsing/unparsing larger files, we should instead work on InputStreams rather than array buffers. For the performance subcommand, this will mean requiring something like a SplittalbeInputStream that will allow multiple consumers of a single InputStream.

Some SplittableInputStream implementations do exist, for example in JMRTD and on stack overflow, but licensing issues make it so these aren't an option. Either need to find a solution compatible with our license or implement our own.

This work should be done concurrently with changes to improve the efficiency of the I/O layer.",[],2017-07-20 11:40:59+00:00,2018-08-16 14:48:41+00:00,2018-10-08 18:34:13+00:00,Closed,13115218,DAFFODIL-1799
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When there is left over data of less than one byte, we get an error message like this:

\{quote}Left over data. 3 bytes available. Location: byte 3 limit(bytes) 3\{quote}

That does not make it clear where the data ended, partly due to the use of bytes, but also partly do to the limit stuff. This should be cleaned up to be more clear.",[],2017-07-19 12:38:30+00:00,2017-07-19 14:32:58+00:00,2017-07-31 20:10:16+00:00,Closed,13115217,DAFFODIL-1798
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-07-18 18:24:34+00:00,2017-07-19 17:42:07+00:00,2017-08-03 19:32:02+00:00,Closed,13115216,DAFFODIL-1797
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Blocker,"After pulling latest updates from jpeg repository, commit b417d355154abc2a285f85af907e8a2159dce37b the nightly performance parse tests fail.��

Executed the��daffodil parse command��for test file IMG_2308.JPG and received an ""[error] Parse Error: Delimiter not found"" error message.

Command:

daffodil/daffodil-cli/target/universal/stage/bin/daffodil parse -I null -s /home/dfdl/dfdl-dataformats/data-formats/jpeg/src/main/resources/com/mitre/jpeg/xsd/jpeg.dfdl.xsd /home/dfdl/dfdl-dataformats/data-formats/jpeg/src/test/resources/IMG_2308.JPG

Error message:

[error] Parse Error: Delimiter not found.
Schema context: APP0 Location line 363 column 6 in file:/home/dfdl/dfdl-dataformats/data-formats/jpeg/src/main/resources/com/mitre/jpeg/xsd/jpeg.dfdl.xsd
Data location was preceding byte 2 limit(bytes) 1030473

Rolled local jpeg repo��back 1 commit and the failing��tests pass.

��",[],2017-07-14 15:57:54+00:00,2017-07-18 15:22:08+00:00,2017-07-26 11:17:58+00:00,Closed,13115215,DAFFODIL-1796
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Blocker,"Created w3cdom infoset files (2) ��for��w3cdom unparsing performance tests.

Executed the asterix tests specifying the -I w3cdom option. The parse test completed successfully while the unparsed tests failed.

Run the unparsed test separately using the daffodil-cli with the following command:

daffodil/daffodil-cli/target/universal/stage/bin/daffodil unparse -I w3cdom -s /home/dfdl/dfdl-dataformats/data-formats/asterix/src/main/resources/com.raytheon.asterix/xsd/asterix.cat48.dfdl.xsd /home/dfdl/dfdl-dataformats/data-formats/asterix/src/test/resources/com.raytheon.asterix/astrx_0000002_x2.dat-w3c.xml

Each w3cdom infoset files created for the following error:

[error] Unparse Error: Found child element \{http://fcds/Cat48_Packet}cat, but expected \{}cat.
Schema context: asterix_message Location line 18 column 4 in file:/home/dfdl/dfdl-dataformats/data-formats/asterix/src/main/resources/com.raytheon.asterix/xsd/asterix.cat48.dfdl.xsd

��",[],2017-07-13 14:12:31+00:00,2017-07-26 18:55:00+00:00,2017-07-26 20:15:24+00:00,Closed,13115214,DAFFODIL-1795
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"It has been observed that many DFDL schemas parse and unparse well-formed data, but spuriously accept also many non-well-formed data files. It is a common mistake for a DFDL schema to accept an empty file as well formed.

This bug is to add negative tests to all DFDL schemas that verify that they reject many kinds of non-well-formed data. These tests must always include one that verifies that an empty file is not accepted as well-formed.",[],2017-07-11 15:48:05+00:00,2021-01-21 20:52:44+00:00,2021-01-21 20:52:44+00:00,Closed,13115213,DAFFODIL-1794
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Blocker,"When executing the nightly performance tests the asterix data format tests, both parse and unparsed,��fail with and Schema Definition Error (SDE).

[error] Schema Definition Error: If-expression branches must have similar types, but were Boolean and UnsignedByte

It appears that the fix for DFDL-1791 - Stackoverflow with if-then-else expressions (commit 3be42ce3107abb4bb48a37d5e78e55ddee0adb55), is now causing��the asterix nightly tests to fail.",[],2017-07-07 16:08:04+00:00,2017-07-07 21:21:09+00:00,2017-07-11 15:05:35+00:00,Closed,13115212,DAFFODIL-1793
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Attempt to externally bind $dfdl:byteOrder, as PCAP needs to (since fix DFDL-1722), and you find out it can't be bound as it is not declared external=""true"". None of the built in variables were.

��",[],2017-07-06 22:36:50+00:00,2017-07-07 13:53:05+00:00,2017-07-27 12:39:48+00:00,Closed,13115211,DAFFODIL-1792
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,It looks like commit��0041deba4168f43bcbdfad2aee0ee925c9ef86bb causes a stack overflow on some if-then-else expressions. ��The change is probably not correct and can lead to infinite recursion.,[],2017-07-05 16:38:09+00:00,2017-07-06 19:21:32+00:00,2017-07-26 21:23:13+00:00,Closed,13115210,DAFFODIL-1791
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Major,"With the DAFFODIL_JAVA_OPTS memory set to 10240mb the unparsing test infoset file for 1mb jpeg, using option -I w3cdom��ran for over an hour without completing. When the test was killed the following error is displayed:

""COpenJDK 64-Bit Server VM warning: Exception java.lang.OutOfMemoryError occurred dispatching signal SIGINT to handler- the VM may need to be forcibly terminated""

Had to increase the DAFFODIL_JAVA_OPTS memory setting to 16384mb before the test would complete with an unparsed time of approximately 41 seconds.

The same test using option -I scala---xml and jdom completed in approximately 16 seconds with the DAFFODIL_JAVA_OPTS memory set to 10240mb.

��",[],2017-06-29 13:23:18+00:00,2017-07-20 12:19:45+00:00,2017-08-01 16:54:40+00:00,Closed,13115209,DAFFODIL-1790
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Say we parse a file and generate two infosets, one via -I xml and -I jdom. These two infosets are functionally the same, except that the one generated via -I xml has newlines and indentation. If we unparse using -I jdom with each of the different files, the one generated via -I xml is significantly slower than the one generated with -I jdom. This implies that there is a noticeable performance hit with whitespace in a JDOM tree. We should investigate if this is that case and determine a fix.",[],2017-06-22 11:10:05+00:00,2017-06-22 16:12:08+00:00,2017-07-11 19:10:26+00:00,Closed,13115208,DAFFODIL-1789
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"Some file formats have a drastic reduction in performance when a non-null InfosetOutputter is used. For example, bmp is about 50 files/second output to null, but drops down to about 1 file/second when using any other infoset outputter. Similar poor performance is seen in jpeg, pcap. Common denominator might by hex binary data.

We need to investigate this poor performance and resolve if possible.",[],2017-06-20 11:52:41+00:00,2017-06-26 17:35:25+00:00,2017-07-11 19:02:23+00:00,Closed,13115207,DAFFODIL-1788
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For obvious reasons, we do a lot of property lookups. This needs to be made as fast as possible. It looks like we might be doing a lot of allocations when trying to find a property. I suspect part of the reason for this is that when a property isn't found, it returns a NotFound, which contains two lists of places where it looked. We end up going up the chain sometimes, creating NotFound's until we find a property, at which point the NotFounds are discarded and the Found is returned. This is very useful for diagnostics when a property isn't defined. However, many properties come form the default, so we end up creating lots of NotFound's that end up being discarded.

Instead of gather up places looked we should have two functions. The first function just looks up the property chain for the property, and either returns an Option[String], either if found it or it didn't. If it wasn't found, then we have a second function that will gather up the places it looked to print the error message. This should help to reduce��list allocations that just get thrown away and speed up property look ups.",[],2017-06-16 18:22:52+00:00,2021-01-21 20:52:04+00:00,2021-01-21 20:52:05+00:00,Closed,13115206,DAFFODIL-1787
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Profiling has showed that the OOLAG has some amount of overhead. Part of the issue is that the requiredEvaluations function creates anonymous functions, enormous lists, and lots of strings. Commenting out the content of requiredEvaluations brought the compilation of a complex schema from ~16 seconds to ~13 seconds, so about a 20% decrease.

The fact that things still works with requiredEvaluations not doing anything makes me think maybe we can reevaluate how the OOLAG works and if perhaps we can remove its functionality, or replace it with something much lighter.",[],2017-06-16 18:04:57+00:00,,2021-01-21 20:51:36+00:00,Open,13115205,DAFFODIL-1786
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The code in Facets.scala and RestrictionUnion.scala appears to cause a notcable hit in performance (maybe 20% on a very large file with lots of restrictions). If I replace all the facet information in in the��SimpleTypeRuntimeData constructor with Nil's and None's, compile time decreases. I suspect there are some performance improvements we can make with Facets.scal and ResttrictoinUntion. A quick cursory sees some duplicating effort (e.g. multiple calls to xml 
 ""restriction"", which is probably pretty slow itself. Facets.scala is kindof messy and hard to read, so a redisgn/refactoring might make it easier to improve this aspect of compilation.

Also, removing the requiredEvaluations in Facets.scala also helps quite a bit. Seems perhaps the pattern one might be the worse offender.",[],2017-06-13 16:56:12+00:00,2021-01-21 20:51:04+00:00,2021-01-21 20:51:04+00:00,Closed,13115204,DAFFODIL-1785
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Things we'll need to modify
 * Modify Daffodil build to run 'sbt publishM2' to publish the Daffodil snapshot to a local maven repo (or 'sbt publish/publishSigned') to publish to the public nexus server
 * Add a trigger to build the nar repo (make sure maven update looks to update snapshots, -U option should work?)
 * Talk to Rob about getting the nar added as an artifact",[],2017-06-09 11:33:20+00:00,2018-05-17 13:21:08+00:00,2021-05-18 14:38:42+00:00,Closed,13115203,DAFFODIL-1784
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"According to the code, it looks like changing this tunable should allow one to match larger regular expression than the default of 1024 * 1024 characters. But it does not appear to work. Need to investigate. This is seen with a Jpeg2k schema that requires regular expressions that matches many bytes to scan through the data.",[],2017-06-02 17:28:26+00:00,,2018-09-13 14:34:29+00:00,Open,13115202,DAFFODIL-1783
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Some schemas have large simple type unions that combine enumerations with many members, and numeric ranges.

Translation between numeric values, and symbolic values (strings), is desirable.

A proposal for how to do this is:
[https://cwiki.apache.org/confluence/display/DAFFODIL/Proposal%3A+Features+to+Support+Table-Lookup]

(This one is now obsolete:
[https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Enumerations+and+Range+Tables+via+Simple+Type+Unions])

��

Under review by the DFDL Workgroup, it was observed that these features require validation processing, and that was considered problematic given that validation is an optional feature of DFDL.�� However, the dfdl:checkConstraints function is not optional - excepting that the whole expression language is optional. So it is reasonable to add these features to an implementation that has either validation or dfdl:checkConstraints().

��",[],2017-06-02 00:40:16+00:00,2019-07-22 17:13:13+00:00,2021-05-20 20:01:23+00:00,Closed,13115201,DAFFODIL-1782
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Trivial,"Some data types are encoded in ways we can't decode.

Good example of this is an ASN.1 DER ""Object Identifier"".

Another good example of this is a Google Protocol Buffers zig-zag integer.

Another example of this is the payload of a mil-std-2045 header - the payload can be specified as ""compressed"", and must be decompressed when parsing, recompressed when unparsing.

��

This ticket may be mixing some issues.
 * Primitive representations of string, int, etc.
 * decoding of a representation before subsequently parsing it, or the inverse for unparsing

In general DFDL/Daffodil needs extensibility of this kind, so that every time someone runs into a format with some encoding not anticipated by the DFDL standard we don't have to add it into the Daffodil implementation as a special case.

We need the ability to extend by adding a jar of specifically-setup libraries, and augmenting a schema with declarations that the extension be added.",[],2017-06-01 22:49:25+00:00,2020-07-30 13:40:16+00:00,2021-06-11 20:07:09+00:00,Closed,13115200,DAFFODIL-1781
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The TDML Runner only��uses the ScalaXMLInfosetInputter/Outputter when running tests. This means that other Infoset inputters/outputters (JDOM, w3c DOM, json, XML Text) are essentially never tested as part of our full test suite. We need a way to run all of our tests with the different infoset representations so that they get adequate test coverage. We probably don't need to do this for every build, so it's probably okay if it's a somewhat manual process (e.g. setting an environment variable or config option in the TDML Runner), but it needs to be mostly automated.",[],2017-06-01 15:23:32+00:00,2017-06-14 17:10:43+00:00,2017-07-26 20:59:17+00:00,Closed,13115199,DAFFODIL-1780
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-06-01 15:13:33+00:00,2017-06-01 15:15:06+00:00,2017-06-02 12:06:20+00:00,Closed,13115198,DAFFODIL-1779
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Discovered when running the TDML tests for the link16 schema.

Even if you select exactly one test using the eclipse GUI, and run only that one, it seems like the TDML runner is compiling many more top levels than that. Perhaps it is compiling top levels for every test in the TDML file? It's not clear what it is doing, but it certainly is using a ton more memory.

I am not certain what is going wrong, but there is a huge discrepancy between the amount of space and time it takes to compile and run a single TDML test from a scala code file in src/test/scala, and the amount of time it takes to compile the same schema to binary file using the daffodil command line.

Ex: For link16, from eclipse, select one test, run-as-junit-test: Uses almost 9Gbytes of memory (Had to increase JVM to 10Gig with -Xmx10G option) and takes 7 minutes (on my workstation).

But the same schema, compiled from the daffodil command line for the same top-level element takes 90 seconds to compile and creates a 2.5Mbyte binary file.

So, running the TDML runner is creating massively more memory usage. It is not clear why.

��

��

��

��

��

��

��",[],2017-05-31 19:59:13+00:00,,2020-10-13 21:49:36+00:00,Open,13115197,DAFFODIL-1778
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some file formats use a direct dispatch key that may contain spaces. The dfdl:choiceBranchKey property is a space separated list of keys, but individual keys can contain spaces via the %SP; character entity. Note that character classes should not be allowed.

This is currently not allowed, with choiceDispatchKey complaining when the result of the expression contains a space.",[],2017-05-16 16:03:59+00:00,2017-05-16 16:18:53+00:00,2017-05-16 16:18:53+00:00,Closed,13115196,DAFFODIL-1777
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"X.509 is based on ASN.1, so we maybe be able to convert the ASN.1 specification to a DFDL schema. This would be a very interesting exercise and would show DFDL power with regards to ANS.1 derived data.",[],2017-05-15 20:13:09+00:00,2017-06-01 22:42:29+00:00,2017-07-26 19:48:52+00:00,Closed,13115195,DAFFODIL-1776
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"Many properties are allowed to be DFDL expressions, but expressions are not required (e.g. dfdl:initiator, dfdl:separator). Even when these expression are provided as a constant (e.g. dfdl:inititor=""foo""), we still compile them. Sometimes this is necessary for things that are numeric so that we can convert the constant string into a numeric constant. However, if the property results in a string, there really is no need to compile it into a string. Avoiding this would prevent allocating DFDLPathExpressionCompiler's and parsing/compiling a value, only to return a Constant of the same value. ��As DFDL-1774 mentions, expression compilation is very slow, so if we could avoid this, it may improve performance.",[],2017-05-11 15:34:39+00:00,2017-06-13 19:48:27+00:00,2017-07-11 15:24:18+00:00,Closed,13115194,DAFFODIL-1775
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Expression compilation is incredibly slow right now, even for incredibly small schemas.

We should profiling just expression compilation and see if there is any low hanging fruit that could easily be sped up. One potential place is the type converter, which is a just match case. This is probably very slow when the match is at the bottom of this list. We likely want to use a hash lookup for this.

Additionally, there have been some reports that the scala parser combinator library is fairly poor (both slow and memory inefficient), so it may be worth looking into alternatives. The [https://github.com/lihaoyi/fastparse|fastparse] library might be a good alternative, though it does not appear to be a drop in replacement for our needs.",[],2017-05-11 15:29:24+00:00,2021-01-21 20:47:43+00:00,2021-01-21 20:47:43+00:00,Closed,13115193,DAFFODIL-1774
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"(Bug found in Link16 work. Reproduced in tests test_choiceSlotAmbiguous1 and test_choiceSlotAmbiguous2)

Consider this choice:
{code:java}

<xs:choice>
������������������������������ <xs:sequence>
���������������������������������� <xs:element name=""A"" type=""xs:string"" dfdl:length=""1"" />
���������������������������������� <xs:element name=""C"" type=""xs:string"" dfdl:length=""1"">
�������������������������������������� <xs:annotation>
������������������������������������������ <xs:appinfo source=""http://www.ogf.org/dfdl"">
���������������������������������������������� <dfdl:discriminator>{ ../A eq ""A"" }</dfdl:discriminator>
������������������������������������������ </xs:appinfo>
�������������������������������������� </xs:annotation>
���������������������������������� </xs:element>
������������������������������ </xs:sequence>
������������������������������ <xs:sequence>
���������������������������������� <xs:element name=""B"" type=""xs:string"" dfdl:length=""1"" />
���������������������������������� <xs:element name=""C"" type=""xs:string"" dfdl:length=""1"">
�������������������������������������� <xs:annotation>
������������������������������������������ <xs:appinfo source=""http://www.ogf.org/dfdl"">
���������������������������������������������� <dfdl:discriminator>{ ../B eq ""B"" }</dfdl:discriminator>
������������������������������������������ </xs:appinfo>
�������������������������������������� </xs:annotation>
���������������������������������� </xs:element>
������������������������������ </xs:sequence>
�������������������������� </xs:choice>{code}
Now imagine a subsequent expression containing ../C.

Which C is that? The first or second. Answer is it depends on which discriminator was chosen.

If the first discriminator is true, then the path ../C succeeds. If the second discriminator was true the path ../C fails with no such element C.

This is probably due to Daffodil's schema compiler assigning two different slot numbers to these two C elements, rather than recognizing they have the same name+namespace and so using a single slot for them.

��",[],2017-05-09 16:19:25+00:00,2018-01-16 20:40:43+00:00,2018-01-24 14:55:03+00:00,Closed,13115192,DAFFODIL-1773
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Java API changes on 2.0.0 branch are now incompatible and anyone using JAPI trying to keep up with our 2.0.0-SNAPSHOT now has to update their code.

Easiest way to tell them how to do that would be to point them at a 2.0.0-branch of helloworld.java.

But that means we have to update helloworld.java first :-)",[],2017-05-04 22:59:09+00:00,2017-05-04 23:48:07+00:00,2017-08-03 17:00:41+00:00,Closed,13115191,DAFFODIL-1772
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,This message is not helpful. It has to give the context.,[],2017-05-04 22:56:36+00:00,2017-05-18 18:59:05+00:00,2017-05-25 12:44:28+00:00,Closed,13115190,DAFFODIL-1771
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Doing this would prevent accidentally create a 0.0.0-SNAPSHOT branch. The error should specify how to fix it.,[],2017-05-04 22:23:13+00:00,2017-05-05 16:17:18+00:00,2017-07-26 16:00:55+00:00,Closed,13115189,DAFFODIL-1770
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,Fails with SDE about path .. past root element.,[],2017-05-04 19:12:03+00:00,2017-05-18 19:35:48+00:00,2017-07-27 10:29:26+00:00,Closed,13115188,DAFFODIL-1769
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We get many many of these warnings for NACHA
{code}
Schema Definition Warning: Element has no empty representation so cannot have XSD default='' as a default value.
Schema context: FileCreationTime Location line 149 column 6 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_elements.xsd
{code}",[],2017-05-04 18:45:02+00:00,2017-08-30 19:22:42+00:00,2017-08-31 11:41:22+00:00,Closed,13115187,DAFFODIL-1768
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you run TestChoice1765.test_backtrack1 with trace on (modify to have runner.trace.runOneTest(...) ), you see lots of byte order change parsers executing.

But the schema has globally byteOrder=""bigEndian"" so there should only be one byteOrderChange parser to set it once and for all at the start of the whole thing. The others should optimize away.",[],2017-05-04 14:52:06+00:00,2018-02-06 20:33:08+00:00,2018-02-06 20:33:08+00:00,Closed,13115186,DAFFODIL-1767
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"User ran into this.

The code just has scala's ??? in it, which gives an uninformative message.

Shoudl use Assert.nyi(""newVariableInstance"")",[],2017-05-03 23:24:17+00:00,2017-05-04 20:05:46+00:00,2017-07-27 12:49:38+00:00,Closed,13115185,DAFFODIL-1766
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"This bug was discovered when debugging the nato-stanag-5516 schema.

(Note that schema is not publicly available)

test_link16_J3_6_01 fails because backtracking after the failure in the J3.6C3 word element does not result in that J3.6C3 word being removed from the array it is part of.",[],2017-05-03 23:06:10+00:00,2017-05-04 16:32:56+00:00,2017-07-28 16:39:18+00:00,Closed,13115184,DAFFODIL-1765
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A while back the files Parser and PState were moved into the processors.parsers directory, but their package statements were never updated.

Eclipse becomes entirely unmanageable if the file directory structure and package names don't align. 

Needs to be fixed or Eclipse becomes unusable. Ex you can't put break points in parsers that are in the mis-located/mis-named package such as AltCompParser.",[],2017-05-03 21:58:56+00:00,2017-05-04 13:34:48+00:00,2017-05-04 13:35:04+00:00,Closed,13115183,DAFFODIL-1764
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Daffodil allows some properties that are only allowed on dfdl:element annotations to be inherited from the lexical context of a simpleType that is referenced from an element. 

In the DFDL spec section 8.3 the algorithm for combining properties between element-refs, elements, simple types, and base simpleTypes is given. A key word in the descriptions is ""applicable"" properties. Daffodil is not filtering the properties it takes from a simple type, for example, by their applicability to simple types. 

E.g., one should not be able to put dfdl:nilValue on a simpleType. I believe we enforce this if it is directly placed in a dfdl:simpleType long form property, but might not be checked for short-form or dfdl:property-element form.

Furthermore, if a nilValue property is defined in the default format surrounding a simpleType, that's ignored by any element that uses the simple type. 

Furthermore if a nilValue property is defined in a named format definition that is referenced from a simpleType, that nilValue is ignored and not used by an element having that simpleType.

The same is true for other element-only properties such as nilKind, and occursCountKind, occursCount. (Nillability and Dimension are two things that are often thought of as ""type"" information, but in XSD these are not characteristics of types, but of element declarations. DFDL just follows XSD in this.)",[],2017-05-01 18:29:59+00:00,,2021-01-21 20:46:19+00:00,Open,13115182,DAFFODIL-1763
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:57:29+00:00,2017-06-12 21:04:52+00:00,2017-06-29 15:42:04+00:00,Closed,13115181,DAFFODIL-1762
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:57:13+00:00,2017-05-09 16:56:13+00:00,2017-07-31 15:30:20+00:00,Closed,13115180,DAFFODIL-1761
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:56:59+00:00,2017-05-09 16:55:57+00:00,2017-07-31 14:59:04+00:00,Closed,13115179,DAFFODIL-1760
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:56:43+00:00,2017-05-05 17:14:12+00:00,2017-06-29 17:42:36+00:00,Closed,13115178,DAFFODIL-1759
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:56:29+00:00,2017-05-05 17:14:01+00:00,2017-07-31 14:58:46+00:00,Closed,13115177,DAFFODIL-1758
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-05-01 13:56:08+00:00,2017-05-05 17:13:33+00:00,2017-07-31 14:58:12+00:00,Closed,13115176,DAFFODIL-1757
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Some tests are showing ""No_Namespace"" as the namespace, but this should only be an internal thing and shouldn't show in the xml result. This doesn't affect our tests as we remove the namespaces before comparing. Viewing the parsed xml before XMLUtils.removeAttributes in TDMLRunner's verifyParserTestData (around line 1032) will show the invalid namespace.

For an example, see test defaultNamespaceInExpression2 in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2017-04-30 20:11:39+00:00,2017-05-01 18:13:55+00:00,2017-07-26 21:04:31+00:00,Closed,13115175,DAFFODIL-1756
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"preSerialization time is still computing things that can throw SDE.
    
that SDE would be suppressed by the serializer code. You get a backtrace, not an SDE.
    
fix is to call preSerialization ourselves before we try to serialize the runtime objects.",[],2017-04-28 21:08:39+00:00,2017-04-28 23:36:49+00:00,2017-08-10 14:07:55+00:00,Closed,13115174,DAFFODIL-1755
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Asterix format has come up 3 times now.

This is a publicly available standard data format.

We can economize effort in support for people on Asterix by just creating the starting point schema for it and publishing it to DFDLSchemas.

We should create one the way we think it should be done for maintainability and performance (ex: using occursCountKind=""expression"" and occursCount=""{ ../hdr/flag }"" vs. discriminators)

There is an excellent looking tool called www.asterixtk.com which has a free version and it includes some sample data. Also has ability to output XML. It would be interesting to see to what degree DFDL can produce that XML or something close to it. I don't know if there is an XML Schema for this XML. 

Creating a comprehensive DFDL schema for Asterix is a big job. I think a schema for just one message type (e.g., cat062), that will parse one example piece of data is all that is required really. If we're lucky people who really want to do Asterix will undertake the added QA/test, and growing the schema's coverage of the spec.",[],2017-04-28 19:09:50+00:00,2018-10-23 16:45:42+00:00,2018-10-23 16:45:42+00:00,Closed,13115173,DAFFODIL-1754
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The parse API change in commit 26ca5076a802b9c953ed89f9715c8f042a0ec290 added some allocations inside the main performance loop. These allocations resulted in lower performance numbers for small files. We really should be testing larger files so that this small allocations don't have an affect, but we should at least make this loop is minimal as possible. For example, we currently allocate a BufferedWriter even if it won't be used. We should only do the minimum that someone would need to perform in a real world situation.",[],2017-04-28 18:27:19+00:00,2017-05-01 18:12:56+00:00,2017-07-26 21:08:08+00:00,Closed,13115172,DAFFODIL-1753
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-04-28 17:55:00+00:00,2017-05-23 20:11:27+00:00,2017-06-29 17:49:00+00:00,Closed,13115171,DAFFODIL-1752
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,NITF currently uses nilKind and nilValue on simple types. This is incorrect according to the spec. We need to fix the NITF schema and have Daffodil throw an SDE. See also [NITF Issue #2|https://github.com/DFDLSchemas/NITF/issues/2],[],2017-04-28 12:23:20+00:00,2017-05-01 21:26:32+00:00,2017-05-01 21:26:32+00:00,Closed,13115170,DAFFODIL-1751
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is precedent for XML schemas that allow simpleType unions that are degenerate in that they have exactly one simpleType child or one memberType listed.

This makes DFDL schema generators easier - fewer boundary conditions.",[],2017-04-27 19:20:14+00:00,2017-04-28 23:29:16+00:00,2017-08-01 12:21:54+00:00,Closed,13115169,DAFFODIL-1750
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"With validation mode set to full, after a parse we have xerces recompile the schema and validate against the infoset. That is painful. Instead we should create a Xerces validator once (if full validation is enabled) and reuse the same one for each parse. That should give a noticeable gain in performance with full validation. Need to confirm that the xerces validator is thread safe and treat it appropriately if not

Also, we *might* be able to serialize the xerces validator as part of saving a parser. This would be nice so that we could enable full validation for saved parsers.",[],2017-04-27 15:30:54+00:00,2021-01-21 20:44:22+00:00,2021-01-21 20:44:23+00:00,Closed,13115168,DAFFODIL-1749
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"We should investigate the use of java.nio.channels in our API. It's possible that the use of standard java.io may have better performance than the use java.nio. Need to investigate and determine if it makes sense to switch.

Should be done as part of 2.0.0 since this would break the Daffodil API.",['beginner'],2017-04-25 15:50:29+00:00,,2021-01-21 20:43:06+00:00,Open,13115167,DAFFODIL-1748
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The two API's are virtually the same. The only real differences are:
* Java Lists vs Scala Seqs
* Java Map vs Scala Map
* Logger enums
* parse outputs a JDOM Document vs Scala XML Node
* unparse inputs a JDOM Document vs Scala XML Node

Replacing Scala Seq/Map/enums with a Java List/Map/enum does not seem that big of a deal. And with new InfosetInputter and InfosetOutputters, the differences between parse and unparse are removed. Since we are already breaking API with the addition of InfosetInputter/Outputter, we should just remove the sapi/japi distinction and just have a daffodil-api class that will work for both Java and Scala, removing the duplicate code.",[],2017-04-25 15:10:16+00:00,,2021-01-21 20:41:11+00:00,Open,13115166,DAFFODIL-1747
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-04-21 17:16:50+00:00,2017-04-27 19:11:07+00:00,2017-07-26 20:51:18+00:00,Closed,13115165,DAFFODIL-1746
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-04-21 17:16:12+00:00,2017-05-04 16:40:10+00:00,2017-07-31 15:37:09+00:00,Closed,13115164,DAFFODIL-1745
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Related to DFDL-1210,[],2017-04-21 17:15:18+00:00,2017-04-27 19:11:25+00:00,2017-06-13 11:59:56+00:00,Closed,13115163,DAFFODIL-1744
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-04-21 17:14:24+00:00,2017-04-27 19:10:40+00:00,2017-07-26 21:18:12+00:00,Closed,13115162,DAFFODIL-1743
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"TIFF image format is not something DFDL v1.0 can describe.

Nevertheless we need an approach that illustrates how to deal with it.

I *think* this means a preprocessing program, and then a DFDL schema to turn the result of the preprocessor into an Infoset.  For unparsing, a post-processor also.

The right approach remains to be seen, but we need to show how to deal with TIFF.",[],2017-04-19 18:57:23+00:00,2021-01-21 20:39:02+00:00,2021-01-21 20:39:02+00:00,Closed,13115161,DAFFODIL-1742
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Trivial,"DFDL-1634 provides support for simpleType uinons in Daffodil.

However, a union is still validated (in ""limited"" validation mode, or when dfdl:checkConstraints is called) by sequentially walking through the union members one by one.

When the union consists of enumerations, or ranges, or mixtures of only those two, then a faster mechanism is needed. 

E.g., for a union that is just enumerations, the validation should take constant time, by using a hash/table lookup. 

For a union of min/max ranges, some sort of decision tree that rapidly determines validity is required. 

combinations of these are also possible. A common situation would be for the integer 0 to mean ""No Statement"", 1-25 are valid values that have some mathematical meaning, and 26-31 are illegal.

We want to express this like
{code}
<simpleType>
   <union memberTypes=""ex:noStatement ex:allowed ex:illegal""/>
</simpleType>

<simpleType name=""noStatement"">
  <restriction base=""xs:int"">
     <enumeration value=""0""/>
 </restriction>
</simpleType>

<simpleType name=""valid"">
   <union memberTypes=""ex:car ex:train ex:plane.... ex:bicycle""/
</simpleType>

<simpleType name=""car""><restriction base=""xs:int""><enumeration value=""1""/></restriction></simpleType>
<simpleType name=""train""><restriction base=""xs:int""><enumeration value=""2""/></restriction></simpleType>
<simpleType name=""plane""><restriction base=""xs:int""><enumeration value=""3""/></restriction></simpleType>
... 21 more ...
<simpleType name=""bicycle""><restriction base=""xs:int""><enumeration value=""25""/></restriction></simpleType>

<simpleType name=""illegal"">
   <restriction base=""xs:int"">
       <minInclusive value=""26""/>
      <maxInclusive value=""31""/>
   </restriction>
</simpleType>
{code}
     
In the above, the union containing the 25 enumeration simple types will be iterated with a loop that will go through all 25 possibles one by one. This needs to be improved to be a constant time dispatch.",[],2017-04-17 21:27:25+00:00,,2021-01-21 20:38:30+00:00,Open,13115160,DAFFODIL-1741
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"TODO: cleanup. Thsi whole pattern of a boolean and a value that can't be evaluated unless the boolean is true., is ugly and optPattern would be better using option types.",['Beginner'],2017-04-17 21:05:06+00:00,,2021-01-21 20:32:40+00:00,Open,13115159,DAFFODIL-1740
New Feature,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,Implement 'packed' and 'bcd' and for binaryNumberRep and binaryCalendarRep.,[],2017-04-06 15:00:53+00:00,2018-01-30 14:05:44+00:00,2018-01-31 13:34:46+00:00,Closed,13115158,DAFFODIL-1739
New Feature,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,,[],2017-04-06 14:52:51+00:00,2018-07-09 17:43:09+00:00,2018-07-12 16:17:09+00:00,Closed,13115157,DAFFODIL-1738
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"A few reasons why this might be a good idea:
# Extra testing of getByteArray, since all getSigned/UnsignedLong would now be using a similar codepath
# One place where all the BE/LE/MSBF/LSBF bit twiddling stuff goes, making it easier to optimize in the future
# The existing LongConverters have some code that is potentially slow (e.g. reversing bit/byte order of byte buffer, lots of sign extended/unextended, etc.). The getByteArray method is a pretty efficient way to get any amount of bits in to BE MSBF order, which can then be quickly converted to a Long with a few shifts and ors.",[],2017-04-06 11:33:52+00:00,2017-05-10 11:11:38+00:00,2017-08-01 13:49:14+00:00,Closed,13115156,DAFFODIL-1737
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See test introduction_1_02. DFDL-1707 enabled support for unparsing BigInt's. However, if you modify introduction_1_02 to roundTrip it fails. This appears to be because it is trying to unparse 8.6E-200. It looks like when ICU converts this to text, it results in a zero. Perhaps it's a limit of ICU, or perhaps it's a bug. Should look into if updating to a newer version of ICU fixes this.",[],2017-04-05 11:52:58+00:00,2018-08-16 16:37:01+00:00,2018-08-17 16:09:14+00:00,Closed,13115155,DAFFODIL-1736
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Binary large object, and character large object (aka BLOB/CLOB) support is needed.

Rather than transforming a large binary object into hexBinary or string, instead one annotates the DFDL schema to specify that a BLOB/CLOB handle is preferred. The Infoset then contains not the data, but a token/object that can be fed to an ""open"" API to access a stream of the data. The token/object is a small sized thing. This allows data formats like JPEG 2000 where payloads are often gigabytes.

Note: implementing this requires revising our ByteBufferDataInputStream layer into one that does not require the input data to fit in memory. 

See article on Wiki about large objects:  

https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=54427836",[],2017-04-04 16:09:29+00:00,2019-09-05 14:28:28+00:00,2021-05-20 20:01:49+00:00,Closed,13115154,DAFFODIL-1735
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Many formats have payloads that are embedded base64-encoded data.

We need a DFDL language feature enabling us to specify that the underlying bytes of an element are base64 encoded. That is, the data stream is base64 encoded, and must be decoded and then parsed, or unparsed and then encoded into base64 text.

A similar preprocessing should handle compression, as formats like VMF (mil-std-6017) can have compressed payloads.

In general, we should enable these pre-processing encoder/decoders to be pluggable so the set can be extended easily. 

This is a form of layering. If we consider just parsing for a moment, this enables one to define an element which is a byte-array or string, and then treat that as the input source for subsequent parsing without having to explicitly do a second pass of calling daffodil to parse the element. You can get Daffodil to do this second pass itself automatically.",[],2017-04-04 16:03:58+00:00,2018-05-03 18:45:42+00:00,2018-05-30 11:16:57+00:00,Closed,13115153,DAFFODIL-1734
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Commit be95926ce9d4433f07384e4871680aaaa4aecf41, which added support for bit length hex binary ended up reducing the speed of jpeg unparse fairly significantly. Need to investigate and fix.",[],2017-03-30 17:04:11+00:00,2017-04-05 12:06:47+00:00,2017-08-07 15:20:31+00:00,Closed,13115152,DAFFODIL-1733
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The bitmap schema has a mixture of big and little endian byte orders. The ""Blob"" elements are xs:hexBinary types with byteOrder=""bigEndian"". However, they are being parsed as if they are littleEndian. Looking at the toBriefXML parser, it looks like there are no ByteOrderChange parsers being inserted before the hexBinaryBlob is parsed, and the most previous ByteOrderChangeParser changed the byteOrder to littleEndian. So there appears to be a bug where we aren't detecting all the places a ByteOrderChangeParser is needed.",[],2017-03-23 14:02:09+00:00,2018-02-05 20:38:34+00:00,2018-02-06 15:37:22+00:00,Closed,13115151,DAFFODIL-1732
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Many of our uses use the Java API, or otherwise are converting data to XML. So they incur the cost of conversion of the DFDL infoset from native form to JDOM. 

Current performance measurements measure parse time excluding the conversion into XML. We should ALSO measure the parse performance including this conversion so as to better measure the performance our users experience. 

I think we should add stats on this to current parse performance measurements.",[],2017-03-08 18:57:47+00:00,2017-06-28 17:34:00+00:00,2017-06-28 18:39:40+00:00,Closed,13115150,DAFFODIL-1731
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"https://opensource.ncsa.illinois.edu/projects/artifacts/DFDL/latest/documentation/Manual/

no longer works.

But if you replace ""latest"" by ""1.1.0"" it works.

I think this is because I deleted the daffodil-core/doc directory - since most of the content was stale.

I will put back the html version of the spec there.",[],2017-03-03 14:39:41+00:00,2017-03-06 17:14:12+00:00,2017-03-06 17:14:34+00:00,Closed,13115149,DAFFODIL-1730
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Currently we support only a small set of encodings. This is because of testing.

Ultimately since we just feed through the encoding name to Java/ICU, we should remove any checking that enforces just a subset of the encoding names, and allow any encoding name through to the underlying Java/ICU. If that rejects the name, then we don't support it, but otherwise there's no reason for us not to support it. 

Encodings have this average and max bytes per character. If those are equal and integer, then we know the encoding is fixed-width, otherwise it's variable width. 

We could put in just 1 unit test to be sure say, basic EBCDIC encoding is supported. (Encoding name is ""ebcdic-cp-us"". If this works without the name ebcdic-cp-us appearing anywhere in our code base, then we know any valid encoding name would work.",[],2017-03-03 14:34:31+00:00,2017-03-28 16:24:07+00:00,2017-09-01 11:42:27+00:00,Closed,13115148,DAFFODIL-1729
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"daffodil-core/doc exists and has lots of stale old stuff.

We should remove this entire directory, or at minimum remove all stale stuff. 

We have the wiki now, and the DFDL spec is available from other places. We should get rid of this entirely.",[],2017-03-02 15:56:14+00:00,2017-03-02 16:10:38+00:00,2017-03-02 16:10:55+00:00,Closed,13115147,DAFFODIL-1728
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-03-01 17:27:31+00:00,2017-03-23 12:55:52+00:00,2017-07-31 19:18:21+00:00,Closed,13115146,DAFFODIL-1727
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See wiki page

https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Standard+DFDL+Schema+Project+Layout

We should convert our DFDL schema projects to this standard shape, as more and more users will be cloning and copying the pattern we set.",[],2017-03-01 14:56:03+00:00,2017-07-26 11:58:01+00:00,2017-08-23 13:39:22+00:00,Closed,13115145,DAFFODIL-1726
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This would add the ability to route based on different error messages, or at least make it easier to view what went wrong with a specific file.",[],2017-02-24 16:17:04+00:00,2021-02-04 13:05:23+00:00,2021-02-04 13:05:27+00:00,Closed,13115144,DAFFODIL-1725
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"If you want to document a group def like this:
{code}
<xs:group name=""foo"">
  <xs:annotation><xs:documentation> fooey
  </xs:documentation></xs:annotation>
  ...
</xs:group>
{code}
You get an abort - assertion failed guts.length == 1. 

This code needs to tolerate comments annotations, processing instructions, and so forth.",[],2017-02-24 02:07:58+00:00,2017-06-30 11:54:11+00:00,2017-08-01 18:09:52+00:00,Closed,13115143,DAFFODIL-1724
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Elements of type unsignedInt with outputValueCalc producing a double fail with no conversion.,[],2017-02-23 19:08:32+00:00,2017-02-23 22:37:52+00:00,2017-08-01 19:37:52+00:00,Closed,13115142,DAFFODIL-1723
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you create an element with the inputValueCalc property expressed like this
{code}
<xs:element name=""value"">
<xs:annotation><xs:appinfo source=""http://www.ogf.org/dfdl/"">
    <dfdl:property name=""inputValueCalc""><![CDATA[
      { ...expression }
    ]]></dfdl:property>
</xs:appinfo></xs:annotation>
<xs:simpleType>
...
</xs:simpleType>
</xs:element>
{code}
At compilation time this will not cause an error, even though a dfdl:element annotation is required, and dfdl:property is not allowed like this. (BUG 1)
So silently, this asks for length property to be defined, because it isn't seeing this as an 
IVC at all.",[],2017-02-23 00:09:30+00:00,2017-07-07 13:52:39+00:00,2017-07-27 12:42:13+00:00,Closed,13115141,DAFFODIL-1722
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is a DFDL schema for a format called Praat TextGrid. It is at github.  It was developed using Daffodil.

IBM ported it to IBM DFDL, and encountered a difficulty with the final termination linefeed, and created a modification via a pull request for the schema:


See 

https://github.com/keeleleek/dfdl-praat-textgrid-schema/pull/4/commits/b3bacd02acb2baf03adc02ac420e562ec39670a7

The DFDL schema for Praat TextGrid format has two linefeeds at the end. IBM had to add a terminator=""%NL;"" to the root element to absorb the final NL. This final terminator was not needed for daffodil parsing the data from command line via the Daffodil CLI from their instructions here:

https://github.com/keeleleek/dfdl-praat-textgrid-schema#creating-xml-from-praat-textgrid-files

This is either because the Daffodil CLI doesn't complain about left-over data, or because Daffodil is absorbing this extra line ending.

Absorbing the extra line ending is a bug. Leaving it there (unconsumed) isn't necessarily a bug, but I expect CLI users would expect an error message in that case. So that's a different bug.

It is important that API users be able to parse data, and leave the data stream positioned at the end of a parse without checking that all data was consumed. This allows a streaming-style behavior where repeated parse calls can advance through data. 

But when using a CLI tool, as when using the TDML runner, extra data past the end of the parse should generally be an error, though one can argue the CLI should have an option to suppress this. 

We need to reproduce this issue, and clarify whether there is a CLI bug here, or a general Daffodil parse-behavior bug.",[],2017-02-21 16:04:27+00:00,2017-07-05 13:36:42+00:00,2017-07-28 22:19:14+00:00,Closed,13115140,DAFFODIL-1721
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Recent work on a DFDL schema for Praat TextGrid this was observed on the DFDL WG mailing list {code}
1) IBM DFDL validates the DFDL schema before parsing and it found some missing properties. The DFDL specification says that if a schema object needs a property then you must provide a value, there are no build-in defaults. The missing properties are:
- textBidi=""no""
- floating=""no""
- encodingErrorPolicy=""error""
Daffodil is presumably not reporting their absence as an error, which strictly speaking is non-compliance with the DFDL spec.
If you add them into your dfdl:defineFormat then the errors go away.
{code}",['beginner'],2017-02-17 20:37:39+00:00,2018-12-12 18:16:48+00:00,2021-05-20 12:34:25+00:00,Closed,13115139,DAFFODIL-1720
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In the expression 
{code}
<xs:element name=""bar"" type=""xs:unsignedByte"" ....
dfdl:occursCount=""{ if (fn:exists(../foo[1])) then ../foo[1]/count else 0 }""/>
{code}
Currently get an SDE complaining that 0 is of type int, which is incompable with xs:unsignedByte.

This is wrong. A literal should convert implicitly so long as it is in range.",[],2017-02-15 23:31:12+00:00,2017-07-05 13:38:49+00:00,2017-07-31 20:04:51+00:00,Closed,13115138,DAFFODIL-1719
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Every now and the running 'sbt test' will cause a failure of test_ovc_w_runtime_escape_char with error:
{code}
failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Schema Definition Error: No element corresponding to step {http://example.com}xi found,
build	15-Feb-2017 12:02:00	[error] but elements with the same local name were found ({}xi).
build	15-Feb-2017 12:02:00	[error] Perhaps a prefix is incorrect or missing on the step name?
build	15-Feb-2017 12:02:00	[error] Schema context: ex:e6 Location line 313 column 6 in file:/tmp/ovc4227268284078118301.dfdl.xsd, took 0.708 sec
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$7.apply(TDMLRunner.scala:876)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$7.apply(TDMLRunner.scala:876)
build	15-Feb-2017 12:02:00	[error]     at scala.util.Either$LeftProjection.foreach(Either.scala:302)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:876)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:611)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:332)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:320)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:122)
build	15-Feb-2017 12:02:00	[error]     at edu.illinois.ncsa.daffodil.section17.calc_value_properties.TestOutputValueCalc.test_ovc_w_runtime_escape_char(TestOutputValueCalc.scala:78)
build	15-Feb-2017 12:02:00	[error]     ...
build	15-Feb-2017 12:02:00	[error] Caused by: Schema Definition Error: No element corresponding to step {http://example.com}xi found,
build	15-Feb-2017 12:02:00	[error] but elements with the same local name were found ({}xi).
build	15-Feb-2017 12:02:00	[error] Perhaps a prefix is incorrect or missing on the step name?
build	15-Feb-2017 12:02:00	[error] Schema context: ex:e6 Location line 313 column 6 in file:/tmp/ovc4227268284078118301.dfdl.xsd
{code}
Appears to have to do with compiling a schema and namespaces.Maybe some non-thread-safe code?",[],2017-02-15 19:27:28+00:00,2017-07-05 13:37:41+00:00,2017-08-03 14:27:55+00:00,Closed,13115137,DAFFODIL-1718
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Users are converting the DFDL infoset to JDOM or w3c. DOM trees just so they can issue simple XPath expressions against the infoset.

In many cases a DPath expression on the original Daffodil infoset would work fine, and would save a complete traversal and copy of the infoset. 

So we should support DPath expressions on the result infoset via our Java and Scala APIs.",[],2017-02-15 14:54:41+00:00,2021-01-21 20:31:00+00:00,2021-01-21 20:31:06+00:00,Closed,13115136,DAFFODIL-1717
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The working group discussed what happens when a choice branch of a direct dispatch choice has a discriminator: https://www.ogf.org/pipermail/dfdl-wg/2017-January/003669.html

The consensus is that such a discriminator discriminates a point of uncertainty outside of the choice. That is not our current behavior. Need to fix that.",[],2017-02-15 13:18:06+00:00,2017-02-15 16:01:15+00:00,2017-03-17 17:59:57+00:00,Closed,13115135,DAFFODIL-1716
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When testing Asterix
{code}
Schema Definition Error: The type UnsignedByte cannot be converted to Boolean.
{code}
XPath says xs:boolean(.....) on a positive or negative number returns true, zero false. This should work regardless of the number type.

The offending schema fragment looks like 
{code}
                        <xsd:element dfdl:alignmentUnits=""bits"" dfdl:length=""1"" dfdl:lengthKind=""explicit"" dfdl:lengthUnits=""bits"" name=""FSPEC1_Present"" type=""xsd:unsignedByte""/>

....
                  <xsd:element dfdl:lengthKind=""implicit"" dfdl:occursCountKind=""implicit"" minOccurs=""0"" name=""fspec1"">
                                                            <xsd:annotation>
                      <xsd:appinfo source=""http://www.ogf.org/dfdl/"">
                        <dfdl:discriminator>{xs:boolean(../fspec0/FSPEC1_Present)}</dfdl:discriminator>
                      </xsd:appinfo>
                    </xsd:annotation>
                  ...
{code}",[],2017-02-09 20:36:12+00:00,2017-02-15 17:51:52+00:00,2017-08-01 19:18:03+00:00,Closed,13115134,DAFFODIL-1715
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It appears that the ULong modulus operator is broken. If we run this code:
{code}
    for (i <- 0 to 16 ) {
      val numerator = ULong(i)
      val denominator = ULong(8)
      val remainder = numerator % denominator
      println(i + "" % 8 = "" + remainder)
    }
{code}
we get the result:
{code}
0 % 8 = 0
1 % 8 = 1
2 % 8 = 2
3 % 8 = 3
4 % 8 = 4
5 % 8 = 5
6 % 8 = 6
7 % 8 = 7
8 % 8 = 8
9 % 8 = 9
10 % 8 = 10
11 % 8 = 11
12 % 8 = 12
13 % 8 = 13
14 % 8 = 14
15 % 8 = 15
16 % 8 = 0
{code}

Anything % 8 should always be less than 8. But some results are greater than 8. Not sure exactly what is going on, and the generated bytecode is really hard to follow. In fact, I wouldn't be surprised if ULongs are actually slowing things down. The byte code was kindof a mess. We might want to revisit ULongs and how else to support > 4GB files.",[],2017-02-09 15:32:46+00:00,2018-05-25 17:13:12+00:00,2018-05-29 16:02:48+00:00,Closed,13115133,DAFFODIL-1714
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Very few people know what Daffodil/DFDL is. We should improve the NiFi processor documentation to give a high level overview of what Daffodil/DFDL is, and provide links for more in depth documentation.",[],2017-02-06 12:13:51+00:00,2017-02-06 17:06:52+00:00,2017-08-03 15:12:48+00:00,Closed,13115132,DAFFODIL-1713
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Chat the info call to debug since it will be called for every file and spam the logs.,[],2017-02-06 12:12:16+00:00,2017-02-06 12:19:35+00:00,2017-07-31 19:25:14+00:00,Closed,13115131,DAFFODIL-1712
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,See apache licensing guide here: https://nifi.apache.org/licensing-guide.html,[],2017-02-06 12:11:15+00:00,2017-02-06 20:03:52+00:00,2017-08-03 15:08:35+00:00,Closed,13115130,DAFFODIL-1711
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil's parser could be encapsulated with the Apache Tika APIs allowing any DFDL-described format to be mined for text content in the Tika way.

Probably this would want to be schema-aware in that Tika events would not want to be reported for numeric content, but only text content.",[],2017-02-01 22:14:32+00:00,2018-10-23 16:44:18+00:00,2018-10-23 16:44:18+00:00,Closed,13115129,DAFFODIL-1710
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-02-01 20:01:08+00:00,2017-09-18 19:53:38+00:00,2017-10-25 18:25:37+00:00,Closed,13115128,DAFFODIL-1709
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Tutorials css or perhaps xslt has an old stale link to the old tresys web site that it uses to grab just the tresys logo for top of tutorial pages.
Update to grab the tresys/deep logo from the new web site. Or just include the logo in a local file and use a relative path for it.",[],2017-01-28 17:44:39+00:00,2017-02-10 21:30:11+00:00,2017-08-01 17:32:40+00:00,Closed,13115127,DAFFODIL-1708
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"Some file formats have binary blobs that are not big lengths. There are a handful of ways to model these as is (e.g. xs:integer, two fields where one is a byte length hexBinary blob and the other is the remaining fragments), but they are inefficient and clumsy. We really want a way to pull out necessary bits and treat them as a binary blob.

Note that the DFDL specification does not currently allow bit length hexBinary, so this must be implemented as an extension controlled by a tunable.",[],2017-01-23 13:49:25+00:00,2017-03-28 12:05:10+00:00,2017-07-11 16:18:28+00:00,Closed,13115126,DAFFODIL-1707
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-01-20 15:14:11+00:00,2017-01-23 12:43:33+00:00,2017-07-31 20:04:13+00:00,Closed,13115125,DAFFODIL-1706
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Daffodil does not currently handle the div operator correctly. The div operator is for decimal division, with the idiv operator for integer division. However, if the denominator in the div operator is an integer, then Daffodil treats it as integer division. For example, in the debuger:

{code}
$ eval 1 div 8
  0
$ eval 1 div 8.0
  0.125
$ eval 1 idiv 8
  0
$ eval 1 idiv 8.0
  0.125
{code}
1 div 8 should return 0.125 and eval 1 idiv 8.0 shoul return 0.",[],2017-01-19 17:46:03+00:00,2017-01-19 18:42:28+00:00,2017-01-19 18:44:31+00:00,Closed,13115124,DAFFODIL-1705
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"This was discussed in a review of boolean parser and unparser, which have a check for bitLength that the binary number parsers do not. These checks would verify that bitLength falls within the accepted range for it's type as noted in 12.3.7.2.1 in the spec. It also needs to be determined if this check would be better in an evaluatable so it could be done at compile time.

The check in BinaryBooleanParsers.scala:
{code}
    val nBits = getBitLength(start)
    if (nBits < 1 || nBits > 32) {
      PE(start, ""Number of bits %d out of range, must be between 1 and 32 bits."", nBits)
      return
    }
{code}",[],2017-01-13 19:41:02+00:00,,2018-09-13 14:04:31+00:00,Open,13115123,DAFFODIL-1704
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Bug came up working with STANAG 5516, the transition when unparsing from one message to the next is missing 2 bits, so everything is shifted over and wrong. 

Test cases that illustrate this that can be used in regression need to be created.",[],2017-01-13 14:49:16+00:00,2017-01-20 19:24:22+00:00,2017-02-09 12:36:21+00:00,Closed,13115122,DAFFODIL-1703
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2017-01-13 13:09:45+00:00,2017-01-13 20:08:10+00:00,2017-01-27 13:36:03+00:00,Closed,13115121,DAFFODIL-1702
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"I accidentally put on outputValueCalc on and element reference that referenced a complex element. This resulted in a ClassCastException since it tried to get the primitive type when compiling the OVC.

{code}
java.lang.ClassCastException: edu.illinois.ncsa.daffodil.dsom.LocalComplexTypeDef cannot be cast to edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase
	at edu.illinois.ncsa.daffodil.grammar.ElementBaseGrammarMixin$class.primType(ElementBaseGrammarMixin.scala:577)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.primType$lzycompute(ElementBase.scala:78)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.primType(ElementBase.scala:78)
	at edu.illinois.ncsa.daffodil.grammar.ElementBaseGrammarMixin$class.ovcCompiledExpression(ElementBaseGrammarMixin.scala:981)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.ovcCompiledExpression$lzycompute(ElementBase.scala:78)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.ovcCompiledExpression(ElementBase.scala:78)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.calcContentUnparserReferencedElementInfos(ElementBase.scala:130)
	at edu.illinois.ncsa.daffodil.dsom.RealTermMixin$class.contentLengthUnparserReferencedElementInfos(RealTermMixin.scala:252)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.contentLengthUnparserReferencedElementInfos$lzycompute(ElementBase.scala:78)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.contentLengthUnparserReferencedElementInfos(ElementBase.scala:78)
{code}","['beginner', 'easyfix']",2017-01-13 12:42:31+00:00,2019-06-20 16:21:46+00:00,2021-05-20 12:35:06+00:00,Closed,13115120,DAFFODIL-1701
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Recently we tried to take the jars for a number of DFDL schemas and use them all together in one application.

Two entirely different schemas both have a schemaLocation on an import that references the same file name.

E.g.,  schemaLocation=""xsd/defaultFormat.dfdl.xsd""

These have entirely different contents for the two formats, so mixing them up breaks things. 

The problem is, when using these together, the jars all go on the class path, and when this file is retrieved, it is taken from the classpath, so whatever jar is first ""wins"".

There are two issues here:

# Best practice is to use relative paths from the current file location, not classpath relative. So if this schema's files are all in the same xsd subdir of src/main/resources, then this should be schemaLocation=""defaultFormat.dfdl.xsd"", that is, without the ""xsd/"" prefix.
# That has to work, and a quick peruse of the resolver code it isn't clear that importing-file-relative resolution is preferred to classpath relative. If that isn't happening it's a pretty big bug. (If that is happening correctly, then this ticket should be changed from ""bug"" to ""improvement""). Either way we need tests that verify that include/import don't mix up files across the class path unnecessarily.

All our DFDL schemas probably are using this ""xsd/filename.dfdl.xsd"" convention for schemaLocation currently, so really they should all be updated, or scanned for this problem, and changed to use self-relative paths instead.

Global things that many schemas include/import also should NOT use simple classpath relative names, since name collisions can occur. 

Example: {code}
<xs:include schemaLocation=""xsd/built-in-formats.dfdl.xsd""/>
{code}
This effectively takes over the name built-in-formats.dfdl.xsd globally. The right thing is for that file to live under src/main/resources/edu.illinois.ncsa.daffodil/xsd/built-in-formats.dfdl.xsd, and to be referenced like this {code}
<xs:include schemaLocation=""edu.illinois.ncsa.daffodil/xsd/built-in-formats.dfdl.xsd""/>
{code}
This is effectively the same way of solving namespace collsions as Java uses as suggested practice for Java packages.

This makes it clear you want Daffodil's built-in-formats.dfdl.xsd, not some other one e.g., that might be part of your schema's files. 

So best practice is:
* use a self-relative schemaLocation path if the file being import/include is part of your schema
* create package-style directory names under src/main/resources so that references to schema files that are classpath relative are unambiguous

You could also use XML Catalog to straighten this stuff out, but really it is better to make it possible for the basic classpath inclusion system to just work.",[],2017-01-12 14:46:18+00:00,2017-06-08 12:45:08+00:00,2017-06-12 15:40:22+00:00,Closed,13115119,DAFFODIL-1700
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"withParseErrorThrowing is an inline function which has a body evaluated by name. 

I had hoped (and still do) that inlining such would eliminate the closure. Alas some experiment I did a  while ago showed that this is not the case. So we'd have to make it a macro to eliminate the allocation for sure. 

The other thing is that withParseErrorThrowing wasn't supposed to introduce another try/catch if one is already inside one. but that's not implemented. The code path always has the try/catch. This is wholesale broken as that state is global, so not thread safe. It needs to be in the PState.",[],2017-01-12 14:24:32+00:00,2017-04-06 14:27:43+00:00,2017-04-06 14:27:43+00:00,Closed,13115118,DAFFODIL-1699
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The spec does not mention this restriction and there are some cases where it is useful to be able to have an outputValueCalc property on nillable elements, so that the outputValueCalc can return the null representation value.",[],2017-01-12 12:11:44+00:00,2017-01-12 15:09:52+00:00,2017-07-31 20:11:51+00:00,Closed,13115117,DAFFODIL-1698
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See this config file, used by NACHA

Note the comment at the bottom
{code}
<daf:dfdlConfig
	xmlns:daf=""urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:ext""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	<daf:tunables>
     <daf:unqualifiedPathStepPolicy>defaultNamespace</daf:unqualifiedPathStepPolicy>
     <daf:suppressSchemaDefinitionWarnings>all</daf:suppressSchemaDefinitionWarnings>
     <!-- multipleChoiceBranches -->
    </daf:tunables>
</daf:dfdlConfig>
{code}

This creates spurious messages (ironically warnings) about {code}
2017-01-11 12:33:59:701  edu.illinois.ncsa.daffodil.compiler.Compiler Warning[Ignoring unknown tunable: #REM]
{code}

Without the comment in the config file, no such messages.",[],2017-01-11 17:34:53+00:00,2017-04-06 15:06:49+00:00,2017-04-06 15:06:49+00:00,Closed,13115116,DAFFODIL-1697
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When exprssions are evaluated, they might throw a ParseError if something fails (e.g. a cooker fails, conversion from string to int fails, etc.). These ParseErrors need to be immediately caught, otherwise the Exception may propagate up too far. We should reexamine all the uses of withParseErrorThrowing, and ensure there all uses of expressions use it as appropriate. We may want to rename it to something like withExpressionThatMayThrow or something to clarify when it should be uses.

Furthermore, one side effect of withParseErrorThrowing is that it allocations an anonymous functions, which does show up in profiling. We should determine if this has a noticeable affect on performance, and if so, think up some other kind of idiom to solve this problem. Perhaps something like Evaluatable's should handle the catch of parse errors, set the state to failed, and then calls to evaluate must check the result, just like we do when calling parser.parse().",[],2017-01-10 17:36:59+00:00,2017-04-05 15:09:24+00:00,2017-07-26 20:27:54+00:00,Closed,13115115,DAFFODIL-1696
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TDML runner should be enhanced to allow specifying a file name for the tdml:infoset.

This is because DFDL schema projects, such as NACHA, want to be easily tested using TDML, but also want the same infoset files to be available for users treating them as examples who want to use the Daffodil CLI, or other thngs, but want to use these same test data files.

By allowing the TDML runner to reference these infosets in files we avoid having them redundantly specified in the TDML file as well as in a separate file.",[],2017-01-06 17:59:14+00:00,2017-01-09 13:00:03+00:00,2017-07-27 14:23:11+00:00,Closed,13115114,DAFFODIL-1695
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Marking the examples as docs for rpm release is convenient because you can provide the --nodocs option to not install them. Some users won't care about the examples.

Though, perhaps we should put some thought into examples should be packages with any releases (like zip/tar). Perhaps we should just point people to the dfdl schemas if they want to find some examples, and just have very clear instructions on the wiki to run those. We also have a hello world example.

I'm thinking we should remove the daffodil-examples project completely. This also makes it so we don't have to worry about the daffodil-examples from getting out of sync with the DFDL schema github",[],2017-01-06 15:47:50+00:00,2017-07-19 15:26:19+00:00,2017-07-26 20:26:39+00:00,Closed,13115113,DAFFODIL-1694
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We're missing a final check that the many stacks in the PState (e.g. discriminator, array index, group index, escape shchema, etc.) are empty.

Akin to how we check that pools of objects have all the objects restored to the pool at the end.",[],2017-01-05 19:57:20+00:00,2017-03-01 17:32:49+00:00,2017-03-01 17:32:49+00:00,Closed,13115112,DAFFODIL-1693
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"UStateForSuspension is a stripped down ustate object.

It doesn't have a childPos nor groupPos.

Debugging/trade however, calls those methods even though they are just aborting.",[],2017-01-03 23:48:18+00:00,2017-01-04 16:02:57+00:00,2017-08-10 19:38:18+00:00,Closed,13115111,DAFFODIL-1692
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"From a code review:

suspect idiv is/has been broken. This xpath spec says (a idiv b) is equivilent to (a div b) cast as an xs:integer. So I would either expect this to be RoundingMode.FLOOR here, or have some code elsewhere that inserts a cast to integer, but I don't see that. There also do not appear to be any tests for idiv, so I wouldn't be surprised if this is broken.",[],2017-01-03 13:42:21+00:00,2017-04-04 18:50:05+00:00,2017-07-31 20:03:32+00:00,Closed,13115110,DAFFODIL-1691
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This warning is not correct:

Creating DFDL Test Suite for file:/home/mbeckerle/Documents/dataiti/git/NGF-daffodil/eclipse-projects/test/target/eclipse/classes/edu/illinois/ncsa/daffodil/section16/array_optional_elem/UnparseArrayImplicitOptionalElem.tdml
Schema Definition Warning: dfdl:lengthKind 'implicit' is not consistent with dfdl:length specified (as 1). The dfdl:length will be ignored.
Schema context: ex:r4 Location line 90 column 6 in file:/tmp/s1_6354187969998608971.dfdl.xsd

In that TDML file, the length=""1"" is in the default format. 

This warning is acceptable if the length is explicitly expressed on an element of lengthKind 'explicit', but not if the length is taken from surrounding default format. In that case the length should just be ignored unless lengthKind is explicit.",[],2016-12-30 21:06:04+00:00,2017-01-11 16:37:20+00:00,2017-08-01 17:03:55+00:00,Closed,13115109,DAFFODIL-1690
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We have several annoying warnings that clutter test output for the 'sbt test'. We want a clean test output where it is obvious that things are successful.

{code}
Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/dfdl-1.0/' should be 'http://www.ogf.org/dfdl/'.
Schema context: SchemaDocument Location line 2 column 2 in file:/home/mbeckerle/Documents/dataiti/git/NGF-daffodil/daffodil-test/target/scala-2.11/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_09.dfdl.xsd
{code}
another:
{code}
Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/dfdl-1.0/' should be 'http://www.ogf.org/dfdl/'.
Schema context: SchemaDocument Location line 2 column 2 in file:/home/mbeckerle/Documents/dataiti/git/NGF-daffodil/daffodil-test/target/scala-2.11/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_09.dfdl.xsd
{code}
There may be a few others.",[],2016-12-30 13:29:36+00:00,2017-06-08 12:46:23+00:00,2017-07-27 12:47:08+00:00,Closed,13115108,DAFFODIL-1689
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Expression compiler was creating Long preferentially to double/bigDecimal in all cases, even if the literal had a trailing "".0"" in the syntax.

This causes bugs because expressions like 90.0 div 100000.0 produce 0 as a Long integer as both arguments are taken to be Long and div is then integer division. 

The result is you end up dividing by zero, which unfortunately, is a processing error causing backtracking when parsing. So the symptom is often that some array element is not parsed, or some choice is taken wrong. 

A trace will show what is happening, but it would be a mystery as to why unless you put daf:trace all over your expressions to see the values they are producing.",[],2016-12-30 00:31:04+00:00,2017-01-03 14:14:45+00:00,2017-08-03 19:22:34+00:00,Closed,13115107,DAFFODIL-1688
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need a tunable for suppressing schema definition warnings.

This might want to be a blanket no-warnings setting, or selective per specific warning.

The issue is illustrated here. This comes from the NACHA schema. This schema works in both Daffodil and in IBM DFDL, but produces this flock of warnings from Daffodil's schema compiler. For portability reasons we don't want to modify the DFDL schema, so we want a way to say these warnings are ok, and suppress them.

{code}
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CTXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 204 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 208 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 212 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 216 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 220 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 203 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CTXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 204 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 208 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 212 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 216 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 220 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 203 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
{code}",[],2016-12-23 17:41:59+00:00,2017-01-11 19:47:49+00:00,2017-07-28 17:30:30+00:00,Closed,13115106,DAFFODIL-1687
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Check out this set of SDWs from compiling the NACHA schema. 

There is some repetitiveness here which is due to Daffodil's compiler doing too much internal copying. That's a problem, but not what this bug is about.

This bug is about being visually unable to easily separate them, identify the first line of each warning. These ought to be set apart somehow that makes it easier to read. Perhaps something as simple as a blank line?
{code}
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CTXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 204 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 208 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 212 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 216 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 220 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 203 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CTXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 204 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 208 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 212 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 216 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 220 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 203 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}CCDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 134 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 138 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 142 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 146 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 150 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 133 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}PPDEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 169 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 173 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[3] at Location line 177 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[4] at Location line 181 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[5] at Location line 185 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 168 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ATXEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 262 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 266 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 261 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
Schema Definition Warning: Multiple choice branches are associated with the end of element {ach:2013}ACKEntry.
Note that elements with dfdl:outputValueCalc cannot be used to distinguish choice branches.
The offending choice branches are:
sequence[1] at Location line 239 column 20 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
sequence[2] at Location line 243 column 18 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
The first branch will be used during unparsing when an infoset ambiguity exists.
Schema context: choice Location line 238 column 16 in file:/home/mbeckerle/Documents/dataiti/git/DFDLSchemas/NACHA/2013/nacha_file.xsd
{code}",[],2016-12-23 17:37:41+00:00,,2021-01-21 20:29:28+00:00,Open,13115105,DAFFODIL-1686
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In many applications, validation will be turned on.

In 2.0.0-rc2, it was observed that parse time increases with the volume of non-DFDL comments/annotations in the schema. 

This was with validation on. The explanation for this is that validation, which calls xerces currently, is constructing the validator and this cost is viewed as part of the cost of parsing, or perhaps even constructing the validator for every parse call.

Now we're switching to woodstox for XML parsing. This is a validating parser also, so we could try using it to speed up validation. 

Nevertheless we should make sure as much is hoisted out of parse time as possible. 

Certainly we should try creating the validator object once; on the latest 2.0.0 currently there is code that does this once per thread (it does not assume the validator, when initialized, is thread safe - perhaps we can determine this and create only one, not one per thread.)

Within the same thread the same validator will be used, but across threads it will not. 

It is initialized on first use, which probably shows up as part of parse time - involves reading the entire extended schema, resolving all file references, etc. Lots of cost here.",['verify'],2016-12-23 15:01:34+00:00,2021-01-21 20:51:17+00:00,2021-01-21 20:51:17+00:00,Closed,13115104,DAFFODIL-1685
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If the java default encoding is not set to utf-8, a handful of tests fails. This is likely because when opening files we do not specify what encoding to open them with, so it defaults to ISO-8859 or something and files containing UTF-8 get translated wrong.

A simple way to test this is to set the LANG environment variable to a non-utf8, e.g. 
{code}
LANG=""en_US"" sbt test
{code}
That should result in a few errors because certain characters are converted to question marks, which results in actual results not matching expected results.

I'd guess the issue is that we aren't specifying an encoding when opening test files, and so we get random failures.",[],2016-12-22 19:14:46+00:00,2017-07-31 17:35:01+00:00,2017-08-01 17:08:47+00:00,Closed,13115103,DAFFODIL-1684
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some file types appear to us xs:nonNegative integers with bit length > 64. This requires the ability to unparse BigInts, which we do not yet support. We need to determine if these files types actually model very large integers, or if they should really be modeled as xs:hexBinary.",[],2016-12-21 22:37:00+00:00,2017-03-01 16:56:16+00:00,2017-03-01 16:56:26+00:00,Closed,13115102,DAFFODIL-1683
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Alot of effort for unparser appears to occur in the InfosetCursorFromXMLEventReader. Let's profile this and make it faster.,[],2016-12-21 16:40:13+00:00,2016-12-21 19:58:32+00:00,2017-07-26 21:07:05+00:00,Closed,13115101,DAFFODIL-1682
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently, if you have a xs:hexBinary element that doesn't contain xs:hexBinary in the infoset, we get an InvalidArgumentException:
{code}
java.lang.IllegalArgumentException: Hex character must be 0-9, a-z, or A-Z, but was 'X'
at edu.illinois.ncsa.daffodil.util.Misc$.hexCharToValue$1(Misc.scala:278)
at edu.illinois.ncsa.daffodil.util.Misc$.hex2Bytes(Misc.scala:292)
at edu.illinois.ncsa.daffodil.dpath.NodeInfo$PrimType$HexBinary$.fromXMLString(NodeInfo.scala:526)
at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetCursorFromXMLReader.createElement(InfosetCursorFromXMLReader.scala:373)
at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetCursorFromXMLReader.handleStartElement(InfosetCursorFromXMLReader.scala:279)
at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetCursorFromXMLReader.reallyFill(InfosetCursorFromXMLReader.scala:232)
at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetCursorFromXMLReader.fill(InfosetCursorFromXMLReader.scala:222)
at edu.illinois.ncsa.daffodil.util.CursorImplMixin$class.doAdvance(Cursor.scala:189)
at edu.illinois.ncsa.daffodil.util.CursorImplMixin$class.inspect(Cursor.scala:178)
..
{code}
We need to fix this, and ensure that all other data formats have proper error handling to report which element in the infoset was invalid.",[],2016-12-20 15:15:27+00:00,2020-06-24 18:21:25+00:00,2020-06-24 18:21:25+00:00,Closed,13115100,DAFFODIL-1681
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"There are still a lot of validators. There's one for ExternalVariables and config files, the DaffodilXMLLoader, TDML runner validates as well..  Consolidation would reduce the amount of reinvention/rediscovery.",['Beginner'],2016-12-19 22:35:36+00:00,,2021-01-21 20:25:32+00:00,Open,13115099,DAFFODIL-1680
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Yes, we're going to need to be sbt-plugin experts.

This tool should be merged with the sbt eclipse plugin, though the constraints on such a thing are totally unclear to me, whereas this tool is specifically for projects with sub-projects and lib_managed.

There are a few things we do at major releases like LineCounter that also should be that sort of sbt-based tool. Updating copyright banners is another thing we do. 
C

The daffodil schema compilation process should be something one can do from sbt.

Processing data using daffodil to parse or unparse should be something one can do from sbt. (E.g., so that the work flow of things like the VMF spec-scraper can be automated with sbt.  E.g., compile the spec scraper schema. Use it to parse the specs and generate the VMF schema. Then compile the VMF schema and package as a jar.",[],2016-12-19 18:46:09+00:00,2021-01-21 20:24:34+00:00,2021-01-21 20:24:40+00:00,Closed,13115098,DAFFODIL-1679
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Profiling has shown that on unparse, remapping from PUA to XML is actually fairly intensive. Removing this remap (for a schema that doesn't need to remap anything) improves performance by about 30%.

And fortunately, there are probably a lot of cases where we know we don't need to remap. For example, xs:hexBinary, integer types, and date/time types should never require mapping to/from PUA since they are always representing in the infoset with ASCII chars. Really, the only thing that *might* need it is xs:strings.

So potentially a few ideas for performance improvements:

# Never remap types that we know will never have XML illegal characters
# For types that could potentially have XML illegal characters, first check if there are any illegal characters before remapping the string. In most cases, we won't need to remap, so this will save us the costs associated with string builders. This does mean things might be a little slower for strings that contain illegal XML characters, but that's not the common case.
# When we do find a string containing XML illegal characters, let's put an attribute in the infoset that indicates that the data was mapped to PUA. This way, when we unparse, we only ever have to remap strings to XML if that attribute is set. This may also be helpful for users, since this could be a notice that they need to remap the string before using it. Note, however, that we might want a tunable that says to always remap xs:strings when unparsing, even if the attribute doesn't exist, since the infoset may not have come from a Daffodil parse or may have been sanitized and had attributes removed.",[],2016-12-19 18:20:00+00:00,2021-01-21 20:21:00+00:00,2021-01-21 20:21:05+00:00,Closed,13115097,DAFFODIL-1678
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The standard sbt eclipse plugin is not sufficient for maintaining the classpaths for eclipse projects.

A UpdateEclipseClasspaths tool exists to help with this. First you use sbt compile update-classifiers, then you run this tool (a  scala app), and the classpaths of all daffodil sub-projects are updated to match those found by sbt including the source and javadoc links.

It needs refactoring to allow it to be used on more than just the daffodil project.",[],2016-12-17 18:05:38+00:00,2016-12-19 23:04:29+00:00,2016-12-19 23:04:51+00:00,Closed,13115096,DAFFODIL-1677
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If validation is ""on"" then if a runtime SDE is issued by a discriminator, the runtime still tries to validate even though there is no infoset; results in an abort.",[],2016-12-16 22:48:49+00:00,2016-12-19 23:08:05+00:00,2017-08-01 17:49:27+00:00,Closed,13115095,DAFFODIL-1676
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When a discriminator is evaluated, that evaluation occurs in a special mode so that you can write this sort of thing:
{code}
<element ref=""foo"">
    <dfdl:discriminator>{ ../foo/bar eq 2 }</dfdl:discriminator>
</element>
{code}
Outside the context of a discriminator, if ../foo/bar doesn't exist that's a runtime SDE. Fatal.

Inside the context of a discriminator, if that doesn't exist, it's a PE, and the disriminator simply is false. But it's not fatal. 

The bug is that Daffodil is *always* issuing a runtime SDE for this. We need this behavior for discriinators.",[],2016-12-16 22:47:13+00:00,2016-12-22 21:37:04+00:00,2017-01-10 21:29:48+00:00,Closed,13115094,DAFFODIL-1675
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Found when 
{code}
<element ref=""foo""...>
   <dfdl:discriminator>{ ../foo/bar eq 2 }</dfdl:discriminator>
</element>

<element name=""foo"" dfdl:lengthKind=""explicit"" dfdl:length=""75"" >
   .... complex type contains child bar
</element>
{code}
Given hundreds of bits this was spuriously saying that there were ""insufficient bits for elmeent foo. only 7 found but 75 required"" So it doesn't create element foo, but evaluates the discriminator anyway, which fails with a runtime SDE (another bug - separate ticket).

This bug is about the spurious length limit of 7 bits. That's just wrong in this situation.

This occurred in a dense bit packed format. Not publishable, so a test case that mimics it needs to be created.",[],2016-12-16 22:43:08+00:00,2016-12-29 16:29:47+00:00,2017-01-06 16:33:55+00:00,Closed,13115093,DAFFODIL-1674
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This syntax is officially deprecated.
{code}def someFun(x: String) { .... } 
{code}
Instead one must write explicitly:
{code}
def someFun(x:String): Unit = { ... }
{code}
Meaning that the value of x.length is discarded and the function returns Unit (or () if you prefer) instead.

I'd like to stress out that this is deprecated since Oct 29, 2013 (https://github.com/scala/scala/pull/3076/), but the warning only shows up if you compile with the -Xfuture flag.

We should turn on the -Xfuture flag, and fix this and any other deprecations that come up.

We may want to write a sed-script or other automation. I have generally preferred the now-deprecated style in my code, so there are many many cases.

{code}
scala -Xfuture -deprecation

scala> def foo {}
<console>:1: warning: Procedure syntax is deprecated. Convert procedure `foo` to method by adding `: Unit =`.
       def foo {}
foo: Unit
{code}",['beginner'],2016-12-13 19:39:30+00:00,2020-06-24 18:21:26+00:00,2020-06-24 18:21:26+00:00,Closed,13115092,DAFFODIL-1673
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Assume we have an expression like so{code}{ xs:int(../foo) eq 5 }{code}. Assume the value of ../foo is a string that cannot be converted to an int. This will fail at runtime and create an ExpressionEvaluationException processing error and set it in the PState. However, the if the {code}def evaluate{code} function results in a failure, it throws the processing error. Parsers do not expect ProcessingErrors to be thrown, so it is possible that this thrown Processing Error results could cause MarkPool's to not be discarded and leaked. This in turn hides the processing error so we do not even know the cause of the error.

Processing Errors shouldn't be thrown, so we may need to refactor how expressions are handled so they do not require thrown exceptions.",[],2016-12-13 17:14:12+00:00,2016-12-22 14:03:01+00:00,2017-03-01 21:13:40+00:00,Closed,13115091,DAFFODIL-1672
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"DFDL-1655 updated many depdendencies/plugins to their latest versions, but only did so if code changes were not necessary. We should spend time updating our code to work with the latest.

Note that xerces was bumped back down to an older version to to the way newer versions evaluate relative systemID's. See the issue here: https://issues.apache.org/jira/browse/XERCESJ-1519

We may need to come up with a workaround if we want to update to this version since it does not look like fixing this bug is on Xerces' timeline.",[],2016-12-09 15:21:33+00:00,2021-01-21 20:19:15+00:00,2021-01-21 20:19:20+00:00,Closed,13115090,DAFFODIL-1671
Wish,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Bamboo was recently updated to use sbt 0.13.13. This update deprecates alot of the syntax we use in build.scala. We should upgrade to sbt 0.13.13 and update our build.scala to follow the new standards for writing sbt configuration files and fix these deprecation warnings.,[],2016-12-09 12:20:30+00:00,2017-11-28 14:55:34+00:00,2017-12-20 17:06:36+00:00,Closed,13115089,DAFFODIL-1670
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If x is an element of type unsignedLong, then the expression x eq 3 compiles so that x's value, which is an unsignedLong, comes out of the infoset as a java.lang.Long but the constant 3 is a java.math.BigInteger, so comparison, which boils down to scala ""=="" operation, returns false.

The mistake, I think, is that this value, coming from element x, should a java.math.BigInteger becasue it is of type unsignedLong. It seems incorrect that the value is a java.lang.Long since that's not capable of representing the unsigned values that have the most-significant-bit on (unless its value is interpreted as a ULong).

In general, the way types are converged for the two arguments of an operation must be different depending on whether the operation is comparison or arithmetic. If comparison they must be converged to a type which can be compared properly. 

The method numericBinaryOpTargetTypes doesn't consider whether the operation is a comparison or arithmetic.",[],2016-12-08 23:19:51+00:00,2017-07-31 20:01:27+00:00,2017-07-31 20:01:27+00:00,Closed,13115088,DAFFODIL-1669
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Found on the DFDL wikipedia page:

""I found this sentence on it ""A presentation is available that describes IBM DFDL and Daffodil.public historyal couster from made handling to fire fox. is not ready to link subcrite ��""

So clearly this got clobbered somehow. We should fix this page, update content, as part of the Daffodil 2.0.0 roll out.",[],2016-12-07 17:23:26+00:00,2016-12-08 14:04:02+00:00,2017-07-27 13:02:27+00:00,Closed,13115087,DAFFODIL-1668
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This restriction in DFDL seems unnecessary, and a number of times the need for this has come up.

Removing this restriction may require more than just removing a check. The grammar may have assumptions that an element is either dfdl:inputValueCalc or dfdl:outputValueCalc in that grammar terms for these may be exclusive (in daffodil.grammar package).

If this restriction is removable, we will raise the removal to the DFDL WG as a correction to the DFDL spec, as part of an experience document around the advanced DFDL features like computed elements, hidden groups, etc.",[],2016-11-30 20:58:16+00:00,,2021-02-05 20:29:37+00:00,Open,13115086,DAFFODIL-1667
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Some people want to build using Jenkins, and deploy the jars/artifacts so they are served from Artifactory.

We need to enable this, or provide instructions on how to do this.",[],2016-11-29 21:48:56+00:00,2017-03-01 16:49:55+00:00,2017-08-23 13:39:44+00:00,Closed,13115085,DAFFODIL-1666
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-11-28 14:11:14+00:00,2016-11-28 19:07:15+00:00,2016-11-30 14:04:02+00:00,Closed,13115084,DAFFODIL-1665
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-11-28 12:24:54+00:00,2017-07-10 17:55:03+00:00,2017-07-28 17:48:09+00:00,Closed,13115083,DAFFODIL-1664
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"test_namespaceLimitParse
 test_namespaceLimitUnparse
moved to scala debug. Both these these tests use a schema which has 
{code}
<dfdl:format ref=""...."" .../>
{code}

But this is not detected even if the length is well over 1000 characters.",[],2016-11-18 13:49:35+00:00,,2021-01-29 13:37:02+00:00,Open,13115082,DAFFODIL-1663
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If a subparser of the RepParser throws an SDE, we end up leaking MarkPool. RepParsers should catch any SDE's, discard the marks, and rethrow the SDE to avoid leaks.",[],2016-11-17 15:43:09+00:00,2016-11-18 13:20:59+00:00,2016-12-09 19:02:47+00:00,Closed,13115081,DAFFODIL-1662
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"rewrite InfosetCursorFromXMLCursor to be InfosetCursorFromXMLStreamReader.

XMLStreamReader is the lowest level interface to XML available. It allocates almost nothing. It is a cursor style interface with next(), hasNext() then provides an integer which is the event type. You only construct a string for the element name if you call getName, etc.  

I investigated Scala's scala.xml.pull parser, and it is to be avoided - uses threads underneath. Just what we're trying to get away from.

Then we should drop Infoset.elem2Infoset and related methods and reimplement using the above so we have exactly one thing that reads XML-representations of daffodil infosets.

I found the implementation of XMLStreamReader which is StreamReaderBufferProcessor. This is definitely the lowest level interface to XML, and it's a cursor (i.e., non-allocating) API, so is the right one for us to call.

We have to rewrite this for performance reasons.",[],2016-11-17 14:53:53+00:00,2016-11-23 20:08:47+00:00,2016-11-29 18:13:09+00:00,Closed,13115080,DAFFODIL-1661
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"A user has reported an error in which we have a expression like so:
{code}
{ ../../foo[../bar] }
{code}
In this case, DPath is able to successfully traverse the ../../foo expression, setting currentNode to foo. But when it tries to execute the ../bar subexpression, it uses the current node as it's context. The ../bar subexpression should be executed with the original context, but is instead executed with a currentNode of foo, which causes a failure.",[],2016-11-17 13:31:19+00:00,2016-11-18 13:19:55+00:00,2017-07-26 20:30:46+00:00,Closed,13115079,DAFFODIL-1660
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See: https://github.com/scala/scala-xml/issues/17

For a discussion of turning off entities on XML. 

We also need to turn off any way the XML parser would ""go to the web"" to resolve anything. This may already be off for parsing of DFDL schemas as we have our own resolver, but we also feed things to xerces for validation, and that might have these same issues, and when processing data, our streaming in of XML for unparsing may not be defending against this either.

Places we take in XML:

DFDL Schema

TDML file

Config file

XML Catalog

Validation of DFDL Schema in Xerces

Validation of XML of DFDL Infoset in Xerces (This is our own XML being output from parser, so less of an issue, but we might as well just be uniform about all of these)

XML Input to the unparser",[],2016-11-17 13:22:55+00:00,2021-05-26 18:16:14+00:00,2021-05-27 19:01:55+00:00,Closed,13115078,DAFFODIL-1659
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This wiki page doesn't say anything about defaultRoundTrip or roundTrip flags, nor unparserTestCase. It needs to cover all 3 or people will not understand why their parse-only schemas are bombing out.",[],2016-11-16 23:29:32+00:00,2017-07-10 17:40:31+00:00,2017-08-01 17:29:58+00:00,Closed,13115077,DAFFODIL-1658
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-11-16 17:45:52+00:00,2017-07-31 20:00:35+00:00,2017-07-31 20:00:35+00:00,Closed,13115076,DAFFODIL-1657
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It appears this check works on unparsing however, only affects parsing.",[],2016-11-16 14:48:41+00:00,2020-06-24 18:21:23+00:00,2020-06-24 18:21:23+00:00,Closed,13115075,DAFFODIL-1656
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We are on xerces 2.10.0. Version 2.11.0 has been at MVNrepository since Feb 2013, so we are out of date.

We need to keep current on this, and the other libraries we depend on, as others will have difficulty integrating daffodil into their software due to these back-rev dependent libraries.",[],2016-11-15 16:47:38+00:00,2016-12-02 22:24:17+00:00,2016-12-09 15:41:01+00:00,Closed,13115074,DAFFODIL-1655
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I turned on some log messages by changing their level from LogLevel.Debug to LogLevel.Info

I expected to see them when I did 'daffodil -vv ....' but they did not show up. Lots of messages from the compile phase, but not from the runtime.",['beginner'],2016-11-10 22:35:40+00:00,,2020-07-30 20:46:18+00:00,Open,13115073,DAFFODIL-1654
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"A user reported a bug with the mark pool. The cause is not clear. The traceback is below:
{code}
edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken: current.eq(mark)
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.releaseUntilMark(ByteBufferDataInputStream.scala:757)
edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.discard(ByteBufferDataInputStream.scala:774)
edu.illinois.ncsa.daffodil.processors.PState.discard(PState.scala:415)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.releaseUntilMark(ByteBufferDataInputStream.scala:757)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.discard(ByteBufferDataInputStream.scala:774)
	at edu.illinois.ncsa.daffodil.processors.PState.discard(PState.scala:415)
	at edu.illinois.ncsa.daffodil.processors.PState.resetDiscard(PState.scala:411)
	at edu.illinois.ncsa.daffodil.processors.parsers.RepAtMostTotalNParser.parseAllRepeats(RepParsers.scala:163)
	at edu.illinois.ncsa.daffodil.processors.parsers.RepParser.parse(RepParsers.scala:69)
	at edu.illinois.ncsa.daffodil.processors.Parser$class.parse1(Parser.scala:160)
	at edu.illinois.ncsa.daffodil.processors.parsers.ArrayCombinatorParser.parse(ElementKindParsers.scala:177)
{code}",[],2016-11-09 14:58:59+00:00,2016-11-18 13:17:58+00:00,2017-07-31 20:14:01+00:00,Closed,13115072,DAFFODIL-1653
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Scala 2.12 is out. This comes with various new features, as well as improved macros. We should investigate if this is worth the upgrade and test it out. Note that 2.12 requires Java 8. We require Java 8 due to some encoding bugs, but we could theoretically support Java7 by detected Java version and taking different code paths where the bug exists.",[],2016-11-03 15:56:01+00:00,2018-07-10 11:35:31+00:00,2018-07-12 20:25:52+00:00,Closed,13115071,DAFFODIL-1652
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When trying to get the dfdl:contentLength of dfdl:valueLength of an array, Daffodil returns the length of it's parent, rather than the array. This is because the NodeType.Exists parameter type ends up creating a DownArrayExists recipe, which does not change the current node. Either we need to disallow getting the content/valueLength of an array and require the user to wrap the array in a complex type, or we need to allow it and modify/add parsers to store value/contentLength of an array.

Alternatively, we maybe be able to do some magic where we get the start pos of the first child and the end pos of the last child and return that length. It's not immeidately clear if that is correct.",[],2016-11-02 16:39:20+00:00,,2021-01-21 20:13:51+00:00,Open,13115070,DAFFODIL-1651
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In a DFDL schema, we have a file type that is entirely made up of byte aligned data (all ascii or hexBinary). However, isKnownToBePreceeedByAllByteLengthItems is (incorrectly) false, and so numerous AlignmentFill and MandatoryTextAlignment parsers/unparsers are inserted. These aren't really necessary but do not prevent parsing from successfully finishing. However, during unparse, we may need to get the dfdl:valueLength of an array. But because of the alignment parsers, we end up with circularly deadlocked

To allow allow unparsing to successfully finish, we probably need to fix isKnownToBePreceededByAllByteLengthItems.",[],2016-11-01 17:18:21+00:00,2016-11-18 17:48:55+00:00,2017-07-31 18:26:42+00:00,Closed,13115069,DAFFODIL-1650
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil doesn't allow lengthKind 'pattern' for hexBinary, but there is no such restriction in the DFDL specification.

The workaround is to use type xs:string with dfdl:encoding of 'iso-8859-1', but this is less attractive since the strings will be full of non-printing characters typically, in particular lots of zeros, which will get remapped to &E000; Private-Use-Area characters when output as part of the infoset. In general it will be HARD for anyone to consume such an infoset element - they would have to implement the inversion of PUA characters back to the character code bytes that are not allowed in XML.",[],2016-10-31 15:59:14+00:00,2016-11-23 12:35:06+00:00,2017-01-11 16:10:06+00:00,Closed,13115068,DAFFODIL-1649
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,The expected behavior is that fn:count() should return 0 when it is determined that an element does not exist.,[],2016-10-31 14:17:49+00:00,2016-11-14 16:09:09+00:00,2017-07-31 20:20:02+00:00,Closed,13115067,DAFFODIL-1648
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Once DFDL-1006 is fixed, then NACHA can be made portable by adding a config that sets the needed tunable. 

There is  one other changes between the XSDs in master branch (IBM's branch) and the daffodil-master branch. 

* textStandardExponentRep - NACHA schema has deprecated historic name textStandardExponentCharacter. IBM DFDL parser 10.0.0 doc online suggests that the new name is accepted now, so this should just be changed to use the ""Rep"" one, which Daffodil requires also. 

Moving the files around to match the sbt ""shape"" i.e., src/main/resources etc. should be avoided if possible - can we tweek the build.sbt to look for the resources in different directories?

Before we merge branches we should have S. Hanson of IBM scrutinize the merged thing.",[],2016-10-29 01:00:16+00:00,2017-08-30 19:21:59+00:00,2017-08-31 12:16:26+00:00,Closed,13115066,DAFFODIL-1647
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"NACHA has fillbyte=""%SP;""

The FillByteEv in daffodil only accepts fillByte=""%r20;"" rawbytes notation.

Fortunately, NACHA no longer seems to use this property, so it is never parsed and never fails.",['Beginner'],2016-10-29 00:43:30+00:00,,2021-01-21 20:11:44+00:00,Open,13115065,DAFFODIL-1646
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When printing the infoset in the debugger, it is possible that an element does not yet have a value. Trying to access the value of an element when it does not have one causes an exception to be thrown. This is necessary when for parse/unparse behavior, but makes debugging difficult. We should add some method so that we can print the infoset even if some elements to not have a value.",[],2016-10-27 17:08:53+00:00,2016-11-14 16:04:57+00:00,2017-07-26 20:02:22+00:00,Closed,13115064,DAFFODIL-1645
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example, if you have an expression test=""xs:unsignedLong(0) eq xs:int(0)"". This fails because it ends up comparing a java.math.BigInteger with a java.lang.Integer, which always fails. We probably want to coerce the Integer (and other int-based types) into a BigInteger when comparing with an xs:unsignedLong.",[],2016-10-27 17:05:32+00:00,2016-11-14 16:07:51+00:00,2017-07-31 20:22:20+00:00,Closed,13115063,DAFFODIL-1644
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Noticed when parsing pcap. I'm not sure exactly where this information comes from, but it should probably be either at the Compile or Debug log levels rather than the Info log level.",[],2016-10-26 16:28:40+00:00,2017-07-27 14:15:53+00:00,2017-07-27 14:15:56+00:00,Closed,13115062,DAFFODIL-1643
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-10-24 13:35:49+00:00,2021-01-21 20:10:08+00:00,2021-01-21 20:10:31+00:00,Closed,13115061,DAFFODIL-1642
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If dfdl:lengthKind=""explicit"" and dfdl:length is an expression that results in a negative value, we end up trying to set a bitLimit less than the current bitPosition, which causes an invariant failed abort. The LengthEv's should never result in a negative value. We need to add a check to the LengthEv's to throw an SDE if the resulting value is ever less than zero.",[],2016-10-24 12:47:39+00:00,2016-11-18 13:16:50+00:00,2017-07-31 20:23:30+00:00,Closed,13115060,DAFFODIL-1641
Improvement,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"With Evaluatables, we no longer need the distinction between BinaryKnownLength and BinaryRuntimeLength in binary parsers. Once those are removed we can also remove duplicate code for getBitLength and toBits in BinaryBooleanParsers.scala",[],2016-10-21 21:11:02+00:00,,2021-01-21 20:08:59+00:00,Open,13115059,DAFFODIL-1640
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDLSchemas EDIFACT doesn't yet work.

As of this writing these issues are blocking it, or blocking working on it sufficiently that they have to be fixed first.

DFDL-1443 - escapeScheme expressions evaluated before we know there are any delimiters to escape

DFDL-256 - ignoreCase - this is used by edifact, unclear if it is truly needed for the tests to work or not.

DFDL-1166 - TDML runner needs to load a saved parser - it takes a very long time to compile this schema (many minutes).  DFDL-1444 is the ticket for separate compilation, but just compiling with less memory footprint and faster would help.

Currently compiling the EDIFACT schema requires sbt -mem 8000m 
Otherwise it dies a long death as it runs out of memory, and all threads are busy scavenging it.",['ForInteroperabilityTest'],2016-10-19 20:53:24+00:00,2019-06-19 17:15:24+00:00,2021-05-20 20:01:27+00:00,Closed,13115058,DAFFODIL-1639
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"our daffodil source tree has, intentionally, invalid DFDL schema files that cause validation to fail for unit test purposes (negative tests). We should rename these files so they don't cause the Eclipse (or other) IDE to create distracting validation warnings when you have the daffodil source tree open.

These tests need to explicitly use file names like foo.dfdl.xsd.invalid so that the IDE will not view it as a XSD file and try to validate it.

This will enable a single setup of Eclipse to be used by persons trying to author DFDL schemas, who want the XML & XSD validation capabilities turned on, and used by persons trying to do daffodil development.",[],2016-10-18 21:56:51+00:00,,2021-01-21 20:08:31+00:00,Open,13115057,DAFFODIL-1638
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The wiki has a bunch of redundant pages saying how to setup to do daffodil use or development. At least 3 pages give instructions on sbt, what version, and where to get it. There are multiple pages discussing eclipse setup.

We don't have enough manpower to maintain these as is.

I think we should get out of the business of spoon feeding developers on how to setup eclipse, walk-through on how to install sbt, cygwin, etc. because these pages become obsolete very fast, particularly if they have screen-captures on them. 

We should have exactly one page where version numbers of tools are mentioned. We should mention specific versions we are actively using and testing against, not things like ""version 0.13 or higher"". We should tell people what we know works. If they want to try a higher version number they can do so, and report back on whether it works. 

There is duplication between the setup for ""users"" and setup for ""developers"" parts.

The audiences are:
* people who just want to use daffodil from the CLI
* people who want to write DFDL schemas, and configure eclipse XML support to help them do that
* java developers who want the above, plus the ability to write code that uses daffodil.
* scala developers who want to do the above, plus the ability to modify and re-create daffodil

Far as I know, the tricky things are: on windows you need cygwin, on windows you need unicode support so the japanese language pack, on eclipse - it's trickly because of the XML-validation feature, which you want if you are writing DFDL schemas, but can't have on if you are doing daffodil development - due to invalid DFDL schema files that are present for negative test purposes. (Separate jira ticket to fix that.)",[],2016-10-18 21:52:51+00:00,2017-07-26 15:57:05+00:00,2017-08-23 13:39:38+00:00,Closed,13115056,DAFFODIL-1637
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Put this example into the daffodil-examples source tree.

Add use of XPath to access the XML (created by the parse), and XSLT to transform it before unparsing.",[],2016-10-18 21:10:03+00:00,2016-10-19 22:05:10+00:00,2016-10-19 22:05:26+00:00,Closed,13115055,DAFFODIL-1636
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Create integration with Apache NiFi.

This should be a separate repository outside of the main daffodil repository, probably at github.",[],2016-10-18 15:47:10+00:00,2017-02-02 12:40:35+00:00,2017-08-03 15:14:46+00:00,Closed,13115054,DAFFODIL-1635
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Daffodil currently rejects (as an unimplemented), schemas that use unions of simple types in the restricted way that DFDL supports.

However, some users have requested that this be at least tolerated so that they can put these in their DFDL schemas even if Daffodil doesn't validate against these.

Fact is, we should accept these, and when daffodil's internal validation is used, or checkConstraints() is called, we should validate against these.

See also DFDL-1633 which is about implementing the unionMemberSchema infoset feature.
(same users need that as well as this)",[],2016-10-17 15:01:20+00:00,2017-04-18 20:53:51+00:00,2017-08-01 00:35:27+00:00,Closed,13115053,DAFFODIL-1634
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"These infoset members are needed to navigate back from an infoset element to the corresponding schema component. This is needed so as to access other annnotations (not DFDL annotations) on that schema component which may be needed by the application - enhanced diagnostic messages, etc. As an example, the units-of-measure of a numeric element may be stored on an appinfo annotation, but these may want to be used in error messages.

Implementing these requires implementing SCID (Schema Component Identifiers), and an API by which they can be used to access the schema component.",[],2016-10-17 14:49:09+00:00,,2020-09-23 20:19:49+00:00,Open,13115052,DAFFODIL-1633
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"On the wiki page about Daffodil and the DFDL Infoset, the daf:valid='true'/'false' attribute is described. 

https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Daffodil+and+the+DFDL+Infoset",[],2016-10-17 13:26:10+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:12+00:00,Closed,13115051,DAFFODIL-1632
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-10-13 13:09:26+00:00,2016-12-08 20:06:58+00:00,2017-07-27 13:01:18+00:00,Closed,13115050,DAFFODIL-1631
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This was clarified on DFDL workgroup call on 2016-10-11

Verify that Daffodil conforms to erratum 5.18 per below.

lengthKind ' expression ' when unparsing

Spec says ""When dfdl:lengthKind is 'explicit' (and dfdl:length is an expression), 'delimited',
'prefixed', 'pattern' the data value is padded to the length given by the XSD minLength facet
for type 'xs:string' or dfdl:textOutputMinLength property for other type"" .

This is not the latest agreed thinking. The desired behaviour is as documented by erratum 5.18
in Experience Document 4, which states the expression is evaluated and the result taken as
the explicit length. This has not yet been added to the spec.",[],2016-10-11 14:42:13+00:00,2018-08-16 15:13:03+00:00,2021-05-20 12:34:30+00:00,Closed,13115049,DAFFODIL-1630
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-10-11 13:25:37+00:00,2021-01-21 20:06:23+00:00,2021-01-21 20:06:35+00:00,Closed,13115048,DAFFODIL-1629
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Full validation doesn't work if the schema is packaged in a jar file because the validation code expects a file URL, not a relative resource URL within a jar.

That, in Runtime.scala, the validateXMLSources method expects file URL(s), and fails with ""uri is not hierarchical"" if given a resource URL into the jar.",[],2016-10-10 14:10:17+00:00,2016-12-19 23:25:41+00:00,2017-07-28 17:26:08+00:00,Closed,13115047,DAFFODIL-1628
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The valueLength function fails when referencing a complex element during parsing. It works with unparsing though.

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressionsDebug.test_valueLength_5 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Schema Definition Error: Expression evaluation failed: Error: Value length unknown for element {http://example.com}seq.BlockingDOS(valueLen(unk, unk))
[error] Schema context: (no schema component identifier) (no schema file location)(no data location)
[error] Schema context: element.valLen. Location line 427 column 12 in file:/tmp/Functions.dfdl.xsd6087470375088588725.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:666)
{noformat}

See test_valueLength_5 in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2016-10-04 02:07:11+00:00,2016-10-06 11:58:58+00:00,2016-10-21 21:53:50+00:00,Closed,13115046,DAFFODIL-1627
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The function valueLength with lengthUnit of characters has not been implemented yet.

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressionsDebug.test_valueLength_unparse_1 failed: scala.NotImplementedError: an implementation is missing
[error]     at scala.Predef$.$qmark$qmark$qmark(Predef.scala:230)
[error]     at edu.illinois.ncsa.daffodil.dpath.DFDLLengthFunctionBase$$anonfun$1.apply(DFDLFunctions2.scala:61)
[error]     at edu.illinois.ncsa.daffodil.dpath.DFDLLengthFunctionBase$$anonfun$1.apply(DFDLFunctions2.scala:48)
[error]     at edu.illinois.ncsa.daffodil.dpath.DState$.withRetryIfBlocking(DState.scala:375)
{noformat}

See test_valueLength_2 and test_valueLength_unparse_1 in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2016-10-04 01:51:18+00:00,2016-10-05 13:55:08+00:00,2016-10-05 15:55:46+00:00,Closed,13115045,DAFFODIL-1626
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Developer at BBN was integrating Daffodil via JAPI, was surprised that the ParseResult getDiagnostics() method returns a list of Diagnostic, and those have getSomeCause() which returns a Throwable. 

They expected this to be an encpasulating Daffodil-specific exception wrapper around whatever the raw throwable is.",['beginner'],2016-09-29 16:37:10+00:00,,2021-01-21 20:05:20+00:00,Open,13115044,DAFFODIL-1625
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-09-29 13:06:44+00:00,2016-09-29 13:08:53+00:00,2016-09-29 13:08:53+00:00,Closed,13115043,DAFFODIL-1624
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When a unparse fails because of circularly deadlocked expressions/unparsers, we currently print out a lot of information (e.g.dump of all ustates, a bunch of warnings, etc). These should all be removed or made debug logs.",[],2016-09-29 13:05:10+00:00,,2018-09-13 14:04:18+00:00,Open,13115042,DAFFODIL-1623
Bug,[],gmcdonald,Gavin McDonald,dfthompson,Dave Thompson,Critical,"Running a test on a 4.2 MB PNG file results in a ""Error running test"" message from the test script. The png file appears to be valid and can be opened successfully.

A similar 3.4 MB PNG file is tested successfully.

The affected PNG file is attached.",[],2016-09-29 12:56:39+00:00,2016-10-06 12:06:19+00:00,2016-10-06 12:52:21+00:00,Closed,13115041,DAFFODIL-1622
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"A user provided the following traceback:
{code}
edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken: dstate.currentNode.ne(null)
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.ifClosedDoesntExist(FNFunctions.scala:524)
edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.handleThrow(FNFunctions.scala:578)
edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.exists(FNFunctions.scala:504)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
	at edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.ifClosedDoesntExist(FNFunctions.scala:524)
	at edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.handleThrow(FNFunctions.scala:578)
	at edu.illinois.ncsa.daffodil.dpath.ExistsKind$class.exists(FNFunctions.scala:504)
	at edu.illinois.ncsa.daffodil.dpath.FNExists.exists(FNFunctions.scala:589)
	at edu.illinois.ncsa.daffodil.dpath.FNExists.run(FNFunctions.scala:593)
...
{code}",[],2016-09-29 11:52:01+00:00,2016-09-29 15:15:15+00:00,2016-12-02 19:08:45+00:00,Closed,13115040,DAFFODIL-1621
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I created an unparse test that uses the encoding ""X-DFDL-US-ASCII-7-BIT-PACKED"" and has an invalid character in the document. I was expecting an error, just not this one.

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingPropertiesDebug.test_packed7BitASCII_unparse2 failed: java.lang.IllegalArgumentException: null
[error]     at java.nio.Buffer.position(Buffer.java:244)
[error]     at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:618)
[error]     at edu.illinois.ncsa.daffodil.io.DataOutputStreamImplMixin$$anonfun$1.apply(DataOutputStreamImplMixin.scala:721)
[error]     at edu.illinois.ncsa.daffodil.io.DataOutputStreamImplMixin$$anonfun$1.apply(DataOutputStreamImplMixin.scala:707)
{noformat}

See test_packed7BitASCII_unparse2 in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala",[],2016-09-28 20:50:24+00:00,2016-09-29 18:02:46+00:00,2016-09-29 20:52:17+00:00,Closed,13115039,DAFFODIL-1620
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"It is possible to put dfdl annotations in places that Daffodil will ignore. For example, an annotation on a xs:restriction will be ignored. It would be helpful to detect dfdl annotations in these locations and warn them that they will be ignored.",[],2016-09-28 19:15:56+00:00,2019-06-17 18:34:15+00:00,2021-05-20 20:01:18+00:00,Closed,13115038,DAFFODIL-1619
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The PCAP schema has a MagicNumber element with type xs:hexBinary. Tests are performed on this to determine the endianness of the data. It does this by converting the hexBinary to a string and then comparing against a string, i.e.
{code}
xs:string(.) eq 'ABCDEF'
{code}
String conversion shouldn't be necessary, so I modified to to use xs:hexBinary insteat, i.e.
{code}
. eq xs:hexBinary('ABCDEF')
{code}
 This should work, is more readable, and should be slightly more efficient since it doesn't need to convert the hexBinary value to a string. However, this always fails comparison. We need to investigate why this fails and fix it so that we can do hexBinary comparisons.",[],2016-09-28 18:15:44+00:00,2017-08-30 13:42:05+00:00,2017-08-30 14:07:05+00:00,Closed,13115037,DAFFODIL-1618
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Say we have something like this:
{code}
<group name=""hg"">
  <element name=""foo"" />
</group>

<element name=""bar"" >
  <sequence>
    <sequence dfdl:hiddenGroupRef=""hg"" />
    <element name=""baz"" dfdl:inputValueCalc=""{ ../foo * 2 }"" />
    <sequence dfdl:hiddenGroupRef=""hg"" />
    <element name=""baz"" dfdl:inputValueCalc=""{ ../foo * 3 }"" />
    <sequence dfdl:hiddenGroupRef=""hg"" />
    <element name=""baz"" dfdl:inputValueCalc=""{ ../foo * 4 }"" />
  </sequence>
</element>
{code}

The {{../foo}} expression causes an ambiguity because it does not know which foo element inside the sequence to access. Right now, it looks like it just always selects the first element. Instead, we should throw an error. In some cases we may be able to support something like ../foo[2], but if any elements are optional that wouldn't work because we couldn't statically determine which foo to access.",[],2016-09-28 16:16:19+00:00,2017-06-13 11:27:52+00:00,2017-07-31 20:02:46+00:00,Closed,13115036,DAFFODIL-1617
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"A user reports that his entirely binary format is getting an error that textOutputMinLength is required. 

Excerpt from email thread is below:

.... I am getting strange error after I try to compile my schema:


    15:29:32.273 [main] DEBUG int_.nato.ncia.maniaccs.App - DFLD file's URL: jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml
    15:29:32.275 [main] INFO  int_.nato.ncia.maniaccs.App - compiling ASTERIX DFDL defs...
    15:29:37.058 [main] ERROR int_.nato.ncia.maniaccs.App - There was an error while compiling the DFDL sources
    15:29:37.062 [main] ERROR int_.nato.ncia.maniaccs.App - Schema Definition Error: Property textOutputMinLength is not defined.
    Non-default properties were combined from these locations:
    Location line 1583 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml
    Location line 17 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml

    Default properties were taken from these locations:
    Location line 9 column 8 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml
    Location line 7 column 10 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml
    Location line 9 column 8 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml
    Location line 7 column 10 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml

    Schema context: element.CAT. Location line 1583 column 16 in jar:file:/home/luke/work/projects/mini-accs/socket-listener/target/data-socket-listener-1.0-SNAPSHOT.jar!/dfdl/asterix.dfdl.xml.


(Note that I have been using the very same DFDL definition when running the TDML test that I have prepared)

I checked the docs and, in section 13.2, it says that 'textOutputMinLength' is 'common to all simple types with text representation'; in my DFDL, there are _no_ fields with such representation, I use only (unsigned) integers and bit flags.

I checked the line in error message 'Schema context': it looks like this:


                  <xs:element name=""CAT"" type=""adatp-35:ushort8""/>


while the 'adatp-35:ushort8' type is defined as follows:


      <xs:simpleType name=""ushort8"" dfdl:lengthKind=""explicit"" dfdl:length=""1"" dfdl:lengthUnits=""bytes"">
        <xs:restriction base=""xs:unsignedInt""/>
      </xs:simpleType>


Any help would be greatly appreciated!","['ForInteroperabilityTest', 'beginner']",2016-09-28 13:56:46+00:00,2018-11-30 21:57:34+00:00,2021-05-20 12:34:28+00:00,Closed,13115035,DAFFODIL-1616
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Unparse tests with an encoding of ""X-DFDL-US-ASCII-7-BIT-PACKED"" currently fail with the following error:

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingPropertiesDebug.test_packed7BitASCII_unparse failed: java.io.UnsupportedEncodingException: X-DFDL-US-ASCII-7-BIT-PACKED
[error]     at java.lang.StringCoding.decode(StringCoding.java:190)
[error]     at java.lang.String.<init>(String.java:426)
[error]     at java.io.ByteArrayOutputStream.toString(ByteArrayOutputStream.java:245)
[error]     at edu.illinois.ncsa.daffodil.tdml.VerifyTestCase$.verifyTextData(TDMLRunner.scala:1042)
{noformat}

See test_packed7BitASCII_unparse in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala",[],2016-09-27 18:27:18+00:00,2016-09-28 13:42:07+00:00,2016-09-28 14:24:31+00:00,Closed,13115034,DAFFODIL-1615
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I created a test that uses X-DFDL-US-ASCII-7-BIT-PACKED encoding with a sequence with two elements with explicit length of 2, so I would expect it to need 28 bits total but it seems to want 30. Here's the error:

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingPropertiesDebug.test_packed7BitASCII10 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Parse Error: Insufficient bits available. Required 14 bits, but only 12 were available.
[error] Schema context: element.s2 Location line 268 column 12 in file:/tmp/packed7BitASCII5940072276120378281.dfdl.xsd
{noformat}

See test_packed7BitASCII10 in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml",[],2016-09-23 21:37:42+00:00,2016-09-27 19:03:20+00:00,2016-09-27 19:42:55+00:00,Closed,13115033,DAFFODIL-1614
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"ElementBase, and ElementBaseGrammarMixin.scala both have a number of commented out blocks of conditional printlns. 

This ticket is to remember to remove them once we get a bit more confident with this code. Leaving them in temporarily.",[],2016-09-22 21:33:39+00:00,2016-09-26 15:12:26+00:00,2016-10-11 13:27:34+00:00,Closed,13115032,DAFFODIL-1613
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"So if you happen to have a git repository with just say, the 2.0.0 branch on it, which has no tags as of yet, then if you try to do sbt compile it fails to resolve dependencies because the git logic which tries to determine whether you are a snapshot or a tag fails.

This is easy to work around, add any tag, or clone the whole repository, not just one branch.",[],2016-09-21 15:17:40+00:00,2017-11-28 14:57:35+00:00,2018-01-04 18:15:03+00:00,Closed,13115031,DAFFODIL-1612
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-09-19 18:14:13+00:00,2016-10-07 11:52:20+00:00,2016-10-11 13:25:25+00:00,Closed,13115030,DAFFODIL-1611
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Due to the addition of capture content/value length during parsing, we are now seeing a noticeable performance degradation in various file formats, to the point where some performance tests are slower than the previous release (e.g. PCAP).",[],2016-09-15 14:55:59+00:00,2016-09-26 15:51:31+00:00,2016-10-11 13:28:23+00:00,Closed,13115029,DAFFODIL-1610
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"When changing the encoding for an element, we expect it to interpret/output the bytes in that order.  test_outputValueCalc_06 shows that this is not happening for unparsing.

The idea being that I should be able to switch between byteOrder's between elements using outputValueCalc.

Separate tests, binaryInteger_BigEndian and binaryInteger_LittleEndian show that it appears to work outside of the OVC case.",[],2016-09-12 19:48:53+00:00,2016-09-15 17:37:59+00:00,2017-08-01 23:44:53+00:00,Closed,13115028,DAFFODIL-1609
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"From Mike's e-mail:

We need to improve test coverage on dfdl:outputValueCalc.

Here are a few ideas for ""torture tests"". 

I would work on these, but I still have a final unparser feature to code, and a bunch of review-related changes to do.

**  create runtime-valued property and dfdl:outputValueCalc torture tests

These tests are based around:

<element name=""xi"" type=""xs:string"" dfdl:length=""1"" dfdl:lengthKind=""explicit""/>
<element name=""yi"" type=""xs:string dfdl:length=""1"" dfdl:lengthKind=""explicit""""/>
<element name=""zi"" type=""xs:string"" dfdl:length=""1"" dfdl:lengthKind=""explicit""/>

<element name=""x"" type=""xs:string"" dfdl:outputValueCalc=""{ dfdl:valueLength(../y) }"" dfdl:initiator=""{ ../xi }""  dfdl:lengthKind=""delimited"" dfdl:terminator="";""/>
<element name=""y"" type=""xs:string"" dfdl:outputValueCalc=""{ dfdl:valueLength(../z})""  dfdl:initiator=""{ ../yi }""  dfdl:lengthKind=""delimited"" dfdl:terminator="";""/>
<element name=""z"" type=""xs:string"" dfdl:initiator=""{ ../zi }""  dfdl:lengthKind=""delimited"" dfdl:terminator="";""/>

The dfdl:outputValueCalc's in the above require the unparser to suspend unparsing of x and y, then unparse them first z, then y, then x, but put their output in x,y, z order.

The test is to make sure this happens correctly even if each of x, y, z gets a runtime-valued property's values are all different. E.g.,
<xi>X</xi>
<yi>Y</yi>
<zi>Z</zi>
<z> 0123456789</z>

unparsing shoudl produce 

XYZX2;Y10;Z0123456789;

Generalize this idea to all the other runtime-valued properties beyond just initiator.


    byteOrder 
    encoding 
    outputNewLine
    initiator
    terminator
    separator
    escapeCharacter
    escapeEscapeCharacter
    textStandardDecimalSeparator
    textStandardGroupingSeparator
    textStandardExponentRep
    calendarLanguage 

** create test that dfdl:outputValueCalc freezes the delimiter stacks

similar concept to the above, except the delimiters come from surrounding nests of sequences.

When each unparses (which should be y first then x), it should get the right delimiters. This insures we're freezing the delimiter stack, and the values of the delimiters on them. 

** create test that dfdl:occursIndex freezes properly for OVC

similar concept to the above, but the OVC expressions depend on freezing of different dfdl:occursIndex values. (Two arrays of the same length, contain complex types. Inside those are OVC elements....)",[],2016-09-12 19:28:57+00:00,2016-09-16 17:53:31+00:00,2016-09-20 20:16:50+00:00,Closed,13115027,DAFFODIL-1608
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,When creating an array in the test I used dfdl:minOccurs and dfdl:maxOccurs.  This is invalid.  It should just be minOccurs and maxOccurs on an element.,[],2016-09-12 17:03:54+00:00,2016-09-12 17:48:50+00:00,2016-10-11 13:35:40+00:00,Closed,13115026,DAFFODIL-1607
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TypedEquality.scala stuff is supposed to be zero overhead, but allocates. This needs to be improved.",[],2016-09-12 16:58:28+00:00,2016-09-14 22:57:25+00:00,2016-10-19 16:51:27+00:00,Closed,13115025,DAFFODIL-1606
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See

https://bestpractices.coreinfrastructure.org/projects/357

The self-certification questionnaire should also be reviewed. MikeB filled it in, but guessed on a few things that seemed not applicable, but didn't have N/A as a choice.

Since they gave us 100% rating (despite fuzz testing issue below), I dropped their badge on our wiki front page, but removed it pending review by Steve Lawrence of the questionnaire answers.

Also JIRA DFDL-1602. The above self-certification questionnaire reminded me that we're not doing fuzz testing but clearly we should. They gave us 100% rating anyway, even though this fuzz testing requirement was listed as ""not met"", but this is also based on some guesses on my part about a few of the other questionnaire answers.",[],2016-09-09 13:28:01+00:00,2021-02-04 13:21:48+00:00,2021-02-19 16:53:39+00:00,Closed,13115024,DAFFODIL-1605
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See

https://bestpractices.coreinfrastructure.org/projects/357

The self-certification questionnaire should also be reviewed. MikeB filled it in, but guessed on a few things that seemed not applicable, but didn't have N/A as a choice.

Since they gave us 100% rating (despite fuzz testing issue below), I dropped their badge on our wiki front page, but removed it pending review by Steve Lawrence of the questionnaire answers.

Also JIRA DFDL-1602. The above self-certification questionnaire reminded me that we're not doing fuzz testing but clearly we should. They gave us 100% rating anyway, even though this fuzz testing requirement was listed as ""not met"", but this is also based on some guesses on my part about a few of the other questionnaire answers.",[],2016-09-09 13:26:40+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:12+00:00,Closed,13115023,DAFFODIL-1604
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,Comments around one of these says it's a memory leak. We need to remove them once we are satisfied that things are correct.,[],2016-09-08 16:29:57+00:00,2016-09-15 13:52:22+00:00,2016-10-11 13:15:53+00:00,Closed,13115022,DAFFODIL-1603
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We should be doing fuzz testing, both for schemas, and for data files being parsed and unparsed. (fuzzed valid XML infoset input???)

There are tools for this like : http://lcamtuf.coredump.cx/afl/

See also wikipedia on fuzz testing: https://en.wikipedia.org/wiki/Fuzz_testing",[],2016-09-07 15:19:24+00:00,,2020-11-20 13:47:09+00:00,Open,13115021,DAFFODIL-1602
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fails to unparse when defaultRoundTrip=""true"" is added to the TDML file.

Fails with a spurious error about UPA violations which can't be right since this parses properly, and unparses (we know) on the IBM DFDL implementation.",[],2016-09-06 21:20:23+00:00,2016-09-12 18:50:11+00:00,2017-07-26 20:10:40+00:00,Closed,13115020,DAFFODIL-1601
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Possible better names:

StringMaybeTruncateUnparser

The code itself of this class still is structured as if it was doing padding and truncation with local variable names like nCharsToPad that must be <= 0 now. Those should be touched up to better indicate what this code does, which is when truncation is allowed, truncate the string.

This code assumes the bitLimit will have been set if truncation is to take place. It is unclear if this invariant holds. This invariant needs to be checked. It's possible no truncation will occur in situations where it should. If the type is xs:string the lengthKind is explicit or implicit, and the optTruncateSpecifiedLengthString is defined and true, then we must have a length limit. 

Alternatively, this should check and truncate only in that case, but we need to insist this is done consistently. Either the surrounding unparser ALWAYS sets the bit limit (not sure how in case of lengthUnits 'characters'), or this primitive doesn't pay attention to the bit limit and decides itself.

(This idea that the bitLimit setting is how this is detected is a hold-over from the design of the parser which may not be the right choice for the unparser.)",[],2016-09-06 14:30:36+00:00,2016-09-14 22:57:24+00:00,2016-10-11 13:31:35+00:00,Closed,13115019,DAFFODIL-1600
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The StringDelimitedUnparser is used both itself and as a base class of LiteralNilDelimitedEndOfDataUnparser.

This unparser still contains logic for performing pad/truncate.

This code will still execute, and won't cause errors all the time, because the new unparser mechanism for pad/fill will simply see a string that has already been padded, and so won't add any more. However, this code is redundant, and there is at least one known bug in it, which is 
DFDL-1325. 

This code should be removed so this code is not responsible for pad/fill, nor should it be checking that the length is not too long. nor should it be truncating. 

See also DFDL-1595 about where the length-too-long check needs to be now.",[],2016-09-06 14:17:24+00:00,2016-09-14 22:57:25+00:00,2017-08-02 04:56:27+00:00,Closed,13115018,DAFFODIL-1599
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When unparsing, the strategy used to determine the target length for an element is to determine the value length by allowing the unparsing to go forward but into a buffering data output stream. The value length is determined by capturing the starting position, the ending position (both of which are in the buffered output), and subtracting. 

However, if the string is a truncated string (lengthKind 'explicit' or 'implicit', with dfdl:truncateSpecifiedLengthString 'yes'), we have a cycle because the value-length of an element is the post-truncation length, yet to determine the target length we will often need to know the value-length.

For example: 
{code}
<xs:element name=""len"" type=""xs:int"" dfdl:outputValueCalc=""{ 
  if (dfdl:valueLength(../data) lt 100) then 100 else dfdl:valueLength(../data) 
}"" />
<xs:element name=""data"" type=""xs:string"" dfdl:lengthKind='explicit' dfdl:length='{ ../len }'
   dfdl:truncateSpecifiedLengthString='yes'/>
{code}
In the above, the length expression depends on the 'len' element value. The len element value requires the valueLength of the 'data' element. Without truncation, this would work, as we could unparse the value of the 'data' into a buffering data output stream, and measure its length, and that would unblock the suspended 'len' element's dfdl:outputValueCalc expression, which would allow the 'data' element's length expression to be evaluated, and we would then know how much padding/fill to add to the 'data' element representation.

But if the 'data' string can be truncated, as in the example above, then this fails, because we can't unparse it and allow the value length to be derived from the unparsed representation in a  buffer, since the valueLength is supposed to be the post-truncation value.

So a cyclic deadlock will occur unparsing things like the above. 

The question is: is this a problem? The above example could be re-written as:

{code}
<xs:element name=""len"" type=""xs:int"" dfdl:outputValueCalc=""{ 
  if (fn:string-length(../data) lt 100) then 100 else fn:string-length(../data) 
}"" />
<xs:element name=""data"" type=""xs:string"" dfdl:lengthKind='explicit' dfdl:length='{ ../len }'
   dfdl:truncateSpecifiedLengthString='yes'/>
{code}

The fn:string-length function provides the pre-truncation length of the element. This elminates the cycle.

We can detect this error at runtime, as the ElementRuntimeData structure contains optTruncateSpecifiedLengthString, which can be examined at runtime by the valueLength function, which can error that dfdl:valueLength is being called on a truncated string, and the diagnostic can suggest that fn:string-length is preferable.

However, it's not an error to call dfdl:valueLength on a string that may be truncated. It's only an error to do so in a way that creates this deadlock. 

The DFDL spec does not preclude calling dfdl:valueLength on a string element that might be truncated, and the spec is clear that this would be the post-truncation value-region length. 

So we need a mechanism where we can produce a runtime SDE, not any time dfdl:valueLength is called on a string that might be truncated, but a mechanism where we examine the deadlocked cycle, and we see if it is caused by taking dfdl:valueLength of a string that might be truncated, so we can issue the runtime SDE about this particular cyclic definition problem only in the cases where it is actually creating a cycle.

That would be ideal, but an interim acceptable solution might be:
(a) have tutorials about cycles and include this example 
(b) disallow this at schema compile time as something daffodil just doesn't allow - along with the fix which is to use fn:string-length instead.
or both.",[],2016-09-06 14:05:03+00:00,,2021-04-29 19:49:00+00:00,Open,13115017,DAFFODIL-1598
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This issue affects both parser and unparser.

It is a code-cleanup/maintainability, and perhaps a bit of a performance issue.

I'll use encoding as the property for discussion here, but the point applies to byteOrder and possibly bitOrder and maybe a few other things like fillByte also.

We have this idea that since encoding often doesn't change at all in a data format, that we insert an encoding-change processor (parser or unparser) which just sets the new setting, which is then stored in the DataInputStream/DataOutputStream object, and no per-element overhead is encountered for setting up this property.

For some formats, encoding changes. This becomes quite tricky if the change occurs inside of a repeating element, as in that case, each repeat might need to begin by setting the encoding to the right one for the start of the repeating element, but then inside that element another set might change it, and that might last until the end of the repeating element, hence, at the start of the next repeat, we must set it back to the proper encoding for the start of the element.

So, unless the DFDL compiler can optimize it out, any repeating element containing any text must begin with an encodingChange processor. Right now the optimization looks for whether the entire schema has uniform encoding (which is common), but any format that has a runtime-valued expression for encoding will be deemed ""unknowable"", and the encoding will be assumed to be variable. This is very pessimistic, but a better analysis depends on determining that a runtime-valued expression for encoding is still defined at a high-enough scope (such as top-level) that encoding is not subject-to-change during the element in question. The analysis being done is not that sophisticated currently. 

The above might not matter much for encoding, but for byteOrder, where we know there are formats that begin with a byte-order indication (such as PCAP), this matters. 

Now, there are also some parsers (and unparser) primitive processors that expliclity set encoding, or byteOrder. before they carry out their processing. 

It is possible that encoding change processors are not being inserted everywhere they are needed; hence, if the various setEncoding calls are removed, it may break things. 

Now, setting the encoding can check if the encoding is the same one it can do little work other than an equality check. So rather than having lots of encoding-change processors that are being inserted due to unsophisticated compile-time optimization, it may actually be better performance to either simply call setEncoding before every textual primitive operation, or it may be better to use Evaluatables, and have the data stream layer access encoding information via the Evaluatables mechanism. Then at least we would have only one code path to focus on for performance improvement. 

For unparsing: 

slightly more complicated - any suspended operation needs to ""freeze"" the value of encoding that is used to unparse, so that subsequent non-suspended unparser operations that change the encoding will not result in the suspended operation using the wrong one. 

However, since the encoding change unparser will have been run before the suspension is created, and since the data output stream of a suspension is cloned for the suspension, the encoding should be correctly set for unparsers that are suspended. *Should* being the key operative word here. This needs to be verified. (Also, the cloning of the data output stream state is itself a big performance worry, so the work done there needs to be minimized.)

Whatever mechanism is chosen to resolve the parser issue, the unparser should work the same way.",[],2016-09-06 13:37:05+00:00,2018-01-26 16:07:03+00:00,2018-01-30 19:48:41+00:00,Closed,13115016,DAFFODIL-1597
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"The PNG file format has something like this:

Field1: NUL-terminated ASCII
Field2: Int8
Field3: Int8
Field4: NUL-terminated ASCII
Field5: NUL-terminated UTF-8
Field6: UTF-8

The combined lengths (in bytes) of all fields is known. In order to determine the length of Field6 we need to take the combined length of all fields and subtract the length of Fields 1 through 5 and the NUL terminating bytes. So Field6 has something like:{code}dfdl:length=""{ ../PayloadLength - (fn:string-length(../Field1) + fn:string-length(../Field4) + .fn:string-length(../Field5) + 5){code}

The issue here is the Field5 is UTF-8, which is variable length, so fn:string-length is not necessarily the same as the number of bytes. We need some way to determine the number of bytes of Field5, and I think valueLength is the best/only option.",[],2016-09-06 13:12:44+00:00,2016-09-06 19:22:15+00:00,2016-09-07 14:57:00+00:00,Closed,13115015,DAFFODIL-1596
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Due to the out-of-order way that dfdl:outputValueCalc has to work, the way unparsers compute how long data is, that had to change.

That results in the means by which the unparsers measure and detect that the data is too long, need to be different. 

Now, there used to be code in unparser primitives that did this checking, but such code can't work in general anymore. 

The place that has to do this checking now is centralized into the RightFill(simple types) and ElementUnused(complex type) unparsers. However, this check isn't implemented there. 

No tests fail, so either there aren't tests exercising this, or the ones that are exercising this just happen to run because they do not also exercise dfdl:outputValueCalc, so nothing out-of-order is happening, and so the older checking code is maybe still working in those specific cases?

So two things (a) checking code needs to be added to RightFillUnparser and ElementUnusedUnparser to detect when data that cannot be truncated is being unparsed into a specified length that is too small for it (b) tests that create errors due to data too long need to be created which also use aspects of the unparser that force the DirectOrBufferedDatatOutputStream to be used underneath, so as to force this error to be detected.

Part of (a) is removing the legacy checking code which is not general enough to work now, from the few unparser primitives where it appears (might be only one?)",[],2016-09-06 12:54:11+00:00,,2021-01-07 21:22:10+00:00,Open,13115014,DAFFODIL-1595
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"There was a consistent performance degradation across the board after commit 8ed09fb was made. Most tests only decreased by a 1-2%, which is within the normal fluctuations. But ALL test were down 1-2% so this is likely a performance issue. More importantly, CSV tests dropped  anywhere from 20% to nearly 60%, and PCAP dropped 5-10%. We need to track down the change that caused these performance decreases and see if they can be resolved.",[],2016-09-06 11:47:28+00:00,2016-09-07 18:50:53+00:00,2016-10-11 13:17:24+00:00,Closed,13115013,DAFFODIL-1594
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Per Mike:  Probably we are not copying the stack of escape schemes when we copy the state to suspend/resume unparser work. The array index out of bounds is an empty stack....

Error:
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestOutputValueCalcDebug.test_ovc_w_runtime_escape_char failed: java.lang.ArrayIndexOutOfBoundsException: -1
[error]     at scala.runtime.ScalaRunTime$.array_apply(ScalaRunTime.scala:73)
[error]     at edu.illinois.ncsa.daffodil.util.MStack.top(MStack.scala:263)


See test test_ovc_w_runtime_escape_char in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/outputValueCalc.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestOutputValueCalcDebug.scala",[],2016-09-02 21:55:02+00:00,2016-09-15 14:46:50+00:00,2016-09-20 20:17:13+00:00,Closed,13115012,DAFFODIL-1593
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Bug: should not overwrite the value with truncated value. the fn:string-length function should always return the same value which is the un-truncated length.

We'll need a separate slot for the truncated value which is generally unused, but when actually outputting data is checked and preferred to the un-truncated value.",[],2016-09-02 17:03:46+00:00,,2021-01-07 21:19:31+00:00,Open,13115011,DAFFODIL-1592
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Ideas for increasing performance

(a) minimize how much we have to copy to create one of these things 
(b) use local pools of reusable objects instead of the heap. The pool would live in the ""original"" ustate which is a thread-local data structure. 
(c) optimize away most alignment fill and mandatory text alignment since those will generate tons of suspensions 
(d) queue suspensions on the infoset elements or data-output-streams they are blocked on, so they can be unblocked as early as possible, (and only once. The current implementation may retry them over and over unnecessarily)",[],2016-09-02 16:51:35+00:00,2017-07-27 14:15:23+00:00,2017-07-27 14:15:27+00:00,Closed,13115010,DAFFODIL-1591
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"So there's a bug here. if setVar is supposed to evaluate (for elements) after the entire element, then we shouldn't be passing setVar grammar terms to the element combinator, but putting them in the grammar after the element's terminator.

Actually, we need the grammar to pass the grammar regions that include the element's initiator and terminator to the ElementCombinator, so that the unparseEnd can happen after the setVar, but the setVars happen after the terminator. 

So some grammar refactoring is required.",[],2016-09-02 16:46:33+00:00,,2021-01-07 21:17:50+00:00,Open,13115009,DAFFODIL-1590
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"A schema that had xs:string elements with dfdl:outputNewLine="""" caused an Unparse Error with a very unhelpful message. This property should never be empty. Need to ensure the OutputNewLineCooker is doing the right thing an ensuring the the value is not empty, and throw and SDE if so.",[],2016-09-02 16:41:22+00:00,,2021-01-07 21:16:09+00:00,Open,13115008,DAFFODIL-1589
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"There is no code to escapify the contents of the literalValue nil value during unparsing. 

So if this nil value happens to contain a delimiter character, and the lengthKind is delimited, then nothing will escape the delimiter that is part of the nil value, and so we will not be able to parse the data again.

An alternative to fixing this is just SDE, but since initiators/terminators/separators can come from runtime-valued expressions, a simple static check to rule this out isn't comprehensive but might be practical.",[],2016-08-31 19:50:32+00:00,,2021-01-07 21:14:42+00:00,Open,13115007,DAFFODIL-1588
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"withBitLengthLimit is defined as a macro. It is used in exactly one place.

Having a macro for this is complete overkill. We should just inline code it at the one place it is used.",['beginner'],2016-08-31 14:09:15+00:00,,2021-01-07 21:13:03+00:00,Open,13115006,DAFFODIL-1587
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,The mil-std-2045 schema fails with the latest development branch.,[],2016-08-29 11:17:45+00:00,2016-09-02 19:22:53+00:00,2016-09-07 15:11:44+00:00,Closed,13115005,DAFFODIL-1586
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,['beginner'],2016-08-26 13:10:46+00:00,,2021-01-07 21:12:38+00:00,Open,13115004,DAFFODIL-1585
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Tests like unparseDelimitedPaddedString09 and unparseDelimitedPaddedString09

(note: poorly named because these tests aren't about delimited anything, or the delimters are beside the point)

These tests have been updated to expect the length to be the maximum of the length property value (literal or evaluated expression), and the minLength facet, for strings, and dfdl:textOutputMinLength for other simple types.

However, this is under discussion by the DFDL workgroup, so may change.

Erratum 5.18 is the one that is subject to clarification of this behavior.",['beginner'],2016-08-23 18:53:14+00:00,,2019-07-03 12:52:42+00:00,Open,13115003,DAFFODIL-1584
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Beside specifying expected errors, we need to be able to indicate expected warnings, and probably also NOT-expected warnings.",[],2016-08-23 18:25:32+00:00,2018-01-16 20:36:50+00:00,2018-01-24 15:57:15+00:00,Closed,13115002,DAFFODIL-1583
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Validation is stubbed out in unparsers such as in StatementElementUnparser.scala.

DFDL-1346 is CLI related but same (or tied to it) issue.",[],2016-08-23 13:27:51+00:00,2021-01-07 21:10:33+00:00,2021-01-07 21:10:33+00:00,Closed,13115001,DAFFODIL-1582
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Code maintainability change.

Get rid of ""Statement"" prefix on all these class names. They're ElementUnparserBase, etc. The fact that statements come with elements doesn't need to be in every class name.

Parking this as a jira ticket, because this kind of renaming can make code merging harder, so should be done as a specific commit not as part of a large set of other changes.",[],2016-08-23 13:20:41+00:00,2016-09-02 19:24:02+00:00,2016-10-11 13:37:25+00:00,Closed,13115000,DAFFODIL-1581
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"These tests fail to roundTrip in SimpleTypes.tdml due to calendar bugs.

Tests:
dateCalendarDaysInFirstWeek
dateCalendarDaysInFirstWeek2
dateCalendarDaysInFirstWeek4
dateCalendarFirstDayOfWeek01
dateCalendarFirstDayOfWeek02
dateTimeCalendarDaysInFirstWeek
dateTimeCalendarDaysInFirstWeek2
dateTimeCalendarDaysInFirstWeek3
dateTimeCalendarDaysInFirstWeek4
dateTimeCalendarDaysIinFirstWeek5
dateTimeCalendarDaysInFirstWeek6
timeZoneFormats6

The timeZoneFormats tests appear to be due to the fact that the original input into the test in Daffodil is 08:43.uslax . This translates into 08:43:00.000000-08:00 in the infoset. On unparsing we expect to receive 08:43.uslax back, however we receive 08:43.unk.  This appears to be due to the fact that the underlying ICU formatting does not recognize the SimpleTimeZone GMT-0800 object that is parsed from the infoset value.  There's a TestFunctionality.scala file that contains a test we expect to fail once this issue is fixed by ICU.",[],2016-08-18 14:00:36+00:00,2021-01-12 12:31:42+00:00,2021-01-27 12:14:45+00:00,Closed,13114999,DAFFODIL-1580
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"There are several tests that fail to roundTrip in SimpleTypes.tdml.  This ticket refers to those that contain padding.

literalChar_padding
padding_nil",[],2016-08-18 13:53:46+00:00,2016-09-14 22:57:25+00:00,2017-07-31 20:25:36+00:00,Closed,13114998,DAFFODIL-1579
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Tests that fail when roundTrip=""true"":
integer_binary
integer_binary_02
nonNegativeInteger_bin
nonNegativeInteger_bin3
decimal_binary_06

These tests fail because there's an implementation missing in the putBigInt function of the Data IO.

These tests can be found in SimpleTypes.tdml.  Do a search for roundTrip=""false"" to find all tests that currently do not roundTrip for one reason or another.",[],2016-08-18 13:51:42+00:00,2017-03-01 16:59:54+00:00,2017-03-01 17:00:04+00:00,Closed,13114997,DAFFODIL-1578
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"daf:error(...) should accept an argument, but you get an obscure internal failure if you put one in. 

However, really daf:error should be replaced by fn:error which takes multiple arguments. The DFDL-WG has agreed that fn:error is essential (esp. for expressions in dfdl:outputValueCalc, since when unparsing there is no work-around using dfdl:assert).",[],2016-08-17 12:36:56+00:00,2017-06-23 18:52:44+00:00,2017-07-31 20:29:17+00:00,Closed,13114996,DAFFODIL-1577
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-08-17 12:03:10+00:00,2016-08-17 20:24:51+00:00,2017-07-31 20:32:10+00:00,Closed,13114995,DAFFODIL-1576
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,daffodil-extras is useful for easily testing external repositories. Need to double check that this works for all repositories of interest. Can confirm that at least mil-std-2045 needs to be fixed.,[],2016-08-15 14:51:52+00:00,2017-05-08 14:59:14+00:00,2017-07-28 17:32:34+00:00,Closed,13114994,DAFFODIL-1575
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2016-08-01 12:05:24+00:00,2016-08-02 18:56:18+00:00,2016-08-05 12:26:53+00:00,Closed,13114993,DAFFODIL-1574
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"fn:exists must block properly in order for tests test_AG000 AG001 and AG002 to round trip.

For now these tests are marked to be parse-only.",[],2016-07-29 20:58:54+00:00,2016-09-02 19:49:08+00:00,2016-09-07 18:20:14+00:00,Closed,13114992,DAFFODIL-1573
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Test test_double_text2 cannot round trip. 

This test is a fixed length text double number.

The data is "".555"" the logical double value is 0.555.

This unparses as 0.55 (that's 4 characters). This should be failing, not truncating this. 

The test still shouldn't round trip, it should parse fine. An unparse test that tries to unparse 0.555 to an element of fixed length 4 should be getting an unparse error, but doesn't. Instead right now it happily truncates to 0.55, then when it re-parses that, we get logical value 0.55, which fails comparison with expected 0.555. 

I traced this down to DataOutputStream.putCharBuffer, which given a char buffer of 5 chars happily writes out only 4 of them, thereby truncating the text.  putCharBuffer calls putBitBuffer, but disregards the return value, checking only that it is > 0, but not considering that the number of bits written might be non-zero, but not all the characters.",[],2016-07-28 21:44:52+00:00,2016-09-15 17:36:35+00:00,2017-08-01 18:15:00+00:00,Closed,13114991,DAFFODIL-1572
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,There is quite a lot of ad-hoc reasoning around whether the encoding is known or not. This should be replaced by use of Evs.,[],2016-07-25 20:58:00+00:00,,2021-01-07 21:08:11+00:00,Open,13114990,DAFFODIL-1571
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Mandatory text alignment needs test coverage.

There are lots of tricky situations. 

delimiters
nilKind literalValue and literalCharacter with and without delimiters
empty value of text type, but with and without delimiters
regular old values of text type

By using 7-bit ascii packed character set, one can even have delimiters that leave the processor on a non-byte boundary, thereby requiring an alignmentFill region before the text value or nil literalValue or nilLiteralCharacter or empty value (of text type).",[],2016-07-22 02:50:55+00:00,,2021-01-07 21:07:39+00:00,Open,13114989,DAFFODIL-1570
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Trivial,"At last count there were 236+ TODO and FIXME task markers in the code base.

Revisit these and remove those no longer relevant. Add keyword PERFORMANCE if they are about performance issues, or implement the suggestions, or create separate tickets for the issue if it warrants separate consideration.",[],2016-07-21 14:09:57+00:00,,2021-01-07 21:03:47+00:00,Open,13114988,DAFFODIL-1569
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some elements depend on the value of an OVC, and so we cannot wait until the end of unparser to evaluate them.",[],2016-07-18 19:24:50+00:00,2017-04-06 15:39:35+00:00,2017-04-06 15:39:35+00:00,Closed,13114987,DAFFODIL-1568
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2016-07-18 19:23:43+00:00,2016-09-02 18:53:58+00:00,2016-10-05 14:17:20+00:00,Closed,13114986,DAFFODIL-1567
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"Fails with the error:
{code}
edu.illinois.ncsa.daffodil.tdml.TDMLException: Unparse Error: Element {urn:parseUnparseMode}__unparseFlag does not have a value.
{code}",[],2016-07-15 16:52:50+00:00,2016-09-02 18:53:22+00:00,2016-09-07 18:48:26+00:00,Closed,13114985,DAFFODIL-1566
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See review comment for context.

A thought. This API wants to eventually be something where we can call it over and over, picking up where the prior unparse left off in the output. That might be a different API that is slightly different, but in general we need to be able to leave the output in a state such that the next unparse call can continue where the previous left off.  Doing this at the bit-position granularity might be too hard, but byte-position ought to be possible. 

That's not really about this API, which is symmetric with our parse API. It's just an additional requirement. (The parse API also needs this call-over-and-over capability.)",[],2016-07-08 19:41:15+00:00,,2021-04-13 18:41:20+00:00,Open,13114984,DAFFODIL-1565
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some schemas are only meant to be use for only parsing or unparsing. Furthermore, sometimes a user might know that a schema is only to be used for parsing or unparsing. In these cases, we want the ability to ignore SDE's that are specific to either parsing or unparsing if the schema or user does not care about them. Additionally, in these cases, we also do not want to build a a parser/unparser if the user/schema doesn't want it. Add a new property and tunable (parserUnparsePolicy) that allows control of this behavior.",[],2016-07-07 14:35:34+00:00,2016-07-18 16:22:06+00:00,2017-07-26 21:01:27+00:00,Closed,13114983,DAFFODIL-1564
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We are at the point where build automation wants to use daffodil, not just our own automation, but that of third parties, or associated with the authoring, compiling and testing of a DFDL schema separately from daffodil itself.

So we need a way to package daffodil such that it can be integrated into build tools that don't just run CLI-style commands. I.e., for sbt, that's an sbt plug in. Probably something similar for maven. 

Note: Basic build tools like make can just use the daffodil CLI commands. 

I'd say these plug-ins should be part of one of the daffodil jars so that getting the distribution gets you CLI, jars for API-level use, and sbt/maven plug-ins too.",[],2016-06-29 17:14:32+00:00,,2021-01-07 21:00:59+00:00,Open,13114982,DAFFODIL-1563
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to fix so that DFDL schema validation can work in eclipse again.

The eclipse-xml-catalog.xml in daffodil-lib has an incorrect path for the dfdl schema.

Other files create spurious XML validation errors in eclipse - we need to remove the offending schemaLocation from xs:include or xs:import and from xs:schema to remove these errors.",[],2016-06-28 20:25:44+00:00,2016-06-29 18:50:36+00:00,2016-10-11 13:40:09+00:00,Closed,13114981,DAFFODIL-1562
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2016-06-28 19:29:06+00:00,2016-09-06 12:05:47+00:00,2016-10-11 13:18:17+00:00,Closed,13114980,DAFFODIL-1561
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"When there is a specified length with lengthUnits=""characters"", the SpecifiedLengthExplicitCharactersUnparserBase doesn't handling padding. This is because what happens the unparser that handles padding (StringOfSpecifiedLength) uses bitLimit to determine how much padding to add. But the SpecifiedLengthExplicitCharactersUnparserBase creates a CharBufferDataOutputStream to write that characters. However, this output stream does not have a bitLimit (since chars could be variable width), and so the StringOfSpecifiedLengthUnparser does not know how much padding to add.

Perhaps the padding logic needs to be done in the SpecifiedLengthExplicitCharactersUnparserBase class? So StringOfSpecifiedLength writes to a temporary char buffer and does not add padding because there is no bitLimit. Then the SpecifiedLength unparser can figure out how many characters to add based on that how many characters we're left unfilled?

Note that this prevents test_simple_type_properties_pad_trim_13_04 in edu.illinois.ncsa.daffodil.IBMTestsThatPass from round tripping.",[],2016-06-28 18:46:48+00:00,2016-09-02 19:48:45+00:00,2016-09-11 21:29:01+00:00,Closed,13114979,DAFFODIL-1560
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See the review or more details. The short of it is that when converting parse results to XML, we convert CR to LF, and we convert CRLF to LF. This means that we lose the information that the data used to contain CRLF. This is similar to how we lose that information with delimiters if someone uses NL, but it's slightly different since it is actual data. However, it's most user friendly and consistent with other XML technologies to have this behavior.

Perhaps we need an option to convert CRLF to somewhere in PUA so that this information can be maintained if someone needs it.",['beginner'],2016-06-28 14:17:48+00:00,,2020-08-03 14:25:48+00:00,Open,13114978,DAFFODIL-1559
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The fillByte method in RuntimeData.scala has an assert that the encoding is known. This assertion is preventing test_encoding_property_expression in edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingProperties from successfully roundtripping. This test uses a runtime calculated encoding and at some point the fillByte is accessed, which throws the assertion.

There are probably two changes necessary here:
# Turn fillByte into an Evaluatable that is dependent on encoding and pass it into the unparsers that might need it. This has the bonus that we can remove something from the RuntimeData (we probably want this as small as possible).
# This test doesn't actually need the fill byte, but the StringLengthUnparser gets it just in case it will need it. We should modify StringLengthUnparser (and anything else that uses fillByte) to only calculate it when it will be used.",[],2016-06-28 13:34:05+00:00,2016-06-30 18:46:01+00:00,2016-07-07 17:49:27+00:00,Closed,13114977,DAFFODIL-1558
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"When unparsing, if a complex parent element has a specified length, and the children element do not fill that space, then those bytes need to be skipped using the fillByte. This should happen in the SpecifiedLengthUnparserBase, but it was broken so was commented out. It was broken because skipping is bits similar to alignment in that you cannot do it until the absolute position is determined.

If you lookat OptionalWSPTermWithExplicitLength and OptionalWSPTermWithExplicitLength2, those test should round trip, but are currently disabled due to lack of this feature.",[],2016-06-27 19:13:16+00:00,2016-09-14 22:57:24+00:00,2016-11-02 16:27:47+00:00,Closed,13114976,DAFFODIL-1557
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Complex escape scenarios fail to round trip. See tests marked with roundTrip=""false"" in:
* edu.illinois.ncsa.daffodil.section07.escapeScheme.TestEscapeScheme
* edu.illinois.ncsa.daffodil.TresysTests",[],2016-06-27 17:43:49+00:00,2021-06-04 12:43:27+00:00,2021-06-04 18:55:55+00:00,Closed,13114975,DAFFODIL-1556
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See tests that have roundTrip=""false"" in namespaces.tdml. All of these tests should round trip, but the xml namespaces created in the infoset are incorrect. For example, the namespaces_qnames test result in the following infoset:
{code}
<e xmlns:ex2=""http://example.com/1"" xmlns=""http://example.com/1"">
  <len>5</len>
  <num>12345</num>
</e>
{code}
In this example, num should be NoNamespace because it's defined as a local element and elementFormDefault=""unqualified"", but because xmlns is defined in the infoset, it is in the ex2 namespace. This schema should instead look something like this:
{code}
<ex:e xmlns:ex2=""http://example.com/1"">
  <ex2:len>5</ex2:len>
  <num>12345</num>
</ex2:e>
{code}
Numerous other tests in the namespaces.tdml file exhibit simliar behaviors, and so roundTrip is set to false.",[],2016-06-24 18:39:29+00:00,2016-07-01 13:09:36+00:00,2016-07-18 13:40:16+00:00,Closed,13114974,DAFFODIL-1555
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If the array can have zero elements, then that should satisfy the need, as a zero-occurrance array is ""defaultable"" in some sense.

The other ""trick"" which is to make it an array of complex elements which themselves contain defaultable/OVC elements, may or may not work, and it's a hack.",[],2016-06-24 15:21:13+00:00,2018-10-23 13:47:04+00:00,2018-10-23 13:47:04+00:00,Closed,13114973,DAFFODIL-1554
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See test_hiddenGroupChoice2 in edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups

If roundTrip is enabled for that test, the output of unparse is ""145,2"", but the length of the data is 16 bits. This causes the subsequent roundtripping parse to fail. The length of the data should be 40 bits.",[],2016-06-21 16:23:05+00:00,2016-06-30 18:59:10+00:00,2016-07-05 16:56:33+00:00,Closed,13114972,DAFFODIL-1553
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"To reproduce, enable round tripping in test_AS000 edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups",[],2016-06-21 15:40:57+00:00,2016-07-01 20:34:23+00:00,2016-07-06 15:32:47+00:00,Closed,13114971,DAFFODIL-1552
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The following test suites in sections 15, 16, 23, and those not in a section do not round trip:
* edu.illinois.ncsa.daffodil.section15.choice_groups.TestChoiceGroupInitiatedContent
* edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestArrayOptionalElem
* edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElem
* edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions
* edu.illinois.ncsa.daffodil.unparser.TestEscapes
* edu.illinois.ncsa.daffodil.usertests.TestBacktracking",[],2016-06-16 19:52:13+00:00,2016-06-28 20:34:37+00:00,2016-07-18 13:10:44+00:00,Closed,13114970,DAFFODIL-1551
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The following test suites in sections 13 and 14 do no round trip:
* edu.illinois.ncsa.daffodil.section13.nillable.TestNillableNew
* edu.illinois.ncsa.daffodil.section13.nillable.TestNillableUnparse
* edu.illinois.ncsa.daffodil.section13.nillable.TestNillableUnparseNew
* edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberPropsUnparse
* edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups
* edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroupUnparse",[],2016-06-16 19:51:17+00:00,2016-06-28 19:47:27+00:00,2016-08-16 15:20:59+00:00,Closed,13114969,DAFFODIL-1550
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The following tests in sections 8, 10, 11, and 12 do not round trip:* 
* edu.illinois.ncsa.daffodil.section08.property_scoping.TestPropertyScoping
* edu.illinois.ncsa.daffodil.section10.representation_properties.TestRepProps
* edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingProperties
* edu.illinois.ncsa.daffodil.section12.delimiter_properties.TestDelimiterProperties
* edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindDelimited
* edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindExplicit
* edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern",[],2016-06-16 19:49:59+00:00,2016-06-28 19:44:59+00:00,2016-08-15 13:41:42+00:00,Closed,13114967,DAFFODIL-1549
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The follow tests suites in sections 6 & 7 do not roundtrip:
* edu.illinois.ncsa.daffodil.section06.entities.TestEntities
* edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces
* edu.illinois.ncsa.daffodil.section07.assertions.TestAssertions
* edu.illinois.ncsa.daffodil.section07.defineFormat.defineFormatTests
* edu.illinois.ncsa.daffodil.section07.discriminators.TestDiscriminators
* edu.illinois.ncsa.daffodil.section07.escapeScheme.TestEscapeScheme
* edu.illinois.ncsa.daffodil.section07.variables.TestVariables",[],2016-06-16 19:48:37+00:00,2016-06-28 14:29:09+00:00,2016-08-16 13:49:02+00:00,Closed,13114966,DAFFODIL-1548
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The following test suites do not round trip:
* edu.illinois.ncsa.daffodil.section02.processing_errors.TestProcessingErrorsUnparse
* edu.illinois.ncsa.daffodil.section02.validation_errors.TestValidationErr
* edu.illinois.ncsa.daffodil.section05.facets.TestFacets
* edu.illinois.ncsa.daffodil.section05.simple_types.TestRuntimeCalendarLanguage
* edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes2
* edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypesUnparse",[],2016-06-16 19:47:35+00:00,2016-06-27 14:18:41+00:00,2016-08-16 17:00:43+00:00,Closed,13114965,DAFFODIL-1547
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In some tests, we have arrays that appear inside a hidden group. When the array combinator unparser runs, we get an invariant error:
{code}
Invariant broken: event.isStart.&&(event.node.isInstanceOf[edu.illinois.ncsa.daffodil.processors.DIArray])
{code}
However, because the array is in a hidden group, we are not going to get a DIArray event, so this fails. Need to determine what the correct behavior is.

Tests that exhibit this behavior can be found in:
* edu.illinois.ncsa.daffodil.TresysTests3
* edu.illinois.ncsa.daffodil.usertests.TestBacktracking",[],2016-06-16 19:37:24+00:00,2017-08-18 13:40:07+00:00,2017-08-19 15:06:45+00:00,Closed,13114964,DAFFODIL-1546
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If a choice is inside a hiddenGroupRef it we will not be able to determine which branch to unparse. This is because the branch to unparse is determined by which elements appear in the infoset, but no elements will appear in the infoset. How to we resolve this issue?

Issues that cause this failure during roundtripping include:
* edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups",[],2016-06-16 15:04:52+00:00,2016-06-27 13:59:41+00:00,2016-08-16 17:37:42+00:00,Closed,13114963,DAFFODIL-1545
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Many tests are missing the dfdl:textTrimKind and dfdl:textPadKind properties, which is preventing them from roundtripping. Add these properties where missing so we can determine what actual changes are needed to get all tests to round trip.",[],2016-06-16 13:37:29+00:00,2016-06-16 19:55:54+00:00,2016-06-16 19:55:54+00:00,Closed,13114962,DAFFODIL-1544
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Many tests, mostly in edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions, fail with Invariant broken: state.hasInfoset. Investigate and fix.",[],2016-06-16 13:33:40+00:00,2016-06-16 14:28:41+00:00,2016-08-16 18:40:46+00:00,Closed,13114961,DAFFODIL-1543
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Say we have something like:
{code}
<xs:element name=""foo"" type=""xs:hexBinary"" dfdl:occursCountKind=""parsed"" dfdl:separator=""multi-byte utf-8 character"" dfdl:encoding=""UTF-8"" />
{code}
We currently don't allow this. But perhaps this should be allowed? Delimiters would be scanned using the specified encoding, and then the data up to that encoding would be converted to hexBinary data. Does it make sense to allow someone to specified a non byte size encoding. For example, a multi-byte UTF-8 character, or perhaps even non-byte-size encoding. If we allow non-byte-size encodings, is it then an error if the data consumed does not have a bitlength divisible by 8?

The specification is not clear on how this should be handled. Right now, we just require that the encoding by ISO-8859-1 for delimited hex binary.",[],2016-06-15 18:23:43+00:00,,2021-01-07 20:57:47+00:00,Open,13114960,DAFFODIL-1541
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"It looks like only about half the data is parsed, and the rest is skipped due to dfdl:length on a complex element. It unparses as expected, but the data is now much shorter and so it does not round trip correctly. We need to determine if our schemas for the message type are wrong, if the documentation from which the schemas were derived is wrong, or if the tool creating the example file is broken for this message type.

I appears that the schema does correctly mtach the documentation, so it's likely either a documentation problem or a tooling problem.",[],2016-06-15 13:55:14+00:00,2016-07-29 14:48:41+00:00,2016-08-10 11:31:33+00:00,Closed,13114959,DAFFODIL-1540
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We use ULong in two different ways (possibly more, but this is about these two)

We use them as values coming out of data parsing or going into data unparsing. In this case, all 64 bits are used, and we don't care if the underlying stored Long integer is negative or positive.

We also use them as bit offsets/positions into the data stream. This assures that they are always non-negative when created.

However, the math that computes bit offsets calls ULong.longValue a great deal, then operates on the Long elements.

This is technically incorrect. Now, one can argue that it won't matter because you need an offset bigger than 2^63 ... before you get a ULong where the underlying Long would be negative.

But, this is the stuff of security holes. E.g., a data format can store a length that results in a bit length > 2^63. No such data can exist, but some prefix header field can be created that suggests that much data.

And then who is to say that something won't break?

So, the right thing here is for arithmetic on ULong to work directly (I'm not sure why it doesn't. There appear to be operators defined.) Or for a method other than ULong.longValue be used when what we are assuming we're getting back is a non-negative Long. 

We should scrutinize all calls to ULong.longValue and see if they can/should be changed to ULong.asPosition or ULong.asLength, etc. methods that express the intent, or the conversion can just be avoided and math done directly on ULong values.",[],2016-06-14 22:00:11+00:00,,2021-01-07 20:55:21+00:00,Open,13114958,DAFFODIL-1539
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See review comment for more details.

The jist of it is that lengthKind=""pattern"" does not have a specified length when unparsing, but we have a specified length unparser to calculate the length. That shouldn't be necessary.",[],2016-06-14 20:25:29+00:00,2016-06-28 19:45:12+00:00,2016-08-11 17:14:15+00:00,Closed,13114957,DAFFODIL-1538
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,See review comment.,[],2016-06-14 20:24:06+00:00,2021-01-07 20:54:07+00:00,2021-01-07 20:54:07+00:00,Closed,13114956,DAFFODIL-1537
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,We need to make sure we are properly cleaning up coroutines related to suspendable expressions and not leaking threads. Some places could use comments to ensure this is the case and describe what parts of the code to  not mess with to ensure no one accidentally breaks it in the future.,[],2016-06-14 20:19:29+00:00,2016-07-26 17:46:20+00:00,2016-10-11 13:38:04+00:00,Closed,13114955,DAFFODIL-1536
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"There are some cases in the PCAP schema where outputValueCalc will return -1. These are really error cases, and daf:error() or fn:error() should really be used instead.",[],2016-06-14 20:14:52+00:00,2020-12-16 21:29:27+00:00,2020-12-16 21:29:27+00:00,Closed,13114954,DAFFODIL-1535
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Because the point of Evaluatable things is that this static/dynamic distinction isn't needed. 

But for LengthEv, even if it is a constant, if the encoding is variable-width the length might not be static. Darn UTF-8 is such a pain in the butt. 

Add a comment that this is why we need this split, and that LengthEv is not sufficient by itself. 

That is, assuming my reasoning here is correct.

But also, consider the comment in ElementBaseGrammarMixin.scala. Maybe we just need EffectiveLengthEv and then we don't need this static/runtime split in the combinators/primitives?",[],2016-06-14 20:12:45+00:00,2016-09-02 19:41:44+00:00,2016-10-11 13:37:17+00:00,Closed,13114953,DAFFODIL-1534
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,See review comment for details.,['beginner'],2016-06-14 20:11:43+00:00,2020-09-30 11:42:55+00:00,2020-11-20 17:57:08+00:00,Closed,13114952,DAFFODIL-1533
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,See review comment for details.,[],2016-06-14 20:10:37+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114951,DAFFODIL-1532
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This way, the checks occur at compile time if possible, or runtime if necessary.",[],2016-06-14 20:09:26+00:00,2019-06-21 11:35:02+00:00,2021-05-20 20:03:12+00:00,Closed,13114950,DAFFODIL-1531
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"The name nextParentElements is not clear, and it contains a comment that appears to be incorrect. Determine what this method should do, and add comments/rename to make it more clear what it's purpose/contract is.",[],2016-06-14 20:07:42+00:00,2021-01-07 20:53:01+00:00,2021-01-07 20:53:01+00:00,Closed,13114949,DAFFODIL-1530
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"There's a lot of hairy logic with putBitBuffer, especially related to fragment bytes, endianess and bitorder. We need to add unit tests to convince ourselves that putBitBuffer is correct.",[],2016-06-14 18:34:14+00:00,2017-04-06 19:34:50+00:00,2017-07-27 12:51:04+00:00,Closed,13114948,DAFFODIL-1529
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"See comment in review. The jist of it is that there are places where we know the length, but it's specificed in characters and since characters can be variable width, we do not really know the length. We should add a new evaluatable (EffectLengthEv) that takes into account things like charset.",[],2016-06-14 18:15:05+00:00,,2021-01-07 20:52:18+00:00,Open,13114947,DAFFODIL-1528
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Comments say this code is duplicated from elsewhere and should be consolidated. This code recomputes something to avoid a scratchpad in the UState to save the value for reuse. But generally it would be better to chase down the duplication and fix it that way.,[],2016-06-14 17:59:49+00:00,2021-01-07 20:50:35+00:00,2021-01-07 20:50:35+00:00,Closed,13114946,DAFFODIL-1527
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"see comments in Runtme.scala about setting the bit position.

""This will make it impossible to repeatedly call unparse so as to incrementally add unparsed data to the same data stream. That's something we do want eventually.""",[],2016-06-14 17:52:01+00:00,2019-08-05 12:02:21+00:00,2021-05-18 14:38:41+00:00,Closed,13114945,DAFFODIL-1526
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The way we currently do it, in NodeInfo.scala, is to use the DPath conversion. This function takes a dstate, and we just pass in null. This works since the conversion doesn't actually use dstate, but if it eventually does, things will break. We need to determine if there's a better way to handle this, or perhaps move the conversion code out of DPath and have DPath reference it.",['beginner'],2016-06-14 17:29:15+00:00,2019-06-20 23:12:09+00:00,2021-05-20 20:01:16+00:00,Closed,13114944,DAFFODIL-1525
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Hidden groups still remain in an infoset tree. When unparsing using the InfosetTree, we must skip hidden groups and not create events for them, or their children.",[],2016-06-14 16:30:17+00:00,2018-08-16 15:18:18+00:00,2018-08-16 15:18:26+00:00,Closed,13114943,DAFFODIL-1524
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"That is very clean looking. It does still re-tokenize the thing 3 extra times.
See pcap.dfdl.xsd with the unparsing changes.

We can propose adding fn:tokenize to DFDL. The problem of sharing sub-expressions usefully remains.",[],2016-06-14 15:52:18+00:00,2018-10-23 13:52:29+00:00,2018-10-23 13:52:29+00:00,Closed,13114942,DAFFODIL-1523
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See comment at line 167 of Grammar.scala. There is confusion in the code about when something should fail (hasNoUnparser) vs. providing a dummy unparser, just to allow tests to pass, vs. providing a recognizable unparser that can be optimized out if found in a model group, etc.",['beginner'],2016-06-14 15:29:05+00:00,,2021-01-07 20:48:22+00:00,Open,13114941,DAFFODIL-1522
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In message K07.1, it appears that we are switching the character set from 7-bit ASCII to 8851 in order to parse hexBinary data. This change works expected, and after the hexBinary is parsed, the encoding is changed back to 7-bit ASCII. However, following that change, the encoding is incorrectly set back to 8851, apparently with a call to assignFrom(). This means following elements are incorrectly parsed with the 8851 encoding instead of the 7-bit ASCII encoding that they should be using, causing a failure.",[],2016-06-08 15:26:35+00:00,2016-06-15 18:41:40+00:00,2017-07-31 20:37:40+00:00,Closed,13114940,DAFFODIL-1521
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This needs clarification in the DFDL spec from the DFDL workgroup.

However,.... it seems pretty clear that an outputValueCalc expression needs to be able to refer to a variable (otherwise you can't use variables to decouple parts of schemas from each other.)

And the variable needs to be able to be unbound until the future existence of things that give it a value. 

As an example, one could have a length field in a header.

One wants this lengh field to be computed based on the length of some body that comes after the header, and where the header's DFDL schema does not reference the body DFDL schema. They are separate schemas. 

To do this one should use variables. The header needs a length from the body, then that length should come from a variable, which variable being set by the body. Since the body comes later, the variable needs to be set after the header OVC element has been encountered. So we have to be able to evaluate an OVC expression and block waiting for the variable to get its value.",[],2016-06-07 21:45:22+00:00,2021-03-16 13:35:40+00:00,2021-03-18 16:37:46+00:00,Closed,13114939,DAFFODIL-1520
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently, if you have an expression for occursCount, and that expression results in a value greater than maxOccursBounds (which defaults to 1024), then we currently throw a PE/UE. When parsing, this can result in backtracking for a non-obvious reason. The fact that maxOccursBounds was exceeded may not even be reported.

Instead, it seems like this should instead be a SDE so that the error is reported immediately and the user can either modify a tunable to increase the maxOccursBOunds, or rework the schema to not need such a large array.",[],2016-06-07 21:35:32+00:00,2018-08-15 17:15:15+00:00,2018-10-08 17:06:22+00:00,Closed,13114938,DAFFODIL-1519
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A complexType element can have an interior element with a non-unit alignment. 

This means that the length of that alignment region within the element depends on the alignment of the overall element.

That depends on the starting position of the overall element. 

Hence, there is a class of complexType elements which you cannot determine the dfdl:contentLength of, until you know their starting position in the data stream. 

(The starting position in the data stream for unparsing is the absBitPos0b - absolute bit position zero based.)

So you have to be able to block, and not compute the contentLength of something until you know its starting position. 

Hence, one must be able to block expression evaluation on an ""infoset event"" which determines the start position of an element. So this is one more thing that an expression can block on. That is, unparsing must be able to block (and split the data output buffer into current and subsequent, and continue unparsing the subsequent) on whether the absBitPos0b is known yet or not.

There is a deadlock scenario when this event would never occur. 

An OVC element is variable length (e.g., is a text number, so its length depends on the number of digits needed to represent the value)

The value of the OVC element is the dfdl:contentLength of a complexType element later in the infoset.  This complex type element has an interior element with a non-unit alignment.

The start position of the complexType element depends on the length of the OVC element (how many digits it is). Unless we know the start position we cannot determine the size of the interior alignment region; hence, we cannot determine the length of the complex type element.

But the number of digits in the OVC element value depends on the length of the complexType element. 

So we're deadlocked. 

This is an obscure corner case and unlikely to appear in real formats, it exists as a corner case due to the composition properties of the DFDL language, where an OVC element can store the content length of a subsequent complex type element, and this can be expressed without consideration as to the specifc types or representations of the OVC element or of the complex type element being referenced.",[],2016-06-07 21:26:55+00:00,2016-07-26 17:46:09+00:00,2017-08-02 14:04:20+00:00,Closed,13114937,DAFFODIL-1518
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This is an unparser corner case.

If you take the dfdl:contentLength(....) of an element of complex type, then if that complex type contains itself an element with dfdl:outputValueCalc, where the length of this dfdl:outputValueCalc element is dependent on the data value that needs to be computed, well then taking the dfdl:contentLength is not possible until the dfdl:outputValueCalc element's value has been computed so that its length can be computed and aggregated with the rest of the complex element.

Hence, evaluation of the dfdl:contentLength(...) must be suspended until the dfdl:outputValueCalc element's length has been determined.

This becomes another thing about the daffodil infoset than an expression can block on the evaluation of. An expression can be blocked waiting for the contentLength of an element to be determined.",['dev-verify'],2016-06-07 20:55:15+00:00,,2021-01-19 20:58:06+00:00,Open,13114936,DAFFODIL-1517
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Note that there is DFDL workgroup discussion about the implications of asking for length measured in units of 'characters' when the underlying item is not text, or not all text (complex types). 

There is no issue when the character set encoding is fixed width. One simple takes the data size in bytes/bits and does the math to convert to characters.

The problem is when there is a variable-width encoding like UTF-8. Measuring length in characters in essence requires unparsing the data into those characters and counting how many, or perhaps unparsing the data to bits/bytes and then parsing it as characters and counting how many. 

In either case, unless there is a uniform character encoding the behavior is confusing. Other places in DFDL where data that is not necessarily text may get interpreted as text are in lengthKind 'pattern', and in the pattern asserts and pattern discriminators used in parsing.",[],2016-06-07 20:32:37+00:00,,2018-09-13 14:04:05+00:00,Open,13114935,DAFFODIL-1516
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See https://redmine.ogf.org/issues/314

New DFDL functions:

dfdl:checkRangeInclusive($node, $val1, $val2)
dfdl:checkRangeExclusive($node, $val1, $val2)",['beginner'],2016-06-07 20:20:19+00:00,,2021-01-07 20:42:57+00:00,Open,13114934,DAFFODIL-1515
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See https://redmine.ogf.org/issues/314

The XPath intersect operator and except operator are to be included in the DFDL expression language.",[],2016-06-07 20:18:43+00:00,2020-10-21 19:19:28+00:00,2021-05-18 10:24:44+00:00,Closed,13114933,DAFFODIL-1514
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"So this is a wierd thing. 

XPath doesn't have ""true"" or ""false"", but rather these annoying functions that return those boolean values, so fn:true() and fn:false() are the way you create an expression with constant value true or false. I find this strange personally. But DFDL expressions follow XPath in this convention.

Problematic is that as the default value in a XML schema, however, true and false ARE the boolean values.

Hence, this inconsistency:
{code}
<element name=""myBoolean"" default=""true"" ..../>

<dfdl:defineVariable name=""myBooleanVar"" defaultValue=""{ fn:true() }"" />
{code}
I find this most annoying. Why XPath left out literal constants for true/false I don't know, but there it is.

Daffodil should issue a diagnostic that specifically looks at expressions for true/false and specifically suggests need for fn:true() or fn:false() calls instead.

(Right now you get a diagnostic about true or false not being a valid path step..... which is accurate, but people are very unlikely to have actual elements named true or false so the word false is unlikely to mean the same thing as ""./false"". Far more likely it's a mistake where fn:false() is what was intended.",[],2016-06-07 15:58:42+00:00,,2021-01-07 20:41:01+00:00,Open,13114932,DAFFODIL-1513
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A common mistake is to move short-form annotations with the dfdl: prefix from elements into the dfdl:format annotation. But then one forgets to remove the prefix dfdl: since the attributes of the dfdl:format annotation are not prefixed. So this is an error: {code}
<dfdl:format dfdl:lengthKind=""delimited"" ..../>
{code}
When what was intended is{code}
<dfdl:format lengthKind=""delimited"".... />
{code}
Daffodil should issue a specific diagnostic whenever it finds dfdl: prefixed attributes in the annotation elements dfdl:format, dfdl:element, dfdl:simpleType, dfdl:sequence, dfdl:choice, etc. 

It should point out specifically that the author probably wanted to remove the prefix dfdl:",['beginner'],2016-06-07 15:53:38+00:00,,2021-04-13 18:41:07+00:00,Reopened,13114931,DAFFODIL-1512
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"PCAP schema was published to github DFDLSchemas.

We also have it in the daffodil-examples directory, where changes to support unparsing have been made.

These should be kept consistent.",[],2016-06-03 20:46:25+00:00,2016-09-07 15:10:18+00:00,2016-10-11 13:17:38+00:00,Closed,13114930,DAFFODIL-1511
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A big improvement for these reports would be to make them ""self-noise-eliminating"", so unlike the report attached, one could eliminate all the red-lights that are about deltas that are ""in the noise"".

We want to attract attention (i.e., red-light) deltas that represent a statistically significant drop in performance. This can be a drop relative to prior performance of this branch, or a drop relative to prior performance of a baseline release.

To do this you need variance-based statistics like Z-score, which is based on standard deviation. Z-score means ""how many standard deviations away from the mean is this value."" Z-score's between -1 and 1 imply ""it's ordinary variation, due to noise most likely"". Z-score outside of -1 to 1 implies ""it's significant. take a look.""

We need the mean and standard deviation of (previousVal - baselineVal). We can then compute (currentVal - baselineVal), and if its z-score is < -1.0, then we would red-light the value - it means there is a statistically significant degradation in performance (relative to the baseline) due to this commit's code changes. This would only red-light changes due to this code commit. If a test performance is relatively unchanged day to day, but always slow relative to the baseline, this would not red-light that day's delta.

We probably also want to red-light if there is a general degradation in performance even for tests that are running faster than the baseline, so we would also want mean and standard deviation of previousVal, and similarly red-light if the delta z-score (relative to previousVal) is < -1.0.

And we want to red-light (or pink-light) tests that are simply slower than the baseline by a statistically significant amount as an ongoing trend. So we would include the currentVal in the mean and stdDev(previousVal), and for mean and stdDev(previousVal - baselineVal). Like everything else here, the assumption is these values are time taken, so lower is better/faster. If the mean of previousVal-baselineVal is negative by more than the stdDev(previousVal - baselineVal), then the trend is that this test is slower than the baseline by a significant amount on an ongoing basis, so we should ""pink light"" the test results. That particular day's run might or might not have reflected a statistically significant improvement or degradation, but the trend is still below the baseline by a statistically significant amount.

This takes all the noise variability out of the color highlighting.

Example:
baseline is 200, previous is 150, current 139. Mean of prev-baseline is 175, and std-dev of prev-baseline is 12.

So, current - prev-baseline is -36. Z-score of that is -3.0 which is < -1.0. So red-light goes on.

Example 2:
Current is 120. Mean of previous is 142, standard deviation of previous is 12.
Delta from mean is -22. zscore is -22/12 = -1.83 which is < -1.0, so we red-light this because it represents a statistically significant drop in performance from the average for that test.

Example 3:
Current is 120, folding that into mean and std deviation of (previous - baseline) gives mean -20 stdDev of 10. That means the test is generally 20 units slower than the baseline. The z-score of -20 relative to stdDev 10 is -2.0, so we would ""pink light"" the test, as generally being slower than the baseline on an ongoing basis.

The inverse of these - statistically significant improvements, could generate green-light, (or light-green).

To compute this you need at least 12 points of history so that you can have a meaningful mean and standard deviation to compute from.",[],2016-06-01 17:20:56+00:00,2021-01-07 20:38:53+00:00,2021-01-07 20:38:53+00:00,Closed,13114929,DAFFODIL-1510
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"The current 7-bit charset accepts any character code that fits in 7 bits (i.e. 0-127). However, the file specification that led the creation of the 7-bit charset does not allow for most of the non-visible characters. The codes that are not allowed are 0-9, 11, 12, and 14-31. We either need to modify our 7-bit encoder and decoder to not allow these character codes and return a malformed error, or we should create a new 7-bit charset specific to this file format and it's 7-bit restrictions.",[],2016-05-24 16:47:56+00:00,2021-01-07 20:37:57+00:00,2021-01-07 20:37:57+00:00,Closed,13114928,DAFFODIL-1509
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"MIL-STD-6016 requires at least 1, and possibly another different 5-bit encoding. These take 22 alpha characters (a-z without I and O, and without two other letters, Tbd), and combines them with 0-9. One(1) and ""I"" are considered the same character, and zero(""0"") and ""O"" are considered the same. 

The mappings of character code points to characters may be different - e.g., one may have digits 0-9 in values 0-9, followed by the alpha characters. Others may have it the other way round.

These encodings would be X-DFDL-ASCII-5-Bit-.... something or other.  They would be bit aligned, and use bit-order least significant bit first. 

Since we will have 7, 6, and 5 bit encodings it is natural to add 4 (hexadecimal), and 3 (octal), and 1 (binary). Which might be very convenient for some purposes. There are formats where, for example a number is stored as 5 octal digits. If we can use octal as a character set encoding for 3-bit-wide character codes, then this becomes a textStandard number in textStandardBase of 8.",[],2016-05-24 14:50:20+00:00,2017-02-08 19:21:38+00:00,2017-07-31 18:33:35+00:00,Closed,13114927,DAFFODIL-1508
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"This ticket exists pretty much to document that this feature isn't being implemented.
{code}
  //
      // There are a whole bunch of situations where we know the length of an OVC
      // element without having to know the value.
      //
      // We restrict OVC so that we know its length without having to know the value
      // so that we can skip forward past the OVC element, and we know the absolute bit position
      // of the thing following it. This lets us deal with alignment regions in that when
      // we try to unparse an alignment region, we can answer the question of how we're aligned
      // currently, so we can determine how many bits to skip.
      //
      // If we allow OVC elements to be variable length where the length depends on the value,
      // then as we unparse forward, if we encounter the need to insert an alignment region, well
      // we don't know the alignment until we know the variable length of the preceding OVC
      // element, so we have to wait for that expression to get its value. But that value
      // may not be forthcoming unless we can continue to unparse. So we have to suspend inserting
      // the alignment region, split off a new buffering dataOutputStream, and come back
      // to filling in the alignment region once we have the length of the OVC element.
      //
      // This is all very complex. For now we want the OVC element to be such that
      // we can determine its length without the value.
      //
      // TODO: add recognition of more cases where we know the length without the value
      // or implement the complex splitting/buffering for alignment after a variable-length
      // OVC element. (This seems obscure enough that it may never come up in real formats.)
{code}",[],2016-05-19 18:55:48+00:00,2016-07-25 16:24:31+00:00,2016-11-16 13:17:05+00:00,Closed,13114926,DAFFODIL-1507
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Currently, DFDL expressions are evaluated at compile time in order to see if they fail, or they produce a constant value.

If the expression contains a variable reference to a variable that has a default value, the evaluation will potentially succeed, using the default value of the variable, and end up with the expression being treated as a constant even though the schema wants to set the variable subsequently.

All variable referencing must, therefore, be considered ""non-constant"". The value of a variable can never be taken at compilation time. 

Also, compiling an expression cannot read the default value of a variable, as once the default has been read, a subsequent setVariable will fail.

This may be the reason the EDIFACT schema doesn't work.",[],2016-05-18 21:08:03+00:00,2016-05-18 21:25:03+00:00,2016-05-18 21:25:35+00:00,Closed,13114925,DAFFODIL-1506
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"test test_timeZoneFormats7 fails running ""round trip"" on the bamboo automatic build server.

However it passes on all developers workstations.

The suggested cause is that Daffodil unparsing is using the ICU libraries, and we're not controlling all the parameters of time-zone behavior, and that is leaving some unparser behavior to be inherited from the installation. 

Since the NCSA bamboo server is in Central Time Zone (US), that's different from the Tresys developers all of whom are Eastern Time Zone (US). 

This is a bug, because DFDL processors are not supposed to have any behavior that depends on the installation locale, but rather all behavior depends on the DFDL schema and external variables that schema provides. 

The installation locale for the DFDL processor can affect error-message language/locale, but not what happens in parsing or unparsing of data. 

So we need to track down what is not being adequately specified here, and control that.",[],2016-05-16 20:41:00+00:00,,2021-01-27 19:25:31+00:00,Reopened,13114924,DAFFODIL-1505
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Yes. In general we should put in a checker that insists what is added to, and taken from the infoset is only the set of specific types we want. 

For example, I found that hexBinary was being put into the infoset as a string of hex-digit characters, not as an Array[Byte]. At least for some of the forms of hexBinary. This is now only Array[Byte] (I think)

We have to decide what the set of things is. For example, I have been trying to use java.lang.Number and subtypes thereof, but both java.lang.BigInteger and scala.BigInt are subtypes of java.lang.Number. Similarly decimal. For calendars are we using the wrapped DFDLCalendar, or raw underlying one?",[],2016-05-16 17:23:58+00:00,2016-09-16 17:43:38+00:00,2017-07-31 18:47:05+00:00,Closed,13114923,DAFFODIL-1504
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When using dfdl:outputValueCalc, a very common idiom is to create temporary locations that evaluate when unparsing, but which have no representation in the data.

This is typically done by dfdl:length=""0"" dfdl:lengthKind=""explicit"".

If you leave off the dfdl:lengthKind=""explicit"" however, and the surrounding format has dfdl:lengthKind of ""implicit"", then the dfdl:length=""0"" is just silently ignored.

Similarly if dfdl:lengthKind=""delimited"" or ""pattern"" again the dfdl:length property will be ignored.

This should either be an SDE, or SDW (schema definition warning)",[],2016-05-13 18:17:20+00:00,2021-01-21 18:07:55+00:00,2021-01-26 12:33:44+00:00,Closed,13114922,DAFFODIL-1503
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"There are a number of tests in SimpleTypes.tdml that have roundTrip=""false"" so that they only run parse.

They fail if you round trip them because unparsing doesn't work right, or the tests are somehow problematic (numeric precision issues with parsing to/from binary for floats/doubles, also a number of date/time-related bugs.

There are roughly 39 of these.

Tests ""decimal_text"" and ""dateTimeText"" are two of these.  Search for roundTrip=""false"" to find them. Note that there are also some tests that won't round trip due to lack of unparser support for binary bigInt and binary decimal. Those are JIRA DFDL-1501.",[],2016-05-13 03:37:50+00:00,2016-08-15 16:16:00+00:00,2016-08-18 14:33:17+00:00,Closed,13114921,DAFFODIL-1502
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"These parse, but do not unparse (round trip) due to lack of bigDecimal/bigInt binary unparser support.

test_nonNegativeInteger_bin(edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes)
test_integer_binary_02(edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes)
test_decimal_binary_06(edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes)
test_nonNegativeInteger_bin3(edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes)
test_integer_binary(edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes)",[],2016-05-13 03:34:00+00:00,2017-04-05 11:54:29+00:00,2017-07-31 18:51:54+00:00,Closed,13114920,DAFFODIL-1501
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"When we get the error - Timeout building Daffodil on ""Host (RHEL6 x64 12 cpu 96GB)"" the parsers then fail to build correctly. 

I think this is a timing issue. When the CLI needs to be rebuilt, it does that first and then rebuilds the parsers. If this is taking too long, the VM is stopped and put back in the queue to try again. When it tries that machine again, it shows that the CLI has already been built, so it does not try to rebuild the parsers. Any parsers that weren't built the first time around, will not exist until the CLI needs to be rebuilt again, or they are created manually.

I'm increasing the timeout for now but this needs a real solution as well. The harness also needs to be updated to send an error message when a parser fails to build. Currently the error we get is for running a test that is trying to use a parser that doesn't exist.",[],2016-05-12 21:38:11+00:00,2020-12-16 20:59:22+00:00,2020-12-16 20:59:22+00:00,Closed,13114919,DAFFODIL-1500
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The USASCII 7-bit encoder was a quick and dirty implementation, and doesn't detect some errors like underflow/overflow. Need to rewrite to improve performance and error detection.",[],2016-05-11 14:17:31+00:00,2016-05-17 17:45:25+00:00,2016-09-28 20:59:59+00:00,Closed,13114918,DAFFODIL-1499
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"from Jason Ostermann.

Our core lessons learned from working with IBM DFDL and Daffodil are:
..... (items 1-3 omitted)
4) Daffodil ""pretty prints"" data by materially changing the content of
fixed format fields.

We need to insure that our pretty printing of output does't insert whitespace or otherwise modify field values other than things we must do to conform to XML Infoset, such as replacing NUL with &E000; and such.  Pretty printing generally looks at line lengths and inserts new lines. This can change the length of strings, for example. 
{code}
<f>adfa987987asdf345345345sdfadsfsadfad</f>
{code}
might come out as
{code}
<f>
  adfa987987asdf345345345sdfadsfsadfad
</f>
{code}
and that adds several characters to the string.  Our pretty printing should never do this to simple type elements. We can insert whitespace between simple elements and between complex elements, but not within simple elements. 

Some tools and pretty printers seem to only preserve whitespace if one has CDATA bracketing like
{code}
<f><![CDATA[adfa987987asdf345345345sdfadsfsadfad]]></f>
{code}
but inserting these CDATA wrappers around every xs:string value makes the XML representation of the infoset quite clumsy, unexpected, etc. 

We'd be better off just removing pretty printing, or changing the default to off, and having an option to turn it on.",[],2016-05-05 17:44:38+00:00,2016-06-03 19:30:10+00:00,2016-09-05 21:21:36+00:00,Closed,13114917,DAFFODIL-1498
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"________________________________________
From: Stephen Lawrence
Sent: Wednesday, May 04, 2016 2:02 PM
To: Mike Beckerle
Cc: Stephen Lawrence
Subject: [PATCH 1/1] Fix unparsing thread leak

From: Pat McClory <pat@quarksecurity.com>

When unparsing XML the producer thread of the Coroutine calls setNext(), which unblocks
the consumer thread, and then it blocks:

    val res = waitForResumeAny // blocks until it is resumed

The consumer (the unparser), never unblocks this thread.
So as more and more files are run through the unparser more and more blocked
threads are created.  Eventually on Linux this leaves the system in an unusable
state (as the kernel can no longer allocate more pids)...

check at /proc/pid/task/ while running many files through the unparser, without
this patch it will constantly grow throughout the execution, with it it stays
constant.

Fix is to just let the producer finish ""producing"" so the producer's body()
method returns, and the thread exits.  Maybe could short-circuit this.
---
 .../main/scala/edu/illinois/ncsa/daffodil/processors/Runtime.scala  | 1 +
 .../edu/illinois/ncsa/daffodil/processors/unparsers/UState.scala    | 6 ++++++
 2 files changed, 7 insertions(+)

diff --git a/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/Runtime.scala b/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/Runtime.scala
index 83e9b98..0aa364a 100644
--- a/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/Runtime.scala
+++ b/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/Runtime.scala
@@ -308,6 +308,7 @@ class DataProcessor(val ssrd: SchemaSetRuntimeData)
       unparserState.dataProc.get.init(ssrd.unparser)
       unparse(unparserState)
       unparserState.evalSuspendedExpressions() // handles outputValueCalc that were suspended due to forward references.
+      unparserState.infosetFlush
       unparserState.unparseResult
     } catch {
       case ue: UnparseError => {
diff --git a/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/unparsers/UState.scala b/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/unparsers/UState.scala
index f3a3f24..36e3e1f 100644
--- a/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/unparsers/UState.scala
+++ b/daffodil-runtime1/src/main/scala/edu/illinois/ncsa/daffodil/processors/unparsers/UState.scala
@@ -143,6 +143,12 @@ class UState(
     m.get
   }

+  def infosetFlush = {
+     while (advance) {
+        advanceAccessor
+     }
+  }
+
   def isInspectArrayEnd = {
     if (!inspect) false
     else {
--
2.5.5",[],2016-05-04 19:54:51+00:00,2016-05-16 13:17:52+00:00,2016-05-30 20:07:23+00:00,Closed,13114916,DAFFODIL-1497
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"And additionally, get rid of cases where we catch ParseErrors. Theoretically, all parsers should just call setFailed if there was an issue, and parses should check pstate.status to see if a child parser failed, and act accordingly. Throwing and Catching parse errors shouldn't really be necessary. We think maybe this was needed for Saxon, but that is gone. Need to determine if anything else actually relies on this behavior.

Note that in addition to making things more consistent, getting rid of withParseErrorThrowing could maybe have a performance boost, since that actually allocates an anonymous function.",[],2016-05-04 14:32:35+00:00,2017-07-06 20:02:37+00:00,2017-07-27 11:32:41+00:00,Closed,13114915,DAFFODIL-1496
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,See comments in DFDL-1483 for details.,[],2016-05-03 19:44:07+00:00,2016-05-04 15:25:46+00:00,2016-05-13 23:55:23+00:00,Closed,13114914,DAFFODIL-1495
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,I suspect alot of of theset get* functions can go away. We probably just need a NumberFormatterEv that takes all these other properties as dependencies. Could be done as part of getting rid of the CachedDynamic.,[],2016-05-03 19:37:52+00:00,2021-01-07 20:32:54+00:00,2021-01-27 23:04:59+00:00,Closed,13114913,DAFFODIL-1494
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See the linked review comments for more details. The jist of it is that when an %ES; is in a delimiter, the associated DFA is not getting compiled correctly, and it actually will match a literal %ES;. There is code in DelimiterParser.scala that inefficiently looks for ES when a match isn't found, and accepts it as an empty match. Instead, the DFA scanner should be returning the %ES; as a successful match in the parse results, and then DelimiterParser.scala can use the same logic to determine which DFA matched. This would allow us to get rid of the hasES functions and be more efficient.

Note that some things may be tricky because when scanning for a delimiter, we have to ignore the %ES;, since they'll match anything. We may need new iterators that ignore these.",[],2016-05-03 15:57:55+00:00,2019-07-02 12:37:49+00:00,2021-05-20 12:33:54+00:00,Closed,13114912,DAFFODIL-1493
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"This was a pain in the butt to figure out.  If you want to see what I'm talking about with it not telling you where the error is, try running the test specified in DFDL-929.  It won't give you a stack trace or exception.  You end up having to step through/into it to see where the exception is happening and that it appears to be a ControlThrowable.  Unfortunately, NonLocalReturnControl does not include a stack trace.  So there's no specifics on what is directly causing it.

I ended up having to use the following in the terminal to figure out what the problem was:
{code}SBT_OPTS=""-Dscala.control.noTraceSuppression=false"" sbt ""debug:testOnly edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedDataDebug -- --tests=test_alignmentTerminatorBitSkip""{code}

You can force it to print out a stack trace to bypass the fact that the NonLocalReturnControl suppresses it.

The link I included in the objectives above tells you about the particular issue and how we should really not use return.
{quote}When a function value containing a return statement is evaluated nonlocally, the computation is abandoned and the result is returned by throwing a NonLocalReturnControl[A]. {quote}",['beginner'],2016-04-29 16:09:05+00:00,,2021-01-07 20:30:22+00:00,Open,13114911,DAFFODIL-1492
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If you do something like the following:

{{$ sbt
> compile
>...
> clean
>...
> compile}}

you end up with the following error:

{{[trace] Stack trace suppressed: run last daffodil-lib/compile:genProps for the full output.
[error] (daffodil-lib/compile:genProps) Failed to generate code
[error] Total time: 3 s, completed Apr 20, 2016 3:14:58 PM
> last daffodil-lib/compile:genProps
java.lang.RuntimeException: Failed to generate code
	at scala.sys.package$.error(package.scala:27)
	at DaffodilBuild$.runPropertyGenerator(build.scala:208)
	at DaffodilBuild$$anonfun$propgenSettings$1$$anonfun$6.apply(build.scala:195)
	at DaffodilBuild$$anonfun$propgenSettings$1$$anonfun$6.apply(build.scala:195)
	at sbt.FileFunction$$anonfun$cached$1.apply(Tracked.scala:188)
	at sbt.FileFunction$$anonfun$cached$1.apply(Tracked.scala:188)
	at sbt.FileFunction$$anonfun$cached$2$$anonfun$apply$3$$anonfun$apply$4.apply(Tracked.scala:202)
	at sbt.FileFunction$$anonfun$cached$2$$anonfun$apply$3$$anonfun$apply$4.apply(Tracked.scala:198)
	at sbt.Difference.apply(Tracked.scala:177)
	at sbt.Difference.apply(Tracked.scala:158)
	at sbt.FileFunction$$anonfun$cached$2$$anonfun$apply$3.apply(Tracked.scala:198)
	at sbt.FileFunction$$anonfun$cached$2$$anonfun$apply$3.apply(Tracked.scala:197)
	at sbt.Difference.apply(Tracked.scala:177)
	at sbt.Difference.apply(Tracked.scala:152)
	at sbt.FileFunction$$anonfun$cached$2.apply(Tracked.scala:197)
	at sbt.FileFunction$$anonfun$cached$2.apply(Tracked.scala:195)
	at DaffodilBuild$$anonfun$propgenSettings$1.apply(build.scala:197)
	at DaffodilBuild$$anonfun$propgenSettings$1.apply(build.scala:190)
	at scala.Function5$$anonfun$tupled$1.apply(Function5.scala:35)
	at scala.Function5$$anonfun$tupled$1.apply(Function5.scala:34)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:47)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:42)
	at sbt.std.Transform$$anon$4.work(System.scala:64)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:244)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[error] (daffodil-lib/compile:genProps) Failed to generate code}}

It appears that clean is removing the gen-props jar, and then when trying to rebuild GeneratedCode.scala, sbt does not realize that it is deleted and needs to be rebuilt.",[],2016-04-20 19:16:02+00:00,2016-05-03 16:02:07+00:00,2016-05-13 23:27:19+00:00,Closed,13114910,DAFFODIL-1491
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"Looking through the Runtime.scala code you will find under doParse and the unparse methods a case statement for when ProcessingErrors are caught.  

Within this statement we do: 
state.setFailed(x.toParseError)

This seems unnecessary as the ProcessingError is already an object.  The toParseError or toUnparseError call on the existing ProcessingError object creates yet another object which is then added to the diagnostics list.  This seems wasteful as we're creating a new object for each existing ProcessError object.

Also, is there a need to make a distinction between ProcessingErrors being either Parse or Unparse errors?  Shouldn't we know that just by the fact that we 'got diagnostics' from the Parser or Unparser?",[],2016-04-15 17:25:25+00:00,,2021-01-07 20:29:16+00:00,Open,13114909,DAFFODIL-1490
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Created a test for DFDL-261.  The test expected to receive an SDE.  Well the test would just fail with the SDE not being captured or used in the comparison of diagnostics.  It turns out that it was due to the unparse method in Runtime was missing a few case statements that were on the parse side.,[],2016-04-13 18:25:50+00:00,2016-04-15 18:00:50+00:00,2016-04-28 23:04:00+00:00,Closed,13114908,DAFFODIL-1489
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,This is necessary as a precursor to improving performance of delimiter scanning,[],2016-04-08 13:38:51+00:00,2016-05-03 16:01:11+00:00,2016-09-27 21:13:20+00:00,Closed,13114907,DAFFODIL-1488
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,This is necessary as a precursor to improving performance of delimiter scanning,[],2016-04-08 13:38:30+00:00,2016-05-03 15:59:57+00:00,2016-09-27 19:46:23+00:00,Closed,13114906,DAFFODIL-1487
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The current delimiter cookers attempt to check for invalid delimiters, such as ES and WSP*. However, there are two things we do not correctly check against
# The spec specifies that in some cases, delimiters cannot contain ES or WSP*, because they match the empty string. We currently correctly check this, but if a delimiter is ESES or ESWSP* or some other combination of character classes that can match the empty string, then we will not detect it. This means the cookers potentially have to do merging of duplicate character classes, and have some concept of if a delimiter could match an empty string. Note that merging of duplicate character classes does exist elsewhere for delimiters, but does not handle merging ES. It only merges the various forms of WSP.
# The other issue is that there is a restriction on some delimiters that ES can only specified if it is also specified with another delmiter, e.g. initiator=""%ES; foo"". This is a method for describing optional initiators. Our cookers do not currently have the capability to verify the entire list of cooked delmiters to determine if such problems exist. This likely needs a new cooker base class, or enhancements to existing cookers to support providing validation on an entire list of cooked values, rather than just on individual values.",[],2016-04-06 17:55:35+00:00,,2018-09-13 14:04:27+00:00,Open,13114905,DAFFODIL-1486
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-04-05 15:42:03+00:00,2016-04-08 19:01:18+00:00,2016-04-12 20:50:16+00:00,Closed,13114904,DAFFODIL-1485
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Nightly testing has shown that commit 9fb67399ab99183bb7c45e57b35d4bd8dfaa83ca ""Added Evaluatable[T], EvalCache, and DISequence, DIChoice."" caused a large performance decrease, with the example PCAP parsing dropping by half. After some profiling, it looks like part of the decrease is due to the EvalCache and putting evaluated expressions in the cache. Removing the caching (so always reevaluating expressions) causes a increase in performance, but not quite to that of pre-Evaluatables. Putting a println when we get a cache hit revealed that we are getting cache hits, but perhaps the cost of caching is less than the cost of just evaluating in most cases. Perhaps we need a way to determine which expression functions will be expensive and only cache those.",[],2016-04-04 14:10:18+00:00,2016-05-09 14:52:36+00:00,2016-05-27 22:55:13+00:00,Closed,13114903,DAFFODIL-1484
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"When testing on the performance machine, this error is coming up a lot. It doesn't happen every time but happens pretty often and with different data types, number of threads, etc. I have not been able to reproduce this locally yet.

Command:
~/daffodil/daffodil-cli/target/universal/stage/bin/daffodil performance  -s ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/csv/csv.dfdl.xsd -t 10 -N 20000 ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/csv/simpleCSV

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Pool MarkPool leaked 2 instance(s).
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:167)
edu.illinois.ncsa.daffodil.util.Pool$class.finalCheck(Pool.scala:49)
edu.illinois.ncsa.daffodil.io.MarkPool.finalCheck(ByteBufferDataInputStream.scala:216)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:121)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:167)
	at edu.illinois.ncsa.daffodil.util.Pool$class.finalCheck(Pool.scala:49)
	at edu.illinois.ncsa.daffodil.io.MarkPool.finalCheck(ByteBufferDataInputStream.scala:216)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.validateFinalStreamState(ByteBufferDataInputStream.scala:746)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:275)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:211)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$1.apply(Runtime.scala:204)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:204)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:187)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69$$anonfun$70$$anonfun$71$$anonfun$73.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69$$anonfun$70$$anonfun$71$$anonfun$73.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69$$anonfun$70$$anonfun$71.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69$$anonfun$70$$anonfun$71.apply(Main.scala:870)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)",[],2016-03-28 21:59:27+00:00,2016-05-04 14:59:30+00:00,2016-05-12 21:18:00+00:00,Closed,13114902,DAFFODIL-1483
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"as of commit d15309....

there are 66 deprecation warnings part of cutting over gradually from the direct use of CompiledExpression to the more powerful Evaluatable technique.

Some of these are relatively easy to fix, others are tied up in the delimiter-scope stuff, and text numbers stuff.

Fixing these enables refactoring the code so that we eliminate the dual-paths where one path is about ""static"" stuff, and the other ""dynamic"" stuff. Done right, one need only do ""dynamic stuff"" using Evaluatable. 

So these aren't quick or tiny fixes (or I would have done them). They do require some significant reflactoring. 

Some mechanisms we have: CachedDynamic, ..... the refactoring to be done is such that Evaluatable should replace CachedDynamic, because it is effectively a generalization of it that adds additional capabilities.",[],2016-03-18 15:19:23+00:00,2016-05-04 15:27:06+00:00,2016-09-05 21:37:34+00:00,Closed,13114901,DAFFODIL-1482
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"IBM announced another DFDL schema available. 

https://github.com/DFDLSchemas/HIPAA-5010

Like several others, these are not publicly available, they must be purchased/licensed from IBM; however, we may get permission to evaluate for purposes of seeing if we're compatible.

There are other JIRA tickets about IBM compatibility that should probably take priority over this one.",['ForInteroperabilityTest'],2016-03-10 15:09:52+00:00,2018-10-23 16:26:21+00:00,2018-10-23 16:26:21+00:00,Closed,13114900,DAFFODIL-1481
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"... we need to start looking into refactoring all the EntityReplacer code. Regular expressions are used very heavily, and results in the creation of a lot of strings (noticed during profiling). And things like input.split(""""""%"""""") takes that string, compiles it as a regular expression, and then creates new strings. So that's fairly intensive to be doing at runtime, and there's a lot of it. I feel like the right algorithm would just loop through each character in the string and based on what it sees it adds characters to another. It may add the same character it just saw, it may add a space if it saw %WSP;, it may add a outputNewLine if it saw %NL;, etc.",['beginner'],2016-03-10 13:30:40+00:00,,2021-01-07 20:26:49+00:00,Open,13114899,DAFFODIL-1480
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"NodeInfo.scala contains constructors for DFDLDate, DFDLTime and DFDLDateTime. Only DFDLDate is right the others aren't creating the right kind of object.",[],2016-03-10 01:53:48+00:00,2021-01-20 18:26:40+00:00,2021-01-20 18:26:40+00:00,Closed,13114898,DAFFODIL-1479
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"To display the current index you type this debugger command:

info arrayIndex

Since the corresponding function is named dfdl:occursIndex, we should adopt that terminology.",['beginner'],2016-03-09 20:44:02+00:00,2019-06-28 18:52:15+00:00,2021-05-20 12:34:57+00:00,Closed,13114897,DAFFODIL-1478
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"In accordance with the DFDL v1.0 spec change to terminator, 
If we remove the check for %ES; from the code for terminator, then  test
test_entity_fail_03 fails with:

Parse Error: Term('CompiledExpression(: %ES;)') - element.a: Found delimiter (,) for element.root::LocalComplexTypeDef::sequence when looking for Term(<DFA lookingFor=':' /> <DFA lookingFor='%ES;' /> <DFA lookingFor=',' />) for element.root::LocalComplexTypeDef::sequence::element.a before element.b
Schema context: element.a Location line 100 column 12 in file:/tmp/sch39093359406659818781.dfdl.xsd
Data location was preceding byte 1 limit(bytes) 3

It isn't handling the case where the separator of the sequence is found, not the terminator, because one of the list of terminators is ES, which effectively makes that terminator optional.

We may simply want to put back in the restriction that prohibits ES from terminators altogether.

For now I have moved this test to scala-debug",[],2016-03-06 06:01:52+00:00,2019-07-02 12:37:29+00:00,2021-05-20 12:34:54+00:00,Closed,13114896,DAFFODIL-1477
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Steven Williams reports that line numbers are off in diagostic messages, and seemingly by just the size of preceding XML comments in the schema.



While parsing a data file, a parsing error reports the incorrect line number in the schema.

 

[error] Parse Error: Assertion failed. { ../Octet1/APC eq 1 } failed

Parsed value was: ��� a whole lot of XML���

Schema context: element.APC Location line 283 column 8 in file:/H:/git/cat062/dfdl/cat062.dfdl.xsd

 

Line 283 in the schema is

 

    <xs:element name=���FX��� type=���cat062:bool��� />

 

The line in the schema containing the test listed in the error message is inside the following xs:element, which starts at line 287 (the test is on line 290).

 

Our schema contains a company policy-mandated comment block at the top of the schema, similar to

 

<!���

// ****

// Company Proprietary

//

// Copyright �� 2016

// Disclaimer

// ****

-->

 

If I remove that comment block or reduce it to <!-- --> on a single line, the schema line referenced in the error message now correctly points to the start of the element containing the failed test.

 

This should also show up on the schemas in github.com/DFDLSchemas as they have much larger multi-line comment blocks that would throw the error line number a lot further off.

 

Steve",[],2016-03-03 14:07:01+00:00,2019-01-23 12:58:42+00:00,2021-05-20 12:34:36+00:00,Closed,13114895,DAFFODIL-1476
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test_emptyStringEntityTermInExpression_01

(which I recently modified to be a negative test, looking for a message about the incorrect use of %ES; in the terminator.)

If you have an expression for a terminator, and the expression returns a string containing %ES; by itself, that's not allowed (you can't ""turn off"" delimiters at runtime by specifying a delimiter to be empty string)

This should be a runtime SDE.",[],2016-03-01 02:35:02+00:00,2019-07-02 12:39:01+00:00,2021-05-20 12:34:16+00:00,Closed,13114894,DAFFODIL-1475
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some systems, like windows and ecrypted filesystems on linux, have a maximum path length of around 255. Due to scalac's autogenerated class names, it's very possible to read this limit. We should use the -Xmax-classfile-name option to limit the length of these autogenerated names. Note that our longest dirnames are about 100 characters, so if we can limit the length of filenames to less than 100, that gives users about 50 characters for a root directory path, which isn't totally unreasonable.",[],2016-02-29 14:44:31+00:00,2021-01-21 15:17:29+00:00,2021-01-26 12:42:00+00:00,Closed,13114893,DAFFODIL-1474
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I discovered that the natural xerces load time validation that is supposed to happen when DFDL schemas are loaded, is not happening.

There seems to be code for doing a whole separate load pass just to validate rather than doing it at load time. This might be a holdover from when we were using the ""constructing parser"" for XML for more things, rather than Xerces. Not sure.

All I know is that in DFDLSchemaFile.scala, there is no call to loader.setValidation(...) so those loads don't validate, and that causes many syntactic problems to go undetected. 

However, I don't want to fix this right now, because lots of tests break. We should fix this one little thing and fix up the tests that break at that point in one commit.",[],2016-02-26 02:57:55+00:00,2018-03-01 14:53:59+00:00,2018-04-09 20:08:57+00:00,Closed,13114892,DAFFODIL-1473
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This would improve maintainability of code by eliminating need for missing checks for x < 0, etc. 

java.lang.Long is mentioned here because things are moving to where what we carry around are AnyRef, not Any; hence, the numbers must be objects, not AnyVal types. (ULong is AnyVal today. We need an AnyRef variant of it).

In other words, as Long is to java.lang.Long, so ULong is to ??",[],2016-02-25 21:43:13+00:00,2016-09-14 20:46:58+00:00,2016-10-11 13:33:39+00:00,Closed,13114891,DAFFODIL-1472
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When we run a regression test, many tests produce lots of output. For some that's ok, but some of this is just accumulated laziness at deleting print statements and throwing a proper exception instead of just printing.",[],2016-02-23 21:17:05+00:00,2016-03-18 15:20:40+00:00,2016-04-08 15:48:29+00:00,Closed,13114890,DAFFODIL-1471
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"Currently running out of memory when testing unparse for complex textual data with a large number of files (-N 500). I was testing this on the performance machine.

Running a test with 100 files works. (-N 100)",['Performance'],2016-02-19 22:59:22+00:00,2016-07-21 17:18:54+00:00,2016-07-22 14:43:04+00:00,Closed,13114889,DAFFODIL-1470
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The object TypeConversions is used in exactly two places trivially.

Remove this object in favor of AsIntConverters which has the same functionality.

This is part of rationalizing the chaos of too-many-places where conversions are done, and what is held in the infoset really.",[],2016-02-16 19:21:05+00:00,2016-02-16 22:48:47+00:00,2016-07-26 22:02:18+00:00,Closed,13114888,DAFFODIL-1469
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In general, things can have bitOrder be releavant, without byteOrder being necessary.

The check for their compatibility needs to go in ByteOrderChange, not here in bitOrder change.",[],2016-02-16 18:10:45+00:00,2016-03-18 15:10:44+00:00,2017-08-22 21:47:06+00:00,Closed,13114887,DAFFODIL-1468
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The DFDL spec assigned an official DFDL name for the 7-bit encoding.

The name should be: X-DFDL-US-ASCII-7-BIT-PACKED. However, the older name can remain as an unofficial supported alias.",[],2016-01-27 15:42:22+00:00,2016-02-05 17:34:35+00:00,2016-09-06 22:05:51+00:00,Closed,13114886,DAFFODIL-1467
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,See IOMacros. withBitLengthLimit comments.,[],2016-01-25 21:36:59+00:00,2016-01-26 15:44:27+00:00,2016-05-31 15:17:39+00:00,Closed,13114885,DAFFODIL-1466
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The StatementElementCombinator always creates a mark, regardless if it actually needs one. This parser is called a lot, regardless of text/binary, so optimizing this should greatly help overall performance.",[],2016-01-12 19:56:28+00:00,2016-01-14 14:10:28+00:00,2016-10-11 13:50:00+00:00,Closed,13114884,DAFFODIL-1465
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-01-11 16:14:50+00:00,2016-01-14 14:10:04+00:00,2016-10-11 13:49:40+00:00,Closed,13114883,DAFFODIL-1464
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We have our own Coroutines library which is based on JVM threads and queues as mailboxes between them.

There are two things to consider.

1) Scala has the akka library/feature. This is an alternative that might have advantages over using our own low-level mechanisms, just in terms of reducing lines of code. Akka's various features for multiplexing multiple actors across threads may or may not be advantageous when doing something as simple as co-routines. 

2) There is now a scala coroutines library created as part of the storm project. This works entirely differently - doesn't create JVM threads. Instead it somehow gets code to use a separate stack data structure that is not the stack of a JVM thread. As of this date, I have no clue how this works other than it looks to be dependent on scala macros heavily. 

We have a requirement that a coroutine can call a non-thread-safe library written in java for which one has only the jar. A callback from the library can resume another coroutine. Pretty sure Akka could do this, but I'm not sure about the storm coroutines library. How would it get the Java jar code to use its special stack?

But this is worth investigation anyway.",[],2016-01-05 18:10:47+00:00,2017-03-01 17:19:33+00:00,2017-03-01 17:19:41+00:00,Closed,13114882,DAFFODIL-1463
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This feature, the 'I' for ISO specifier, is not implemented in the ICU library we use for the other aspects of calendar patterns.

Before we implement this, we should see if adding this is on the ICU library roadmap. ICU is open source. It might be better for us to implement it there, and contribute back to ICU than implement it in Daffodil's code.

Similarly for the textNumberPattern P, V, and @ characters. (See DFDL-853)",[],2016-01-05 16:53:16+00:00,2021-01-07 20:21:04+00:00,2021-01-07 20:21:04+00:00,Closed,13114881,DAFFODIL-1462
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2016-01-05 16:36:45+00:00,2016-01-14 14:09:30+00:00,2016-10-11 13:49:04+00:00,Closed,13114880,DAFFODIL-1461
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For runtime schema definition errors, when we use schemaDefinitionUnless (and similar functions), a WrappedArray is allocated for the variable arguments to be passed into the function. This allocation can be noticeable, and in most cases, the allocated array won't even be used because there isn't a schema definition. Similar to other functions, we should create macros for schemaDefintionUnless so that the WrappedArray is only allocated when there is an actual SDE.",[],2016-01-05 16:33:41+00:00,2017-06-29 13:02:02+00:00,2017-07-31 20:40:17+00:00,Closed,13114879,DAFFODIL-1460
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"These assertions were commented out due to the performance overhead of allocating functions that were passed into the Asserts. We know use macros, so the function allocations should be removed and the only performance hit should be a simple conditional.",[],2016-01-04 13:22:18+00:00,2016-01-05 15:03:49+00:00,2017-06-01 22:33:07+00:00,Closed,13114878,DAFFODIL-1459
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Using java.io.PipedOutputStream, java.io.PipedInputStream, and InvertControl, we should be able to implement a pull-style unparser where normal reading from some inputStream in effect drives the unparsing to an outputStream that feeds into the input stream. 
{code}
val inputStream: InputStream = DataProcessor.pullUnparser(infosetCursor)
{code}
Reading bytes from the inputStream will force pulling of buffers of data from an  internal output stream and co-routines with the unparser that is populating the outputStream.

A throw of an UnparseError must occur on the main co-routine if the pullUnparser encounters such. This will occur when data being pulled contains the representation of the element whose unparsing creates the error, not before. 

Ex: if there's 100 unparsed bytes in the buffer, but what's next should be the representation of an outputValueCalc element whose expression caused an UnparseError. Well the 100 bytes should be delivered all the way to the inputStream and from it to the application reading from it. Only on the next read call on the inputStream should that cause the UnparseError to be issued.

However, the error thrown may aggregate multiple UnparseErrors & RuntimeSchemaDefinitionErrors, as not only the first one whose element creates the error should be reported, but potentially there are others from unparsing of later elements (into buffers) that are relevant to understanding what went wrong while unparsing.

A buffered output stream ""block size"" can avoid excessive context switching by delaying the resume of the consuming co-routine (main, which is reading from the inputStream) until a block of data has been produced by the unparser.  (Note that the minimum block size would be 1 byte, even though unparsing may occur at the level of individual bits.)",[],2015-12-23 03:25:02+00:00,2018-10-23 13:15:35+00:00,2018-10-23 13:15:35+00:00,Closed,13114877,DAFFODIL-1458
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Note: Right now, if you forget this xmlns:xsi declaration, or you get it wrong, you will get an UnparseError at runtime. It would be good if that was a warning.",[],2015-12-18 17:48:11+00:00,,2021-01-07 20:18:47+00:00,Open,13114876,DAFFODIL-1457
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This issue is a placeholder for lots of small corrections to the code needed to improve consistency, maintainability, etc.

In some cases the suggested changes here are just so the scala compiler can do a bit more type checking, find more usage problems etc. E.g., things that avoid use of object vs. null are generally of that sort.

------------

MStack.OfMaybe[T] - Mistake here is that if you have one of these named 'm' then m.popMaybe returns a T, not a Maybe[T]. You get an object or null. Unfortunately, once you do this it's pretty hard to catch, because null has this type which is a subtype of all AnyRef classes. This use of object vs. null is a common efficiency approach. Even a Maybe[T] which is AnyVal is allocated if you store it in a generic collection. Hence a collection that uses object or null internally to represent presence or absence, but externally uses a Maybe[T] as representation is a better API.

The fix for this is to create a new class MStack.Maybe[T] where pushMaybe takes a Maybe[T] and popMaybe returns a Maybe[T]. The old class can be deprecated, and once all occurrences hunted down and converted, then it can be deleted.

----------------------------------",[],2015-12-18 13:43:11+00:00,2017-04-06 17:49:27+00:00,2017-04-06 17:49:27+00:00,Closed,13114875,DAFFODIL-1456
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec,
dfdl:hexBinary(-2084) is the hexBinary value ""F7FF""

test hexBinary_unparse_17 sets up this example, but the actual output is 'f7dc' instead of 'f7ff'

Using a signed integer to hex conversion tool online, it looks like f7dc is the correct value.

Test is located in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypesUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypesDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypesUnparse.scala",[],2015-12-17 14:02:05+00:00,2016-09-14 20:51:54+00:00,2017-08-01 18:40:17+00:00,Closed,13114874,DAFFODIL-1455
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, 
""[dfdl:hexBinary] behaves identically to the XPath 2.0 constructor function of the same name, with one exception. The argument can also be a long, unsignedLong, or any subtype thereof, and in that case a xs:hexBinary value containing a number of hex digits is produced.""

However, dfdl:hexBinary does not seem to handle string input as xs:hexBinary does.
Tests hexBinary_unparse_10 and hexBinary_unparse_13 use xs:hexBinary and dfdl:hexBinary, respectively. They both use outputValueCalc to set the document value to the output of hexBinary('a1'). xs:hexBinary converts this to the hexBinary string 'a1.' The dfdl:hexBinary test fails with the following error:

{code}
[error] Test edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypesUnparse.test_hexBinary_unparse_13 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Schema Definition Error: For input string: ""a1""
[error] Schema context: element.hb_11. Location line 71 column 6 in file:/tmp/SimpleTypes-binary1717967500202954306.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$7.apply(TDMLRunner.scala:747)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$7.apply(TDMLRunner.scala:747)
[error]     at scala.util.Either$LeftProjection.foreach(Either.scala:302)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:747)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:533)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:314)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:302)
[error]     at edu.illinois.ncsa.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:48)
[error]     at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypesUnparse.test_hexBinary_unparse_13(TestSimpleTypesUnparse.scala:54)
[error]     ...
[error] Caused by: Schema Definition Error: For input string: ""a1""
[error] Schema context: element.hb_11. Location line 71 column 6 in file:/tmp/SimpleTypes-binary1717967500202954306.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.dpath.CompiledDPath.runExpressionForConstant(DPathRuntime.scala:100)
[error]     at edu.illinois.ncsa.daffodil.dpath.DFDLPathExpressionParser.compile(DFDLExpressionParser.scala:73)
[error]     at edu.illinois.ncsa.daffodil.dsom.ExpressionCompiler$.compileExpression(CompiledExpression.scala:204)
[error]     at edu.illinois.ncsa.daffodil.dsom.ExpressionCompiler$.compile(CompiledExpression.scala:178)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluatorBase$$anonfun$expr$1.apply(PrimitivesExpressions.scala:183)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluatorBase$$anonfun$expr$1.apply(PrimitivesExpressions.scala:182)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:586)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:584)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:582)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluatorBase.expr$lzycompute(PrimitivesExpressions.scala:182)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluatorBase.expr(PrimitivesExpressions.scala:181)
[error]     at edu.illinois.ncsa.daffodil.grammar.ElementBaseGrammarMixin$class.ovcCompiledExpression(ElementBaseGrammarMixin.scala:636)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.ovcCompiledExpression$lzycompute(ElementBase.scala:79)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.ovcCompiledExpression(ElementBase.scala:79)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.edu$illinois$ncsa$daffodil$dsom$ElementBase$$createElementRuntimeData(ElementBase.scala:421)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$elementRuntimeData$1.apply(ElementBase.scala:347)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$elementRuntimeData$1.apply(ElementBase.scala:335)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:586)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:584)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:582)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData$lzycompute(ElementBase.scala:335)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData(ElementBase.scala:335)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData$lzycompute(ElementBase.scala:257)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData(ElementBase.scala:257)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$5.apply(Compiler.scala:116)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$5.apply(Compiler.scala:116)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:586)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:584)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:582)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:580)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply$mcV$sp(OOLAG.scala:288)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:288)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:288)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:77)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:288)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:347)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.edu$illinois$ncsa$daffodil$compiler$ProcessorFactory$$super$isError(Compiler.scala:129)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:129)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:77)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:120)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler.compileSource(Compiler.scala:319)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.edu$illinois$ncsa$daffodil$tdml$TestCase$$compileProcessor(TDMLRunner.scala:398)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.getProcessor(TDMLRunner.scala:415)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:742)
[error]     ... 63 more
{code}

The tests mentioned above are found in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypesUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypesDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypesUnparse.scala",[],2015-12-17 13:53:13+00:00,,2021-01-07 20:14:47+00:00,Open,13114873,DAFFODIL-1454
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,A performance drop of roughly 50% was seen across data types after the huge I/O Layer refactor (commit 5ced4fa). This ticket serves as a reminder that this regression needs to be addressed.,[],2015-12-16 16:00:37+00:00,2016-06-03 20:04:31+00:00,2016-09-08 20:37:23+00:00,Closed,13114872,DAFFODIL-1453
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This class should be rewritten to use a tree walk, not all this allocating/iterating layers.

See also JSON issue DFDL-1210, which also needs an Infoset tree walker.
{code}
class InfosetSourceFromTree(doc: InfosetDocument) extends InfosetSource {
  //
  // FIXME
  // TODO - Performance - this has to be fast. Round trip processing where you first parse
  // and then unparse data will use this to generate the infoset events.
  // That's an important use case
  //
  // So all this Stream/Iterator baggage has to go and be replaced by a straightforward tree walk.
  //
  // Note however, that there are other kinds of infoset tree walks needed (e.g., JSON output, and XML
  // output should be revise to use this tree walker once it is written.)
  //
  // So we need an infoset tree walker that can be used to implement a few patterns.
  //
....
{code}",[],2015-12-12 03:07:38+00:00,2016-01-25 20:26:07+00:00,2016-09-23 16:54:54+00:00,Closed,13114871,DAFFODIL-1452
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The calabash-server needs a few things done beyond just DFDL-1450.

 * create API-only version - call from an API to run an XProc pipeline on data. This http server model is only one case of how people would want to embed an XProc pipeline processor.
  
 * jar files: schemas, test data, etc. should be reachable when packaged in jars. See also DFDL-1292. 
  
 * -enable load of pre-compiled DFDL schemas (to eliminate first-time compile-time delay for large schemas) See also DFDL -1292.-",[],2015-12-03 16:10:13+00:00,2021-04-16 17:38:30+00:00,2021-04-16 17:38:56+00:00,Closed,13114870,DAFFODIL-1451
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Need to fix this ""mystery jar"" problem. The calabash-server still has a source file that is a jar that we have no source code for, nor any other place to get it online:

calabash-server/lib/calabash-1.0.18-95-jwcranford-api-6-gaac832d-debug.jar

I believe the right course of action here is to just port the whole thing forward to the latest xmlcalabash, possibly with some of Jonathan Cranford's extensions that are in this jar. 

But alternatively, Jonathan's changes are supposedly on a branch of the xmlcalabash project. If we could reproduce the jar from there that would also be sufficient.",[],2015-12-03 16:06:26+00:00,2017-03-01 17:26:17+00:00,2017-08-22 16:13:19+00:00,Closed,13114869,DAFFODIL-1450
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Scala's mutable HashMap allocates a Some[T] object for every successful get(key) call.

This is unacceptable overhead for something done so frequently.

Use Java's HashMap instead, where get(key) returns a value or null, and never allocates anything.",[],2015-11-25 13:28:12+00:00,2021-01-07 20:10:20+00:00,2021-01-07 20:10:20+00:00,Closed,13114868,DAFFODIL-1449
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Change SDW on variable write after read-default-value back into SDE.

THis was changed temporarily to allow EDIFACT to run due to issue DFDL-1443. Once that issue is fixed, this one should also be fixed.",['beginner'],2015-11-09 14:46:11+00:00,,2021-01-07 20:07:53+00:00,Open,13114867,DAFFODIL-1448
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The hash lookups associated with finding a variable in the variable are relatively expensive, especially when looking up a variable many times. Additionally, the purely function data structure is nice, but is slow when setting variables because a new map must be created.

So, we should chang the VariableMap data structure to just be an array of stacks, where each index in the array represents a single variable qname, and the stack represents the current instance. When a new variable instance is created we push onto the stack. When that instance goes out of scope, we pop it off. Additionally, DPath should be modified so that variable references are just an offset into this array. This should make variable access much faster with minimal allocations.",[],2015-11-09 13:44:21+00:00,2020-05-19 14:14:46+00:00,2020-06-26 14:53:40+00:00,Closed,13114866,DAFFODIL-1447
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Daffodil is too strict about requiring namespace prefixes within DFDL expressions.

This comes up in the NACHA DFDLSchemas schema, where we had to modify it to put namespace prefixes on path steps to get it to work. These prefixes should not be required because there is a default namespace.

If an element has form=""qualified"", then a path referring to it must have a namespace. But it should be able to infer this namespace from a prefix, or from the default namespace of the schema. 

To illustrate: Within an XML Schema, another place where paths appear is in xs:unique constraints. There, the path steps are interpreted relative to the default namespace of the schema file, so prefixes aren't necessarily needed.

(At least according to xmllint - which is a command line version of libxml2)

The attached files show a unique constraint, and the multi-step path within it does not require that there be a prefix when there is a default namespace definition that matches the target namespace.

Daffodil should similarly interpret path steps by taking them as in the default namespace if they are not prefixed. If no default namespace is defined; however, then they don't have a namespace and will only match against an unqualified element name.",[],2015-11-05 23:46:50+00:00,2016-10-28 23:14:01+00:00,2016-10-29 00:08:52+00:00,Closed,13114865,DAFFODIL-1446
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need a way to do:
{code}
<tdml:infoset file=""....""/>
{code}
This is to support large infosets where you really don't want them cluttering up the TDML, but also if we look at the materials in github DFDLSchemas, IBM folks have been putting the data in TestData subdirs, and the expected result infoset XML in TestInfoset subdirs. It would be good to not have to repeat these infosets as XML in the TDML files.",[],2015-11-05 19:49:02+00:00,2016-08-31 12:26:22+00:00,2016-09-07 15:12:47+00:00,Closed,13114864,DAFFODIL-1445
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Large DFDL schemas are very slow to compile.

We could focus on speeding this up, and should get some low-hanging fruit here.

But ultimately, a really large DFDL schema needs to be compiled in pieces. (DEBATABLE - focus should FIRST be on speeding up and reducing the massive copying that goes on. Separate compilation is a harder issue that we can defer.)

This means we need to be able to reload a compiled schema just to restore it's parsers/unparsers and associated runtime data structures to memory so that another schema that depends on it can then be compiled. 

DFDL schema compilation needs to be understood in order to decompose a schema into separately compilable units. THere's no point in trying to compile a schema layer by layer - a DFDL schema containing all type definitions, for example, doesn't compile to anything. There have to be top level elements in order for DFDL schema compilation to do anything.

So given a large data format with many top-level element types, we need the compiler to recognize element references to pre-compiled top-level elements, and avoid recompiling new instances of them if the surrounding environment is the same. That is, surrounding default format specification is the same.",[],2015-11-05 14:57:02+00:00,2020-02-18 18:50:34+00:00,2020-02-20 20:08:06+00:00,Closed,13114863,DAFFODIL-1444
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"I'm trying to get EDIFACT working on Daffodil.

This schema uses dfdl:escapeCharacter and dfdl:escapeEscapeCharacter as expressions. E.g., there is a top-level dfdl:defineVariable named ""EscapeChar"" which has a default value, and the expression for the dfdl:escapeCharacter property is { $ibmEdiFmt:EscapeChar }.

The default format that is in effect for the root element 'Interchange' has dfdl:lengthKind='delimited'.

When daffodil starts parsing the top level root/document element, it enters a parser that is for delimited elements with an escape-scheme in effect. First thing this parser does is get the escape scheme which evaluates the expressions for escapeCharacter and escapeEscapeCharacter. This picks up the default values for those variables and the variables are then set as ""already evaluated"", as DFDL specifies that once a variable's default value has been used, it cannot be subsequently set via dfdl:setVariable.

Now, when the very first UNA is encountered, that reads the various delimiters/escapes from the data, and tries to set the variables.

But the variables have already been evaluated, on the way into parsing the ""delimited"" top level element.

So it fails with a runtime SDE - default value has already been used for EscapeChar variable.

So this clearly a bug. 

The principle is that a complex-typed element of length kind delimited when there is no definition of terminator nor applicable separator, that this situation is treated like dfdl:lengthKind='implicit' and the escapeScheme is therefore not relevant and the expressions for the escapeScheme characters MUST NOT be evaluated.

One could argue that the EDIFACT schema should have dfdl:lengthKind='implicit' on the 'Interchange' element and any other complex type element, but this is quite burdensome on the schema author, who after-all thinks of this entire format as ""delimited stuff"".",[],2015-11-04 17:02:59+00:00,,2019-07-03 12:52:40+00:00,Open,13114862,DAFFODIL-1443
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"These two properties of dfdl:escapeScheme are allowed to be runtime-valued.

Note: This feature is required to handle the IBM-created EDIFACT schema published at the github DFDLSchemas site.",[],2015-11-04 13:59:46+00:00,2015-11-04 14:26:46+00:00,2015-11-04 14:26:46+00:00,Closed,13114861,DAFFODIL-1442
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Several schemas have been published on github DFDLSchemas.

We should extend our examples to include these. If they won't work yet, then we can leave the tests that drive them in scala-debug.

NACHA
EDIFACT
vCard
IBM4690-TLOG,
HL7

Note that the SWIFT DFDL Schema isn't published at github directly. We would have to ask for a copy and permission from IBM to test this one.

Note that we should NOT duplicate these in our tree, but rather should have the examples expect them to reside in some location relative to DAFFODIL_HOME.

Also: Any edits to these schemas should be done on git branches to isolate any daffodil-specific changes - until shown that the schemas continue to work on IBM's implementation with those changes.",[],2015-11-03 21:31:46+00:00,2015-11-23 18:10:45+00:00,2021-05-20 20:01:50+00:00,Closed,13114860,DAFFODIL-1441
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"Some tools, such as Apache Spark, may need to serialize the DataProcessor to be able to send it to cluster nodes. Although we have the save/reload functions to support serialization, apache spark doesn't know how to use those, and just serializes the DataProcessor. So the SAPI/JAPI DataProcessors (which wrap the real DataProcessors) must also be made serializable.",[],2015-11-03 18:06:18+00:00,2019-01-07 16:08:43+00:00,2021-05-20 12:34:47+00:00,Closed,13114859,DAFFODIL-1440
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The BinaryNumberParser and parsers that inherit from them parses all data as a BigInteger, regardless of the number of bits required, and then converts that down to whatever type is actually used. Instead, these parsers should use the appropriate function in the IO layer to extract data. Not only should this greatly simplify the binary parsers, removing the big integers should give a performance increase and decrease allocations.",[],2015-10-30 18:20:20+00:00,2016-01-04 14:05:50+00:00,2016-10-11 13:48:31+00:00,Closed,13114858,DAFFODIL-1439
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Performance issue. Why alloc an Either here. In every calling context for this we have a state block which can hold the information being returned.,[],2015-10-29 14:24:55+00:00,2020-12-16 21:02:51+00:00,2020-12-16 21:02:51+00:00,Closed,13114857,DAFFODIL-1438
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This is a lisp sort of thing to do as written, but there really is no reason these can't be ordinary objects  with two methods, test and act. The code would be clearer and easier to debug. Particularly if the classes have names like 
{code}
final class StartState(states: => ArrayBuffer[State], val stateNum: Int) extends State(states) {
   type R = Registers // put into State base class, protected

   object Got_EC_goto_ESCState extends Rule {
       def test(r: R) = { ... }
       def act(r: R) = { ... }
     }

  object Got_EEC_goto_ESCESCState extends Rule {
       def test(r: R) = { ... }
       def act(r: R) = { ... }
     }
...
  override val rules = ArrayBuffer(
     Got_EC_goto_ESCState, 
     Got_EEC_goto_EECState,
    ...
  )
...
}
{code}
In the above, the nesting makes it clear each ""Rule"" which is a state-machine transition, originates at a particular state.",[],2015-10-29 13:54:25+00:00,2021-05-18 16:50:50+00:00,2021-05-24 12:05:08+00:00,Closed,13114856,DAFFODIL-1437
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"These things returned in the tuple, should be slots in the PState.",[],2015-10-29 03:57:18+00:00,2016-01-04 19:40:33+00:00,2017-07-26 21:09:51+00:00,Closed,13114855,DAFFODIL-1436
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Why do we construct the string here? We could do the trim on the string buffer, (avoiding allocations), and have the trim call return the string itself. (Saves one string copy.)

There's another place where trimByJustification is called, on the result of DataInputStream.getSomeString(...).

Really that should return a StringBuilder so that trim can happen in-place.",[],2015-10-29 03:53:37+00:00,2020-12-16 20:05:43+00:00,2020-12-16 20:05:44+00:00,Closed,13114854,DAFFODIL-1435
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"ParseResult (this object is specific to the TextDelimitedParser) this object should go away or be passed in (coming off a local stack) and side-effected as the way to ""return"". It's just a tuple-like thing to gather 3 results into a bag. It gets destructured immediately by the caller I believe.",[],2015-10-29 03:51:40+00:00,2020-12-16 20:05:17+00:00,2020-12-16 20:05:17+00:00,Closed,13114853,DAFFODIL-1434
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Use of a tuple here implies allocation when longestMatch is called. Try to avoid an allocated structure here. Likely it can be part of the PState.,[],2015-10-29 03:51:04+00:00,2020-12-16 20:03:13+00:00,2020-12-16 20:03:13+00:00,Closed,13114852,DAFFODIL-1433
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"TLRegistersPool is a thread local, but we can keep this pool in the pstate to avoid the overhead of the hash-table lookup for ThreadLocal.get. This is true anywhere we have the PState available (or UState for unparser), and we are using any Thread-local thing.",[],2015-10-29 03:50:31+00:00,,2020-12-16 20:01:06+00:00,Open,13114851,DAFFODIL-1432
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This task is to take the DFDL4S schema, or suitable part of it, get some sample data from ESA (European Space Agency), and try it on Daffodil.

As of this writing, the DFDL4S schema language has some incompatibilities with official DFDL, so the schema will have to be massaged to be standard, but this should be straightforward to do, if perhaps a bit tedious, and once done, it should work. 

The modified schema could then be incorporated into our user-submitted tests area.  (Depends on whether ESA minds if we do this. They do keep some control on this software, and that may include the schema. But if we have a partial schema.... maybe ok?)",[],2015-10-28 12:59:09+00:00,2019-06-21 14:43:47+00:00,2019-06-21 14:43:57+00:00,Closed,13114850,DAFFODIL-1431
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We now have this new daffodil-macro-lib module. 

In the projects/build.scala, it is *not* listed as ""nopub"". It seems to be needed to be published, but I don't know why it would be needed.

In creating a scala build for a data format (where the jar created contains the DFDL schema, and can run TDML tests), there is a dependency on the daffodil-tdml library, and this transitively ends up requiring the macroLib, so fails if the projects/build.scala is changed so that macroLib is ""nopub"".

So the task here is figure out why, so that macroLib truly is only needed at scala-compile time for daffodil, and not needed when other consumers of daffodil libraries are used.",[],2015-10-20 22:30:13+00:00,2018-04-30 14:00:51+00:00,2018-05-29 16:26:52+00:00,Closed,13114849,DAFFODIL-1430
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The pretty printer will sometimes wrap lines by inserting whitespace around a simple value e.g., turning 
{code}
<foo>bar</foo>
{code}
into
{code}
<foo>
   bar
</foo>
{code}
This is simply incorrect. It is changing the value into one with whitespace before and after. Not all XML-consuming applications will tolerate this. Some may view this data as invalid, particularly if the ""bar"" is some sort of enumeration constant string. 

We need to modify the pretty printer we use (we have our own variant due to another bug/issue we had to work around about CDATA nodes being dropped) so that it does NOT ever insert spaces around simple values. It can insert whitespace between elements, but not around simple values.",[],2015-10-20 18:59:56+00:00,2016-06-27 15:18:38+00:00,2017-08-01 18:43:45+00:00,Closed,13114848,DAFFODIL-1429
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When loading sbt for the first time after a git clean, we get the following:
{code}
[warn] there were 4 deprecation warning(s); re-run with -deprecation for details
[warn] one warning found
{code}
Need to figure out what these deprecations are and fix them.",[],2015-10-19 17:38:22+00:00,2015-10-20 12:25:14+00:00,2015-11-19 19:09:16+00:00,Closed,13114847,DAFFODIL-1428
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Scala 2.11 supports

-Ywarn-dead-code  -Ywarn-inaccessible -Ywarn-unused-import -Ywarn-unused -Ywarn-infer-any -Ywarn-nullary-override

These will generate warnings that allow us to clean up the code base substantially, and may catch bugs - where we have unused local values for example, but thought we were using them but aren't.",[],2015-10-07 14:45:42+00:00,2015-10-22 15:08:31+00:00,2021-05-20 20:03:12+00:00,Closed,13114846,DAFFODIL-1427
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If you specify an invalid value for dfdl:fillByte (e.g. '10'), daffodil does not fail gracefully with a helpful error message. Instead, you get the following:

{code}
[error] Test edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedData.test_fillByte_01 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:133)
[error] edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.fillByteForCharacterKnownEncoding(TermEncodingMixin.scala:231)
[error] edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.edu$illinois$ncsa$daffodil$dsom$TermEncodingMixin$$fillByteForCharacter(TermEncodingMixin.scala:214)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:133)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.fillByteForCharacterKnownEncoding(TermEncodingMixin.scala:231)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.edu$illinois$ncsa$daffodil$dsom$TermEncodingMixin$$fillByteForCharacter(TermEncodingMixin.scala:214)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$$anonfun$fillByteValue$1.apply$mcI$sp(TermEncodingMixin.scala:201)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$$anonfun$fillByteValue$1.apply(TermEncodingMixin.scala:193)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$$anonfun$fillByteValue$1.apply(TermEncodingMixin.scala:193)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:583)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:579)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermEncodingMixin$class.fillByteValue(TermEncodingMixin.scala:203)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.fillByteValue$lzycompute(Term.scala:69)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.fillByteValue(Term.scala:69)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.edu$illinois$ncsa$daffodil$dsom$ElementBase$$createElementRuntimeData(ElementBase.scala:422)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$elementRuntimeData$1.apply(ElementBase.scala:351)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$elementRuntimeData$1.apply(ElementBase.scala:339)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:583)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:579)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData$lzycompute(ElementBase.scala:352)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData(ElementBase.scala:339)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData$lzycompute(ElementBase.scala:259)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData(ElementBase.scala:259)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$5.apply(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$5.apply(Compiler.scala:120)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.liftedTree1$1(OOLAG.scala:583)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value$lzycompute(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.value(OOLAG.scala:579)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:577)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply$mcV$sp(OOLAG.scala:291)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:291)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$2.apply(OOLAG.scala:291)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:80)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:290)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:350)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.edu$illinois$ncsa$daffodil$compiler$ProcessorFactory$$super$isError(Compiler.scala:133)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:133)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:124)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:124)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:80)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:124)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:124)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:124)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:123)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler.compileSource(Compiler.scala:324)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.edu$illinois$ncsa$daffodil$tdml$TestCase$$compileProcessor(TDMLRunner.scala:402)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.getProcessor(TDMLRunner.scala:419)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:745)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:536)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:306)
[error]     at edu.illinois.ncsa.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:48)
[error]     at edu.illinois.ncsa.daffodil.section12.aligned_data.TestAlignedData.test_fillByte_01(TestAlignedData.scala:213)
[error]     ...

{code}

See test fillByte_01 in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedDataDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedData.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/aligned_data/Aligned_Data.tdml",[],2015-09-25 19:03:04+00:00,2016-06-30 18:46:24+00:00,2016-07-08 16:14:18+00:00,Closed,13114845,DAFFODIL-1426
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Many things use ""downward funargs"", that is, things that pass a function down into another function. Classic example is the scala map function on collections, but any use of call-by-name also seems to generate these closures.

This results in heap allocation of a closure object, and so takes code that would not allocate, and makes it allocate things.

To fix this either one must crank up optimizations so more aggressive inlining takes place (which interferes with debugging), or convert these places to macros instead of higher-order functions.

(Edited: see later comment - this macro approach doesn't work in scala 2.11 for map/foreach because the function object passed takes an argument. Where a zero-argument body expression is passed this approach works, but not if an actual function object is passed.)

Places where this is needed:

Assert.usage and Assert.invariant

Logging (see DFDL1242)

all the ""with body"" functions. Search code for ""def with.*"" to pull up all the with-body definitions. 

OnStack and LocalStack idioms that pop the stack and push the stack automatically.
(Note: OnStack and LocalStack take function arguments that need an argument. We avoid allocation there by aggressive inlining, not by way of macros)

Maybe.map (Note: uses inlining,not macros)

EntityReplacer (note: uses inlining not macros)

To avoid code-size blow-ups, some refactoring may help:
{code}
def withFooBar(body: => Bar) = {
     // bunch of preliminary stuff
     try {
         // protected stuff
         body // call the body function
         // more protected stuff
     } catch {
      /// bunch of catch cases 
     } finally {
       /// finally stuff
    }
    /// wrap up.
}
{code}
Imagine that where the comments are above, there are blocks of code that are fairly long 
and complex.

As a macro, it will want to avoid repetition of these code blocks, so like:
{code}
def withFooBar(body : => Bar) = macro (body) => q""""""
    {
       preliminaryStuff()
     try {
         protected1Stuff()
         $body // call the body function
         protected2Stuff()
     } catch {
       case th: Throwable => handleThrow(th)
     } finally {
       handleFinally()
    }
    wrapUp()
    }""""""
{code}
In the above, the blocks of code that were in the original definition are factored out into callable methods (if they contain any significant quantity of code. Otherwise they can stay as is.)
This avoids repetition of more than just the callouts and try/catch/finally structure.
Note that any time a function is defined on a final class it can be inlined so long as it is not used polymorphically. This can be preferable to converting it into a macro.",[],2015-09-24 17:57:58+00:00,2015-10-22 15:09:33+00:00,2016-10-11 13:45:24+00:00,Closed,13114844,DAFFODIL-1425
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"With the current implementation of Maybe, it requires that the value is an AnyRef, which ends up boxing/unboxing primitive types. We either need to change how Maybe works so that it doesn't box on primitives, or create a new Maybe type that is specialized for primitives to not require boxing.

Additionally, this should have a toString method that allows us to print ""(unknown)"" or something similar for the Nope type to minimize allocations and evaluations of of strings.",[],2015-09-22 15:21:58+00:00,2015-10-06 22:39:10+00:00,2016-10-11 13:47:59+00:00,Closed,13114843,DAFFODIL-1424
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-09-21 16:46:25+00:00,2017-04-06 15:42:33+00:00,2017-04-06 15:42:33+00:00,Closed,13114842,DAFFODIL-1423
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"We should be doing this:
{code}
spf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"", true)
{code}

and simply rejecting things with doctype decls. This would apply to all the XML we consume be it a DFDL schema, configuration file, or input data for unparsing. 

This is needed because of problems that doctype decls can create where the incoming XML can cause the JVM to crash with out-of-memory-errors (OOME). 

See https://en.wikipedia.org/wiki/Billion_laughs for one vulnerability that this fixes.",[],2015-09-21 14:03:36+00:00,2021-05-26 18:15:50+00:00,2021-05-27 19:01:11+00:00,Closed,13114841,DAFFODIL-1422
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Appears to be related to converting strings to enum values, which happens a lot with the dynamic byte order in PCAP.",[],2015-09-09 19:16:23+00:00,2015-09-22 15:44:25+00:00,2016-10-11 13:52:58+00:00,Closed,13114840,DAFFODIL-1421
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This is an issue with scala's XMLEventReader. This bug has been reported and can be tracked here: https://github.com/scala/scala-xml/issues/72 

Once this has been resolved on the scala side, we need to verify that the functionality works within Daffodil.

When attempting to unparse an apostrophe, the following error is thrown:
{code}
[error] Test edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneral.test_apostrophe_01 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Unexpected data ' ' was created.
[error]     at edu.illinois.ncsa.daffodil.tdml.VerifyTestCase$.verifyTextData(TDMLRunner.scala:993)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectSuccess(TDMLRunner.scala:787)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$9.apply(TDMLRunner.scala:752)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$runProcessor$9.apply(TDMLRunner.scala:751)
[error]     at scala.util.Either$RightProjection.foreach(Either.scala:469)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:751)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:536)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:306)
[error]     at edu.illinois.ncsa.daffodil.tdml.Runner.runOneTest(RunnerFactory.scala:48)
[error]     at edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneral.test_apostrophe_01(TestUnparserGeneral.scala:61)

{code}

See test:
apostrophe_01

In the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section00/general/TestUnparserGeneralDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section00/general/TestUnparserGeneral.scala",['beginner'],2015-09-03 11:21:55+00:00,2021-02-01 17:21:04+00:00,2021-02-02 12:58:55+00:00,Closed,13114839,DAFFODIL-1420
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"While profiling, it became very clear that a great deal of allocations are related to the slots in a DIComplex element. Many Maybe's are allocated (even though it's a value class, it's in an array, so they must be allocated). Additionally, many int arrays are allocated for saving the state of a dicomplex. It's unclear how much of a performance impact these allocations are causing, but if these arrays are very sparse, switching to something like a Map or some other data structure that is efficient for sparse arrays should decrease the number of allocations.

We may need to due some performance testing to see if these allocations are even a problem, but they are certainly up there in some of the most numerous allocations.",[],2015-09-02 16:30:23+00:00,2015-10-28 13:32:39+00:00,2016-10-11 13:47:44+00:00,Closed,13114838,DAFFODIL-1419
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example, this:
{code}
  <xsd:simpleType name=""Foo"">
    <xsd:restriction base=""xsd:decimal"">
      <xsd:minInclusive value=""-180.0"" />
      <xsd:maxInclusive value=""20.0"" />
    </xsd:restriction>
  </xsd:simpleType>
{code}
Causes the error:
{code}
[error] Schema Definition Error: checkValueSpaceFacetRange - Unrecognized primitive type: Decimal
{code}",[],2015-09-02 15:38:29+00:00,2021-02-04 14:57:16+00:00,2021-05-18 10:24:45+00:00,Closed,13114837,DAFFODIL-1418
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are a few deprecation warnings in the code currently which draw attention to a problem with the parser.

Currently, the mark/reset/discard methods of DataInputStream and PState make copies of objects, and assign objects by value (that is assign one data member after another until the whole object has been assigned).

These objects are heap allocated, and hence will impact the overhead of garbage collection.

At minimum an OnStack should be used so these objects are taken from a thread-local pool as needed. Alternatively, and perhaps preferably, these objects should be replaced by mutable stacks that are pushed/popped to save/restore the values of the various ""slots"" of the state.

It is worth investigating exactly what all actually needs to be saved/restored, as it may be far less than everything that is being saved/restored now. For example in PState there is a sub-object called MPState that is not, I believe, being copied even though it does contain some amount of mutable state.",[],2015-08-27 13:19:39+00:00,2015-09-01 20:05:52+00:00,2015-12-16 15:37:01+00:00,Closed,13114836,DAFFODIL-1417
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"All our stacks, and there are quite a few in both PState and UState, should be checked via Assert.invariant at the end of parse/unparse to be sure they are empty.",[],2015-08-27 13:12:39+00:00,2017-07-11 14:47:38+00:00,2017-07-26 20:33:52+00:00,Closed,13114835,DAFFODIL-1416
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The DFA (deterministic finite automaton) layer does several things it shouldn't.

# returns Either objects - these must be allocated, just to identify the return type. This should instead put the result in the Registers or other state objects and just return a boolean flag or case object.
# Registers objects are allocated frequently. These can just be a static part of the state of the parser - there is a maximum number of them we need given the most-complex combination of delimiters and escape schemes. We can put that many of them statically into the PState.
# Rules - this uses anonymous classes. These may or may not have performance impact, but they definitely make the code harder to debug, and in general for performance-sensitive inner-loop-like parts of the code base, we want to use a more Java-like coding style. These should become ordinary named object classes.

(note: removed discussion of markPos/resetPos, as that has been implemented on 1.2.0)",[],2015-08-27 13:10:14+00:00,2015-10-29 14:29:13+00:00,2016-10-11 13:44:51+00:00,Closed,13114834,DAFFODIL-1415
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fixed length things like strings or numbers, cannot be empty and so can never have default values be used. 

We should issue an SDE (or possibly a warning) if this is encountered.",[],2015-08-26 20:48:31+00:00,2015-12-18 14:12:26+00:00,2015-12-18 14:12:26+00:00,Closed,13114833,DAFFODIL-1414
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fixed length strings cannot have a default value because they cannot be empty.

TBD: is a fixed length of 0 allowed? That would be an exception.

Should issue an SDE if there is an XSD default attribute for a fixed length string (or really any time the concept of empty is not defined for a simple type element)",[],2015-08-21 14:55:16+00:00,2015-09-02 19:37:40+00:00,2017-08-17 13:50:35+00:00,Closed,13114832,DAFFODIL-1413
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2015-08-21 14:13:52+00:00,,2018-09-13 14:04:23+00:00,Open,13114831,DAFFODIL-1412
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I recently discovered that scala.collection.mutable.Stack is implemented in terms of a scala.collection.immutable.List.

So every push allocates, every pop discards a list cell.

We push and pop a bunch of stacks for every move the parser and unparser make. 

In addition the length() method takes O(n) time for n items on the stack, though I'm not sure we ever call this.

We should build a mutable stack class that uses an ArrayBuffer for the implementation.

This will likely be faster, and will not push hard on the garbage collector.",[],2015-08-20 23:47:17+00:00,2015-08-26 12:27:31+00:00,2015-09-02 12:25:55+00:00,Closed,13114830,DAFFODIL-1411
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In some cases, the data shown does not line up with the data that was actually parsed. Additionally, sometimes the indicator bars appear to be off or extend past the data dumps.",[],2015-08-20 19:41:51+00:00,2015-08-24 14:07:02+00:00,2017-07-26 20:21:13+00:00,Closed,13114829,DAFFODIL-1410
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"There are other places where we should use the UniquenessCache - QName objects - we really should arrange for comparing them to be a pointer comparison of an NS (now interned in the UniquenessCache) and a pointer comparison of an interned local name (aka a Symbol). 

We do lots and lots of QName comparisons all over the place, both in the compiler and the runtime for both parser and unparser.",[],2015-08-14 11:35:03+00:00,2020-12-16 19:54:05+00:00,2020-12-16 19:54:05+00:00,Closed,13114828,DAFFODIL-1409
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-08-13 14:02:23+00:00,2015-08-14 11:55:11+00:00,2016-09-29 16:45:17+00:00,Closed,13114827,DAFFODIL-1408
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A define format statement like this:
{code}
<dfdl:defineFormat>                
<!-- a final NL isn't part of the data. Max line length is 69, which
                can force the // onto the next line -->
    <dfdl:format ..../>
</dfdl:defineFormat>
{code}
Gets an error:  ""dfdl:defineFormat does not contain a dfdl:format element""

This comment should be tolerated and skipped over.",['beginner'],2015-08-06 21:25:45+00:00,2019-03-28 18:17:57+00:00,2021-05-20 12:34:19+00:00,Closed,13114826,DAFFODIL-1407
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"notYetImplemented(""nilKind='literalValue' with lengthKind='bits'"")

This should say ""lengthUnits='bits'"", not lengthKind.",['beginner'],2015-08-06 16:22:55+00:00,,2020-12-16 19:51:42+00:00,Open,13114825,DAFFODIL-1406
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"the dfdl:byteOrder property is not supposed to influence the endian-ness of encoding code points.

the encoding ""utf-16"" is currently accepted by daffodil. However, we don't implement unicode byte order marks. Hence, this encoding is ambiguous, as is utf-32.

We should reject these encodings until such time as unicode byte order mark support is implemented.",[],2015-07-29 15:26:50+00:00,2016-07-21 12:57:14+00:00,2016-07-21 12:58:12+00:00,Closed,13114824,DAFFODIL-1405
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Example of functionality and error:
{code}
> test:test-only edu.illinois.ncsa.daffodil.section07.escapeScheme.TestEscapeSchemeUnparse -- --tests=test_unparseDelimitedEscapedString12
[trace] Stack trace suppressed: run last daffodil-test/test:testOnly for the full output.
[error] (daffodil-test/test:testOnly) java.lang.IllegalArgumentException: Argument unrecognized by ScalaTest's Runner: --tests=test_unparseDelimitedEscapedString12
{code}",[],2015-07-27 19:36:30+00:00,2015-08-11 19:36:44+00:00,2015-08-24 13:20:02+00:00,Closed,13114823,DAFFODIL-1404
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The pcap performance tests are experiencing errors. The errors vary depending on how many files are being parsed/threads are being used.

2 threads and 10 files:
{code}
[~/daffodil] (1.2.0)$ ~/daffodil/daffodil-cli/target/universal/stage/bin/daffodil performance  -s ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.dfdl.xsd -t 2 -N 10 ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/icmp.cap

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Should not be allowing propagation of java.lang.IndexOutOfBoundsException
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:146)
edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:204)
edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:146)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:204)
	at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
	at edu.illinois.ncsa.daffodil.processors.parsers.BinaryNumberBaseParser.parse(BinaryNumberParsers.scala:203)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:244)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:213)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:206)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:205)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:189)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:870)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

10 threads 100 files:
{code}
[~/daffodil] (1.2.0)$ ~/daffodil/daffodil-cli/target/universal/stage/bin/daffodil performance  -s ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.dfdl.xsd -t 10 -N 100 ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/icmp.cap
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.lang.IllegalArgumentException

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.nio.BufferOverflowException
	at java.nio.HeapByteBuffer.put(HeapByteBuffer.java:206)
	at edu.illinois.ncsa.daffodil.io.LongConverter$class.populateSmallBuf(ByteBufferDataInputStream.scala:1290)
	at edu.illinois.ncsa.daffodil.io.Converter_LE_MSBFirst$.populateSmallBuf(ByteBufferDataInputStream.scala:1350)
	at edu.illinois.ncsa.daffodil.io.Converter_LE_MSBFirst$.getSignedLong(ByteBufferDataInputStream.scala:1353)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.getSignedLong(ByteBufferDataInputStream.scala:616)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.getSignedBigInt(ByteBufferDataInputStream.scala:641)
	at edu.illinois.ncsa.daffodil.io.ByteBufferDataInputStream.getUnsignedBigInt(ByteBufferDataInputStream.scala:698)
	at edu.illinois.ncsa.daffodil.processors.parsers.BinaryNumberBaseParser$$anonfun$parse$1.apply$mcV$sp(BinaryNumberParsers.scala:212)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:201)
	at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
	at edu.illinois.ncsa.daffodil.processors.parsers.BinaryNumberBaseParser.parse(BinaryNumberParsers.scala:203)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:244)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:213)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:206)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:205)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:189)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:870)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

10 threads 10,000 files:
{code}
[~/daffodil] (1.2.0)$ ~/daffodil/daffodil-cli/target/universal/stage/bin/daffodil performance  -s ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.dfdl.xsd -t 10 -N 10000 ~/daffodil/daffodil-examples/src/test/resources/edu/illinois/ncsa/daffodil/pcap/icmp.cap
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.nio.BufferOverflowException
Unexpected throw of java.nio.BufferOverflowException

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Should not be allowing propagation of java.lang.IndexOutOfBoundsException
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:146)
edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:204)
edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:146)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:204)
	at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
	at edu.illinois.ncsa.daffodil.processors.parsers.BinaryNumberBaseParser.parse(BinaryNumberParsers.scala:203)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:71)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:213)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$1.apply(Parser.scala:209)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:209)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:140)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:139)
	at scala.Option.foreach(Option.scala:236)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:139)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:244)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:213)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:206)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:205)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:189)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85$$anonfun$87.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:874)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$83$$anonfun$84$$anonfun$85.apply(Main.scala:870)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)
	at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{code}

We can split these out into separate tickets if they seem to be separate issues.",[],2015-07-27 13:50:01+00:00,2015-08-06 22:33:34+00:00,2017-06-01 22:33:07+00:00,Closed,13114822,DAFFODIL-1403
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Blocker,"If you run the CLI with the interactive debugger, and then attempt to display your utf-16 input data, you get an abort exception. Note that if you don't display the data and just continue through, the data will parse without issues. It seems that 'info data' specifically needs a byte order to work.

If you run the following command (note that I use an alias for the CLI, replace daffodil_cli with the path to the CLI):
{code}
echo -ne '\x00\x74\x24\x0A\x00\x65' > hextest && daffodil_cli -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/utf16schema.dfdl.xsd --root e2 hextest
{code}
and then at the debug prompt enter
{code}
(debug) info data
{code}
You get the following error:
{code}
edu.illinois.ncsa.daffodil.exceptions.Abort: encoding does not specify byte order: UTF-16
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usageError(Assert.scala:93)
edu.illinois.ncsa.daffodil.io.Dump$.getTextParameters(Dump.scala:586)
edu.illinois.ncsa.daffodil.io.Dump$.dumpHexAndTextBytes(Dump.scala:202)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageError(Assert.scala:93)
	at edu.illinois.ncsa.daffodil.io.Dump$.getTextParameters(Dump.scala:586)
	at edu.illinois.ncsa.daffodil.io.Dump$.dumpHexAndTextBytes(Dump.scala:202)
	at edu.illinois.ncsa.daffodil.io.Dump$.dump(Dump.scala:116)
	at edu.illinois.ncsa.daffodil.processors.DataLoc.dumpStream(InStream.scala:706)
	at edu.illinois.ncsa.daffodil.processors.DataLoc.dump(InStream.scala:668)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.printData(InteractiveDebugger.scala:1180)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.act(InteractiveDebugger.scala:1213)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$act$9.apply(InteractiveDebugger.scala:1069)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$act$9.apply(InteractiveDebugger.scala:1068)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.act(InteractiveDebugger.scala:1068)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$.act(InteractiveDebugger.scala:576)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommand.apply(InteractiveDebugger.scala:366)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.edu$illinois$ncsa$daffodil$debugger$InteractiveDebugger$$runCommand(InteractiveDebugger.scala:318)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$debugStep$1.apply$mcV$sp(InteractiveDebugger.scala:192)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$debugStep$1.apply(InteractiveDebugger.scala:159)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$debugStep$1.apply(InteractiveDebugger.scala:159)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.debugStep(InteractiveDebugger.scala:159)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.startElement(InteractiveDebugger.scala:212)
	at edu.illinois.ncsa.daffodil.events.MultipleEventHandler$$anonfun$startElement$1.apply(ParseEventHandler.scala:100)
	at edu.illinois.ncsa.daffodil.events.MultipleEventHandler$$anonfun$startElement$1.apply(ParseEventHandler.scala:100)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.events.MultipleEventHandler$class.startElement(ParseEventHandler.scala:100)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.startElement(Runtime.scala:114)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:132)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:250)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:238)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:231)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:230)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:202)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69.apply(Main.scala:720)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$69.apply(Main.scala:718)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:717)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1126)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}

Note that this particular test is a negative test, so we are expecting an error in the end (just not this error).

This will soon be made into an automated test. Will update ticket with that test once it has been written.",[],2015-07-24 13:32:08+00:00,2016-07-22 14:57:47+00:00,2017-06-01 22:33:07+00:00,Closed,13114821,DAFFODIL-1402
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"If you look at the pcap schema. There's a need to have dfdl:byteOrder on a bunch of the elements and sequences up until it gets to the magic number element. 

I am not thrilled about having to add these byteOrder properties to these elements and sequences.

Optimizing this requirement out requires that we recognize that no alignment other than to byte boundaries is needed, which means there is a known charset that has 8-bit mandatory alignment, or there are no delimiters, and there must be only alignment (in Bits) that is a multiple of 8 bits. 

And if the component is an element of simple type, then it must not be binary numeric of more than one byte. 

In that case, there's no way an alignment region can be needed other than one that skips forward to a byte boundary, so byte order isn't meaningful for the component. 

But even that isn't enough. If an element is an array, and complex type, and the byte order varies inside child elements of the array, then the array could start with byte order say, bigEndian, same as what precedes the array contextually, but the last thing in it might be littleEndian, so when the next repetition is encountered, the current state is littleEndian, not bigEndian. 

It's actually worse than that. The array element and its model-group might have no byteOrder needs, but a child inside it may need say, bigEndian. a later sibling of that needs littleEndian. In other words, we can't figure this out from looking at the starting context of the array.",[],2015-07-23 20:34:33+00:00,,2020-12-16 19:50:44+00:00,Open,13114820,DAFFODIL-1401
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Some changes have broken test test_text_entities_6_03b.

This test is of an obscure corner case where separators are in a different encoding than the strings they separate. 

Search for DFDL-1400 in the code base to find where this is relevant for fixing.",[],2015-07-22 16:29:46+00:00,2019-03-28 18:06:55+00:00,2021-05-20 12:35:07+00:00,Closed,13114819,DAFFODIL-1400
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We submitted a number of bugs on the scala xml library to the scala support site.

However, scala's XML support is now community maintained on a github site.

We should re-enter our bugs into the github system, and xref back to the original (now closed) scala support tickets.

Then we should think about how to get them fixed, as they would simplify our code substantially if the scala XML support didn't have these issues.

Original tickets are: 

https://issues.scala-lang.org/browse/SI-7796 - XMLEventReader does not handle &apos; properly

https://issues.scala-lang.org/browse/SI-3527 - XML ConstructingParser too aggressive trimming whitespace around character references

Note: This one says fixed in Scala 2.11.7 - https://issues.scala-lang.org/browse/SI-3368 - Preserve CDATA sections, don't convert them to generic Text nodes.

https://issues.scala-lang.org/browse/SI-4303 - PrettyPrinter strips newlines from text in nodes, even pcdata

https://issues.scala-lang.org/browse/SI-4543 - PrettyPrinter removes newlines",[],2015-07-22 11:28:31+00:00,2015-10-28 13:54:45+00:00,2015-12-16 22:32:12+00:00,Closed,13114818,DAFFODIL-1399
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"An assertion is thrown in StatementElementBeing:
{code}
Assert.invariant(infoElement.runtimeData == erd)
{code}
It appears these two runtimedata's reference the same element, but something is still not the same. Need to investigate.",[],2015-07-21 14:03:41+00:00,2015-07-21 17:16:52+00:00,2017-07-31 20:49:19+00:00,Closed,13114817,DAFFODIL-1398
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example, say we have the following data in the infoset:
{code}
<foo>This contains a block end &quote; followed by more text</foo>
{code}
And assume that this text is in a block escape with quotes, and a slash escaping the block end character. When unparsed, the above should look like this:
{code}
""This contains a block end \"" followed by more text""
{code}
However, we currently get the following:
{code}
""This contains a block end \""ollowed by more text""
{code}
So the two characters immediately following the escaped quote are lost (in this example, the space character and the f).",[],2015-07-21 13:38:20+00:00,2015-07-24 13:35:09+00:00,2015-07-28 16:31:52+00:00,Closed,13114816,DAFFODIL-1397
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We currently have the ability to specify a file to use as the document in a test case. It would be nice if we could also specify a file to be used as the infoset, especially for unparser test cases.",[],2015-07-21 13:13:29+00:00,2016-11-22 18:55:52+00:00,2017-07-31 20:50:30+00:00,Closed,13114815,DAFFODIL-1396
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"See DFDL-1369 for context. We currently map any illegal XML char to a value in the PUA (Private Use Area) on parse, then map it back to the illegal char on unparse. However, if you attempt to unparse an actual PUA value, Daffodill incorrectly maps it back to an illegal character.

See tests:
test_puaInfosetChars_03
test_puaInfosetChars_04

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section00/general/TestUnparserGeneralDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section00/general/TestUnparserGeneral.scala",[],2015-07-21 13:07:24+00:00,2020-12-16 19:50:21+00:00,2020-12-16 19:50:21+00:00,Closed,13114814,DAFFODIL-1395
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are places where a format is all text, in a ordinary byte encoding like ascii or utf-8, yet alignmentFillParser is still inserted.

The optimization depends on this logic, which is not correct, as it never actually looks to see if something is of byte length at all. 

{code}
final override lazy val isKnownToBePrecededByAllByteLengthItems: Boolean = {
    val es = nearestEnclosingSequence
    es match {
      case None => true
      case Some(s) => {
        if (s.groupMembers.head eq this) s.isKnownToBePrecededByAllByteLengthItems
        else {
          //pass for now
          val index = s.groupMembers.indexOf(this)
          s.groupMembers.slice(0, index).forall { _.isKnownToBePrecededByAllByteLengthItems }
        }
      }
    }
  }
{code}",[],2015-07-20 22:47:10+00:00,2017-04-05 11:59:17+00:00,2017-07-27 14:23:11+00:00,Closed,13114813,DAFFODIL-1394
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Blocker,"Seems minor, but the following warning now shows up when running the CLI:
{code}
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
{code}",[],2015-07-17 20:08:48+00:00,2016-07-19 19:36:06+00:00,2016-10-11 13:21:33+00:00,Closed,13114812,DAFFODIL-1393
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Issue with escapeEscape character that is first and precedes an escape-block start. 
It is being removed, but should be preserved as it does not precede an escape character, nor an escape block end.

See test_BA000 in daffodil-test-ibm1",[],2015-07-17 18:40:36+00:00,,2020-12-16 19:48:19+00:00,Open,13114811,DAFFODIL-1392
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running multithreaded performance tests for parsing complex textual data, roughly 3/5 executions will fail with the following error:

{code}
java.lang.StringIndexOutOfBoundsException: String index out of range: 7
        at java.lang.String.charAt(String.java:646)
        at java.util.regex.Pattern$BmpCharProperty.match(Pattern.java:3797)
        at java.util.regex.Pattern$Branch.match(Pattern.java:4604)
        at java.util.regex.Pattern$GroupHead.match(Pattern.java:4658)
        at java.util.regex.Pattern$Loop.matchInit(Pattern.java:4804)
        at java.util.regex.Pattern$Prolog.match(Pattern.java:4741)
        at java.util.regex.Pattern$Start.match(Pattern.java:3461)
        at java.util.regex.Matcher.search(Matcher.java:1248)
        at java.util.regex.Matcher.find(Matcher.java:637)
        at edu.illinois.ncsa.daffodil.processors.parsers.NilMatcherMixin$class.isFieldNilLiteral(NilMatcherMixin.scala:88)
        at edu.illinois.ncsa.daffodil.processors.parsers.LiteralNilDelimitedEndOfDataParser.isFieldNilLiteral(DelimitedParsers.scala:120)
        at edu.illinois.ncsa.daffodil.processors.parsers.LiteralNilDelimitedEndOfDataParser.processResult(DelimitedParsers.scala:146)
        at edu.illinois.ncsa.daffodil.processors.parsers.StringDelimitedParser$$anonfun$parse$1.apply$mcV$sp(DelimitedParsers.scala:116)
        at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:226)
        at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases1.scala:45)
        at edu.illinois.ncsa.daffodil.processors.parsers.StringDelimitedParser.parse(DelimitedParsers.scala:89)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$3.apply(Parser.scala:187)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$3.apply(Parser.scala:182)
        at scala.collection.immutable.List.foreach(List.scala:318)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser.parse(Parser.scala:182)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:135)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:134)
        at scala.Option.foreach(Option.scala:236)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:134)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:220)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.DelimiterStackParser.parse(ElementKindParsers.scala:130)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:70)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:135)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:134)
        at scala.Option.foreach(Option.scala:236)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:134)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:158)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:155)
        at scala.collection.immutable.List.foreach(List.scala:318)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:155)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepAtMostTotalNParser.parseAllRepeats(RepParsers.scala:153)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepParser.parse(RepParsers.scala:79)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:158)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:155)
        at scala.collection.immutable.List.foreach(List.scala:318)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:155)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepAtMostTotalNParser.parseAllRepeats(RepParsers.scala:153)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepParser.parse(RepParsers.scala:79)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.ArrayCombinatorParser.parse(ElementKindParsers.scala:252)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:158)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:155)
        at scala.collection.immutable.List.foreach(List.scala:318)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:155)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:220)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.DelimiterStackParser.parse(ElementKindParsers.scala:130)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:70)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:135)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:134)
        at scala.Option.foreach(Option.scala:236)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:134)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepExactlyNParser.parseAllRepeats(RepParsers.scala:121)
        at edu.illinois.ncsa.daffodil.processors.parsers.RepParser.parse(RepParsers.scala:79)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:158)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:155)
        at scala.collection.immutable.List.foreach(List.scala:318)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:155)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.ArrayCombinatorParser.parse(ElementKindParsers.scala:252)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:220)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:70)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:135)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$parse$3.apply(ElementCombinator1.scala:134)
        at scala.Option.foreach(Option.scala:236)
        at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:134)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:85)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.edu$illinois$ncsa$daffodil$processors$DataProcessor$$doParse(Runtime.scala:250)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:238)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:231)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:230)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:202)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$77$$anonfun$78$$anonfun$79$$anonfun$81.apply(Main.scala:849)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$77$$anonfun$78$$anonfun$79$$anonfun$81.apply(Main.scala:849)
        at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$77$$anonfun$78$$anonfun$79.apply(Main.scala:849)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$77$$anonfun$78$$anonfun$79.apply(Main.scala:845)
        at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)
        at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
{code}


The other 2/5 pass without issues. Single-threaded tests do not experience this problem.",[],2015-07-16 21:21:34+00:00,2015-07-24 13:41:08+00:00,2015-08-24 13:41:56+00:00,Closed,13114810,DAFFODIL-1391
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Eventually I want to change the way encodings and byte order are done to be like BitOrder. There should be a EncodingChangeParser (and Unparser) which is inserted when a change may be needed. This ""parser"" or unparser would just do that change. Since the vast majority of data formats will use a single encoding throughout all their textual data, this will reduce overhead since there is a fair amount of inspection and such we have to do each time we set the encoding.",[],2015-07-14 19:53:12+00:00,2015-07-24 14:07:55+00:00,2015-12-16 16:02:55+00:00,Closed,13114809,DAFFODIL-1390
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I believe that the TDML Runner used to complain if you attempted to set a negative test (one that expected and resulted in errors) to roundTrip=""true"". This is no longer the case. There are several test cases that are currently set to roundTrip = ""true"" that will never reach the second leg of the trip. They currently pass without any error or warning to the user that the test is invalid. For an example, see test infInvalidType in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberProps.scala",['beginner'],2015-07-06 14:32:33+00:00,,2020-12-16 19:45:54+00:00,Open,13114808,DAFFODIL-1389
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, the TDML Runner only counts a roundTrip test as a single test. For example, if we have 2,000 parser tests, and we mark them all as roundTrip = true. We technically have 4,000 tests - 2,000 parse and 2,000 unparse. However, as far as the TDML Runner is concerned, we only have 2,000 tests. Would it be possible to have the TDML Runner account for both the parse and unparse portion of the test? Or even a breakdown would be nice:

Passed: Total 2000
Parse only:  800
Unparse only: 200
Roundtrip: 1000

or would that be confusing? I'm open for suggestions. I just want our numbers to reflect the actual level of test coverage.",[],2015-07-06 14:11:34+00:00,2020-12-16 19:44:49+00:00,2020-12-16 19:44:49+00:00,Closed,13114807,DAFFODIL-1388
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Tests used to show a data dump for things like left over data but this seems to be missing now.

For example:
{noformat}
echo -ne ""string|123456"" | daffodil_cli parse -s ./daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/cli_schema.dfdl.xsd -r leftover
{noformat}

Output used to be similar to:
{noformat}
[error] Left over data. 11 bytes available. Location: byte 10
UTF-8 text starting at byte 8 is: (234)
Data (hex) starting at byte 8 is: (0x323334)
<ex:leftover xmlns:ex=""http://example.com"">
  <ex:e3>string</ex:e3>
  <ex:e4>123</ex:e4>
</ex:leftover>
 {noformat}

Now looks like:
{noformat}
[error] Left over data. 13 bytes available. Location: byte 10 limit 13
<ex:leftover xmlns:ex=""http://example.com"">
  <e3>string</e3>
  <e4>123</e4>
</ex:leftover>
{noformat}",[],2015-07-01 19:50:41+00:00,2019-07-01 11:30:52+00:00,2021-05-20 12:34:17+00:00,Closed,13114806,DAFFODIL-1387
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Recent changes in 1.2.0 to the data input layers removed a feature which is the ability to treat surrogate pair characters as single characters.

See test_encodingNoError. 

This test has a TDML representation where a single character in utf-8 that has a 4-byte encoding has to become a surrogate-pair (two codepoints) in a java/scala string, but the data input stream's char iterator on a call to next() returns only 1 codepoint. There is no accomodation in the data input stream layers for the possibility of a single character needing 2 codepoints.",[],2015-06-30 17:15:41+00:00,2018-10-23 13:10:42+00:00,2018-10-23 13:10:42+00:00,Closed,13114805,DAFFODIL-1386
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The following test fails with recent changes to better support choice branch events: test_3395_CLI_Performance_5_Threads_50_Times

It looks like it is not properly finding events. The scheme should only have start events, but both branches of the choice claim the have a valid end identifying event. Perhaps related to group refs.",[],2015-06-30 16:51:16+00:00,2015-06-30 19:50:59+00:00,2015-07-03 11:30:58+00:00,Closed,13114804,DAFFODIL-1385
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note from Mike:
Our TDML runner and other unit test rigs we use, compare the resulting infosets in a way that strips off all attributes, and all namespace prefixes. This was done for expediency, because earlier versions of Daffodil were not doing elementFormDefault and getting all the namespace prefix definitions minimized and such, so we were getting false negative comparisons.

I guess we need a mode which turns this off so tests can be more rigid than this in comparison. There may be a JIRA ticket for this already.

One thing for us to consider is getting an XML-comparison 3rd party library. This issue of comparing XML in a way that is not sensitive to how namespaces are prefixed so long as they are the right namespaces, has already been solved.

-------------------------

In order to fully test DFDL-1330, we need the ability to perform this strict comparison, so we can verify when namespace prefixes are present in the result.",[],2015-06-30 14:58:37+00:00,2018-01-05 19:48:08+00:00,2018-01-05 19:48:08+00:00,Closed,13114803,DAFFODIL-1384
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"In some cases, a roundTrip unparser test will unparse successfully, but the parse will then fail. Even if this failure is expected, there is no way in the TDML test to expect an error specifically on the parse.",[],2015-06-24 19:28:06+00:00,2015-06-25 13:05:06+00:00,2015-06-30 13:21:50+00:00,Closed,13114802,DAFFODIL-1383
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This was first mentioned in DFDL-1302. The associated test is impOptArrayThenScalar02parse in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section16/array_optional_elem/UnparseArrayImplicitOptionalElem.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestUnparseArrayOptionalElemDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestUnparseArrayOptionalElem.scala

Note from the ticket:

I think the issue with the parse case is just a diagnostic issue. What is happening is it's successfully parsing ""3"" as the first <opt> element. It then tries to parse another <opt> element, but there is no data left over. So it completes the <opt> array, having successfully parsed a single occurrence. It then goes on to attempt to parse the required ""sca"" element. As before, there is no data, so it fails to parse <sca> and then prints the ""insufficient bits"" error. So this is just an example of correct behavior, but poor diagnostics.

The test was changed to behave as expected, but this ticket reflects the poor diagnostic message.",[],2015-06-24 14:35:05+00:00,2015-08-12 17:29:27+00:00,2015-09-02 13:17:28+00:00,Closed,13114801,DAFFODIL-1382
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"{noformat}
edu.illinois.ncsa.daffodil.dsom.RuntimeSchemaDefinitionError: Runtime Schema Definition Error: Unparser (InitiatedContent) is not yet implemented.
[error] Schema context: element.s2. Location line 55 column 18 in file:/tmp/s1_8261713119829346735.dfdl.xsd. Data Context: byte 4 limit 0.
[error]     at edu.illinois.ncsa.daffodil.processors.ParseOrUnparseState.SDE(PState.scala:184)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.DummyUnparser.unparse(Unparser.scala:118)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:62)
{noformat}

See test_unparse_initiatedContentChoice1 in files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section15/choice_groups/TestChoiceGroupInitiatedContentDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section15/choice_groups/ChoiceGroupInitiatedContent.tdml",[],2015-06-23 21:16:57+00:00,2015-06-24 13:23:53+00:00,2015-06-24 21:23:43+00:00,Closed,13114800,DAFFODIL-1381
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The Java 8 javadoc tool has a feature called -Xdoclint, which performs extra checks on the javadoc. One of these checks is to ensure that any @throws tags in the javadoc have a corresponding throws clause in Java. For example{code:language=java}
/**
 * Function that throws exceptions
 *
 * @throws IOException when io is bad
 * @returns foo
 */
void function() throws IOException { ... }
{code}

However, version 9 of the genjavadoc plugin did not generate the throws clause for the scala @throws attribute. So, the generated java code failed the doclint checks. To get around this, doclint was turned off in commit 124151db82add3f2494f32818c29755d64b98f3c of DFDL-1367.

Version 10 of the plugin will have support for generating the throws clause from scala @throws annotations. When that is released we should update to that and enable the doclint javadoc feature.",['beginner'],2015-06-22 15:05:34+00:00,2019-02-21 23:06:59+00:00,2021-05-20 20:01:40+00:00,Closed,13114799,DAFFODIL-1380
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"There are free or low-cost tools from Black Duck and Sonatype which are scanners that examine the specific versions of OSS components in a system and which report on their known security vulnerabilities.

E.g., http://www.businesswire.com/news/home/20150618005073/en/Black-Duck-Releases-Free-Vulnerability-Plugin-Open#.VYP9u_lViko

(Perhaps atlassian - which is the tool set - mostly - at ncsa.illinois.edu, also has one of these?)

We should look into adding one of these to our build process. It goes hand in hand with the tool we use to gather up and generate the license pages, and given the kinds of applications in network security that people discuss using DFDL for, this would be a value-add.",[],2015-06-22 12:29:44+00:00,2020-10-21 19:28:32+00:00,2021-05-24 11:12:47+00:00,Closed,13114798,DAFFODIL-1379
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"When parsing with a textNumberPattern that contains the grouping separator, the comma doesn't seem to be required in the input, even when textNumberCheckPolicy=""strict"". There should be some way to force the inclusion of the comma in the input.

So if textNumberPattern=""#,##0.##;-#,##0.##"" there should be a way to have input like ""12345"" (no commas) fail.",[],2015-06-19 19:52:40+00:00,2015-06-22 12:39:20+00:00,2015-06-23 21:31:58+00:00,Closed,13114797,DAFFODIL-1378
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I'm not 100% sure of how this is supposed to work but I'm seeing an issue with using textNumberPattern. In my tests I am using a schema with textNumberPattern=""#,##0.###;-#,##0.###"". 

For parsing, the test uses ""1576"" as the input and the infoset comes out with ""<ex:e1>1576</ex:e1>"" (no comma). Note: ""1,576"" has the same result. Dropping the grouping separator is documented in the spec so no surprises there.

I was expecting unparse to be able to reverse this though since I thought that was generally the goal. Passing in the exact infoset from parsing (with no comma), the result is ""1,576"". I get that this is using the textNumberPattern but it's confusing that just reversing the parse test case fails. Is this expected behavior and just not a test that can be exactly reversed? 

The other problem is that I've added roundTrip=""true"" to the parser test case and it still passes. If it is doing the round trip I would expect unparse to use the comma and cause the test to fail.

See tests:
test_unparse_int_01
test_parse_int_01

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberPropsUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsUnparseDebug.scala",[],2015-06-19 18:50:18+00:00,2015-06-19 19:29:58+00:00,2015-06-22 12:22:59+00:00,Closed,13114796,DAFFODIL-1377
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-06-19 11:40:55+00:00,2015-06-22 12:49:29+00:00,2015-06-23 14:10:07+00:00,Closed,13114795,DAFFODIL-1376
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"Since support for Java 7 is being removed with 1.2.0 the wiki will have to be updated to show the new requirement for Java 8. 

These are the pages I saw that need to be updated:
https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Getting+Started+for+Developers
https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Installing+Java+7+SDK
https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Getting+Started+for+Users
https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Project+Tools
https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Install+and+Configure+Cygwin+for+Windows",[],2015-06-17 03:36:27+00:00,2016-10-19 22:01:54+00:00,2016-11-02 18:44:29+00:00,Closed,13114794,DAFFODIL-1375
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"When running a CLI test with Java 7, I was expecting an error but not the unexpected exception message.

{noformat}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.

Schema Definition Error: You must run Java 8 (1.8) or higher. You are currently running 1.7.0_45
Schema context: element.e1. Location line 49 column 4 in file:/home/efinnegan/Projects/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/generalSchema.dfdl.xsd.
	at edu.illinois.ncsa.daffodil.dsom.ImplementsThrowsSDE$class.SDE(SDE.scala:228)
	at edu.illinois.ncsa.daffodil.processors.TermRuntimeData.SDE(RuntimeData.scala:70)
	at edu.illinois.ncsa.daffodil.processors.SchemaSetRuntimeData.SDE(SchemaSetRuntimeData.scala:52)
	at edu.illinois.ncsa.daffodil.util.CheckJavaVersion$.checkJavaVersion(CheckJavaVersion.scala:43)
{noformat}",[],2015-06-16 22:32:27+00:00,2016-07-18 16:34:23+00:00,2017-07-28 15:33:05+00:00,Closed,13114793,DAFFODIL-1374
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Latest changes to support debugging of unparsing have disabled the debugger's
* set dataLength
* set wrapLength
commands. 

It might not be worth re-implementing these. I.e., we can fix them, or we can remove them.",[],2015-06-16 19:04:25+00:00,,2020-12-16 19:43:38+00:00,Open,13114792,DAFFODIL-1373
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I was not able to get sbt's license thing to include a link or the license file for the third-party-source/passera-unsigned library.

This is a source code that is just under third-party-source since we didn't write it. It has a BSD-like license, which simply lives in a file in the passera-unsigned directory.",[],2015-06-16 16:44:59+00:00,2015-09-02 16:36:07+00:00,2015-09-02 19:25:00+00:00,Closed,13114791,DAFFODIL-1372
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-06-15 17:27:45+00:00,2017-04-04 20:22:40+00:00,2017-07-27 12:53:31+00:00,Closed,13114790,DAFFODIL-1371
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Current code has HasDelimiterText trait/class - which has been renamed to ComputeValueFoundInstead.

This uses a bunch of trickery to access the data stream so as to be able to display, in a diagnostic message, what was found that was not a delimiter, that is,  what was found instead of a delimiter. 

This is a very expensive operation, or seems like it is, and it is done every time we backtrack because the non-matching data must be captured whenever a delimiter is not matched. This overhead cannot be delayed until the diagnostic message is actually issued.

Really the right way for this to work is the DFA should capture this as part of its matching process, where it will add no additional real overhead.",[],2015-06-15 16:11:59+00:00,2015-07-24 14:10:12+00:00,2016-10-11 13:50:54+00:00,Closed,13114789,DAFFODIL-1370
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When writing out an XML infoset, we map XML illegal characters to PUA. When reading in one of these infosets for unparse, we need to map those PUA characters back to the XML illegal character.",[],2015-06-11 14:55:35+00:00,2015-06-11 16:28:24+00:00,2015-07-21 13:15:28+00:00,Closed,13114788,DAFFODIL-1369
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It looks like there is still a nil parser that uses AltComp, which does not exist for unparsing.",[],2015-06-10 18:36:00+00:00,2015-06-11 12:04:38+00:00,2015-07-16 17:26:11+00:00,Closed,13114787,DAFFODIL-1368
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Need to add ability to convert infoset value to the textNumberPattern format, and add a combinator to reverse the conversion/stringValue order for unparsing.",[],2015-06-09 19:02:03+00:00,2015-06-10 18:58:13+00:00,2015-07-03 21:26:23+00:00,Closed,13114786,DAFFODIL-1367
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Right now there are two back-ends. The ""General"" one used for mixed text and binary data, and the ""text-only"" one used for cases where the schema is text-only, in a uniform well-known encoding, and encodingErrorPolicy='replace'. 

Their behavior for text-only data should be identical. But it is not.

If we turn off the optimization, three tests fail, meaning that there is a bug in the general purpose back end, that doesn't exist in the text-only back end. 

Tests could be created that exercise this same behavior, but not in a way that can use the text-only back-end (like having a binary element anywhere). Such tests would fail. 

scala (5)
edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindExplicit
test_ExplicitLengthChildLengthMoreParent_Chars(edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindExplicit)
edu.illinois.ncsa.daffodil.tdml.TDMLException: Did not find diagnostic message ""Insufficient bits"" in any of the actual diagnostic messages: 
Parse Error: Failed to populate ex:e3[1].  Expected 3 item(s).
Schema context: element.e3 Location line 180 column 22 in file:/tmp/test_ExplicitLengthChildLengthLessParent1604076915274404621.dfdl.xsd
Data location was preceding byte 9
UTF-8 text starting at byte 8 is: (9012345678901234567890)
Data (hex) starting at byte 8 is: (0x39303132333435363738393031323334353637383930)
Parse Error: The parsed length of the children (72 bits) was greater than that of the parent (64 bits).
Schema context: element.e3 Location line 180 column 22 in file:/tmp/test_ExplicitLengthChildLengthLessParent1604076915274404621.dfdl.xsd(no data location)

edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern
test_LengthKindPatternCompound(edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern)
Parse Error: The parsed length of the children (72 bits) was greater than that of the parent (64 bits).
Schema context: element.ab Location line 111 column 12 in file:/tmp/DFDL-207-Embedded.dfdl.xsd400967456646118611.dfdl.xsd(no data location)

test_LengthKindPatternCompound2(edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern)
Parse Error: The parsed length of the children (72 bits) was greater than that of the parent (64 bits).
Schema context: element.ab Location line 133 column 12 in file:/tmp/DFDL-207-Embedded.dfdl.xsd4204951744923457623.dfdl.xsd(no data location)",[],2015-06-09 15:44:40+00:00,2015-07-24 14:11:43+00:00,2015-07-31 15:16:31+00:00,Closed,13114785,DAFFODIL-1366
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-06-08 15:52:54+00:00,2016-05-18 15:02:50+00:00,2016-07-25 22:32:05+00:00,Closed,13114784,DAFFODIL-1365
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-06-08 15:52:01+00:00,2015-08-12 18:25:31+00:00,2015-12-17 14:22:34+00:00,Closed,13114783,DAFFODIL-1364
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Asserts and discriminators are not evaluated during unparsing, this just needs to be compiled out during unparsing.",[],2015-06-08 15:51:36+00:00,2015-06-24 13:18:48+00:00,2015-06-30 22:07:34+00:00,Closed,13114782,DAFFODIL-1363
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-06-08 15:50:24+00:00,2017-04-04 20:24:26+00:00,2017-07-27 12:52:32+00:00,Closed,13114781,DAFFODIL-1362
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Some data types have experienced a 15-20% speed decrease in Parser Save time, a 5-15% speed decrease in Parser Load time, and a 5-10% speed decrease in Compile time. Note that the majority of these actions occur on the subsecond level, so an example of this performance decrease is a file format now taking 0.17 seconds to load the parser when it used to take 0.13 seconds.",[],2015-06-04 12:50:52+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:12+00:00,Closed,13114780,DAFFODIL-1361
Wish,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"test_prefix_separator_as_variable
test_internal_space_preserved_3b
test_internal_space_preserved_2

The ""internal_space_preserved"" tests seem to be a newline issue. However, test_prefix_separator_as_variable is a user-submitted test, and does not appear to be failing for the same reason",[],2015-06-03 17:47:30+00:00,2019-01-18 16:48:27+00:00,2021-05-18 14:38:33+00:00,Closed,13114779,DAFFODIL-1360
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When attempting to measure the performance of unparsing thousands of messages, the following error occurs:

Exception in thread ""main"" java.lang.OutOfMemoryError: unable to create new native thread
        at java.lang.Thread.start0(Native Method)
        at java.lang.Thread.start(Thread.java:713)
        at scala.xml.pull.XMLEventReader.<init>(XMLEventReader.scala:45)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$79.apply(Main.scala:792)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$79.apply(Main.scala:785)
        at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
        at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
        at scala.collection.immutable.Range.foreach(Range.scala:141)
        at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
        at scala.collection.AbstractTraversable.map(Traversable.scala:105)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:785)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1104)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala)

when attempting to kill the process with Ctrl-C, the following is output:

OpenJDK 64-Bit Server VM warning: Exception java.lang.OutOfMemoryError occurred dispatching signal SIGINT to handler- the VM may need to be forcibly terminated",[],2015-06-03 13:16:04+00:00,2016-05-10 18:28:49+00:00,2016-05-30 20:08:34+00:00,Closed,13114778,DAFFODIL-1359
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Erratum 3.2 (on the older draft) of the DFDL Spec says you cannot have inputValueCalc on the root of a choice branch.

We have many unit tests that have this construction, so those will break when detection of this is put in place.

Related to this are checks that the root of a choice branch cannot be optional (have minOccurs='0' specifically) DFDL-1355.",[],2015-06-02 16:40:40+00:00,2015-06-02 22:09:31+00:00,2015-06-10 21:41:43+00:00,Closed,13114777,DAFFODIL-1358
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There's a decoder bug in Java 7. It's painful to work around.

Java 8 has this fixed.

Require Java 8.",[],2015-06-01 20:51:30+00:00,2015-06-16 18:58:47+00:00,2015-06-17 17:29:10+00:00,Closed,13114776,DAFFODIL-1357
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"I was setting up a test for unparsing with setVariable and came across this error:

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section07.variables.TestVariablesDebug.test_unparse_setVarOnGroupRef failed: java.util.NoSuchElementException: Nope.get
[error]     at edu.illinois.ncsa.daffodil.util.Maybe$.noneGet$extension(Maybe.scala:52)
[error]     at edu.illinois.ncsa.daffodil.util.Maybe$.get$extension(Maybe.scala:50)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.UState.thisElement(UState.scala:79)
[error]     at edu.illinois.ncsa.daffodil.processors.ParseOrUnparseState.getContext(PState.scala:138)
{noformat}

See test_unparse_setVarOnGroupRef in files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/variables/TestVariablesDebug.scala",[],2015-05-29 20:13:54+00:00,2016-07-18 18:50:34+00:00,2016-09-15 22:32:33+00:00,Closed,13114775,DAFFODIL-1356
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When a schema contains a choice with two initiated elements (sequences), I cannot get the parser to choose the second element. I'm not sure if there is just something set up incorrectly in the schema.

See tests:
optionalChoice01
optionalChoice02
optionalChoice03
optionalChoice04

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section15/choice_groups/choice.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section15/choice_groups/TestChoice.scala
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section15/choice_groups/TestChoiceDebug.scala",[],2015-05-28 14:53:08+00:00,2015-06-02 22:09:08+00:00,2015-06-10 17:42:29+00:00,Closed,13114774,DAFFODIL-1355
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"After the 1.1.0 release, we need to update the performance machine to Java 8 and compare performance of Java 7 to Java 8.",[],2015-05-27 20:01:22+00:00,2015-06-23 11:45:25+00:00,2015-06-23 11:45:33+00:00,Closed,13114773,DAFFODIL-1354
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When parsing, if the nilValue=""%WSP*;"", and the document is empty, we would expect the resulting parsed element to be nil (for a textual element, nilValueDelimiterPolicy=""none"", nilKind=""literalValue"") However, the document is being parsed as a empty string without a nil.

See test 
text_nil_characterClass_04_parse
in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/nillable/literal-value-nils.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/nillable/TestNillableDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/nillable/TestNillable.scala",[],2015-05-25 11:20:18+00:00,2015-07-24 14:19:22+00:00,2015-07-27 18:35:28+00:00,Closed,13114772,DAFFODIL-1353
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I noticed running the AV000 test while debugging that the parse completes successfully, but in the parser state, the discriminator stack had 4 entries in it.

This indicates that something is not popping that stack that should be.

This might be a bug that actually affects behavior, or it may just be a memory leak - for parsing very large data the discriminator stack would slowly grow and grow.",[],2015-05-22 17:50:41+00:00,2015-07-24 14:25:37+00:00,2015-07-27 17:20:11+00:00,Closed,13114771,DAFFODIL-1352
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The CLI debugger does not seem to be working with unparse.

See test_3585_CLI_Debugger_simpleDebugger_unparse in:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/debugger/TestCLIDebugger.scala",[],2015-05-21 22:10:11+00:00,2015-05-22 11:54:33+00:00,2015-05-22 11:58:36+00:00,Closed,13114770,DAFFODIL-1351
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Created a CLI test for unparsing and got the following error.

{noformat}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Must be a DIArray
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:146)
edu.illinois.ncsa.daffodil.processors.unparsers.RepUnboundedUnparser.unparseAllRepeats(RepUnparsers.scala:167)
edu.illinois.ncsa.daffodil.processors.unparsers.RepUnparser.unparse(RepUnparsers.scala:73)
{noformat}

See test_3584_CLI_Unparsing_SimpleUnparse_stdin4 in:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/unparsing/TestCLIUnparsing.scala",[],2015-05-20 20:53:54+00:00,2015-06-01 19:23:17+00:00,2015-06-05 19:40:05+00:00,Closed,13114769,DAFFODIL-1350
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Now that the CLI can run unparse performance tests, the automated test runner needs to be able to handle this. This could potentialy be done as part of 1.2.0, where 1.1.0 metrics are gathered semi-manually.",[],2015-05-20 15:26:40+00:00,2015-07-14 14:08:55+00:00,2015-07-14 18:50:38+00:00,Closed,13114768,DAFFODIL-1349
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"When adding a test for specifying the path to the root element with unparsing in the CLI I got the following error.

{noformat}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


Runtime Schema Definition Error: Unparser (StringFixedLengthInVariableWidthCharacters) is not yet implemented.
{noformat}

See test_3583_CLI_Unparsing_SimpleUnparse_rootPath in:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/unparsing/TestCLIUnparsing.scala",[],2015-05-20 14:42:37+00:00,2016-07-15 14:55:04+00:00,2016-09-16 16:10:55+00:00,Closed,13114767,DAFFODIL-1348
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"When running CLI tests for unparse with external variables I get the following error.

{noformat}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:105)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:133)
edu.illinois.ncsa.daffodil.processors.unparsers.StatementElementUnparser.unparseBegin(StatementElementUnparser.scala:135)
{noformat}

See tests:
test_3574_CLI_Unparsing_SimpleUnparse_extVars
test_3575_CLI_Unparsing_SimpleUnparse_extVars2

In file:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/unparsing/TestCLIUnparsing.scala",[],2015-05-20 14:34:08+00:00,2016-07-20 20:05:42+00:00,2016-09-15 22:14:36+00:00,Closed,13114766,DAFFODIL-1347
New Feature,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"When unparsing the --validate flag doesn't seem to be working with the CLI.

See test_3576_CLI_Unparsing_validate in:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/unparsing/TestCLIUnparsing.scala",[],2015-05-20 14:28:56+00:00,2020-12-16 19:43:07+00:00,2020-12-16 19:43:07+00:00,Closed,13114765,DAFFODIL-1346
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running large batches of files with multiple threads, the tests either all pass or all fail. The result is not consistent.",[],2015-05-20 14:24:23+00:00,2015-06-02 17:03:37+00:00,2015-06-02 17:48:20+00:00,Closed,13114764,DAFFODIL-1345
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"I noticed in the CLI wiki there is no short form listed for the ""--output"" option in parse and unparse but ""-o"" is valid and is included in the usage string.

https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Command+Line+Interface",[],2015-05-18 21:01:07+00:00,2015-05-19 12:20:43+00:00,2015-05-19 22:24:42+00:00,Closed,13114763,DAFFODIL-1344
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A version number should be specified on the root element of the DFDL schema, and this version number should end up in the output XML representation as an attribute of the root element.

Similarly, when reading XML to unparse, the version attribute should be read (if present), and compared against the version number in the schema. 

TBD: how to tolerate compatible versions that are not exact matches.

All this would also apply to other output formats that we do in the future. (e.g., JSON)",[],2015-05-18 19:17:50+00:00,2020-12-16 19:40:51+00:00,2020-12-16 19:40:51+00:00,Closed,13114762,DAFFODIL-1343
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Blocker,"I was playing around with unparse in the CLI when I got an error. 

Command - 
daffodil_cli unparse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/output/output1.txt

Error - 
{noformat}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


Runtime Schema Definition Error: Unparser (AlignmentFill) is not yet implemented.
Schema context: element.matrix. Location line 58 column 4 in file:/home/efinnegan/Projects/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd. Data Context: byte 0.
	at edu.illinois.ncsa.daffodil.processors.ParseOrUnparseState.SDE(PState.scala:145)
{noformat}",[],2015-05-14 20:04:38+00:00,2016-07-26 17:45:48+00:00,2016-11-29 20:07:13+00:00,Closed,13114761,DAFFODIL-1342
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Blocker,"A performance test that previously worked without issues is now failing with the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.pcap.TestPCAP.test_pcap_simple_outOfBoundsError failed: java.lang.IndexOutOfBoundsException: 1000040
[error]     at scala.collection.immutable.PagedSeq.apply(PagedSeq.scala:167)
[error]     at edu.illinois.ncsa.daffodil.processors.DFDLByteReader.getByte(DFDLReader.scala:113)
[error]     at edu.illinois.ncsa.daffodil.processors.DFDLByteReader$$anonfun$getByteArray$1.apply$mcVI$sp(DFDLReader.scala:151)
[error]     at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:141)
[error]     at edu.illinois.ncsa.daffodil.processors.DFDLByteReader.getByteArray(DFDLReader.scala:150)
[error]     at edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getByteAlignedBytes(InStream.scala:357)
[error]     at edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getBytes(InStream.scala:329)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.HexBinaryLengthInBytesParser.parse(HexBinaryLengthParsers.scala:60)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:169)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:167)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:167)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
[error]     at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:136)
[error]     at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:135)
[error]     at scala.Option.map(Option.scala:145)
[error]     at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:169)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:167)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:167)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:227)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:169)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:167)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:167)
{code}

I created a TDML test with this data. The Simple PCAP schema is a modified version of the original pcap schema (parses the packet as a binary blob, without going into the various layers). It does not use any expressions. The packet sizes are static, along with the byteOrder.

See test test_pcap_simple_outOfBoundsError, which uses the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/pcap/1m.pcap
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.simple.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/pcap/TestPCAPDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/pcap/TestPCAP.scala",[],2015-05-14 12:57:59+00:00,2016-08-26 19:12:45+00:00,2016-08-26 19:12:51+00:00,Closed,13114760,DAFFODIL-1341
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This parser: LiteralNilExplicitLengthInCharsParser is scary.

It takes N the number of characters and creates a regex using it, then uses the same techniques as LiteralNilPatternParser, except that unlike the normal way that is used, this regex is turned into a Scala combinator parser, and all of this happens at runtime!

This has to be rewritten.",[],2015-05-14 00:35:50+00:00,2015-07-24 14:27:36+00:00,2016-10-11 13:46:06+00:00,Closed,13114759,DAFFODIL-1340
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDLDelimParser class should be renamed to DFDLPatternParser as it is only used for lengthKind pattern.

There is also a fair bit of now-dead code left in this class from when it was also being used for lengthKind delimited. But lengthKind delimited now uses the DFA stuff, so this code is no longer needed.",[],2015-05-13 19:24:44+00:00,2015-07-24 14:30:49+00:00,2015-07-26 13:39:43+00:00,Closed,13114758,DAFFODIL-1339
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"With the fix for DFDL-1330, we want elementFormDefault to default to 'unqualified'.  Doing so causes 533 tests to fail.

To replicate go to TDMLRunner and under the DefineSchema class change the DEFAULT_ELEMENT_FORM_DEFAULT_VALUE constant to be 'unqualified'.

{code}[error] Failed: Total 2499, Failed 533, Errors 0, Passed 1966
[error] Failed tests:
[error] 	edu.illinois.ncsa.daffodil.section00.general.TestElementFormDefaultGeneralNew
[error] 	edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingProperties
[error] 	edu.illinois.ncsa.daffodil.section02.validation_errors.TestValidationErr
[error] 	edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps
[error] 	edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes
[error] 	edu.illinois.ncsa.daffodil.section05.facets.TestFacets
[error] 	edu.illinois.ncsa.daffodil.section07.escapeScheme.TestEscapeScheme
[error] 	edu.illinois.ncsa.daffodil.unparse.TestUnparseInfoset
[error] 	edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroupUnparse
[error] 	edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups
[error] 	edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestArrayOptionalElem
[error] 	edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions
[error] 	edu.illinois.ncsa.daffodil.section13.nillable.TestNillableUnparseNew
[error] 	edu.illinois.ncsa.daffodil.section06.entities.TestEntities
[error] 	edu.illinois.ncsa.daffodil.section13.nillable.TestNillableUnparse
[error] 	edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressionsNew
[error] 	edu.illinois.ncsa.daffodil.section14.occursCountKind.TestOCKImplicit
[error] 	edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindExplicit
[error] 	edu.illinois.ncsa.daffodil.section07.escapeScheme.TestEscapeSchemeUnparse
[error] 	edu.illinois.ncsa.daffodil.section15.choice_groups.TestUnparseChoice
[error] 	edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElem
[error] 	edu.illinois.ncsa.daffodil.section17.calc_value_properties.TestInputValueCalc
[error] 	edu.illinois.ncsa.daffodil.section07.assertions.TestAssertions
[error] 	edu.illinois.ncsa.daffodil.section12.length_properties.TestLengthProperties
[error] 	edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneral
[error] 	edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberPropsUnparse
[error] 	edu.illinois.ncsa.daffodil.section07.variables.TestVariables
{code}",[],2015-05-13 19:10:18+00:00,2017-04-06 19:45:53+00:00,2017-04-06 19:45:53+00:00,Closed,13114757,DAFFODIL-1338
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"When creating a test for unparsing choices I came across this error - 

{noformat}
RuntimeSchemaDefinitionError: Runtime Schema Definition Error: Unparser (ConvertTextDecimalPrim) is not yet implemented.
[error] Schema context: element.dec. Location line 66 column 10 in file:/tmp/choice3997420923829246985.dfdl.xsd. Data Context: byte 3.
[error]     at edu.illinois.ncsa.daffodil.processors.ParseOrUnparseState.SDE(PState.scala:145)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.DummyUnparser.unparse(Unparser.scala:119)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:63)
{noformat}

Note: I also get similar errors for other data types (""Unparser (ConvertTextIntPrim) is not yet implemented."" etc.)

See test ""test_choice5"" in files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section15/choice_groups/choice-unparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section15/choice_groups/TestUnparseChoiceDebug.scala",[],2015-05-13 19:08:09+00:00,2015-06-25 19:52:03+00:00,2015-06-25 21:27:33+00:00,Closed,13114756,DAFFODIL-1337
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,,[],2015-05-13 17:50:57+00:00,2015-05-20 15:21:19+00:00,2015-05-27 19:55:39+00:00,Closed,13114755,DAFFODIL-1336
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"There seems to be an issue where encoding is not handled properly when parsing strings. All numeric data seems to be parsing correctly, but any parsed strings appear to be garbage.",[],2015-05-08 13:14:41+00:00,2018-03-09 22:08:34+00:00,2021-05-18 14:38:29+00:00,Closed,13114754,DAFFODIL-1335
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Critical,"It looks like we experienced a performance decrease ranging from 20-40%, where the performance gets worse as the number of threads used decreases. Based on the performance reports around that time, the change responsible was probably in the last few days of April, between the commits bfa1ac and 2a7a5b. Other binary types do not appear to have been affected.",[],2015-05-07 19:53:43+00:00,2015-05-08 15:57:31+00:00,2015-05-14 17:06:34+00:00,Closed,13114753,DAFFODIL-1334
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If you have an unparserTestCase that works, and you specify roundTrip=""true"", if for some reason there is an error in the parse step of the roundTrip, a blank TDMLException is thrown:

{code}
error] Test edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElem.test_parsedOptArrayThenScalar02 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: 
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectSuccess(TDMLRunner.scala:771)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:719)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:513)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:292)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:283)
[error]     at edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElem.test_parsedOptArrayThenScalar02(TestUnparseArrayOptionalElem.scala:125)
[error]     ...
{code}

Since it's hard to find a case where unparse works and parse does not, this error can currently be seen by modifying parsedOptArrayThenScalar02 to be a roundTrip test. However, this relies on the bug seen in DFDL-1302.",[],2015-05-05 15:45:15+00:00,2015-05-11 17:30:11+00:00,2015-06-24 19:37:46+00:00,Closed,13114752,DAFFODIL-1333
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"When trying to unparse with a saved/reloaded parser, we get a null pointer exception:
{code}
java.lang.NullPointerException
	at edu.illinois.ncsa.daffodil.processors.ElementRuntimeData.childElementResolver$lzycompute(ElementRuntimeData.scala:136)
	at edu.illinois.ncsa.daffodil.processors.ElementRuntimeData.childElementResolver(ElementRuntimeData.scala:136)
	at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetSourceFromXMLEventReader.nextEvents(InfosetSourceFromXMLEventReader.scala:101)
	at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetSourceFromXMLEventReader.next(InfosetSourceFromXMLEventReader.scala:72)
	at edu.illinois.ncsa.daffodil.processors.unparsers.InfosetSourceFromXMLEventReader.next(InfosetSourceFromXMLEventReader.scala:43)
	at edu.illinois.ncsa.daffodil.processors.unparsers.UState.next(UState.scala:68)
	at edu.illinois.ncsa.daffodil.processors.unparsers.StatementElementUnparser.unparseBegin(StatementElementUnparser.scala:132)
	at edu.illinois.ncsa.daffodil.processors.unparsers.StatementElementUnparserBase.unparse(StatementElementUnparser.scala:96)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.unparse(Runtime.scala:310)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.unparse(Runtime.scala:296)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.unparse(Runtime.scala:274)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:875)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:875)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:875)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1069)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}",[],2015-05-05 13:09:01+00:00,2015-05-07 12:30:52+00:00,2015-05-15 17:10:18+00:00,Closed,13114751,DAFFODIL-1332
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are two definitions of couldBeNext. 

One is in ModelGroup.scala, the other in LocalElementBase.scala

The look identical, but even if they are slighly different the duplicated code is too much and needs to be factored out.

I believe there are other near duplicates like this in the couldBeXYZZY because there are versions in ModelGroup and in ElementBase (or other Element-related).

Many of these could be hoisted up to the Term class where they can be common to both elements and model groups.",[],2015-05-01 20:50:22+00:00,2015-05-14 13:59:59+00:00,2015-06-23 14:12:33+00:00,Closed,13114750,DAFFODIL-1331
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TDML Runner's embedded schemas currently default to constructing schemas with elementFormDefault='qualified'. This is probably a mistake, but many many tests would be broken if we changed this.

A feature should be added to tdml:defineSchema allowing the tdml file author to specify elementFormDefault='unqualified' or 'qualified' explicitly.

Then going forward we should specify (usually) elementFormDefault='unqualified' which is the normal behavior for an external DFDL schema that does not take a position on elementFormDefault. (The elementFormDefault defaults to 'unqualified')",[],2015-05-01 20:28:22+00:00,2015-05-15 13:44:40+00:00,2015-07-01 17:42:38+00:00,Closed,13114749,DAFFODIL-1330
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"For example, we might have an infoset that looks like this:

{code}
<foo xmlns=""example.com"">
  <bar>...</bar>
</foo>
{code}

When received from the XMLReader, bar has a qname of ""example.com"", even though it is not explicit provided via a prefix, because xmlns is ""example.com"". However, the NextElementResolver expects bar to not have any qname. So it fails saying it expected {}bar, but found {example.com}bar.",[],2015-05-01 19:36:17+00:00,2016-07-15 11:48:07+00:00,2016-08-24 18:12:07+00:00,Closed,13114748,DAFFODIL-1329
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example, if we had {code}nilValue=""%WSP;-%WSP;""{code} then the unparsed output should be converted to {code}-{code}, but it is just writing out the literal string {code}%WSP;-%WSP;{code}.

Note that according to the spec, we shouldn't even be allowing this. And only nilValue=""%ES""; should be allowed.",[],2015-05-01 18:19:44+00:00,2015-05-04 21:34:21+00:00,2015-05-14 15:24:17+00:00,Closed,13114747,DAFFODIL-1328
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, ""when dfdl:lengthKind is 'explicit' (and dfdl:length is an expression), ... the data value is padded to the length given by the XSD minLength facet""

I wrote a test to verify this, and the unparser is padding the data to the length expression, not the minLength facet.

See test
unparseDelimitedPaddedString10
in files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberPropsUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsUnparseDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsUnparse.scala",[],2015-04-30 17:25:41+00:00,2015-05-07 19:34:18+00:00,2015-06-25 14:29:28+00:00,Closed,13114746,DAFFODIL-1327
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This is a code cleanup.

Today the RuntimeData objects from TermRuntimeData downward in that hierarchy all carry namespaces, which is the NamespaceBinding from the original XML scope giving rise to the object.

However, that is only used by the InteractiveDebugger when compiling expressions. Hence, should be (and is) carried on DPathCompileInfo.

namespaces should be removed from the TermRuntimeData and all derived classes, and it should be accessed from the DPathCompileInfo objects.

 ",['beginner'],2015-04-30 14:23:52+00:00,2020-04-25 21:40:14+00:00,2020-06-26 13:40:03+00:00,Closed,13114745,DAFFODIL-1326
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, ""textStringJustification = 'center' adds equal padding chars left and right of the string contents if the string is too short... It adds one extra padding char on the left if needed.""

I wrote an unparser test for this, and it seems that the unparser is actually adding the extra pad character to the right of the string instead of the left.

See test:
unparseDelimitedPaddedString05
in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberPropsUnparse.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsUnparse.scala
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsUnparseDebug.scala",[],2015-04-29 16:51:41+00:00,2016-09-14 22:57:24+00:00,2017-08-02 04:28:20+00:00,Closed,13114744,DAFFODIL-1325
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example, if we have something like this:

{code:xml}
<sequence>
  <element name=""optional1"" minOccurs=""0"" maxOccurs=""1"" />
  <element name=""optional2"" minOccurs=""0"" maxOccurs=""1"" />
</sequence>
{code}

The unparser generates looks something like this (not that optional elements are treated as arrays):

{code:xml}
<Sequence>
   <Array>...</Array>
   <Array>...</Array>
</Sequence>
{code}

When the SequenceCombinatorUnparser gets an event it could the Start(DIArray) of either of the elements, since the first one is optional. I think we need something similar to the ChoiceMap where based on the next element received, it can skip over some of the parsers. This avoids having to do any backtracking kindof work.",[],2015-04-29 12:17:07+00:00,2015-05-01 19:08:58+00:00,2021-05-20 12:34:51+00:00,Closed,13114743,DAFFODIL-1324
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For file formats of interest, the infoset created from parse via the CLI does not match the expected infoset for unparse due to namespces. For example, the output infoset looks something like:

{code:xml}
<root xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""example.com"">
    <child xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""example.com"">
        <child xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""example.com"">
            ...
        </child>
    </child>
</root>
{code}

But unparse expects the infoset to look like
{code}
<ex:root xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:ex=""example.com"">
    <child xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
        <child xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
            ...
        </child>
    </child>
</ex:root>
{code}

So all the child elements are in the example.com namespace, but unparse expects them all to not have a namespace. It is unclear if parse is outputing the wrong thing or if unparse is expecting the wrong thing.

Also note that it seems unnessary to duplicate the xmlns:xsi attribute.",[],2015-04-29 12:11:31+00:00,2015-05-01 19:32:01+00:00,2017-07-31 19:23:30+00:00,Closed,13114742,DAFFODIL-1323
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It is unclear what causes (perhaps it's a size issue), but for some file formats of interest, the root element is duplicated when run via the CLI. For example, we might get something like this:

{code:xml}
<root>
  <root>
    ...
  </root>
</root>
{code}",[],2015-04-29 12:05:40+00:00,2015-05-01 19:31:49+00:00,2015-05-22 18:27:45+00:00,Closed,13114741,DAFFODIL-1322
Bug,[],gmcdonald,Gavin McDonald,daffodil-npatrick,Norman Patrick,Major,"Attempted to do a round trip test on test_escapeSchemeSimple, but received the following exception:

java.util.NoSuchElementException: Nope.get
	at edu.illinois.ncsa.daffodil.util.Maybe$.noneGet$extension(Maybe.scala:52)
	at edu.illinois.ncsa.daffodil.util.Maybe$.get$extension(Maybe.scala:50)
	at edu.illinois.ncsa.daffodil.processors.unparsers.StringDelimitedUnparser.unparse(DelimitedUnparsers.scala:97)
	at edu.illinois.ncsa.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:57)

The problems seems to be located at DelimitedUnparsers.scala line 97.",[],2015-04-28 18:03:10+00:00,2015-05-06 14:02:53+00:00,2017-07-31 20:52:32+00:00,Closed,13114740,DAFFODIL-1321
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,This should behave similar to how the parser is saved/reloaded.,[],2015-04-28 16:56:43+00:00,2015-05-07 12:31:23+00:00,2015-05-11 17:36:33+00:00,Closed,13114739,DAFFODIL-1320
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"TDML can be enhanced so that tutorials can be built directly as executable TDML files.

Examples attached.",[],2015-04-28 15:14:59+00:00,2016-01-14 22:32:14+00:00,2016-09-06 21:52:14+00:00,Closed,13114738,DAFFODIL-1319
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Interesting examples of this are things that are parsed from a low-level format, but the unparser isn't even trying to round trip.

What if the unparser was headed for something entirely different (e.g., JSON). 

An entirely different DFDL schema, same infoset ""shape"", but entirely different format, may be very useful.",[],2015-04-27 19:29:03+00:00,2020-12-16 19:39:36+00:00,2020-12-16 19:39:36+00:00,Closed,13114737,DAFFODIL-1318
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-04-27 17:25:14+00:00,2015-04-28 15:16:00+00:00,2015-05-08 15:35:19+00:00,Closed,13114736,DAFFODIL-1317
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I wrote an unparser test case for the scenario when an escapeChar is the same as the separator. This test behaves as expected. However, the parser equivalent does not.

Input:
{code}
test#double te##st
{code}
I would expect the first # to separate the two elements. The second would escape the third, resulting in:
{code}
<e1>test</e1>
<e2>double te#st</e2>
{code}
However, the result is the following:
{code}
<e1>test</e1>
<e2>double te</e2>
{code}

See test parseDelimitedEscapedString05
in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeSchemeUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeUnparseDebug.scala",[],2015-04-27 14:29:11+00:00,2015-05-29 16:04:24+00:00,2015-06-12 19:49:28+00:00,Closed,13114735,DAFFODIL-1316
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I wrote a parserTestCase to accompany a failing unparserTestCase (DFDL-1314 Unparse: escapeEscapeCharacter not behaving properly). This test demonstrates escape blocks, and using an escapeEscapeCharacter to escape them. When running the test, it seems to take quite some time, and eventually errs out with ""java.lang.OutOfMemoryError: Java heap space."" I've given sbt 6GB of RAM and this still occurs. 

The test is parseDelimitedEscapedString04 
in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeSchemeUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeUnparseDebug.scala",[],2015-04-27 14:20:54+00:00,2015-05-05 13:49:40+00:00,2015-05-07 14:42:55+00:00,Closed,13114734,DAFFODIL-1315
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When unparsing, if the infoset contains an escape character followed by another character, the unparsed document currently contains two instances of the escape character, and the following character is removed. For example:
escapeChar = /, escapeEscapeChar = \
{code}
<e1>/home</e1>
{code}
In this case, I would think we expect the input to be:
{code}
\/home
{code}
However, the unparser is coming up with:
{code}
//ome
{code}

Something similar is happening with escape blocks. I've created parserTestCase equivalents for the tests. The parse equivalent for the first test behaves as expected. The second is experiencing memory issues (DFDL-1315 - Escape block test using escapeEscapeCharacter using large amounts of Java Heap Space ).

See tests:
unparseDelimitedEscapedString03
unparseDelimitedEscapedString04

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeSchemeUnparse.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeUnparseDebug.scala",[],2015-04-27 14:14:32+00:00,2015-05-05 13:46:30+00:00,2015-05-07 14:27:29+00:00,Closed,13114733,DAFFODIL-1314
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The current code is unable to find any elements that identify the empty sequence branch in the choice. This is because the infoset might look something like this:

{code:xml}
<root>
  <array><ch1>1</ch1></array>
  <array><ch2>2</ch2></array>
  <array/>
  <after>
</root>
{code}

So, in this case, the branch of the choice is identified not by the existence of the after element, but by the end of the array element. Currently everything is identified by the start of some element. So the choiceBranchMap needs to change the keys from a qname to a qname & start/end pair. Also need to detect cases where the end of a containing complex element could signify a choice branch. This is the reason for the 'notYetImplemented' code added in the ChoiceGroup.

See TestCouldBeNextElementDebug.scala",[],2015-04-27 12:17:11+00:00,2015-06-30 16:03:09+00:00,2015-07-06 13:38:14+00:00,Closed,13114732,DAFFODIL-1313
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,This should clean up some code where we need to access namedQName off of runtimeData or other methods to get it.,[],2015-04-22 15:56:22+00:00,2015-05-14 13:59:32+00:00,2015-06-24 20:25:24+00:00,Closed,13114731,DAFFODIL-1312
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"If we have a scheme like so, with default lengthKind=""delimited""

{code:xml}
<xs:element name=""root1"">
  <xs:complexType>
    <xs:sequence dfdl:separator="";"">
      <xs:element name=""one"" type=""xs:string"" />
      <xs:element name=""two"" type=""xs:string"" />
      <xs:choice>
        <xs:element name=""c1"" type=""xs:string"" />
        <xs:element name=""c2"" type=""xs:string"" />
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
</xs:element>
{code}

And the infoset:
{code:xml}
<root1>
  <one>
    <foo>1</foo>
  </one>
</root1>
{code}

Then we end up getting into StringLengthDelimited trying to cast a DIComplex (one) to a DISimple. Of course one should be a simple type, but it's not in the schema and we aren't doing a check somewhere the ensure it is a simple type. I don't think this is a problem with StringDelimitedUnparser, but somewhere else (maybe in the InfosetSource or NextElementResolver?)

See test_unexpectedChildNone in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/unparser/TestInfosetDebug.scala",[],2015-04-22 14:48:42+00:00,2016-07-18 16:26:43+00:00,2016-08-24 14:41:13+00:00,Closed,13114730,DAFFODIL-1311
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Say we have a schema with something like this:

{code:xml}
<element name=""e"">
  <xs:complexType>
    <xs:sequence>
      <xs:element name=""s"" maxoccurs=""unbounded"">
        <xs:complexType>
          <xs:choice>
            <xs:element name=""c1"" />
            <xs:element name=""c2"" />
          </xs:choice>
        </xs:complexType>
      </xs:element>
    <xs:sequence>
  </xs:complexType>
</element>
{code}
And the following infoset:
{code:xml}
<e>
  <s><c1 /></s>
  <s><c2 /></s>
</e>
{code}
In this case, the sequence of events that are created are:
* Start(DIComplex(e))
* Start(DIArray(s))
* Start(DIComplex(s))
* End(DIArray(s))

Instead of getting End(DIArray(s)), it should instead be getting a Start(DISimple(c1)). Looks like something is wrong with how the array stack is used and it is incorrectly End'ing complex arrays.

Also of note, if I look at the events after the End(DIArray(s)), I see the Start/End events for DISimple(c2).",[],2015-04-21 19:13:41+00:00,2015-05-01 19:09:21+00:00,2015-05-28 22:21:38+00:00,Closed,13114729,DAFFODIL-1310
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"For example, a test was not executing correctly because the namespace prefix was not specified in the infoset. However, the test error only said that the expected results did not match the actual results.",[],2015-04-20 20:05:06+00:00,2015-04-27 12:41:23+00:00,2015-05-22 12:04:54+00:00,Closed,13114728,DAFFODIL-1309
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The CLI builds an infoset tree and then unparses it.

The CLI should accept infoset events and unparse so as to take advantage of the streaming behavior of the XML-to-infoset converter, and the streaming unparser.",[],2015-04-15 19:00:32+00:00,2015-04-28 15:27:13+00:00,2017-07-31 20:54:06+00:00,Closed,13114727,DAFFODIL-1308
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When attempting to unparse an infoset via the CLI, a NullPointer exception occurs. 

Note from Steve: ""This is caused when we read an infoset from a tree rather than XML (I believe the TDML tests use XML, CLI uses a tree). When we use a tree, there's a bug in the code where the XML stream isn't properly initialized. We just need to fix that bug.""

To reproduce:
To save the parser/unparser:
daffodil-cli/target/universal/stage/bin/daffodil save-parser -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/generalSchema.dfdl.xsd --root e1 > e1.parser.bin
To test out unparser using file input:
echo '<tns:e1 xmlns:tns=""http://www.example.org/example1/"">Hello</tns:e1>' > input
daffodil-cli/target/universal/stage/bin/daffodil unparse --parser e1.parser.bin input",[],2015-04-15 18:47:38+00:00,2015-04-28 16:31:03+00:00,2015-04-29 14:13:50+00:00,Closed,13114726,DAFFODIL-1307
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a standalone schema that is functionally identical to the embedded schema used in the existing general unparsing test cases (daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml), and test unparseFixedLengthString03 that is the same as unparseFixedLengthString01, except that it references the external schema rather than the embedded one. 

The test fails with the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneral.test_unparseFixedLengthString03 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: output data length 0 for List() doesn't match expected value 5 for List(72, 101, 108, 108, 111)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.verifyData(TDMLRunner.scala:785)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectSuccess(TDMLRunner.scala:819)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:759)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:506)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:288)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:279)
[error]     at edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneral.test_unparseFixedLengthString03(TestUnparserGeneral.scala:56)
[error]     ...
{code}

I temporarily wrote up a parserTestCase using the same schema, swapping the input and output, and the test ran without issues.

See test unparseFixedLengthString03 in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section00/TestUnparserGeneralDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/generalSchema.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml",[],2015-04-15 15:01:49+00:00,2015-04-24 14:57:46+00:00,2015-04-24 17:29:34+00:00,Closed,13114725,DAFFODIL-1306
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The propgen (property code generator) currently puts down several lazy val slots for every DFDL property, and every annotated schema component carries all these slots. This makes every object huge, even when only a small number of properties are used or accessed.

Change propgen to maintain a hash map of properties per object, instead of all these many many slots. This will make the footprint in memory of a DSOM tree for a large schema much smaller.",[],2015-04-10 14:56:02+00:00,2015-04-10 20:29:54+00:00,2017-04-06 15:12:48+00:00,Closed,13114724,DAFFODIL-1305
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When writing variations of a schema with a sequence of two nillable elements, I came across a certain scenario that seems to consistently result in the following error:
{code}
Runtime Schema Definition Error: Unparser is not yet implemented.
[error] Schema context: element.doc7. Location line 140 column 6 in file:/tmp/text_nil_only45662042067256730168.dfdl.xsd. Data Context: byte 0.
[error]     at edu.illinois.ncsa.daffodil.processors.ParseOrUnparseState.SDE(PState.scala:153)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.DummyUnparser.unparse(Unparser.scala:113)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.Unparser.unparse1(Unparser.scala:57)
[error]     at edu.illinois.ncsa.daffodil.processors.unparsers.SeqCompUnparser$$anonfun$unparse$2.apply(Unparser.scala:100)
.....
{code}

This only occurs when one of the nillable elements in the sequence has the nilValue set by referencing a defined format, and the second one is set with a different method. If both of the elements have the nilVaue set via a referenced format, the test works without issues.

I have tests with the following scenarios (red indicates failure):
|| ||nil1:default format||nil1:format ref||nil1:explicitly on element||
||nil2:default format|text_nil_only4|{color:red}text_nil_only6{color}|text_nil_only17|
||nil2:format ref|{color:red}text_nil_only8{color}|text_nil_only5|{color:red}text_nil_only15{color}|
||nil2:explicitly on element|text_nil_only16|{color:red}text_nil_only10{color}|text_nil_only9|

Note that the only failing scenarios are the cases where one nilValue is set via a referenced element and the second is set a different way, regardless of ordering.

See the tests in red above in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/nillable/literal-value-nils-unparse.tdmldaffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/nillable/TestNillableUnparseDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/nillable/TestNillableUnparse.scala",[],2015-04-09 17:03:21+00:00,2016-06-28 19:47:15+00:00,2016-08-24 17:39:46+00:00,Closed,13114723,DAFFODIL-1304
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,OOLAG could be revised to smash together a number of separate classes so as to put fewer things on the stack. Right now it's very hard to read through the stack in a debugger when OOLAG code is involved because of the sheer number of stack frames one must skip around/past.,[],2015-04-08 17:28:04+00:00,2015-04-10 20:29:04+00:00,2015-04-13 18:43:41+00:00,Closed,13114722,DAFFODIL-1303
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Unparsing:
A schema was set up by dev for testing that contained a sequence of an optional array and a scalar. I added a sample unparsing test (impOptArrayThenScalar02 in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section16/array_optional_elem/UnparseArrayImplicitOptionalElem.tdml) that uses an infoset that has the optional array not present. At first I used the following as the infoset:
{code}
    <tdml:infoset xmlns=""http://example.com"">
      <tdml:dfdlInfoset>
        <r4>
          <sca>3</sca>
        </r4>
      </tdml:dfdlInfoset>
{code}

The test failed with the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElem.test_impOptArrayThenScalar02 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: output data length 0 for List() doesn't match expected value 1 for List(51)
{code}

When I added in an empty element for the non-present array, the test passed:
{code}
    <tdml:infoset xmlns=""http://example.com"">
      <tdml:dfdlInfoset>
        <r4>
          <opt/>
          <sca>3</sca>
        </r4>
      </tdml:dfdlInfoset>
    </tdml:infoset>
{code}

I wasn't sure if this was the beviour that we would expect, so I wrote up a parsing test case to see if the empty element is generated (impOptArrayThenScalar02b in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section16/array_optional_elem/ArrayOptionalElem.tdml). My document is a single character, and I get the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestArrayOptionalElem.test_impOptArrayThenScalar02b failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: StringFixedLengthInBytesFixedWidthCharacters - Insufficient Bits in field: IndexOutOfBounds: 
[error] null
[error] Schema context: One(element.sca) List(element.sca)
[error] Data location was preceding byte 1
[error] UTF-8 text starting at byte 0 is: (3)
[error] Data (hex) starting at byte 0 is: (0x33)
{code}",[],2015-04-08 16:53:33+00:00,2015-05-08 16:12:43+00:00,2015-06-24 14:42:25+00:00,Closed,13114721,DAFFODIL-1302
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Blocker,"I wrote a negative test for unparsing an array when occursCountKind=""fixed."" In this case, an array of size 1 is expected, but the infoset contains an array of 3 elements. The error:

{code}
[error] Test edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestUnparseArrayOptionalElemDebug.test_fixedUnparseArrayTooManyElements01 failed: edu.illinois.ncsa.daffodil.processors.unparsers.InfosetError: Infoset Error: No next element corresponding to WrappedArray({http://example.com}opt).
[error] Schema context: Nope List()(no data location)
{code}

The schema context is not entirely helpful, and the error message seems fairly low-level, instead of something the average user could decipher and address.

See test:
fixedUnparseArrayTooManyElements01
In the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section16/array_optional_elem/UnparseArrayFixedOptionalElem.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestUnparseArrayOptionalElemDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestUnparseArrayOptionalElem.scala

Additionally, I wrote another test where the input data has too few elements for the minOccurs value, and occursCountKind=""fixed"". The error message in this case is a little more accessible, but still could be more user-friendly:

{code}
[error] Unparse Error: Expected Start Element event, but received: End(edu.illinois.ncsa.daffodil.processors.DIArray@4936e098).
[error] Schema context: Nope List()
[error] Data location was preceding byte 1
{code}

Since the error is in fact an unparse error and the message is somewhat helpful, it is currently the expected error in this test. The test is passing and is not in scala-debug. If the error message gets improved, we will need to edit the test.
Test fixedUnparseArrayTooFewElements01 in the same files as above.",[],2015-04-08 16:20:00+00:00,2016-07-19 19:34:16+00:00,2016-08-18 16:26:58+00:00,Closed,13114720,DAFFODIL-1301
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Running tests seemed to be awfully slow.

So I learned today that for every single test case line in our test scala files (e.g, TestFacets.scala), it reloads the entire test suite TDML from scratch. This makes the tests much slower of course, particularly so for the large TDML files (Functions.tdml for example).

The fix to this is to look at how TestFacets.scala is now (just pushed to 1.1.0 branch). 

This is the recipe for loading up the test suite exactly once, but also releasing it at the end of the job so that these things don't build up endlessly in memory. Basically, all those variables that hold the test runner objects, all those go in the associated peer object, not in the test class. 

E.g., from TestFacets.scala:

object TestFacets {

  val testDir = ""/edu/illinois/ncsa/daffodil/section05/facets/""
  val aa = testDir + ""Facets.tdml""
  var runner = new DFDLTestSuite(Misc.getRequiredResource(aa), 
                                                        validateTDMLFile = false, validateDFDLSchemas = false)

  /**
   * Avoid memory leak of adding more and more test suites to static objects as we run more and more test suites.
   */
  @AfterClass def tearDown() { runner = null }
}

class TestFacets {
  import TestFacets._  // Imports all of the definitions in the object so we don't have to edit the test lines.

  @Test def test_minMaxInExdateTime01() { runner.runOneTest(""minMaxInExdateTime01"") }
  ...
}

Tests run much faster once this is done.

For now I have retained noisy messages which illustrate how often we are reloading the TDML files to construct the test suite objects. 

There are also warnings to stderr for duplicate test cases in the same tdml file -(see JIRA Ticket DFDL-1298 and DFDL-1299. )

We should make a pass and fix all the TDML running scala test files to use this technique.",['beginner'],2015-04-07 20:31:07+00:00,,2020-10-13 21:42:33+00:00,Reopened,13114719,DAFFODIL-1300
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The tdml.xsd has uniqueness constraints for the test case names.

However, looking at the TestDFDLExpressions.scala, which uses Functions.tdml, if you modify to turn on validation of the tdml file, it reports no problems.

Yet there are a bunch of duplicates in Functions.tdml (see DFDL-1298). 

So perhaps some validator option has to be turned on (full schema checking ??) for Xerces to actually check these? Or perhaps those key constraints are simply not correctly expressed and so they aren't enforcing anything.",[],2015-04-07 19:30:37+00:00,2020-11-20 23:33:28+00:00,2020-12-10 19:16:03+00:00,Closed,13114718,DAFFODIL-1299
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"I tweeked the TDML runner to reject duplicate test names in the same TDML file, and I found that the file Functions.tdml has quite a few duplicates in it. These tests are passing because the first one found is used. The later test with duplicate name is not used. 

However, really we should not be depending on this. All tests in a TDML file should have unique names. The schema for TDML files is supposed to have a uniqueness constraint that assures this, but it seems either that uniqueness constraint is not properly expressed, or we're invoking the validation of TDML files without the options that tell it to validate the key/uniqueness constraints (which can be disabled because they are so expensive to execute by the Xerces XML validator). I believe the TDML runner should turn on ""full schema checking"" or something like that to get the uniqueness constraints checked. (TDML runner defect is DFDL-1299)

Here's the list of duplicates from Functions.tdml

More than one test case for name 'hexBinary_constructor_03'.
More than one test case for name 'nonNeg_constructor_03'.
More than one test case for name 'byte_constructor_03'.
More than one test case for name 'uint_constructor_01'.
More than one test case for name 'hexBinary_constructor_04'.
More than one test case for name 'uint_constructor_04'.
More than one test case for name 'byte_constructor_04'.
More than one test case for name 'ubyte_constructor_01'.
More than one test case for name 'ubyte_constructor_02'.
More than one test case for name 'ubyte_constructor_03'.
More than one test case for name 'hexBinary_constructor_01'.
More than one test case for name 'nonNeg_constructor_01'.
More than one test case for name 'byte_constructor_01'.
More than one test case for name 'uint_constructor_03'.
More than one test case for name 'date_constructor_01'.
More than one test case for name 'hexBinary_constructor_02'.
More than one test case for name 'uint_constructor_02'.
More than one test case for name 'nonNeg_constructor_04'.
More than one test case for name 'byte_constructor_02'.
More than one test case for name 'ubyte_constructor_04'.",['beginner'],2015-04-07 19:19:06+00:00,2020-11-18 05:53:07+00:00,2020-11-19 13:38:09+00:00,Closed,13114717,DAFFODIL-1298
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The XML Schema for DFDL Schemas could be tightened up significantly so that many more of the constructs in XML Schema that DFDL schemas cannot use will be rejected up front when we validate the DFDL schemas using Xerces.

As an example, in DFDL complex type definitions cannot use derivations, nor the mixed attribute, nor block, nor final. Yet the XML Schema for DFDL schemas is currently allowing those. (They're likely just ignored, but should be rejected.)",[],2015-04-07 13:35:33+00:00,2015-04-07 18:44:18+00:00,2015-04-07 18:44:30+00:00,Closed,13114716,DAFFODIL-1297
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Arrays with occursCountKind expression need to unparse properly. 

There are some unit tests of this (which fail) in scala-debug of daffodil-test module.",[],2015-04-06 16:34:19+00:00,2015-09-02 19:48:25+00:00,2015-09-02 20:18:33+00:00,Closed,13114715,DAFFODIL-1296
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DSOM has become a bit of a mess. The various members of all those objects/classes need to be rationalized as to what is public, what protected, and what private, and for public and protected things, what is final (unless the whole class is final).",[],2015-04-04 02:57:45+00:00,2015-04-06 16:26:20+00:00,2015-04-08 19:24:16+00:00,Closed,13114714,DAFFODIL-1295
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I wrote two negative tests for the Unparse capability of the TDML Runner, where I would expect Unparse Errors. In the first scenario, the element in the input infoset is longer than the specified length in the schema. In the second, the element is shorter than specified. In both cases, the data unparses with no error.

See tests:
negativeUnparseTest03
negativeUnparseTest04 
In the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section00/TestUnparserGeneralDebug.scala",[],2015-04-03 12:43:48+00:00,2015-04-24 14:57:22+00:00,2015-05-05 13:06:12+00:00,Closed,13114713,DAFFODIL-1294
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I wrote up a few negative tests of the unparse functionality of the TDML runner, where the actual output did not match the expected output specified in the TDML test. In these tests, I purposefully put invalid values as the expected output. In the first case, the ""expected"" output is significantly longer than the actual output:

Expected: <tdml:document>incorrect</tdml:document>
Actual: <tdml:document>0</tdml:document>

and this is the failure message:
{code}
[error] Test edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneralDebug.test_negativeUnparseTest01 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: output data length 1 for List(48) doesn't match expected value 9 for List(105, 110, 99, 111, 114, 114, 101, 99, 116)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.verifyData(TDMLRunner.scala:735)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectSuccess(TDMLRunner.scala:769)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:709)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:458)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:272)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:263)
[error]     at edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneralDebug.test_negativeUnparseTest01(TestUnparserGeneralDebug.scala:20)
[error]     ...
{code}
The error technically seems correct, but it is not very user-friendly. 

In the second case:
Expected Output: <tdml:document>1</tdml:document>
Actual Output: <tdml:document>0</tdml:document>

Error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneralDebug.test_negativeUnparseTest02 failed: edu.illinois.ncsa.daffodil.tdml.TDMLException: Unparsed data differs at byte 1. Expected 0x31. Actual was 0x30.
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$verifyData$2.apply(TDMLRunner.scala:744)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase$$anonfun$verifyData$2.apply(TDMLRunner.scala:740)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.verifyData(TDMLRunner.scala:740)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runUnparserExpectSuccess(TDMLRunner.scala:769)
[error]     at edu.illinois.ncsa.daffodil.tdml.UnparserTestCase.runProcessor(TDMLRunner.scala:709)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:458)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:272)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:263)
[error]     at edu.illinois.ncsa.daffodil.section00.general.TestUnparserGeneralDebug.test_negativeUnparseTest02(TestUnparserGeneralDebug.scala:21)
[error]     ...
{code}

This error seems more accessible, but it is using the byte value of the data rather than the ASCII, more human-readable text.

See tests:
test_negativeUnparseTest01
test_negativeUnparseTest02
In the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section00/general/testUnparserGeneral.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section00/TestUnparserGeneralDebug.scala

I realize the unparse functionality of the TDML Runner is extremely new, and things like this are likely to be fixed during the course of regular development, but I wanted to make a note.",[],2015-04-03 12:38:42+00:00,2015-04-24 14:57:00+00:00,2015-04-24 17:21:45+00:00,Closed,13114712,DAFFODIL-1293
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Large schemas with hundreds of top level elements can take minutes to compile.

Even if we speed this up massively, it will still be expensive.

When we package a schema into a jar, we should package the compiled processor for it as well, so that this can be reloaded instead of compiling from the DFDL schema source.",[],2015-04-02 23:07:52+00:00,2018-09-07 15:21:07+00:00,2018-09-13 14:12:03+00:00,Closed,13114711,DAFFODIL-1292
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Related to DFDL-1166.

TDML runner should not compile a schema file more than once during a test run.",[],2015-04-02 22:55:51+00:00,2015-04-06 16:28:12+00:00,2015-04-13 19:00:39+00:00,Closed,13114710,DAFFODIL-1291
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The daffodil-calabash-extension had not been updated since 0.14.0.

Now works with Daffodil v1.0.0

Also both csv and pcap examples work now.",[],2015-04-01 15:57:07+00:00,2015-04-01 15:57:39+00:00,2017-07-26 16:24:19+00:00,Closed,13114709,DAFFODIL-1290
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Enhance TDML runner to support unparser test cases.,[],2015-03-31 21:48:58+00:00,2015-03-31 21:49:37+00:00,2015-04-03 13:13:23+00:00,Closed,13114708,DAFFODIL-1289
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Add support for the encoding scheme defined in the DFDL specificiation:  X-DFDL-US-ASCII-6-BIT-PACKED,[],2015-03-31 16:44:31+00:00,2017-02-08 19:21:10+00:00,2017-02-14 12:15:27+00:00,Closed,13114707,DAFFODIL-1288
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While verifying DFDL-749, I wrote a few tests that used an expression with whitespace to specify the delimiter(s). These tests fail with the following error:

{code}
[info] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_internal_space_not_preserved2 started
2015-03-31 06:09:43:728  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5::LocalComplexTypeDef::sequence@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:729  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:729  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:729  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:729  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:729  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.expr_space5@@Prod(Prod)@@parser has no value due to java.lang.AssertionError: assertion failed.]
2015-03-31 06:09:43:730  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[SchemaSet@@requiredValue has no value due to java.lang.AssertionError: assertion failed.]
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_internal_space_not_preserved2 failed: assertion failed
{code}

Please see tests:
test_internal_space_preserved4
test_internal_space_not_preserved2

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2015-03-31 13:17:04+00:00,2018-11-14 15:43:33+00:00,2021-05-20 12:35:09+00:00,Closed,13114706,DAFFODIL-1287
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The test ""test_993_CLI_Executing_Listing_listAll"" uses ""wc"" which is not a valid windows command. The test needs to be updated to use a valid method to count the number of lines when running on Windows.

See test_993_CLI_Executing_Listing_listAll in:
daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/executing/TestCLIexecuting.scala",[],2015-03-30 20:19:06+00:00,2015-04-17 21:59:01+00:00,2015-04-24 17:35:26+00:00,Closed,13114705,DAFFODIL-1286
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"DFDL-886 fixed scoping issues with dynamic delimiters, but resulted in a pretty significant (~20%) performance degradation in delimited text formats (e.g. CSV). Need to investigate this and fix. May need to split dynamic and static delimiters, so at least the static case (most common) will be fast.",[],2015-03-27 14:08:13+00:00,2016-05-03 15:58:41+00:00,2016-05-27 20:05:03+00:00,Closed,13114704,DAFFODIL-1285
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The wiki pages still say Daffodil requires scala version 2.9.x but we've upgraded to Scala 2.10 with DFDL-701. Following are locations where I saw the version mentioned but there could be more.

'Scala *2.9.2*' (Under ""Requirements"") - https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Getting+Started+for+Developers

'IMPORTANT: We are targeting Scala *2.9.x*' and 'Because we are currently targeting Scala *2.9.x* you will want to paste the following URL into the ""work with:"" box on the ""Installing New Software"" dialog: http://download.scala-ide.org/sdk/e37/*scala29*/stable/site' - https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Configure+Eclipse%3A+Linux

'IMPORTANT: We are targeting Scala *2.9.x*' and 'Because we are currently targeting Scala *2.9.x* you will want to paste the following URL into the ""work with:"" box on the ""Installing New Software"" dialog: http://download.scala-ide.org/sdk/e37/*scala29*/stable/site' - https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Configure+Eclipse%3A+Windows",[],2015-03-26 21:17:58+00:00,2015-03-27 17:45:38+00:00,2015-03-27 17:52:22+00:00,Closed,13114703,DAFFODIL-1284
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-26 12:59:49+00:00,2017-04-05 13:21:13+00:00,2017-08-21 12:19:36+00:00,Closed,13114702,DAFFODIL-1283
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I attempted to parse a file that I had accidentally overwritten with a saved parser. I got the following error:

edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Unsupported conversion to Long. (null,null) of type Tuple2
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:107)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:148)
edu.illinois.ncsa.daffodil.dpath.AsIntConverters$.asLong(AsIntConverters.scala:90)
edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesParser.getLength(SpecifiedLength.scala:314)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:107)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:148)
	at edu.illinois.ncsa.daffodil.dpath.AsIntConverters$.asLong(AsIntConverters.scala:90)
	at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesParser.getLength(SpecifiedLength.scala:314)
	at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesParser$$anonfun$parse$8.apply(SpecifiedLength.scala:322)
	at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesParser$$anonfun$parse$8.apply(SpecifiedLength.scala:319)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:217)
	at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.withParseErrorThrowing(SpecifiedLength.scala:166)
	at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesParser.parse(SpecifiedLength.scala:319)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:131)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:130)
	at scala.Option.map(Option.scala:145)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:130)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.parsers.Rep$.loopExactlyTotalN(RepParsers.scala:104)
	at edu.illinois.ncsa.daffodil.processors.parsers.RepExactlyTotalOccursCountParser.parseAllRepeats(RepParsers.scala:311)
	at edu.illinois.ncsa.daffodil.processors.parsers.RepParser.parse(RepParsers.scala:76)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:171)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:169)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:169)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.parsers.ArrayCombinatorParser.parse(ElementKindParsers.scala:85)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:171)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$2.apply(Parser.scala:169)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:169)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.parsers.SequenceCombinatorParser.parse(ElementKindParsers.scala:69)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.parsers.ComplexTypeParser.parse(ElementKindParsers.scala:55)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:131)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase$$anonfun$9.apply(ElementCombinator1.scala:130)
	at scala.Option.map(Option.scala:145)
	at edu.illinois.ncsa.daffodil.processors.StatementElementParserBase.parse(ElementCombinator1.scala:130)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:90)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:212)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:211)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:208)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:207)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:207)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:171)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:685)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$71.apply(Main.scala:683)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:682)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1067)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)",[],2015-03-20 20:18:23+00:00,,2020-12-16 19:37:03+00:00,Open,13114701,DAFFODIL-1282
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This attribute shows up in the output XML infoset from parsing, presumably one must specify certain options to the CLI/API in order for this attribute to be present.

That said - this means this attribute is really publicly visible, and not just some internal daffodil thing. So it should be the in the daffodil external namespace (which uses prefix ""daf"" by convention), not the internal namespace.

Note: Wiki page about ""Daffodil and the DFDL Infoset"" needs to be updated when this change is made.",['beginner'],2015-03-19 20:50:42+00:00,2020-12-16 19:35:04+00:00,2020-12-16 19:35:04+00:00,Closed,13114700,DAFFODIL-1281
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When path to the schema passed via the -s option isn't found, we get a ""wrong argument format"" error. This isn't right, instead we should get an error saying the schema could not be found.",[],2015-03-19 16:48:31+00:00,2015-05-14 15:23:03+00:00,2015-06-05 19:40:27+00:00,Closed,13114699,DAFFODIL-1280
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Expressions like 
{code}
{ ../foo/bar eq 3 }
{code}
are very error prone. If node ../foo/bar doesn't exist you get a runtime Schema Definition Error, which is fatal, not backtrackable. 

Really what is needed is:
{code}
{ if fn:exists(../foo/bar) then ../foo/bar eq 3 else daf:error(""...."") }
{code}
The DPath compiler should warn when a path is being used which *may* not exist, but is not wrapped in fn:exists(....) and if-then-else.

But that may really not be the right warning. Probably such expressions really should be moved to a location in the schema where the elements they are referring to simply must exist. E.g., if the expression was on element bar, or a sub-component within the schema of element bar, then the existence of element bar (and its parent foo) is implied and the expression can't get a runtime SDE. 

See also related Bug DFDL-1278.",[],2015-03-18 23:32:54+00:00,,2020-12-16 19:33:46+00:00,Open,13114698,DAFFODIL-1279
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Consider this schema:
{code}
 <xs:element name=""Set-id"">
                <xs:simpleType>
                    <xs:annotation>
                        <xs:appinfo source=""http://www.ogf.org/dfdl/"">
                            <dfdl:discriminator 
                                                test=""{  . eq 3  }""
                                                message=""Options-Template-Set/Set-id is not 3"" />
                        </xs:appinfo>
                    </xs:annotation>
                    <xs:restriction base=""int16"">
                        <xs:enumeration value=""3"" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
{code}
The above is one branch of an xs:choice.

Now according to DFDL spec section 9.5.2:
--------------------
9.5.2       Discriminators with testKind 'expression'

When parsing, an attempt to evaluate a discriminator must be made even if preceding statements or the parse of the schema component ended in a processing error.

This is because a discriminator's expression could evaluate to true thereby resolving a point of uncertainty even if the complete parsing of the construct ultimately caused a processing error.

Such discriminator evaluation has access to the DFDL Infoset of the attempted parse as it existed immediately before detecting the parse failure. Attempts to reference parts of the DFDL Infoset that do not exist are processing errors.
-----------------------------

So, even if the parse of the Set-id element fails, we're going to evaluate this discriminator anyway. 

That means in the expression, the subexpression ""."" has no value.

But in Section 23, the DFDL Spec says:

DFDL implementations MUST comply with the error code behaviour in Appendix G of the XPath 2.0 spec and map these to the correct DFDL failure type. All but one of XPath's errors map to a schema definition error. The exception is XPTY0004, which is used both for static and dynamic cases of type mismatch. A static type mismatch maps to a schema definition error, whereas a dynamic type mismatch maps to a processing error. A DFDL implementation should distinguish the two kinds of XPTY0004 error if it is able to do so, but if unable it should map all XPTY0004 errors to a schema definition error.

The implications of that are that when an expression has no value, it is a Schema Definition Error, not a Processing Error. 

A Schema Definition Error doesn't backtrack. It is fatal.

One is supposed to wrap paths that may not exist with the fn:exists(....) function and test explicitly if they exist. That way one does not get these runtime SDEs.

But it makes no sense to have to do that on the ""."" expression. E.g.,
{code}
  <dfdl:discriminator test=""{ if (fn:exists(.) then . eq 3 else fn:false()  }""
                                                message=""Options-Template-Set/Set-id is not 3"" />
{code}
That's just silliness. (and doesn't work.) 

The ""."" aka context node expression, when used alone, must get special treatment in discriminators.

Note: there is a workaround for this bug. One can move the discriminator to after the Set-id element so that the parsing of the Set-id element must be successful before the discriminator is encountered.
{code}
 <xs:element name=""Set-id"">
                <xs:simpleType>
                    <xs:restriction base=""int16"">
                        <xs:enumeration value=""3"" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
<xs:sequence>
   <xs:annotation>
                        <xs:appinfo source=""http://www.ogf.org/dfdl/"">
                            <dfdl:discriminator 
                                                test=""{  ./Set-id eq 3  }""
                                                message=""Options-Template-Set/Set-id is not 3"" />
                        </xs:appinfo>
                    </xs:annotation>
</xs:sequence>
{code}
The above works fine.

An easy partial ""fix"" that would at least let people make progress would be issuing a subset-limitation error and disallow use of ""."" alone in discriminators on elements. This would force authors to rewrite their schema to put the discriminator later as in the workaround.

Ultimately, the treatment of ""."" in discriminators is a special case that the DPath compiler and runtime must handle.",[],2015-03-18 23:27:48+00:00,,2020-12-16 19:32:40+00:00,Open,13114697,DAFFODIL-1278
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A simple element is defaultable if it is required and has a default property. For a complex type element it is defaultable if recursively everything in it is defaultable or optional, and has zero-length representation.

Implementing this feature - where complex types can be defaulted, has both parser and unparser aspects.",[],2015-03-18 14:38:31+00:00,,2018-09-13 14:04:21+00:00,Open,13114696,DAFFODIL-1277
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If you have the following in a schema:
{code}
<dfdl:defineFormat name=""format"">
  <!-- comment -->
  <dfdl:format ....../>
</dfdl:defineFormat>
{code}
this error occurs:
{code}
edu.illinois.ncsa.daffodil.tdml.TDMLException: Schema Definition Error: dfdl:defineFormat does not contain a dfdl:format element.
{code}

This used to be acceptable.
See test_format_with_comment in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/defineFormat/defineFormat.tdml
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/defineFormat/defineFormat_withComment.dfdl.xsd
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/defineFormat/defineFormatTestsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section07/defineFormat/defineFormatTests.scala",[],2015-03-13 20:52:54+00:00,2017-04-06 15:06:19+00:00,2017-04-06 15:06:19+00:00,Closed,13114695,DAFFODIL-1276
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I ran test_multifile_cyclical with the following entries in my xcatalog file:

{code}
  <uri name=""http://stepSchema.com""
    uri=""daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_step.dfdl.xsd"" />
  <uri name=""http://baseSchema.com""
    uri=""daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd"" />
{code}

and the following error occurs:
{code}
[error] Test edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_multifile_cyclical failed: java.lang.Exception: Did not find diagnostic message ""Cyclical"" in any of the actual diagnostic messages: 
[error] Schema Definition Error: More than one definition for name: elem. Defined in following locations:
[error] Location line 16 column 27 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd
[error] Location line 16 column 27 in file:////home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd
[error] Schema context: SchemaSet. Location in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$1.apply(TDMLRunner.scala:496)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$1.apply(TDMLRunner.scala:490)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:489)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:575)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:469)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:279)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:270)
[error]     at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_multifile_cyclical(TestNamespaces.scala:120)
[error]     ...
{code}

More information from  DFDL-530:
Note from Mike B:
Something strange is going on here since you are seeing complaints about the duplicate and the two URIs are different in that one has file:/... the other file:////.... BTW, both are incorrect (see http://en.wikipedia.org/wiki/File_URI_scheme) in that a file URI should have two slashes if it includes a hostname, and 3 slashes if it does not have a hostname. So this should be file:///....

Yes, there is something funny about xcatalog interacting with classpath. Like perhaps some resolutions of names to locations use the xcatalog, others use the classpath so that the same URI can resolve to two different files (that contain the same thing).

When we validate DFDL Schemas (against the XML schema for DFDL schemas) we are using the xcatalog-capable loader. When we process our own include/imports in Daffodil code, .... I am less sure.",[],2015-03-13 19:55:01+00:00,,2020-12-16 19:30:16+00:00,Open,13114694,DAFFODIL-1275
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:34:05+00:00,2015-05-05 15:28:55+00:00,2015-05-21 22:14:55+00:00,Closed,13114693,DAFFODIL-1274
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Goal is to delete N-2 element when N+1 is created, to only have a window of elements available.",[],2015-03-11 19:33:46+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114692,DAFFODIL-1273
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,compiler should be able to statically determine when elements can be removed,[],2015-03-11 19:32:41+00:00,2020-10-27 19:00:02+00:00,2020-11-20 19:26:07+00:00,Closed,13114691,DAFFODIL-1272
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This is a performance optimization, should allow outputValueCalc evaluation when closest containing array's N+1 element is complete.",[],2015-03-11 19:31:42+00:00,2020-12-16 19:28:09+00:00,2021-01-27 15:03:56+00:00,Closed,13114690,DAFFODIL-1271
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2015-03-11 19:30:24+00:00,2016-01-25 20:19:04+00:00,2016-10-11 13:22:24+00:00,Closed,13114689,DAFFODIL-1270
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This unparse is already implemented, but may need enhancements for statement evaluations",[],2015-03-11 19:29:39+00:00,2016-06-14 21:44:21+00:00,2016-10-11 13:42:06+00:00,Closed,13114688,DAFFODIL-1269
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"exists already, but needs enhancements",[],2015-03-11 19:29:00+00:00,2016-06-14 21:44:53+00:00,2016-10-11 13:42:33+00:00,Closed,13114687,DAFFODIL-1268
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"exists, but needs enhancement",[],2015-03-11 19:28:40+00:00,2015-05-05 12:47:07+00:00,2015-06-02 18:49:23+00:00,Closed,13114686,DAFFODIL-1267
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"already exists, but needs enhancement",[],2015-03-11 19:28:19+00:00,2016-01-25 20:20:47+00:00,2016-10-11 13:50:32+00:00,Closed,13114685,DAFFODIL-1266
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:27:36+00:00,2015-06-16 16:09:04+00:00,2015-06-24 18:58:44+00:00,Closed,13114684,DAFFODIL-1265
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:27:16+00:00,,2018-09-13 14:03:52+00:00,Reopened,13114683,DAFFODIL-1264
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:26:48+00:00,2015-04-06 16:34:43+00:00,2015-04-08 17:18:02+00:00,Closed,13114682,DAFFODIL-1263
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:26:40+00:00,2015-04-06 16:34:43+00:00,2015-04-08 17:18:11+00:00,Closed,13114681,DAFFODIL-1262
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:26:34+00:00,2015-04-06 16:34:43+00:00,2015-04-08 17:18:20+00:00,Closed,13114680,DAFFODIL-1261
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:26:25+00:00,2015-04-06 16:34:44+00:00,2015-04-08 17:18:29+00:00,Closed,13114679,DAFFODIL-1260
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"unparser treats required elements that are defaultable like they are optional. Must insert Infoset element with default value if they are determined to be missing. This includes scalar elements, as well as arrays (up to minOccurs, but depends on dfdl:occursCountKind)",[],2015-03-11 19:26:03+00:00,2015-09-02 19:46:08+00:00,2015-09-02 19:51:08+00:00,Closed,13114678,DAFFODIL-1259
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"requires DSOM compiler to create disambiguation map (similar to  NextElementResolver, but resolves which choice alternative to unparse.)",[],2015-03-11 19:24:46+00:00,2015-04-27 12:40:09+00:00,2015-05-14 17:59:16+00:00,Closed,13114677,DAFFODIL-1258
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:24:16+00:00,2015-04-28 16:31:26+00:00,2015-05-12 18:47:32+00:00,Closed,13114676,DAFFODIL-1257
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:24:01+00:00,2015-04-20 19:54:08+00:00,2015-05-11 17:15:29+00:00,Closed,13114675,DAFFODIL-1256
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:23:53+00:00,2015-04-17 15:31:08+00:00,2015-05-05 15:15:03+00:00,Closed,13114674,DAFFODIL-1255
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:23:43+00:00,2015-04-24 20:13:54+00:00,2015-05-22 13:54:56+00:00,Closed,13114673,DAFFODIL-1254
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Note that this just writes out the literal nil. This may also require changes to AltCompParser to handle nilled elements.,[],2015-03-11 19:23:29+00:00,2015-04-07 18:42:59+00:00,2015-04-09 20:41:35+00:00,Closed,13114672,DAFFODIL-1253
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-03-11 19:21:27+00:00,2015-04-17 15:32:19+00:00,2015-05-05 15:14:51+00:00,Closed,13114671,DAFFODIL-1252
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"design and implement, and ensure sbt still builds scaladoc",[],2015-03-11 19:20:37+00:00,2016-09-29 16:38:23+00:00,2016-09-29 16:38:44+00:00,Closed,13114670,DAFFODIL-1251
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"design and implement, ensure sbt still builds javadocs",[],2015-03-11 19:20:14+00:00,2016-07-08 20:00:15+00:00,2016-09-29 16:30:39+00:00,Closed,13114669,DAFFODIL-1250
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Note: Functionality might be in NextElementResolver, see DFDL-1248",[],2015-03-11 19:19:38+00:00,2015-04-27 18:04:42+00:00,2015-04-27 18:04:59+00:00,Closed,13114668,DAFFODIL-1249
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Should also add default values for missing required elements,[],2015-03-11 19:17:44+00:00,2015-03-20 16:54:52+00:00,2015-04-14 15:53:46+00:00,Closed,13114667,DAFFODIL-1248
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"- requires DSOM compiler to create disambiguation map (class ChoiceResolver - closely related to NextElementResolver)
- must insert DIArray nodes for arrays
- Note: does not worry about pruning away array elements. The unparser will do that.
- TDML Runner - call converter to convert xml infoset of tests to XMLStreamReader",[],2015-03-11 19:15:41+00:00,2015-03-19 16:54:32+00:00,2015-04-14 15:53:56+00:00,Closed,13114666,DAFFODIL-1247
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Need a TDML runner than can take a test case, and run it through parse/unparse multiple times (e.g. parse > unparse > parse > unparse). The final parse and unparse results should be identical.",[],2015-03-11 19:14:30+00:00,2015-05-01 19:34:16+00:00,2015-05-04 16:14:55+00:00,Closed,13114665,DAFFODIL-1246
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Need a runner that takes a positive parser test case, inverts it, and runs it as an unparser test.",[],2015-03-11 19:12:54+00:00,2015-05-01 19:39:19+00:00,2015-05-04 17:07:23+00:00,Closed,13114664,DAFFODIL-1245
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Blanked JIRA ticket for work on unparser implementation.,[],2015-03-06 15:53:01+00:00,2015-05-05 13:30:30+00:00,2015-05-05 13:30:30+00:00,Closed,13114663,DAFFODIL-1244
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The trace output doesn't show the very first element parse, that of the root element. 

There are some other inconsistencies also: some of the positions are 0-based instead of 1-based. Everything in the debugger like DFDL should be 1-based.",[],2015-03-06 15:10:17+00:00,,2020-12-16 19:26:47+00:00,Open,13114662,DAFFODIL-1243
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"in trying to fix a bug where toBriefXML was creating a giant string bigger than the JVM would allow, I said to myself.... why is it that when we're running a junit test, it's calling toBriefXML anyway?

Turns out the code is:

        log(LogLevel.Debug, ""This is %s"", toString)

Now, the def log uses a varargs, and that means the toString will be evaluated (no by-name passing of varargs in scala), and someplace else we have 

    override def toString = toBriefXML(...)

We really want the arguments to log to be passed by name, so if the log-level isn't reached, then the arguments aren't evaluated. 

So shortest-of-short-terms, log(....) calls that have expensive arguments should be rewritten as:

  log(LogLevel.Debug, ""This is %s"", Seq(toString))

That version of log(...) takes an explicit sequence as the last arg, and so this is passed by-name and so not evaluated unless the log level is met.

But, really, what we want is a MACRO that expands into an if-then and only takes the branch if the log level check passes. That way we avoid not only evaluating the arguments, but allocating closures, etc. We also get to have varargs syntax back. 

So, scala 2.10 has some truly-horrible Macro stuff. But we can likely use it black-box. 

http://stackoverflow.com/questions/978252/logging-in-scala 

mentions ""Scala Logging"" and ""log4s"" both of which use macros. I checked and at least log4s has a 2.10 compatible version. 

(If you want to see how horrible scala 2.10 macros are, just look at the source code for the 2.10 version of log4s.... What were they thinking? Anyway, macros are better in 2.11 (somewhat), and even more-so in 2.12 I am told.)",[],2015-03-05 22:26:59+00:00,2015-10-14 20:45:22+00:00,2016-10-11 13:42:56+00:00,Closed,13114661,DAFFODIL-1242
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"sbt daffodil-test/test-only edu.illinois.ncsa.daffodil.usertests.TestJSON5

was failing for me with out-of-heap-space error. Turns out not to be out of heap, but unable to allocate a big enough string in toBriefXML, which constructs a giant string of XML (for a large parser).",[],2015-03-05 22:11:31+00:00,2015-03-06 15:45:51+00:00,2015-03-11 21:17:55+00:00,Closed,13114660,DAFFODIL-1241
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"So we have CLI tests that depend on the fact that when running all the tests in a class, the tests execute in an expected order (order they appear in the class definition). That way we can compare the output to an expected output for the aggregate set of tests.

However, I have found that this order is indeterminate. This changed in Java 7. 

E.g., below they execute in lexicographic order based on the test method name. However, our test expects them in the order they appear in the class definition, and as this test isn't new (test_994_CLI_Executing_Listing_execAll)

Note also that when run under eclipse, it chooses yet a different order - by method name length, then lexicographic within each length.

For the time being, on 1.1.0 branch I've moved this test to scala-debug. It's just testing that we can run a TDML file of tests from the CLI command line. So we really don't care what the output actually is, just that it reflects that a TDML file ran. 

mbeckerle@moose:~/dataiti/git/daffodil$ daffodil-cli/target/universal/stage/bin/daffodil test daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section31/escape_characters/Escapes.tdml
[Pass] escape_entry1
[Pass] escape_entry10
[Pass] escape_entry11
[Pass] escape_entry12
[Pass] escape_entry2
[Pass] escape_entry2_1
[Pass] escape_entry2_10
[Pass] escape_entry2_11
[Pass] escape_entry2_12
[Pass] escape_entry2_13
[Pass] escape_entry2_14
[Pass] escape_entry2_15
[Pass] escape_entry2_16
[Pass] escape_entry2_17
[Pass] escape_entry2_18
[Pass] escape_entry2_2
[Pass] escape_entry2_3
[Pass] escape_entry2_4
[Pass] escape_entry2_5
[Pass] escape_entry2_6
[Pass] escape_entry2_7
[Pass] escape_entry2_8
[Pass] escape_entry2_9
[Pass] escape_entry3
[Pass] escape_entry3_1
[Pass] escape_entry3_10
[Pass] escape_entry3_11
[Pass] escape_entry3_12
[Pass] escape_entry3_13
[Pass] escape_entry3_14
[Pass] escape_entry3_15
[Pass] escape_entry3_16
[Pass] escape_entry3_17
[Pass] escape_entry3_18
[Pass] escape_entry3_19
[Pass] escape_entry3_2
[Pass] escape_entry3_20
[Pass] escape_entry3_21
[Pass] escape_entry3_22
[Pass] escape_entry3_23
[Pass] escape_entry3_24
[Pass] escape_entry3_25
[Pass] escape_entry3_26
[Pass] escape_entry3_27
[Pass] escape_entry3_28
[Pass] escape_entry3_29
[Pass] escape_entry3_3
[Pass] escape_entry3_30
[Pass] escape_entry3_31
[Pass] escape_entry3_4
[Pass] escape_entry3_5
[Pass] escape_entry3_6
[Pass] escape_entry3_7
[Pass] escape_entry3_8
[Pass] escape_entry3_9
[Pass] escape_entry4
[Pass] escape_entry4_1
[Pass] escape_entry4_10
[Pass] escape_entry4_11
[Pass] escape_entry4_12
[Pass] escape_entry4_13
[Pass] escape_entry4_14
[Pass] escape_entry4_15
[Pass] escape_entry4_16
[Pass] escape_entry4_17
[Pass] escape_entry4_18
[Pass] escape_entry4_19
[Pass] escape_entry4_2
[Pass] escape_entry4_20
[Pass] escape_entry4_21
[Pass] escape_entry4_22
[Pass] escape_entry4_23
[Pass] escape_entry4_24
[Pass] escape_entry4_25
[Pass] escape_entry4_26
[Pass] escape_entry4_27
[Pass] escape_entry4_3
[Pass] escape_entry4_4
[Pass] escape_entry4_5
[Pass] escape_entry4_6
[Pass] escape_entry4_7
[Pass] escape_entry4_8
[Pass] escape_entry4_9
[Pass] escape_entry5
[Pass] escape_entry6
[Pass] escape_entry7
[Pass] escape_entry8
[Pass] escape_entry9

Total: 88, Pass: 88, Fail: 0, Not Found: 0",['beginner'],2015-03-04 21:59:08+00:00,,2020-12-16 19:25:55+00:00,Open,13114659,DAFFODIL-1240
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In a previous commit, formattedStr in DFDLCalendar types was changed from a lazy val to a val. formattedStr calls createFormatString, which is a fairly expensive function (creates a new SimpleDateFormat, formats the string, etc), that causes a noticable slow down. We should probably just change this back to a lazy val.",[],2015-03-04 19:07:57+00:00,2015-03-16 13:00:09+00:00,2015-03-24 19:53:59+00:00,Closed,13114658,DAFFODIL-1239
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"To reduce overhead during development, and for applications that only need one or the other of Parser and Unparser, we could split these and let the API handle them entirely separately.",[],2015-03-03 23:23:32+00:00,2020-12-16 19:22:47+00:00,2020-12-16 19:22:47+00:00,Closed,13114657,DAFFODIL-1238
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The CLI subcommand ""test"" has the option ""-i"" or ""--info"" but this is not mentioned in the wiki. It is listed in the help output though.",[],2015-02-27 19:57:47+00:00,2015-02-27 20:05:28+00:00,2015-02-27 20:28:11+00:00,Closed,13114656,DAFFODIL-1237
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Several CLI tests are failing for me on Windows. We'll need to check if this is an issue with just my system or not.

3 Tests failing in TestCLIParsing.scala:
* test_1973_CLI_Parsing_traceMode03
* test_1003_CLI_Parsing_SimpleParse_emptyNamespace
* test_DFDL_1203_schema_from_jar

25 Tests failing in TestCLIDebugger.scala
* only test_982_CLI_Debugger_simpleDebugger passes",[],2015-02-26 19:31:08+00:00,2015-03-03 18:34:28+00:00,2015-03-30 21:52:21+00:00,Closed,13114655,DAFFODIL-1236
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"The CLI used to show a backtrace when running tests with the -ii flag. 

{code}
$ daffodil_cli test -ii daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/infoTest.tdml testFail2
[Fail] testFail2
  Failure Information:
    Parse Error: Convert to Integer (for xs:int): Unable to parse 'te' (using up all characters).
    Schema context: One(element.e1) List(element.e1)
    Data location was preceding byte 2
    UTF-8 text starting at byte 0 is: (te)
    Data (hex) starting at byte 0 is: (0x7465)
  Logs:
    None
  Backtrace:
    edu.illinois.ncsa.daffodil.processors.Parser.PE(Parser.scala:76)
    edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:89)
    edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:61)...
{code}

In 1.0.0 the backtrace does not show.",[],2015-02-24 02:04:15+00:00,2020-12-16 19:21:57+00:00,2020-12-16 19:21:57+00:00,Closed,13114654,DAFFODIL-1235
Improvement,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"I ran a test and noticed a small typo in a SAXParseException.
{quote}
[error] Schema Definition Error: Error loading schema due to org.xml.sax.SAXParseException; systemId: file:/home/efinnegan/Projects/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_05_nons.dfdl.xsd; lineNumber: 63; columnNumber: 47; sch-props-correct.2: A schema cannot contain two global components with the same name; this schema contains two occurrences of {color:red}',vagueElem'.{color}
Schema context: SchemaSet. Location in file:/home/efinnegan/Projects/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_05_nons.dfdl.xsd.
{quote}

The element name is ""vagueElem"" but the error has a comma in there - "",vagueElem"".

This can be seen by running the following CLI test:
echo ""123,222,321,123|222,111,243"" | daffodil_cli parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_05_nons.dfdl.xsd --root baseSeq

Note: the DAFFODIL_CLASSPATH environment variable must contain the path to the daffodil-test resources directory. See test case ngf-dfdl-1281:CLI_Parsing_MultifileSchema_methodCombo02 for more details.","['beginner', 'easyfix']",2015-02-23 19:26:04+00:00,,2019-06-20 22:13:13+00:00,Open,13114653,DAFFODIL-1234
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Tests for fn:nilled() fail with the following error:
java.lang.ClassCastException: edu.illinois.ncsa.daffodil.processors.DIComplex cannot be cast to edu.illinois.ncsa.daffodil.processors.DISimple
[error]     at edu.illinois.ncsa.daffodil.dpath.DState.currentSimple(DState.scala:127)
[error]     at edu.illinois.ncsa.daffodil.dpath.DState.currentValue(DState.scala:76)

See tests:
test_nilled_02
test_nilled_03
test_nilled_04

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2015-02-20 16:18:57+00:00,2016-11-14 16:01:50+00:00,2017-07-26 20:16:45+00:00,Closed,13114652,DAFFODIL-1233
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Command:
{code}
time daffodil_cli parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/AB.dfdl.xsd --root matrix daffodil-core/src/test/resources/test/AB009.in
{code}
End of Output:
{code}
......
    <cell>10</cell>
  </row>
</tns:matrix>


real	24m27.003s
user	24m2.098s
sys	0m14.354s
{code}
File Size Output:
{code}
2.1M	      daffodil-core/src/test/resources/test/AB009.in
{code}",[],2015-02-19 16:06:18+00:00,2015-03-10 21:36:07+00:00,2015-03-13 20:26:28+00:00,Closed,13114651,DAFFODIL-1232
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The note for test_AB007 in 
daffodil-test-ibm1/src/test/scala-debug/edu/illinois/ncsa/daffodil/TresysTests2.scala
states:
{code}
//Too slow to use in regression. So slow it's a bug.
{code}
I was unable to find a current, open ticket for this, but found an old ticket that appears to be related: DFDL-232.

From the comments section:
Taylor Wise added a comment - 24/Oct/12 4:38 PM

These tests should all now run. Now it's just a question of performance.

Paul Chu (Inactive) added a comment - 09/Nov/12 12:34 PM

I used the start script to run the tests on the command line using the .in files for AB006-AB009. Please see commit 963860c in master. The following are the processing times:
AB006 - 8 seconds
AB007 - 30 seconds
AB008 - 2 minutes and 35 seconds
AB009 - 2 minutes.

I parsed the data in AB007 with the CLI (parse subcommand) and it took 34 seconds:
{code}
time daffodil_cli parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/AB.dfdl.xsd --root matrix  daffodil-core/src/test/resources/test/AB007.in
{code}
I parsed the same test with the CLI (test subcommand) and it took 1 minute 24 seconds:
{code}
time daffodil_cli test daffodil-test-ibm1/src/test/resources/test-suite/tresys-contributed/ABLargeData.tdml.dat AB007
{code}
I ran the test with sbt and it's been running for over 5 minutes and is still going.",[],2015-02-19 15:18:43+00:00,2017-04-06 15:21:19+00:00,2018-09-13 14:13:22+00:00,Closed,13114650,DAFFODIL-1231
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When using the daffodil CLI, if you specify a relative path to the schema file, the parse works without issues. If you try to give an absolute path, you get an error, even though the path tab-completes and exists.

{code}
$ echo ""0,1,2""| daffodil-cli/target/universal/stage/bin/daffodil parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
<tns:matrix
xmlns:fn=""http://www.w3.org/2005/xpath-functions"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:tns=""http://www.example.org/example1/"" xmlns=""http://www.w3.org/2001/XMLSchema"">
  <tns:row>
    <tns:cell>0</tns:cell>
    <tns:cell>1</tns:cell>
    <tns:cell>2</tns:cell>
  </tns:row>
</tns:matrix>


jchab@WIN-EEA4S63ULQH ~/daffodil
$ echo ""0,1,2""| daffodil-cli/target/universal/stage/bin/daffodil parse -s /home/jchab/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
[error] Bad arguments for option 'schema': '/home/jchab/daffodil/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd' - wrong arguments format
{code}",[],2015-02-17 21:41:21+00:00,2015-02-18 19:31:17+00:00,2015-02-18 19:31:24+00:00,Closed,13114649,DAFFODIL-1230
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Tests that check the return code are not Windows compatible (threading tests), along with some tests that use regular expressions:

Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_1001_CLI_Executing_Listing_execRegex01
Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_999_CLI_Executing_Listing_listRegex01
Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_1000_CLI_Executing_Listing_listRegex02
Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_994_CLI_Executing_Listing_execAll
Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_993_CLI_Executing_Listing_listAll
Test edu.illinois.ncsa.daffodil.performance.TestCLIPerformance.test_3394_CLI_Performance_3_Threads_20_Times
Test edu.illinois.ncsa.daffodil.performance.TestCLIPerformance.test_3395_CLI_Performance_5_Threads_50_Times
Test edu.illinois.ncsa.daffodil.performance.TestCLIPerformance.test_3393_CLI_Performance_2_Threads_2_Times
Test edu.illinois.ncsa.daffodil.saving.TestCLISaveParser.test_3039_CLI_Saving_SaveParser_emptyNamespace
Test edu.illinois.ncsa.daffodil.saving.TestCLISaveParser.test_3023_CLI_Saving_SaveParser_verboseMode",[],2015-02-17 20:49:47+00:00,2015-04-03 17:41:58+00:00,2015-04-15 17:31:51+00:00,Closed,13114648,DAFFODIL-1229
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The following tests in daffodil-core fail on Windows 7 64-bit:
from edu.illinois.ncsa.daffodil.dsom.TestExternalVariablesNew:
test_figures_out_namespace_failure
test_figures_out_namespace_success
both fail with:
<test name> failed: null

test_no_namespace_success
fails with:
edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$AlreadyTried: SchemaSet@@variableMap error

from edu.illinois.ncsa.daffodil.dsom.TestDsomCompiler:
test_group_references
test3
test_element_references
test_simpleType_base_combining
all fail with errors similar to the following:
{code}
[error] Test edu.illinois.ncsa.daffodil.dsom.TestDsomCompiler.test_group_references failed: edu.illi
nois.ncsa.daffodil.dsom.oolag.OOLAG$ErrorAlreadyHandled: Schema Definition Error: Invalid syntax for
 QName 'tns:def2???'.
[error] Schema context: SchemaDocument::DFDLFormat. Location line 9 column 10 in file:/C:/Users/jcha
b/AppData/Local/Temp/anon953076295763127202.dfdl.xsd.
{code}",[],2015-02-17 20:13:35+00:00,2015-05-01 19:46:48+00:00,2015-05-11 16:31:11+00:00,Closed,13114647,DAFFODIL-1228
Wish,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The following tests fail on Windows 7 64-bit:
test_daffodil_pretty_printer_will_format_to_20_columns
test_daffodil_pretty_printer_preserves_whitespace_inside_cdata_properly2
test_daffodil_pretty_printer_preserves_whitespace_inside_cdata_properly3

They all fail with this error:
<test name> failed: null

with no accompanying traceback",[],2015-02-17 19:47:56+00:00,2019-01-18 16:48:01+00:00,2021-05-18 14:38:30+00:00,Closed,13114646,DAFFODIL-1227
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This is a code cleanup issue.

The base class SchemaComponentBase no longer needs to exist in the daffodil-lib module. It should be in daffodil-core. 

The only references to this symbol in daffodil-lib and daffodil-runtime1 are import statements. 

It is used in TestGeneratedProperties in daffodil-lib-unittest, but could be replaced there with OOLAGHost.

The reason for this SchemaComponentBase was because code was in daffodil-lib that needed it. That code is no longer present in daffodil-lib, so SchemaComponentBase can just be refactored down into SchemaComponent, and the base class can go away entirely.",[],2015-02-12 19:34:33+00:00,2015-05-06 15:16:14+00:00,2015-05-12 19:18:29+00:00,Closed,13114645,DAFFODIL-1226
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,I noticed stringToEnum was taking a non trivial amount of time to execute. Need to investigate.,[],2015-02-09 20:57:51+00:00,2015-02-11 13:27:46+00:00,2015-02-17 13:40:37+00:00,Closed,13114644,DAFFODIL-1225
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Profiling revealed some potential performance hot spots related to ProcessingErrors. Investigate and fix if possible,[],2015-02-09 16:25:44+00:00,2015-02-09 20:45:27+00:00,2015-02-17 13:41:09+00:00,Closed,13114643,DAFFODIL-1224
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=22052868,[],2015-02-09 15:48:37+00:00,2015-02-27 14:31:32+00:00,2015-02-27 16:38:52+00:00,Closed,13114642,DAFFODIL-1223
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Add a few automated CLI tests to verify that no errors occur when running tests with multiple threads.,[],2015-02-04 20:52:50+00:00,2015-02-12 21:02:15+00:00,2015-02-13 16:25:36+00:00,Closed,13114641,DAFFODIL-1222
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If the XPath expression extends beyond the root of the tree, you get the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_beyondRoot_01 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. UpMove past root. Should never happen since an expression like that won't typecheck statically.
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:136)
[error] edu.illinois.ncsa.daffodil.dpath.UpMove$$anonfun$1.apply(UpDownMoves.scala:32)
[error] edu.illinois.ncsa.daffodil.dpath.UpMove$$anonfun$1.apply(UpDownMoves.scala:32)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:136)
[error]     at edu.illinois.ncsa.daffodil.dpath.UpMove$$anonfun$1.apply(UpDownMoves.scala:32)
[error]     at edu.illinois.ncsa.daffodil.dpath.UpMove$$anonfun$1.apply(UpDownMoves.scala:32)
[error]     at edu.illinois.ncsa.daffodil.util.Maybe$.getOrElse$extension(Maybe.scala:30)
[error]     at edu.illinois.ncsa.daffodil.dpath.UpMove$.run(UpDownMoves.scala:32)
[error]     at edu.illinois.ncsa.daffodil.dpath.CompiledDPath.run(DPathRuntime.scala:85)
[error]     at edu.illinois.ncsa.daffodil.dpath.CompiledDPath.runExpression(DPathRuntime.scala:31)
[error]     at edu.illinois.ncsa.daffodil.dpath.RuntimeExpressionDPath.liftedTree1$1(DPath.scala:92)
[error]     at edu.illinois.ncsa.daffodil.dpath.RuntimeExpressionDPath.evaluate(DPath.scala:91)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.ExpressionEvaluationParser.eval(ExpressionEvaluatingParsers.scala:30)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.IVCParser$$anonfun$parse$1.apply(ExpressionEvaluatingParsers.scala:44)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.IVCParser$$anonfun$parse$1.apply(ExpressionEvaluatingParsers.scala:41)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(ParseErrors.scala:205)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.ExpressionEvaluationParser.withParseErrorThrowing(ExpressionEvaluatingParsers.scala:19)
[error]     at edu.illinois.ncsa.daffodil.processors.parsers.IVCParser.parse(ExpressionEvaluatingParsers.scala:41)
....
{code}

I first noticed this with the interactive debugger, but have written a TDML test to demonstrate the issue:

test_beyondRoot_01

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2015-02-04 15:06:17+00:00,2018-09-07 14:37:43+00:00,2021-05-20 12:34:42+00:00,Closed,13114640,DAFFODIL-1221
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently, if we receive an in-memory schema (e.g. scala.xml.Node, java.io.InputStream), we first write it to disk to a temporary location, and then read that. For some workloads, writing to disk could cause unacceptable overhead. So if we receive an a scheme from memory, we should be able to parse/compile it from memory as well.",[],2015-01-29 14:50:00+00:00,2017-04-06 17:45:34+00:00,2017-04-06 17:45:34+00:00,Closed,13114639,DAFFODIL-1220
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Our scala xml pattern matcher does not allow for comments inside the defineFormat element. To fix this probably and prevent similar errors in the future, we should strip out all comments to ensure our patterns work.

Alternatively, maybe we shouldn't use pattern matching to extract nodes, but should instead use xpath expressions to get what we need.",[],2015-01-22 17:46:29+00:00,2017-04-06 15:05:39+00:00,2017-04-06 15:05:39+00:00,Closed,13114638,DAFFODIL-1219
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"We used to support multi-file schemas in the API and CLI. That support was removed in DFDL-1199, but some internal code still has support for multi-file schemas (e.g. SchemaSet). We should simplify this code and remove these things that no longer need multiple schemas.",['beginner'],2015-01-21 20:29:01+00:00,,2020-12-16 19:20:12+00:00,Open,13114637,DAFFODIL-1218
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"The expected warning according to the test is the following:

element.e is an optional element or a variable-occurrence array and its alignment (2) is not the same as element.one's alignment (1)

No error or warning is received.

edu.illinois.ncsa.daffodil.section12.aligned_data  
under the 'new' folder: test_alignmentOptionalElem03()",[],2015-01-21 18:56:33+00:00,,2018-09-13 14:04:27+00:00,Open,13114636,DAFFODIL-1217
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I tried to run unparse by providing the input on stdin and I got this error:
[dfdl] (0.16.0)$ echo -ne 'xmlns:fn=""http://www.w3.org/2005/xpath-functions"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:tns=""http://www.example.org/example1/"" xmlns=""http://www.w3.org/2001/XMLSchema""><tns:row><tns:cell>0</tns:cell></tns:row></tns:matrix>' | daffodil-cli/target/universal/stage/bin/daffodil unparse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix
*[error] /home/jchab/NGF/dfdl/standardInput (No such file or directory)*",[],2015-01-21 15:29:50+00:00,2015-04-28 15:26:49+00:00,2015-04-29 15:04:52+00:00,Closed,13114635,DAFFODIL-1216
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Make sure that we properly quote things in error messages (e.g. ""Element foo"" versus ""Element 'foo'"") and that our error messages are consistent.",[],2015-01-20 19:04:52+00:00,2017-04-06 17:48:00+00:00,2018-09-13 14:13:18+00:00,Closed,13114634,DAFFODIL-1215
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The test testReadSurrogateCodePointsLikeCharacters in daffodil-lib fails when run with Java 8. It appears Java 8 has dropped support for ""Modified UTF-8"" which that test relies on. We should make that test conditional so that it only checks the last to assertions for java 7 or earlier.",[],2015-01-08 15:14:30+00:00,2015-01-20 16:05:33+00:00,2015-02-17 20:04:19+00:00,Closed,13114633,DAFFODIL-1214
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"There seems to be an SDE for when a terminator contains %ES;.  This gets bypassed if the Terminator is not a constant expression.

ES should be allowed as a terminator.",[],2015-01-08 13:29:25+00:00,2016-09-14 22:36:16+00:00,2017-08-03 16:21:31+00:00,Closed,13114632,DAFFODIL-1213
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Contact Info Csv (csvMixedNarrow), both with checkConstraints present and removed, has slowed down since Spin 15. In some cases the tests are even slightly slower than they were in Spin 14.",[],2015-01-07 19:06:14+00:00,2017-04-06 15:33:26+00:00,2018-09-13 14:13:21+00:00,Closed,13114631,DAFFODIL-1212
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2015-01-06 20:58:32+00:00,2015-10-02 15:15:57+00:00,2016-05-27 19:11:25+00:00,Closed,13114630,DAFFODIL-1211
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is a substantial community of people who avoid XML and prefer very much to use the very simple JSON format for data.

Daffodil's API and CLI should have a way to specify conversion of the DFDL infoset into either XML (as currently) or JSON, as the final step before handing objects back to the caller.",[],2015-01-06 16:59:45+00:00,2017-04-28 17:44:02+00:00,2017-07-27 15:31:29+00:00,Closed,13114629,DAFFODIL-1210
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Critical,"When running the performance subcommand of the CLI, using multiple threads, a portion of the tests fail. It appears to be directly related to the number of threads being used.

With 1,000 runs, with 2 threads there are only 2 failures. With more threads it seems that nearly half fail.",[],2015-01-06 16:35:14+00:00,2015-01-15 15:50:56+00:00,2015-01-16 19:42:27+00:00,Closed,13114628,DAFFODIL-1209
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When running performance tests, if there are failures, daffodil currently returns the number of failures as the exit code. However, on POSIX systems, the exit code can only be between 0-255. This means that it is possible for there to be failures, but the return code be be equivalent to zero, based on how the value is truncated.

We should just return EXIT_FAILURE or something if there are any errors.",[],2015-01-06 16:25:21+00:00,2015-01-07 16:55:49+00:00,2015-01-16 18:30:38+00:00,Closed,13114627,DAFFODIL-1208
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If user writes:
{code}
<dfdl:property name=""textNumberPadCharacter""> </dfdl:property>
{code}
That's not a legitimate way to create a string containing a space in XML.

Now, we're not going to do the right thing currently if the user writes:
{code}
<dfdl:property name=""textNumberPadCharacter"" xml:space=""preserve""> </dfdl:property>
{code}
why? we don't even check for the xml:space attribute. All-whitespace nodes are trimmed away explicitly, by Daffodil code. 

At least in theory, things that pretty print and or re-indent XML documents should not mess with all-whitespace nodes if xml:space='preserve' is in a surrounding element.

The workaround is simple. Use CDATA region. 

The user has to do this:
{code}
<dfdl:property name=""textNumberPadCharacter""><![CDATA[ ]]></dfdl:property>
{code} 
so as to insist that the content is not fungible XML whitespace.",[],2014-12-31 19:59:23+00:00,2015-03-11 15:17:53+00:00,2015-06-01 20:18:04+00:00,Closed,13114626,DAFFODIL-1207
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"I'm adding a test to TestSimpleTypes under scala-debug to illustrate this.

test_dateTime_calendarPattern_EscapeCharacter

Essentially, I should be able to have a format such as ""yyyy-MM-dd'Thh:mm:ss"" as the calendarPattern.  The T is escaped by the single quote character.  Currently the regex replacement code in PrimitivesDateTime does not remove the ""'T"" before validating the pattern contents for allowed characters.  This results in an SDE and it shouldn't.",[],2014-12-31 17:48:02+00:00,2015-01-05 15:52:07+00:00,2015-01-05 15:52:07+00:00,Closed,13114625,DAFFODIL-1206
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Because a saved parser does not save the entire schema, it makes no sense to request ""full"" validation (which runs xerces against the DFDL infoset after converting it to XML).

CLI should catch this error and point out to the user the error of their ways. API can just throw an appropriate exception indicating the incompatibility.

We could consider an enhancement someday to package the entire schema together with the saved parser purely to lift this restriction, but for now these should just be incompatible.",[],2014-12-30 23:22:28+00:00,2015-03-24 16:05:37+00:00,2015-03-26 18:37:19+00:00,Closed,13114624,DAFFODIL-1205
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Some changes in 0.16.0 have us using the scala ConstructingParser to parse DFDL schemas now.

A small incompatibility with the prior use of the scala basic XML loader was found. 

Test test_namespaceSpecialChars() moved to scala debug.

The problem is that the Uncode codepoint U+00B7 is not properly accepted as part of a namespace prefix, so the test fails now. 

This was reported as a bug in the scala library. 
https://issues.scala-lang.org/browse/SI-9060

The issue that has us switching from basic XML loader to ConstructingParser is unrelated to this small regression It is CDATA region preservation that has us switching parsers. This problem looks like it is getting solved in Scala 2.11.7, which we'll switch to some day, allowing us to go back to the basic scala XML loader - and that would then fix this issue with the Unicode B7 codepoint.

So I suggest no action to address this bug.",['beginner'],2014-12-22 18:53:33+00:00,,2021-01-13 12:51:00+00:00,Open,13114623,DAFFODIL-1204
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-12-19 15:35:25+00:00,2015-01-07 20:31:35+00:00,2015-01-22 23:03:16+00:00,Closed,13114622,DAFFODIL-1203
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Now that we can detect if there was a timezone, implement these functions.

Returns the timezone component, if any, of $arg as an
xs:string. The $arg is of type xs:dateTime, xs:date and
xs:time respectively.
If $arg has a timezone component, then the result is a
string in the format of an ISO Time zone designator.
Interpreted as an offset from UTC, its value may range from
+14:00 to -14:00 hours, both inclusive. The UTC time zone
is represented as ""+00:00"". If the $arg has no timezone
component, then """" (empty string) is returned.",[],2014-12-19 13:51:36+00:00,2015-01-05 15:12:02+00:00,2015-01-15 19:54:33+00:00,Closed,13114621,DAFFODIL-1202
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"The result xs:dateTime has a date component whose value is equal to $arg1 and a time component whose value is equal to $arg2. The result is the empty sequence if either of the parameters is the empty sequence.

The timezone of the result is computed as follows:

If neither argument has a timezone, the result has no timezone.
If exactly one of the arguments has a timezone, or if both arguments have the same timezone, the result has this timezone.
If the two arguments have different timezones, an error is raised:[err:FORG0008]",[],2014-12-19 13:49:00+00:00,2015-01-05 15:13:00+00:00,2015-01-15 19:54:33+00:00,Closed,13114620,DAFFODIL-1201
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Giant long file paths like file:/home/mbeckerle/dataiti/git/daffodil/eclipse-projects/target/test/edu/illinois/ncsa/daffodil/section06/namespaces.tdml

These clutter the error messages, and all but the section06/namespaces.tdml are noise. 

Almost nothing can be viewed without scrolling the window/panel to the right so as to get past these giant paths. Or alternatively they wrap around line after line. 

Any given path being displayed can have whatever the longest prefix of it that matches a location on the classpath, that longest prefix can be removed without _much_ loss of information content.",[],2014-12-19 08:42:37+00:00,,2020-12-16 19:13:19+00:00,Open,13114619,DAFFODIL-1200
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,All other schemas should be found using standard CLASSPATH/include/import resolution.,[],2014-12-18 18:58:29+00:00,2015-01-22 13:37:48+00:00,2015-01-28 22:44:08+00:00,Closed,13114618,DAFFODIL-1199
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-12-17 15:49:02+00:00,2014-12-17 23:48:53+00:00,2015-01-06 21:21:40+00:00,Closed,13114617,DAFFODIL-1198
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2014-12-16 20:23:42+00:00,2014-12-17 23:48:39+00:00,2015-01-15 19:34:19+00:00,Closed,13114616,DAFFODIL-1197
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Added some tests based on J. Garriss' 5-level JSON schema.

Test test_json5_3 fails because whitespace is not being made optional. This JSON doesn't parse ""[null,null]"", but does parse ""[ null , null ]"".

It seems to take a very long time to parse these tiny examples, or possibly to compile the schema, but the schema isn't very big.

tests test_json5_1 and test_json5_2 also show the slow speed.",[],2014-12-15 21:25:17+00:00,2015-01-16 19:43:52+00:00,2015-01-20 16:01:15+00:00,Closed,13114615,DAFFODIL-1196
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,The simple PCAP schema (without any XPath expressions) slowed down from Spin 14 to Spin 15. We need to investigate why things slowed down (potentially the new infoset implementation) and how to fix it.,[],2014-12-12 22:39:53+00:00,2017-04-06 15:36:10+00:00,2018-09-13 14:13:32+00:00,Closed,13114614,DAFFODIL-1195
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Tests with both AND/OR operators in the same expression do not evaluate as I expected when OR is first.

I was expecting (true OR true AND false) to evaluate to false but it returns true. The other way around seems to work though - (true AND false OR true) evaluated to true.

See tests:
test_sequential_and_or_02
test_sequential_and_or_05
test_sequential_and_or_07

In files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-12-12 17:00:21+00:00,2014-12-12 17:29:56+00:00,2014-12-12 17:56:25+00:00,Closed,13114613,DAFFODIL-1194
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil currently serializes parsers to a binary java object form that directly matches the current Scala runtime1 back-end.

Serializing to an XML representation (almost certainly compressed) is needed since alternate back-ends are supposed to be able to consume this XML representation. 

Beyond just serializing the objects, these XML objects need to be rationalized somewhat, as the serialized XML representation needs to be intelligible for someone trying to implement an alternative back-end. It is also likely we'll want to control the order of serialization for the XML reprsentation more so that, for example, the file names all appear in one place, at the end of the file, etc.",[],2014-12-12 01:13:14+00:00,2020-12-16 19:12:30+00:00,2020-12-16 19:12:31+00:00,Closed,13114612,DAFFODIL-1193
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The enhanced PCAP performance tests of 0.15.0 show that parsing 10 1MByte files runs more slowly (in KB/s) than parsing 1000 1KB files. 

This does not match expectations which are that larger files should be a bit more efficient than many small files simply due to lower overhead for starting up and finishing off on a file. 

It's possible that there is something happening that takes time proportional to the size of the data (copying unnecessarily for example). That would explain a general downward trend in performance as data sizes go up. But this is speculation. 

We need to do some profiling to better understand where this slowdown for larger data is coming from. 

There is a caveat here about data size. For really big data - data such that the parsed infoset will have a hard time fitting in the JVM heap, we can expect overhead/slowdown. But 1MByte PCAP files don't qualify as this large.",[],2014-12-10 20:44:08+00:00,2017-04-06 15:36:50+00:00,2018-09-13 14:13:31+00:00,Closed,13114611,DAFFODIL-1192
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"For all of the axes that DPath does not support (ancestor, following, etc.) I am getting the error message:

Schema Definition Error: Unable to parse expression. Message: `}' expected but `:' found

This may change after the valid long form axes are implemented (DFDL-1059) but wanted to note this just in case.

See tests:
test_ancestor_axis_01
test_ancestor_or_self_axis_01
test_attribute_axis_04
test_descendant_axis_01
test_descendant_or_self_axis_01
test_following_axis_01
test_following_sibling_axis_01
test_namespace_axis_01
test_preceding_axis_01
test_preceding_sibling_axis_01

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2014-12-10 16:17:07+00:00,2015-01-27 18:36:29+00:00,2015-01-27 20:58:47+00:00,Closed,13114610,DAFFODIL-1191
Bug,[],gmcdonald,Gavin McDonald,daffodil-npatrick,Norman Patrick,Major,Test test_include02 fails if there are spaces in directory names where schemas are located.  When throwing a SDE the whereSearched variable needs to be included as an argument instead of appended to the format string.,[],2014-12-08 20:11:35+00:00,2014-12-09 18:57:33+00:00,2015-02-11 17:34:20+00:00,Closed,13114609,DAFFODIL-1190
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Implement fn:exactly-one. 

There are two phases to this. One behaves like{code} if (fn:exists(x)) then x else error {code}. This is the version that we need first. 

Later, once DFDL-1118 is implemented this needs to be revisited. However, that's a separate issue. Not even creating a ticket for it. This task should be part of the implementation work for DFDL-1118.",[],2014-12-08 13:20:01+00:00,2021-01-13 20:44:37+00:00,2021-01-13 20:55:03+00:00,Closed,13114608,DAFFODIL-1189
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When attempting to access a hidden element with an expression, I get an Invariant Broken abort message. See the following tests:

hiddenDataExpression
hiddenDataExpression2

in
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-12-04 21:54:43+00:00,2015-01-06 20:49:24+00:00,2015-01-06 20:49:33+00:00,Closed,13114607,DAFFODIL-1188
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"There are several pages in the wiki that have broken links. I've listed them below. The indented bullets are the actual text on the page to look for where there is a broken link.

* Daffodil and the DFDL Infoset (https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Daffodil+and+the+DFDL+Infoset)
** See: http://msdn.microsoft.com/en-us/library/office/aa218415%28v=office.10%29.aspx
* Everyplace DFDL Expression Evaluation Occurs (https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Everyplace+DFDL+Expression+Evaluation+Occurs)
** xs:string
** xs:decimal
* Project Tools (https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Project+Tools)
** http://www.scala-sbt.org/download.html#manual
** http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.11.3-2/
* Notes on Regex and Delimiter Matching (https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Notes+on+Regex+and+Delimiter+Matching)
** http://jakarta.apache.org/oro/
** http://jakarta.apache.org/regexp/
* Scala Links & Patterns (https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=13762587)
** Scala Options Cheat Sheet
** Common Programming Mistakes to Avoid
** http://www.sumologic.com/blog/technology/3-tips-for-writing-performant-scala
* Investigations of Data Representation (https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Investigations+of+Data+Representation)
** http://cet.ncsa.illinois.edu/publications/Data_Interoperation.pdf
** http://forge.gridforum.org/projects/dfdl-wg/.",[],2014-12-04 20:48:32+00:00,2014-12-05 13:26:14+00:00,2014-12-05 15:53:20+00:00,Closed,13114606,DAFFODIL-1187
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"There are a few spots in the CLI wiki page that say that save-parser has not been implemented yet so we can now update those.

Under ""Parse Subcommand"" - Note that the -P or --parser feature is not yet implemented (April 2013)

Under ""Save Parser Subcommand"" - 
Note that the save-parser command is not currently implemented (April 2013).",[],2014-12-04 18:43:13+00:00,2014-12-04 19:26:05+00:00,2014-12-04 19:36:12+00:00,Closed,13114605,DAFFODIL-1186
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Trivial,"The Licenses & Dependencies page (https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=48824344) does not have a license listed for 2 of the jars included with Daffodil:
icu4j-charset-51_1.jar
icu4j-localespi-51_1.jar

This is because the sbt license report plugin does not include licenses for unmanaged libraries. An issue has been created to see if this feature can be added. See https://github.com/sbt/sbt-license-report/issues/6",[],2014-12-04 17:36:18+00:00,2015-08-12 17:34:50+00:00,2015-09-02 13:32:24+00:00,Closed,13114604,DAFFODIL-1185
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"{code}
/* ConfigurationLoader doesn't need its own validator,
 * nor does it need to use the ConstructingParser which is used for TDML only because
 * it deals with CDATA nodes differently than the regular loader (DaffodilXMLLoader,
 * which is based on scala.xml.XML's loader, which is based on the sax parser
 * built into the JVM (which is xerces?), and which validates.
 *
 * For the configuration loader, we only need plain old loading.
 *
 * I suspect this was just cloned from the TDML loader code, and so copied its
 * more complicated arrangements.
 */{code}",[],2014-12-04 15:10:51+00:00,2014-12-05 21:39:10+00:00,2015-02-04 16:23:50+00:00,Closed,13114603,DAFFODIL-1184
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We use Xerces to load xml (such as TDML files), and we use Xerces XML schema stuff to explicitly validate DFDL schemas.

In order for this to work, Xerces must be able to process the namespace prefixes, associating them to their namespaces, and then associating the namespaces with XML schemas that define them. This is done for ordinary XML files (like TDML) using xsi:schemaLocation, and for XML/DFDL schemas using that, and also using the xs:import and xs:include.

A namespace can be associated with a schema using an XML Catalog - but that's not relevant to this issue.

The other way is that the xsi:schemaLocation, or the schemaLocation attribute of an xs:import/xs:include, can be used in conjunction with the class path, to find the corresponding file. 

This works fine, so long as the schema location associated with the namespace is a relative path that makes sense from some directory/jar on the class path. So if ..../bin/resources is on the classpath, then a schemaLocation=""xsd/foo.xsd"" will search for .../bin/resources/xsd/foo.xsd, and if that's where the file is, it will find it. 

The problem comes in when we want to add file-relative schema location ability. Seems reasonable - one XML/DFDL schema file should be able to include another one in the same directory (a sibling/peer file), just by using a schemaLocation with no path part e.g., {code} <xs:include schemaLocation=""myPeer.xsd""/> {code}.  That works if the file containing the include statement is in a directory (in the file system, or in a jar) that is on the class path directly. The problem comes when the enclosing file is in some subdirectory of the class path.

Example: suppose schema A.xsd lives in ..../bin/resources/xsd/A.xsd. It includes B.xsd with schemaLocation=""xsd/B.xsd"". 

It is now ambiguous whether B.xsd is in directory .../bin/resources/xsd/B.xsd, or .../bin/resources/xsd/xsd/B.xsd.

Unfortunately, when Xerces calls the resolver to find the URL for B.xsd, it passes the systemID = ""xsd/B.xsd"", the namespace (not relevant in this case), and the BaseURI which is in this case ..../bin/resources/xsd/xsd/B.xsd.

Why we get this seemingly incorrect BaseURI is a mystery and some further investigation is needed. 

Code in Misc.scala (in daffodil-lib) for resolving resources explicitly deals with baseURIs where there is a doubled-up directory that are at the end of the path just before the actual file name e.g., the xsd/xsd in the baseURI above.

This is a hack. Probably does what people want.

The missing information is this: what exactly is the URI of the enclosing file? This is not available to the resolver call. If we had the enclosing file's URI we could subtract it from the baseURI to determine that the classpath part of that is actually not just the baseURI with the filename removed, but is one directory higher than that.",[],2014-12-04 14:37:58+00:00,2017-08-23 15:12:38+00:00,2017-08-31 17:11:10+00:00,Closed,13114602,DAFFODIL-1183
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I wrote tests with more than 1 AND/OR but only the first 2 arguments seem to be evaluated. i.e. ""x and y and z"" only evaluated ""x and y"".

See tests:
test_sequential_and_04
test_sequential_or_04

In files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-12-03 20:24:32+00:00,2014-12-08 18:10:04+00:00,2014-12-12 20:08:48+00:00,Closed,13114601,DAFFODIL-1182
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I wrote tests with and/or that included a parse error in the second part of the operator. Since we were expecting these operators to evaluate sequentialy, I was expecting the parse error to not be hit when the first part of ""and"" evaluated to false and when the first part of ""or"" evaluated to true but that was not the case.

See tests:
test_sequential_and_01
test_sequential_or_01

In files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-12-03 20:19:57+00:00,2014-12-08 18:09:40+00:00,2014-12-12 20:13:35+00:00,Closed,13114600,DAFFODIL-1181
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Add remaining comparison operations for remaining types like date/time, etc.

http://www.w3.org/TR/xpath20/#mapping",[],2014-12-03 18:11:24+00:00,2014-12-19 14:20:01+00:00,2015-01-06 19:55:36+00:00,Closed,13114599,DAFFODIL-1180
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Whenever we display an infoset element, the toString() method calls the toXML method, and the resulting XML unfortunately carries all the namespace prefix definitions. These are often far larger in volume that the information one is looking for.

We need a way to suppress or remove these prefix definitions so as to get a denser and more readable ""brief XML"" form that is used when Infoset elements are converted to strings.

This issue affects both end-users of Daffodil, and developers. When debugging, the cluttered presentation of even quite small infosets makes things very hard to figure out.",[],2014-12-03 08:02:15+00:00,2015-03-06 20:26:25+00:00,2015-03-09 15:30:22+00:00,Closed,13114598,DAFFODIL-1179
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A feature - special property, or tunable parameter, or something, is needed that allows control of Daffodil extensions to DFDL, whether they are enabled or not, and what their settings are.

As an example - there is backward compatibility support for some old property names, as well as the new names that replaced them. This compatibility feature should be able to be turned off so that the implementation is more strict.",['beginner'],2014-12-03 07:49:29+00:00,,2020-12-16 19:10:18+00:00,Open,13114597,DAFFODIL-1178
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"DPath will optimize out an expression only if the whole expression is constant. If sub-expressions within it are constants, it will not isolate those and convert them into constants.

Unclear how important this is to performance. It's just something compilers normally do, but our DPath compiler isn't yet doing.",[],2014-12-03 07:27:57+00:00,,2020-12-16 19:09:04+00:00,Open,13114596,DAFFODIL-1177
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"A schema with elementFormDefault=""unqualified"" (which is the default), the local elements have no namespace.

Right now, every element in the infoset gets converted to XML having a namespace prefix for the target namespace, but this is not correct. For many elements (all local element decls when ""unqualified""), they should not have a prefix, as they are in no namespace.

The bug is that we are producing this:
{code}
<tns:matrix>
    <tns:row><tns:col>5</tns:col></tns:row>
</tns:matrix>
{code}
when we should be producing this:
{code}
<tns:matrix>
    <row><col>5</col></row>
</tns:matrix>
{code}

The fix to this is to carry not just the targetNamespace on the ElementRuntimeData, but the  element's namespace, which is the namedQName.namespace. 

Also carry the element's namespace prefix. 

Then use these in the Infoset when creating XML, not the target namespace.",[],2014-12-03 07:16:09+00:00,2014-12-05 21:39:32+00:00,2015-01-14 23:39:10+00:00,Closed,13114595,DAFFODIL-1176
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"It seems that eval is not showing the node as the default anymore. It is showing the value of the element instead. 

See test_1326_CLI_Debugger_displaysTesting in daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/debugger/TestCLIDebugger.scala",[],2014-12-02 16:37:06+00:00,2014-12-02 18:06:59+00:00,2014-12-02 18:52:13+00:00,Closed,13114594,DAFFODIL-1175
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Testlink cases for implicit alignment with unsigned numbers do not match with the actual test name. Testlink has ""_u"" where the test name has ""Unsigned""

For instance, the testcase ngf-dfdl-2454:AlignedData_uLong-test_implicitAlignmentULong is referring to the test with name ""test_implicitAlignmentUnsignedLong""

Both the title and the summary need to be updated to match the actual test name.",[],2014-12-02 15:45:44+00:00,2014-12-16 17:28:12+00:00,2014-12-16 17:28:22+00:00,Closed,13114593,DAFFODIL-1174
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,Many CLI tests have been updated to automated tests but the testlink cases still have the manual steps listed.,[],2014-12-02 15:39:22+00:00,2018-10-23 13:45:24+00:00,2018-10-23 13:45:24+00:00,Closed,13114592,DAFFODIL-1173
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Currently, daffodil accepts lengthUnits bits for these types. This should not be allowed as lengthUnits bits is only allowed for the integer types up to length 64 bits.",[],2014-12-02 15:25:53+00:00,,2020-12-16 19:08:32+00:00,Open,13114591,DAFFODIL-1172
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"XPath provides the ability to compare strings with expressions. However, if you try to compare strings with lt or gt with DPath, you get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_comparison_operators_26 failed: java.lang.Exception: Schema Definition Error: Operands for operator 'lt' must have numeric type. Types were: String and String.

See tests:
test_comparison_operators_23
test_comparison_operators_24
test_comparison_operators_25
test_comparison_operators_26

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-12-01 19:03:32+00:00,2014-12-03 16:51:15+00:00,2014-12-15 15:38:04+00:00,Closed,13114590,DAFFODIL-1171
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, if testKind is ""pattern"" and a pattern is not supplied, the result should be an SDE. the test test_assertPatternEmpty specifies a blank testPattern, but the data parses without throwing an SDE.

The test is in 
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/assertions/assert.tdml",[],2014-12-01 17:47:08+00:00,2014-12-09 18:56:40+00:00,2014-12-15 15:22:32+00:00,Closed,13114589,DAFFODIL-1170
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running the TDML test suite on Windows (cmd), 93 of the 2150 tests fail.

It appears that the following error is the cause of most of the failures:
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_containsDFDLEntities_4 failed: java.lang.Exception: Schema Definition Error: Loading XML failed due to Some(Invalid byte 2 of 3-byte UTF-8 sequence. (within Invalid byte 2 of 3-byte UTF-8 sequence.)).

Please investigate and let us know if this is something that needs to be addressed by test rather than dev.",[],2014-12-01 16:19:10+00:00,2015-03-26 19:53:40+00:00,2015-03-30 15:47:03+00:00,Closed,13114588,DAFFODIL-1169
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"tar is not natively on Windows, so I had to install [GNU Tar|http://gnuwin32.sourceforge.net/packages/gtar.htm]. I set up my Path correctly and verified that I could run the command. However, when I try to run sbt universal:packageZipTarball, I get the following error:

{code}
[info] Loading project definition from C:\Users\jchab\NGF\daffodil\project
[info] Set current project to daffodil (in build file:/C:/Users/jchab/NGF/daffodil/)
[info] Updating {file:/C:/Users/jchab/NGF/daffodil/}daffodil-cli...
[info] Wrote C:\Users\jchab\NGF\daffodil\daffodil-cli\target\scala-2.10\daffodil-cli_2.10-0.15.0-SNAPSHOT.pom
[info] Resolving org.fusesource.jansi#jansi;1.4 ...4 .....5 ...PSHOT ....
[info] Done updating.
[info] Wrote C:\Users\jchab\NGF\daffodil\daffodil-lib\target\scala-2.10\daffodil-lib_2.10-0.15.0-SNAPSHOT.pom
[info] Wrote C:\Users\jchab\NGF\daffodil\daffodil-io\target\scala-2.10\daffodil-io_2.10-0.15.0-SNAPSHOT.pom
[info] Wrote C:\Users\jchab\NGF\daffodil\daffodil-core\target\scala-2.10\daffodil-core_2.10-0.15.0-SNAPSHOT.pom
[info] Wrote C:\Users\jchab\NGF\daffodil\daffodil-tdml\target\scala-2.10\daffodil-tdml_2.10-0.15.0-SNAPSHOT.pom
tar: Cannot open C:\Users\jchab\AppData\Local\Temp\sbt_5185c472\daffodil-0.15.0-SNAPSHOT.tar: Function not implemented
tar: Error is not recoverable: exiting now
java.lang.RuntimeException: Error tarballing C:\Users\jchab\NGF\daffodil\daffodil-cli\target\universal\daffodil-0.15.0-SNAPSHOT.tgz. Exit code: 2
	at scala.sys.package$.error(package.scala:27)
	at com.typesafe.sbt.packager.universal.Archives$$anonfun$makeTarball$1.apply(Archives.scala:134)
	at com.typesafe.sbt.packager.universal.Archives$$anonfun$makeTarball$1.apply(Archives.scala:118)
	at sbt.IO$.withTemporaryDirectory(IO.scala:285)
	at com.typesafe.sbt.packager.universal.Archives$.makeTarball(Archives.scala:118)
	at com.typesafe.sbt.packager.universal.Archives$$anonfun$10.apply(Archives.scala:111)
	at com.typesafe.sbt.packager.universal.Archives$$anonfun$10.apply(Archives.scala:111)
	at scala.Function3$$anonfun$tupled$1.apply(Function3.scala:35)
	at scala.Function3$$anonfun$tupled$1.apply(Function3.scala:34)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:47)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:42)
	at sbt.std.Transform$$anon$4.work(System.scala:64)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:244)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
[error] (daffodil-cli/universal:packageZipTarball) Error tarballing C:\Users\jchab\NGF\daffodil\daffodil-cli\target\universal\daffodil-0.15.0-SNAPSHOT.tgz. Exit code: 2
[error] Total time: 19 s, completed Dec 1, 2014 11:11:44 AM
{code}",[],2014-12-01 16:13:52+00:00,2020-12-16 19:04:48+00:00,2020-12-16 19:04:48+00:00,Closed,13114587,DAFFODIL-1168
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Serilaized parsers can be quite large. However, it looks like they can compress by quite a bit. Look into compressing the serialized parser to decrease the size.",[],2014-12-01 13:54:21+00:00,2014-12-05 20:57:07+00:00,2015-01-05 18:29:32+00:00,Closed,13114586,DAFFODIL-1167
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Large schemas take a long time to compile. If the schema is being compiled for every test it is very painful. One large schema has 110 files and takes 35 seconds to compile.

The TDML runner needs a way to load a saved parser, and in fact, to load it once, and not reload it for every test, but reuse it from test to test. 

Obviously, flags to turn this off, for testing the save/restore feature itself, etc. are needed.",[],2014-11-25 22:15:41+00:00,2020-12-16 19:02:18+00:00,2020-12-16 19:02:18+00:00,Closed,13114585,DAFFODIL-1166
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I verified that tar was installed on Cygwin:
jchab@WIN-EEA4S63ULQH ~/daffodil
$ tar
tar: You must specify one of the `-Acdtrux' or `--test-label'  options
Try `tar --help' or `tar --usage' for more information.

but I get the following error when running sbt universal:packageBin

{code}
tar: Cannot connect to C: resolve failed
java.lang.RuntimeException: Error tarballing C:\cygwin\home\jchab\daffodil\daffodil-cli\target\universal\daffodil-0.15.0-SNAPSHOT.tgz. Exit code: 128
        at scala.sys.package$.error(package.scala:27)
        at com.typesafe.sbt.packager.universal.Archives$$anonfun$makeTarball$1.apply(Archives.scala:134)
        at com.typesafe.sbt.packager.universal.Archives$$anonfun$makeTarball$1.apply(Archives.scala:118)
        at sbt.IO$.withTemporaryDirectory(IO.scala:285)
        at com.typesafe.sbt.packager.universal.Archives$.makeTarball(Archives.scala:118)
        at com.typesafe.sbt.packager.universal.Archives$$anonfun$10.apply(Archives.scala:111)
        at com.typesafe.sbt.packager.universal.Archives$$anonfun$10.apply(Archives.scala:111)
        at scala.Function3$$anonfun$tupled$1.apply(Function3.scala:35)
        at scala.Function3$$anonfun$tupled$1.apply(Function3.scala:34)
        at scala.Function1$$anonfun$compose$1.apply(Function1.scala:47)
        at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:42)
        at sbt.std.Transform$$anon$4.work(System.scala:64)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
        at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
        at sbt.Execute.work(Execute.scala:244)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
        at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
[error] (daffodil-cli/universal:packageZipTarball) Error tarballing C:\cygwin\home\jchab\daffodil\daffodil-cli\target\universal\daffodil-0.15.0-SNAPSHOT.tgz. Exit code: 128
[error] Total time: 22 s, completed Nov 25, 2014 11:01:38 AM
{code}

sbt universal:packageBin works without issues.",[],2014-11-25 16:15:03+00:00,,2020-12-16 19:00:06+00:00,Open,13114584,DAFFODIL-1165
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"DPath only allows predicates as integer expressions to index arrays. With an invalid test, a Schema Definition Error is thrown but it seems to be trying to parse the predicate as a path and giving the error message that the element was not found. 

{noformat}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressionsDebug.test_predicate_02 failed: 
java.lang.Exception: Schema Definition Error: No element corresponding to step b found.
{noformat}

See tests:
test_predicate_02
test_predicate_03

In files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-11-21 20:22:57+00:00,2020-12-16 18:58:35+00:00,2021-01-08 13:30:28+00:00,Closed,13114583,DAFFODIL-1164
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The command for running the CLI has changed several times, and our test cases become inaccurate whenever this happens. In order to get around this, we should create a Reference test case that sets up an alias for the CLI command. We will then update all of the CLI test cases to reference the reference test case as a prerequisite, and use this alias in the test steps. This way, if the command changes again, we will only have to change the reference test case.",[],2014-11-21 19:52:34+00:00,2015-03-30 16:19:40+00:00,2015-04-03 21:49:34+00:00,Closed,13114582,DAFFODIL-1163
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I packaged a DFDL schema (mil-std-2045) into a jar with all its files. Running daffodil with the jar on classpath, xsd files can't be found.

This is a useful way to package a DFDL schema, so it would be good if files could be found within the jar.",[],2014-11-21 18:24:10+00:00,2014-12-05 21:39:56+00:00,2015-02-20 15:09:42+00:00,Closed,13114581,DAFFODIL-1162
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"It is invalid to use variables in path expressions and while this does fail, the error message is not what would be expected.

{noformat}
[error] Schema Definition Error: Unable to parse expression. Message: `}' expected but `/' found
{noformat}

See tests:
test_var_in_path
test_var_end_path

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/variables/TestVariablesDebug.scala",[],2014-11-20 19:12:25+00:00,2014-11-24 16:13:49+00:00,2014-12-15 21:13:48+00:00,Closed,13114580,DAFFODIL-1161
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Test test_count_04 is aborting because it is taking the fn:count of a zero-length array.,[],2014-11-20 04:44:48+00:00,2014-11-21 18:20:56+00:00,2015-01-08 17:43:57+00:00,Closed,13114579,DAFFODIL-1160
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"As part of DPath work, unordered sequences were disabled and no longer work.

This ticket is to reimplement them at least to the same level of function we had before replacing Saxon with DPath.",['ForInteroperabilityTest'],2014-11-20 04:42:22+00:00,2019-10-02 20:16:18+00:00,2021-05-20 20:01:35+00:00,Closed,13114578,DAFFODIL-1159
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you make a mistake in an expression and accidently put a predicate on a non-array, you get an assertion failure. This should be a subset error (for now), as we don't allow indexing on non-arrays currently.",[],2014-11-19 21:44:24+00:00,2014-11-21 18:21:15+00:00,2015-01-12 21:11:37+00:00,Closed,13114577,DAFFODIL-1158
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"All DFDL schemas should be checked and updated to end in "".dfdl.xsd"".

built-in-formats.xsd (daffodil-lib/src/main/resources/xsd/built-in-formats.xsd) is an example of a file that needs to be renamed but there might be more.",[],2014-11-19 20:33:39+00:00,2018-10-23 13:31:20+00:00,2018-10-23 13:31:20+00:00,Closed,13114576,DAFFODIL-1157
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Java 7 will be EOL in Spring/Summer 2015, and there are claims that scala-2.12 will require Java 8.",[],2014-11-19 19:54:45+00:00,2016-08-26 09:34:42+00:00,2016-09-28 21:47:57+00:00,Closed,13114575,DAFFODIL-1156
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"If you have an element declaration like this:
{code}
<xs:element name=""foo"" type=""xs:boolean"" default=""true"" .../>
{code}
Then you get an SDE - cannot convert true to Boolean.
Changing the default to
{code}
<xs:element name=""foo"" type=""xs:boolean"" default=""{ fn:true() }"" .../>
{code}
Seems logical, but should give a different SDE because the default attribute is an XSD thing, and it can't take DFDL expressions there, only XSD values.

We need to check that the value of the default attribute is an XSD value. If the type of the element was xs:string, it would be really confusing because then this default value that looks like an expression would be accepted! (but treated as a literal string"".

We should check that the value of the default attribute is a legal XSD value, and issue a warning if it is a string, for an element of type string, which looks like a DFDL expression.",[],2014-11-19 18:06:39+00:00,,2020-12-16 18:44:30+00:00,Open,13114574,DAFFODIL-1155
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This sort of thing is used in an update of the mil-std-2045 schema.   
{code}
<xs:group name=""tString50"">
    <xs:sequence>
      <xs:element name=""value"" type=""xs:string"" dfdl:lengthKind=""pattern""
        dfdl:lengthPattern=""[^\x7F]{0,49}(?=\x7F)|.{50}"" />
      <xs:sequence
        dfdl:terminator=""{if (fn:string-length(./value) eq 50) then '%ES;' else '%DEL;'}"" />
      <!-- can replace %ES with WSP* if ES doesn't work -->
    </xs:sequence>
  </xs:group>
{code}

If you look at the second sequence where there is an expression for the terminator, in a test there are exactly 50 chars, so it correctly decides the terminator is %ES;, but fails to behave properly at runtime in this case. Note that the format is NOT delimited, so there's no scanning for a delimiter here, we are just choosing to parse zero characters, or a single DEL character.",[],2014-11-19 17:36:48+00:00,2015-01-08 16:08:01+00:00,2015-01-23 22:01:51+00:00,Closed,13114573,DAFFODIL-1154
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-11-19 14:17:26+00:00,2014-11-20 14:01:38+00:00,2014-12-16 14:57:55+00:00,Closed,13114572,DAFFODIL-1153
Improvement,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"The CLI help is not formatted to be very readable. Since it is not in sentences with correct punctuation and there are no line breaks between options it looks a bit like a big run on sentence. For instance, if you wanted to read about root in the below example you might accidentally keep reading into schema without realizing.

Also I noticed in the help for each of the subcommands it has ""option namespace"" where it should be ""optional namespace"".

{noformat}
Save Parser Options:
  -c, --config  <file>                   path to file containing configuration
                                         items.
  -Dvariable=value [variable=value]...   variables to be used.
  -p, --path  <path>                     path to the node to create parser.
  -r, --root  <node>                     the root element of the XML file to
                                         use.  An option namespace may be
                                         provided. This needs to be one of the
                                         top-level elements of the DFDL schema
                                         defined with --schema. Requires
                                         --schema. If not supplied uses the
                                         first element of the first schema
  -s, --schema  <file>                   the annotated DFDL schema to use to
                                         create the parser. May be supplied
                                         multiple times for multi-schema
                                         support.
  -Ttunable=value [tunable=value]...     daffodil tunable to be used when
                                         parsing.
  -V, --validate  <mode>...              the validation mode. 'on', 'limited'
                                         or 'off'. Defaults to 'on' if mode is
                                         not supplied. (default = Off)
      --help                             Show help message

{noformat}",[],2014-11-18 16:27:42+00:00,2015-01-20 17:17:38+00:00,2015-01-20 20:30:19+00:00,Closed,13114571,DAFFODIL-1152
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,fn:local-name test 7 fails due to a slotIndexInParent error.  The test is located in TestDFDLExpressionsDebug of section 23.,[],2014-11-18 15:25:55+00:00,2019-10-03 15:22:04+00:00,2021-05-20 12:34:58+00:00,Closed,13114570,DAFFODIL-1151
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running the performance subcommand of the CLI to parse a 10MB file, the parse completes in under 10 seconds. When using the parse subcommand, it takes over 10 minutes to get the result.

I ran the parse in verbose mode, and I get the following output:
[info] Time (compiling): 1773ms
[info] Time (parsing): 10542ms
[info] Time (writing): 652815ms
......
that's about 2 seconds for the compilation
10 seconds for the parse
and about 10 minutes to print the output",[],2014-11-17 20:13:22+00:00,2017-05-09 19:00:41+00:00,2017-07-27 11:55:19+00:00,Closed,13114569,DAFFODIL-1150
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The Daffodil Infoset has information about the validity status of an element. The three states of no-info, valid, not-valid are all represented.

We need to finish implementing this feature, which involves 

1) representation of this information when converting infoset to XML - uses the daf:valid member - absent means no info - present is a boolean true/false.

2) construction of infoset from XML containing this daf:valid member. (Unit tests of infoset in daffodil-runtime1-unittests would use this.

3) comparison of infoset XML - this is how the TDML runner would work - as it converts the produced infoset to XML before comparing to the ""known good"" expected infoset as XML.",[],2014-11-17 17:54:30+00:00,2014-11-17 18:07:12+00:00,2014-11-17 18:07:12+00:00,Closed,13114568,DAFFODIL-1149
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The use of ""*"" to denote ""all children"" is not supported in the DPath implementation. Tests that attempt to use this currently fail with a Schema Definition Error, but the diagnostic message is vague and not entirely helpful.
{code}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_asterisk_02 failed: java.lang.Exception: Did not find diagnostic message ""unsupported"" in any of the actual diagnostic messages: 
[error] Schema Definition Error: Unable to parse expression. Message: `}' expected but `/' found
[error] Next: /* }.
{code}

See tests
test_asterisk_01
test_asterisk_02

in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-11-16 13:30:12+00:00,2015-01-27 18:37:31+00:00,2015-01-29 22:26:21+00:00,Closed,13114567,DAFFODIL-1148
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"--validate is listed as an option for save-parser in the CLI but it does not appear to be working. 

See test_3063_CLI_Saving_SaveParser_validate in daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/saving/TestCLISaveParser.scala",[],2014-11-13 19:10:02+00:00,2015-05-14 16:10:24+00:00,2017-07-31 21:04:46+00:00,Closed,13114566,DAFFODIL-1147
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"The attribute axis is not supported in the DPath implementation. Tests that attempt to use this currently fail with a Schema Definition Error, but the diagnostic message is vague and not entirely helpful.

See tests 
test_attribute_axis_01
test_attribute_axis_02
test_attribute_axis_03

in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2014-11-13 19:09:02+00:00,,2021-02-05 20:31:14+00:00,Reopened,13114565,DAFFODIL-1146
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, the only comparison operators supported by DPath are the value comparison operators:

ValueComp 	   ::=    	""eq"" | ""ne"" | ""lt"" | ""le"" | ""gt"" | ""ge""

The following general comparison operators should not be supported, but currently are:

GeneralComp 	   ::=    	""="" | ""!="" | ""<"" | ""<="" | "">"" | "">=""

See tests:
test_comparison_operators_03
test_comparison_operators_04
test_comparison_operators_07
test_comparison_operators_10
test_comparison_operators_13
test_comparison_operators_14
test_comparison_operators_18
test_comparison_operators_22

in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-11-13 17:55:57+00:00,2014-12-02 14:00:06+00:00,2014-12-15 17:15:43+00:00,Closed,13114564,DAFFODIL-1145
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"After talking with Steve it sounds like  ""-Dvariable=value"" should be removed from the CLI save-parser options. It would need to be removed from the list of options in the save-parser help, as well as from the usage example for save-parser. Trying to use the option should then result in an error.",[],2014-11-12 20:40:00+00:00,2015-05-01 19:14:31+00:00,2015-05-01 20:05:35+00:00,Closed,13114563,DAFFODIL-1144
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"It's unclear whether the -Ttunable=value option should be valid for save-parser or not. Currently, it is listed as an option in the save-parser help but it is not listed on the wiki page. After talking with Steve it seems this is something that needs to be revisited to decide if it should be used for save-parser or only for parse.",[],2014-11-12 20:30:33+00:00,2017-08-30 19:14:24+00:00,2017-09-01 14:34:21+00:00,Closed,13114562,DAFFODIL-1143
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,The wiki page still has the --namespace option listed for save-parser but that option is not valid.,[],2014-11-12 20:24:15+00:00,2015-02-04 14:47:32+00:00,2015-02-04 19:43:37+00:00,Closed,13114561,DAFFODIL-1142
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"The debug option for the CLI is listed as a global option but it doesn't seem to work for save-parser. I was assuming if you created the parser with the -d option that it would apply when you used that parser to parse. If this is incorrect maybe there should be more specific wording in the help and the Command Line Interface page on Confluence. Also CLI requirements would need to be updated.

See test - test_3036_CLI_Saving_SaveParser_debug in daffodil-cli/src/test/scala-cli/edu/illinois/ncsa/daffodil/saving/TestCLISaveParser.scala",[],2014-11-12 02:06:54+00:00,,2020-12-16 18:43:09+00:00,Open,13114560,DAFFODIL-1141
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We currently have some classes that are defined in the com.ibm.icu package. Even though those classes wrap ICU classes, we still want them to be in the standard daffodil package structure. This affects java/scaldocs and makes it look like we have code from icu in our package structure, which isn't the case.",[],2014-11-11 18:39:58+00:00,2015-01-09 15:28:28+00:00,2015-01-13 20:46:57+00:00,Closed,13114559,DAFFODIL-1140
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Write tests to verify that lexicographic collation order is used for string comparison.

Lexicographic: Text is sorted without considering numbers. Numbers are treated as letters and have no numeric combined meaning.",[],2014-11-11 15:34:38+00:00,2014-12-01 19:08:51+00:00,2014-12-01 19:08:58+00:00,Closed,13114558,DAFFODIL-1139
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,DFDL Information model (aka Infoset) is simpler than the XML Infoset - there are no text nodes. So there is no text() function that accesses text nodes. Create tests to verify this.,[],2014-11-11 15:12:51+00:00,2014-11-17 20:09:18+00:00,2014-11-17 20:09:28+00:00,Closed,13114557,DAFFODIL-1138
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Predicates are only used to index arrays and so must be integer expressions otherwise a schema definition error occurs. See [Predicates|http://www.w3schools.com/xpath/xpath_syntax.asp] section for XPath's use of predicates. Verify DPath's use of predicates is restricted to indexing arrays.,[],2014-11-11 15:11:14+00:00,2014-11-21 21:51:00+00:00,2014-11-21 21:51:07+00:00,Closed,13114556,DAFFODIL-1137
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,The DPath implementation does not allow for the reference of a node's attributes in path expressions. Write tests to verify this.,[],2014-11-11 15:01:33+00:00,2014-11-13 20:13:18+00:00,2014-11-13 20:13:21+00:00,Closed,13114555,DAFFODIL-1136
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The DPath implementation, unlike XPath, does not allow the use of * to refer to all children. Write tests to verify this.",[],2014-11-11 14:58:14+00:00,2014-11-16 14:15:21+00:00,2014-11-16 14:15:28+00:00,Closed,13114554,DAFFODIL-1135
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Add tests to verify that variables cannot be used to represent nodes - variables can only contain simple values so a path can't have a variable anywhere except at the end.,[],2014-11-11 14:55:10+00:00,2014-11-20 19:14:18+00:00,2014-11-20 19:14:26+00:00,Closed,13114553,DAFFODIL-1134
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Only the child::, parent:: and self axis are supported (no attribute nor sibling axis,... maybe there are others) - None of these are implemented currently for this verbose syntax (see DFDL-1059). Only ""."" and "".."" and named children.

Thuough parent, child, and self are not currently supported, create tests to be used in the future, and negative tests to verify that the others are not supported.",[],2014-11-11 14:53:30+00:00,2014-12-11 15:10:17+00:00,2014-12-11 15:10:22+00:00,Closed,13114552,DAFFODIL-1133
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Tests are needed to demonstrate that the AND/OR operators sequentially evaluate their arguments. OR stops at the first true, AND stops at the first false. In other words,  Daffodil should evaluate arguments one at a time until the result of the OR/AND is known, then stop and don't evaluate remaining arguments.",[],2014-11-11 14:47:22+00:00,2014-12-03 21:03:51+00:00,2014-12-03 21:03:57+00:00,Closed,13114551,DAFFODIL-1132
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The implementation of DPath should only support the two-character versions of the comparison operators: ""eq"" not ""="", and ""ne"" not ""!="" nor ""<>"", ""lt"" not ""<"" -",[],2014-11-11 14:41:03+00:00,2014-11-13 18:20:42+00:00,2014-11-13 18:20:48+00:00,Closed,13114550,DAFFODIL-1131
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Not sure what happened (maybe my local version of bouncy castle was updated), but the sbt-pgp plugin no longer works. Need to try upgrading to the latest version.",[],2014-11-10 17:54:32+00:00,2014-11-11 13:34:42+00:00,2014-12-02 19:32:51+00:00,Closed,13114549,DAFFODIL-1130
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_testBit_3 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. not setup
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:136)
[error] edu.illinois.ncsa.daffodil.dpath.Expression.parent$lzycompute(Expression.scala:99)
[error] edu.illinois.ncsa.daffodil.dpath.Expression.parent(Expression.scala:97)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)


See test test_testBit_3 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-11-06 21:09:41+00:00,2014-12-09 13:59:04+00:00,2014-12-17 02:56:12+00:00,Closed,13114548,DAFFODIL-1129
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Functions fn:seconds-from-dateTime and fn:seconds-from-time should return a xs:decimal but they are only returning whole numbers. xs:dateTime and xs:time show the fractional seconds so the data is parsed correctly, but then the functions cut off the decimal.

See tests:
test_xfromtime_02
test_secondsfromdatetime_03

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2014-11-05 03:34:45+00:00,2014-11-05 20:19:35+00:00,2014-11-05 21:14:51+00:00,Closed,13114547,DAFFODIL-1128
Improvement,[],gmcdonald,Gavin McDonald,daffodil-npatrick,Norman Patrick,Major,Make an XML-serialization format that enables other back-ends besides the scala back-end.,[],2014-11-04 18:38:44+00:00,2015-01-12 18:22:49+00:00,2018-09-13 14:13:30+00:00,Closed,13114546,DAFFODIL-1127
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"xs:date and xs:datetime allow negative integers for the year but the functions fn:year-from-datetime and fn:year-from-date do not process this correctly. With a year of -0001, the functions both return 2 for the year instead of the expected -1.

See tests:
test_xfromdatetime_04
test_xfromdate_03

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2014-11-04 01:10:49+00:00,2014-11-05 20:30:52+00:00,2014-11-05 22:00:10+00:00,Closed,13114545,DAFFODIL-1126
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"The root element of the infoset is now displaying every defined namespace, instead of just the target namespace. So the test is expecting something like:

<tns:matrix xmlns:tns=""http://www.example.org/example1/>

but is seeing the following:

<tns:matrix
xmlns:fn=""http://www.w3.org/2005/xpath-functions"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:tns=""http://www.example.org/example1/"" xmlns=""http://www.w3.org/2001/XMLSchema"">",[],2014-11-03 19:25:49+00:00,2015-03-10 21:36:22+00:00,2015-03-25 21:28:48+00:00,Closed,13114544,DAFFODIL-1125
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Note: this issue is in the dpath branches, not the current 0.15.0

In the XPath implementation of Daffodil, if you provided the xs:date constructor with a date like the following: 1991-03-4, you would get this error:
Invalid date ""1991-03-4"" (Day must be two digits). Now the function accepts sincle-digit days and it parses as 1991-03-04+00:00.

This may be our expected behavior but I thought I should note the discrepancy.
See test test_date_constructor_01 in the following file:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",['beginner'],2014-11-02 17:25:13+00:00,,2021-01-14 14:16:33+00:00,Open,13114543,DAFFODIL-1124
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: this is an issue with the serialization-with-dpath4-based branches, not the current 0.15.0

If you call the fn:round-half-to-even function without specifying a precision, you get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_round_hte_14b failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. value not one of the expected types

I thought this was an issue with the function being passed a string, so I tried casting it to a double and rerunning the tests but they failed with the same error.

See tests:
test_round_hte_13
test_round_hte_14",[],2014-11-02 17:14:04+00:00,2014-11-21 20:33:03+00:00,2014-12-16 21:18:01+00:00,Closed,13114542,DAFFODIL-1123
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: this bug exists in the dpath branch, not the current 0.15.0

Instead of rounding to half when the fractional portion is even, fn:round-half-to-even now always rounds up
e.g:
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_xPathFunc_round_hte_03 failed: java.lang.Exception: 
[error] Comparison failed.
[error] Expected 
[error]           <round-hte><num>3.00865</num><precision>4</precision><roundval>3.0086</roundval></round-hte>
[error] Actual 
[error]           <round-hte><num>3.00865</num><precision>4</precision><roundval>3.0087</roundval></round-hte>

See tests:
test_xPathFunc_round_hte_02
test_xPathFunc_round_hte_03
test_xPathFunc_round_hte_05",[],2014-11-02 17:01:35+00:00,2014-11-21 20:31:59+00:00,2014-12-15 15:17:33+00:00,Closed,13114541,DAFFODIL-1122
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: this is an issue in the DPath implementation, not the current 0.15.0 branch

The testBit function used to use the indeces 0-7 to reference the bits of a byte. Now the function
uses 1-8. Is this how we want this to behave?

The following tests now fail with this new behavior:

test_testBit_0
test_testBit_4",[],2014-11-02 16:40:10+00:00,2014-11-03 13:52:09+00:00,2014-11-06 21:12:19+00:00,Closed,13114540,DAFFODIL-1121
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: This is only on issue against the DPath implementation

See test_exists_10 in the following file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-11-02 16:25:02+00:00,2019-10-03 15:23:02+00:00,2021-05-20 12:34:55+00:00,Closed,13114539,DAFFODIL-1120
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: This is in the DPath implementation of Daffodil

All of the double constructor tests are failing (except the negative test) for strange rounding and precision issues.

e.g.

[info] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_double_constructor_01 started
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_double_constructor_01 failed: java.lang.Exception: 
[error] Comparison failed.
[error] Expected 
[error]           <double01><string>4.3</string><doublified>4.3</doublified></double01>
[error] Actual 
[error]           <double01><string>4.3</string><doublified>4.300000190734863</doublified></double01>
[error] Differences were (path, expected, actual):
[error]  (double01/doublified,'4.3','4.300000190734863')

See tests:
test_double_constructor_01
test_double_constructor_02
test_double_constructor_03
test_double_constructor_04
test_double_constructor_05
test_double_constructor_07

In daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-11-02 16:14:30+00:00,2014-11-13 15:27:25+00:00,2014-12-15 17:22:19+00:00,Closed,13114538,DAFFODIL-1119
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Note: This is an issue with the dpath implementation

This is similar to DFDL-1075, but different enough to be its own ticket.

Previously, you could use the fn:count function to count the items in a sequence. e.g if you had a sequence like the following:
<types_of_fruits>
 <apples>5</apples>
 <oranges>4</oranges>
 <pears>1</pears>
</types_of_fruits>
You could specify fn:count(types_of_fruits) and it would return 3. If you try that with the DPath implementation, you get the following:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_more_count_0 failed: java.lang.Exception: Schema Definition Error: Subset The count function must reference a single array.

See tests:
test_more_count_0
test_more_count_1
test_more_count_2
test_more_count_1b_2
test_more_count_1b

(these are in the serialization-with-dpath4-testcleanup branch, and have not yet been pulled into 0.15.0)",[],2014-11-02 16:04:25+00:00,,2020-09-22 16:40:09+00:00,Open,13114537,DAFFODIL-1118
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: This is an issue when run against the DPath branch

Nearly all of the tests that use fn:count() are failing with Abort: Invariant Broken.
A few of the more simple tests are passing, but the following fail with this error:

test_count_04
test_count_05
test_count_06
test_count_08",[],2014-11-02 15:48:28+00:00,2014-12-01 19:20:35+00:00,2014-12-16 21:33:54+00:00,Closed,13114536,DAFFODIL-1117
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note: This is only an issue with the serialization-with-dpath branch

If the fn:count function references an element that is set with inputValueCalc, you get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_count_03 failed: java.lang.Exception: Schema Definition Error: Subset The count function must reference a single array.
[error] Schema context: element.count. Location line 487 column 100 in file:/tmp/daffodil_tmp_7581385162793110524.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:580)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:482)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:274)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:265)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_count_03(TestDFDLExpressions.scala:305)

previously, fn:count would return 1 as expected.",[],2014-11-02 15:34:23+00:00,2014-11-21 17:59:52+00:00,2015-01-08 17:42:20+00:00,Closed,13114535,DAFFODIL-1116
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Note: This issue is in the dpath-with-serialization branch, not the current 0.15.0

In test xsDateTime_constructor_03, a string is converted to an xs:dateTime with the xs:dateTime constructor function. The string includes microsecond precision (6 digits), but the parsed result rounds to the nearest 3rd fractional digit.


[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_xsDateTime_constructor_03 failed: java.lang.Exception: 
[error] Comparison failed.
[error] Expected 
[error]           <dateTime04><string>1998-03-04T12:30:34.123456+00:00</string><dateTime>1998-03-04T12:30:34.123456+00:00</dateTime></dateTime04>
[error] Actual 
[error]           <dateTime04><string>1998-03-04T12:30:34.123456+00:00</string><dateTime>1998-03-04T12:30:34.123000+00:00</dateTime></dateTime04>

This test is defined in the following file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",['beginner'],2014-11-02 14:38:04+00:00,,2021-02-05 20:43:46+00:00,Open,13114534,DAFFODIL-1115
New Feature,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"When running the recently-created fn:namespace-uri tests against the dpath-with-serialization2 branch, all tests fail with the following:

[error] Schema Definition Error: Unsupported function: fn:namespace-uri{xmlns:fn='http://www.w3.org/2005/xpath-functions'}

[error] Schema context: element.e3. Location line 39 column 88 in file:/home/efinnegan/Projects/daffodil/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section23/dfdl_functions/home_schema.dfdl.xsd.",['beginner'],2014-10-31 19:12:36+00:00,2020-05-04 14:21:04+00:00,2020-06-29 15:47:29+00:00,Closed,13114533,DAFFODIL-1114
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I do not know why for this one test (name escapes me now, but we can find it by just commenting out the case for java.math.BigInteger in asLong)

 I ran tests, got 1 test failure, was due to a BigInteger being passed in. 

The bigger task is rationalizing exactly what goes in the infoset for every simple type, and then having expressions expect only those things, only the right ones. I.e., dates should be carried around as Calendar (or DFDLCalendar?), not as strings. HexBinaries always as Array[Byte], etc. There is a fair amount of slop right now where things tolerate many differnet kinds of inputs because things weren't predictable enough or consistent enough about what they put in the infoset. But the compiler structure is there to establish the type an expression will receive from its sub-expressions, and if it can expect exactly that, well all these asInt, asLong, etc. match-cases could go away.",[],2014-10-30 17:51:15+00:00,2016-09-14 21:16:47+00:00,2016-10-11 13:32:25+00:00,Closed,13114532,DAFFODIL-1113
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Once the DPath changes are pushed up, any tests that use the text() and /* annotations will fail. Modify these tests so that the original purpose of the test is still being fulfilled. Once updating, verify that tests work when rebased onto the latest dpath branch.",[],2014-10-30 14:09:40+00:00,2014-11-14 17:58:40+00:00,2014-11-14 17:58:45+00:00,Closed,13114531,DAFFODIL-1112
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Most syntax errors in expressions result in something like:
{code}
Schema Definition Error: Unable to parse expression. Message: `}' expected but `(' found""
{code}",[],2014-10-30 09:45:17+00:00,,2020-12-16 18:36:38+00:00,Reopened,13114530,DAFFODIL-1111
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"on branch serialization-with-dpath4

InteractiveDebugger.scala - removal of hidden nodes is broken.

The Infoset implementation of removeHiddenElements function modifies the infoset.

he Infoset implementation of toXML currently *always* skips and doesn't create XML for hidden elements. 

The debugger needs to be able to create xml from the infoset either with or without the hidden elements, and without any modification to the infoset happening.  

My guess is the right fix is to have toXML have a removeHidden flag to control whether or not the hidden elements are skipped past or not. Then the removeHiddenElements infoset operation can probably just go away, or rather, just not be used by the interactive debugger. (It might still be useful at the API level to trim off hidden elements before giving back the infoset for programatic consumption.)",[],2014-10-30 08:37:35+00:00,2015-01-20 17:13:03+00:00,2015-01-30 12:44:10+00:00,Closed,13114529,DAFFODIL-1110
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,we shouldn't catch Exception. We should catch more specific things.,[],2014-10-30 06:13:54+00:00,2019-06-20 22:26:17+00:00,2021-05-20 20:01:28+00:00,Closed,13114528,DAFFODIL-1109
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We have typed-equality code. We haven't put it into daffodil lib yet. We should do so and then add a wiki article (or add to one) that discusses the use of it.

I have been finding more and more subtle mistakes that occur due to scala's default untyped equality.",[],2014-10-30 05:42:39+00:00,2015-01-21 20:24:12+00:00,2015-01-29 22:33:04+00:00,Closed,13114527,DAFFODIL-1108
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"In Elements.scala, the definition of isOptional (and probably other things) doesn't deal with minOccurs='0' maxOccurs='0' , which is allowed - it means at validation the arent any of these, however, invalid documents may have them.",[],2014-10-30 05:21:45+00:00,,2020-12-16 18:34:10+00:00,Open,13114526,DAFFODIL-1107
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Rationalize all try/catch blocks. Catching a class like Exception is probably not what we really want. There's a universe of things that can go wrong while loading. We don't want to mask many of these failures.,[],2014-10-30 05:17:44+00:00,2019-06-20 17:03:12+00:00,2021-05-20 20:01:24+00:00,Closed,13114525,DAFFODIL-1106
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Put all of these string formats constants and putting them in a central location to reference from?  Otherwise, if something changes we'll have to change it in a million places.

These appear in DFDLCalendar.scala Facets.scala, Types.Scala, DFDLCheckConstraintsFunction.scala, and perhaps more places.",[],2014-10-30 03:57:31+00:00,,2018-09-13 14:04:36+00:00,Open,13114524,DAFFODIL-1105
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"line 161 of DPath.scala (on serialization-with-dpath4 branch), this is an assert checking if a result from an expression is type Calendar.  

This probably should be DFDLCalendar, but it's also probably the case that nothing exercises this code path, so we need a test that exercises it to be sure.",[],2014-10-30 02:09:17+00:00,,2018-09-13 14:04:42+00:00,Open,13114523,DAFFODIL-1104
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Per thread below, if we're using temp files (which we currently are), then the API should provide a way to specify the temp dir for them.

Changing the code base to avoid use of temp files entirely is a separate issue. The concern here is having control over the tempdir to be used.

----

The API should be a able to operate equally with data AND schemas residing entirely in memory, enitirely, or some combination.

Use of temp should be minimized to so as not to impact performance. But being able to specify a temp location probably would be good

----

As someone who is on the outside of your API looking in, I don't get to decide how your API does things.  I just get to use it.  It's a black box.  Your approach does ""seem wasteful,"" but if you have real reasons then you have real reasons.  I'm ok with that.

Question:  Assume that your software will be deployed on a highly constrained system, one where writing to the file system is tightly controlled.  A user who passes everything by memory might not realize/expect that you will be writing to the file system, thus he may place your code in a location where you won't have write privs.  Your code might not work in such an environment.  Would it be a good idea allow the API to specify a temp file location?  This allows the user to designate somewhere on the system where read and write privs are less restrictive.

can you clarify whether or not the concern in my question is valid?

----

For convenience we could accept schemas as memory objects and pretty print them to our own temp files of course. That's the quick and dirty fix.

So question: Is there a reason this would not suffice other than ""seems wasteful?"".

I ask because we  get a lot of leverage (i.e., have to write much less code) from the fact that DFDL schemas come from files.

We actually take the files provided, construct a ""bootstrap"" xml object which is a DFDL schema containing only xs:import statements, so it imports the schemas provided on the command line (or to the API). Then this single bootstrap schema document starts the whole induction across the imports/includes of all the files that make up the overall schema.  Those files come from the file system, or from within jar files. There are a few benefits of this uniformity. The most obvious is that there is exactly one code path for how a schema is obtained by daffodil - by an import/include of a schema document, period. So one way that we deal with schemaLocation hints, one way to deal with the XML catalog resolver, etc.  Another of the things we get from this is that all the DFDL schemas are loaded into memory using a specific loader which augments every XML element with the file-line-column number information which we use in diagnostic messages.   There's actually quite a few more benefits - I won't bore you with any further enumeration.

So our use of files is definitely not an API design decision to take files rather than something more general like streams or strings or jdom trees.  There' some real code-economy at work here.

So would a ""quick-and-dirty"" - puts the schemas into temp files for you (and cleans them up), kind of wrapper be sufficient?

----

As far as I can tell, when preparsing, the Java API for Daffodil requires an array of File objects, like so:

Compiler compiler = edu.illinois.ncsa.daffodil.japi.Daffodil.compiler();
compiler.setDistinguishedRootNode(rootElement, namespace);
ProcessorFactory processorFactory = compiler.compile(schemaFiles);  // schemaFiles is a File[]

Unfortunately not every API/system processes data by reading and writing to the local drive.  Can you please add a convenience method that allows compile() to take String or an array of Strings for an input, where the Strings are the *contents* are the DFDL schema (not a path to the schema)?  This would be a big help.

Thanks,

--J",[],2014-10-29 19:49:30+00:00,2015-01-29 17:32:01+00:00,2015-02-06 22:06:48+00:00,Closed,13114522,DAFFODIL-1103
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I am seeing an error with substring functions in XPath. This may be fixed with DPath but the functions are not fully implemented yet.

This error is occuring when an element uses a substring function in the inputValueCalc that references other elements and the function returns an empty string. Instead of having an empty element in the resulting infoset the following error is thrown:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressionsDebug.test_substring_07 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: Expression result is not a node

See tests:
test_substring_07
test_substringbefore_04
test_substringbefore_05
test_substringafter_04
test_substringafter_05

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala",[],2014-10-28 23:31:23+00:00,2014-11-24 22:40:47+00:00,2014-11-24 22:40:47+00:00,Closed,13114521,DAFFODIL-1102
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When creating tests for the namespace-uri() function, I somehow managed to trigger an error condition that caused this exception:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_namespace_uri_01 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: why are you comparing two things that aren't the same type even?
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)

I had this test working at one point so I'm not sure how I got to this state. I was amused by the exception but figured we should either revisit the wording or figure out how it was triggered and make sure that can't happen anymore.

See test namespace_uri_01 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/first_schema.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/home_schema.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/second_schema.dfdl.xsd
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-28 18:46:49+00:00,2020-06-24 18:21:23+00:00,2020-06-24 18:21:23+00:00,Closed,13114520,DAFFODIL-1101
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Daffodil performs checks to ensure the occursCountKind=""parsed"" for arrays and optional elements inside an unordered sequence. However, when we convert a unordered sequence to a sequence of choices, we create temporary elements that do not specify occursCountKind. These elements then get occursCountKind from the dfdl:format. If this value is not parsed, daffodil throws an error. We either need to set occursCountKind=""parsed"" on these temporary elements, or we need to exclude these elements when checking this restriction.",[],2014-10-28 17:43:49+00:00,2019-10-03 13:00:41+00:00,2021-05-20 12:33:56+00:00,Closed,13114519,DAFFODIL-1100
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fairly soon the OGF will publish the new version of the DFDL specification.

Once that has been done and the URLs are clear we should update all links to it. 

I am hoping the OGF will also host the HTML version of the spec. Not sure though, but if so we should link to that also.",[],2014-10-28 17:37:57+00:00,2015-02-04 14:57:06+00:00,2015-02-04 21:52:48+00:00,Closed,13114518,DAFFODIL-1099
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example:
{code}
<sequence dfdl:sequenceKind=""unordered"">
  <element name=""foo"" maxOccurs=""unbounded"" />
  ...
</sequence>
{code}
Causes a NumberFormatException for input string: ""unbounded"".

Looks like we try to convert the value of maxOccurs to a number without checking if it's unbounded.",[],2014-10-28 17:37:55+00:00,2014-10-28 17:46:13+00:00,2018-09-13 14:13:24+00:00,Closed,13114517,DAFFODIL-1098
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I was able to create a schema where three elements on the same level had the same name. When passing the ambiguous path into the fn:local-name() function, the function believed it was being passed a multi-item sequence, since three elements exist with this name. Since the elements are not optional and they are not part of a choice, there should not be any ambiguity when parsing. However, part of our reasoning for moving away from XPath was that we do not need to traverse an entire tree to find all matching nodes for a path, because there will be at most one match. That is not the case in this scenario.

See test local_name_06 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",['reverify'],2014-10-28 17:20:47+00:00,2020-09-22 16:38:57+00:00,2020-09-23 11:46:35+00:00,Closed,13114516,DAFFODIL-1097
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running local-name tets against hte most recent DPath branch (serialization-with-dpath4), all tests fail with the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_local_name_06 failed: java.lang.Exception: Schema Definition Error: Unsupported function: fn:local-name{xmlns:fn='http://www.w3.org/2005/xpath-functions'}

According to the spec, this function should be supported.",[],2014-10-28 14:06:45+00:00,2014-11-18 15:26:52+00:00,2014-12-18 15:50:08+00:00,Closed,13114515,DAFFODIL-1096
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"We need negative tests for a few string functions that are not in the dfdl spec. These are all variations of allowable functions but with a different number of arguments.

fn:string-length - with 0 arguments
fn:contains - with 3 arguments
fn:starts-with - with 3 arguments
fn:ends-with - with 3 arguments
fn:substring-before - with 3 arguments
fn:substring-after - with 3 arguments

These tests will have to be added after dpath is complete since these are valid functions in xpath.",[],2014-10-27 21:55:28+00:00,2014-11-04 19:55:00+00:00,2014-11-04 19:55:13+00:00,Closed,13114514,DAFFODIL-1095
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

Currently when using the function substring-after there is a SDE - ""Schema Definition Error: Unsupported function: fn:substring-after
{xmlns:fn='http://www.w3.org/2005/xpath-functions'}""

See tests:
test_substringafter_01
test_substringafter_06

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 19:45:00+00:00,2014-12-01 19:17:46+00:00,2014-12-09 03:14:56+00:00,Closed,13114513,DAFFODIL-1094
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

Currently when using the function starts-with there is a SDE - ""Schema Definition Error: Unsupported function: fn:starts-with{xmlns:fn='http://www.w3.org/2005/xpath-functions'}""

See tests:
test_startswith_01
test_startswith_02
test_startswith_05
test_startswith_06

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 19:39:25+00:00,2014-11-11 13:24:07+00:00,2014-12-09 02:07:06+00:00,Closed,13114512,DAFFODIL-1093
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

Currently when using the function substring-before there is a SDE - ""Schema Definition Error: Unsupported function: fn:substring-before{xmlns:fn='http://www.w3.org/2005/xpath-functions'}""

See tests:
test_substringbefore_01
test_substringbefore_06

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 19:21:39+00:00,2014-12-01 19:17:21+00:00,2014-12-08 20:10:54+00:00,Closed,13114511,DAFFODIL-1092
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If I create an unordered sequence of optional elements, where maxOccurs = ""unbounded"", I get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_count_05b failed: edu.illinois.ncsa.daffodil.exceptions.Abort: java.lang.NumberFormatException: For input string: ""unbounded""
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:485)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)


See test count_05b in the following files:
/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 19:20:42+00:00,2019-10-03 15:19:54+00:00,2021-05-20 12:34:01+00:00,Closed,13114510,DAFFODIL-1091
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

Currently when using the function contains there is a SDE - ""Schema Definition Error: Unsupported function: fn:contains{xmlns:fn='http://www.w3.org/2005/xpath-functions'}""

See tests:
test_contains_01
test_contains_02
test_contains_05
test_contains_06

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 19:18:00+00:00,2014-11-11 13:26:11+00:00,2014-12-09 02:50:43+00:00,Closed,13114509,DAFFODIL-1090
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Diagnostic messages used to display line numbers and element information from the actual schema file, which made troubleshooting much more straightforward. Now the messages reference a temporary schema, eg. /tmp/daffodil_tmp_8764176463637126257.dfdl.xsd

Example error message:
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_exactly_one_05 failed: java.lang.Exception: Did not find diagnostic message ""exactly-one"" in any of the actual diagnostic messages: 
[error] Schema Definition Error: DFDL Schema Validation failed due to the following:
[error] DFDL Schema Validation Error due to org.xml.sax.SAXParseException; systemId: file:/tmp/daffodil_tmp_8764176463637126257.dfdl.xsd; lineNumber: 421; columnNumber: 23; src-element.2.1: : One of 'ref' or 'name' must be present in a local element declaration. File: /tmp/daffodil_tmp_8764176463637126257.dfdl.xsd
[error] Schema context: SchemaSet. Location in /tmp/daffodil_tmp_8764176463637126257.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$1.apply(TDMLRunner.scala:496)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$1.apply(TDMLRunner.scala:490)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:489)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:606)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:531)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:469)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:273)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:264)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_exactly_one_05(TestDFDLExpressions.scala:281)
[error]     ...",[],2014-10-27 18:57:49+00:00,2015-01-07 15:57:44+00:00,2015-01-13 18:24:44+00:00,Closed,13114508,DAFFODIL-1089
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

I wrote a test for the function ends-with that I expect to return false because the string it is checking for uses a different case than the original string. (Original string is ""The quick brown fox."" but it is checking if it ends with ""The quick BROWN fox."") Instead of getting true or false though, this test returned an empty element. This was not a problem when the function returns true. It also only seems to be a problem when the function references other elements.

See test:
test_endswith_06

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 17:46:10+00:00,2014-11-11 14:15:55+00:00,2014-11-11 20:19:33+00:00,Closed,13114507,DAFFODIL-1088
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the DFDL spec, fn:exactly-one returns ""True if the provided sequence contains exactly one node/value,"" which suggests that the function would return false if the sequence contains > or < 1 node/value.

The XPath description states that fn:exactly-one ""returns $arg if it contains exactly one item. Otherwise, raises an error.""

The actual behavior seems to be a combination of the two. If the provided sequence contains exactly one node/value, the function returns True (instead of $arg), and if the provided sequence contains > or < 1 node/value, the function throws the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_exactly_one_02 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed. Details: net.sf.saxon.trans.XPathException: A sequence of more than one item is not allowed as the first argument of fn:exactly-one() (<ex:item/>, <ex:item/>, ...)",[],2014-10-27 17:45:33+00:00,2015-01-22 13:45:15+00:00,2015-02-19 18:25:45+00:00,Closed,13114506,DAFFODIL-1087
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Move date constants to a file that can be commonly accessed.,[],2014-10-27 17:35:06+00:00,2017-04-06 17:52:08+00:00,2018-09-13 14:13:18+00:00,Closed,13114505,DAFFODIL-1086
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running the recently-created fn:exactly-one tests against the dpath-with-serialization2 branch, all tests fail with the following:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_exactly_one_02 failed: java.lang.Exception: Schema Definition Error: Unsupported function: fn:exactly-one{xmlns:fn='http://www.w3.org/2005/xpath-functions'}

According to the spec, we support this function. Is there a different method of referencing the DPath equivalent?",[],2014-10-27 17:33:45+00:00,2015-01-09 15:50:23+00:00,2015-01-15 20:37:54+00:00,Closed,13114504,DAFFODIL-1085
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

All tests for string functions that used the empty sequence ""()"" as an argument failed with ""java.lang.Exception: Schema Definition Error: Unable to parse expression. Message: `}' expected but `(' found""

See tests:
test_uppercase_03
test_contains_04
test_contains_03
test_substringbefore_03
test_substringbefore_02
test_lowercase_03
test_stringlength_03
test_concat_05
test_startswith_04
test_startswith_03
test_substringafter_03
test_substringafter_02
test_endswith_04
test_endswith_03

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2014-10-27 16:43:54+00:00,2014-10-31 01:47:14+00:00,2014-10-31 01:47:34+00:00,Closed,13114503,DAFFODIL-1084
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running the recently-created fn:empty tests against the dpath-with-serialization2 branch, all tests fail with the following:

[error] Schema Definition Error: Unsupported function: fn:empty{xmlns:fn='http://www.w3.org/2005/xpath-functions'}
[error] Schema context: element.empty05. Location line 335 column 101 in file:/tmp/daffodil_tmp_3122568245954626694.dfdl.xsd.

According to the spec, we support this function. Is there a different method of referencing the DPath equivalent?",[],2014-10-27 16:43:10+00:00,2014-11-10 17:10:36+00:00,2014-11-11 16:32:05+00:00,Closed,13114502,DAFFODIL-1083
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

There seem to be a few problems with the substring function. All tests are located in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml and daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala

1. When using the version of substring with 3 arguments, XPath has the 3rd argument as the length of the substring. It looks like the DPath branch is using the 3rd argument as the index of the end of the substring instead. See test_substring_02, test_substring_04, test_substring_06.

2. With a starting index of 0 or a negative number XPath returns characters in positions greater than 0. The DPath branch gives a StringIndexOutOfBoundsException. See test_substring_03.

3. XPath rounds numbers using fn:round which rounds to the nearest whole number. It seems like DPath rounded 4.7 to 4 instead of 5 in test_substring_06.

4. If the starting index is greater than the length of the substring, XPath just returns an empty string. The DPath branch gives a StringIndexOutOfBoundsException. See test_substring_05.

It doesn't seem like XPath ever gives an out of bounds exception or anything. It is very forgiving and will just return the empty string or whatever portion of the string fits.",[],2014-10-27 16:31:47+00:00,2014-10-30 18:51:05+00:00,2014-10-31 15:12:20+00:00,Closed,13114501,DAFFODIL-1082
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a test where the fn:empty function references an element that does not exist. In this case I would expect a Schema Definition Error. However, the parse does not fail, and fn:empty is set to true.

This will potentially be fixed as part of the DPath changes, but currently, when run against the DPath branch, this test fails because fn:empty has not yet been implemented.

See test empty_09 in the following files:
scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-27 15:12:47+00:00,2014-11-11 14:25:50+00:00,2014-11-12 20:19:01+00:00,Closed,13114500,DAFFODIL-1081
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I set up a schema with a nested sequence. The sequence contains a comma-delimited sequence of a recurring string element, with minOccurs 0, maxOccurs 10. The second item of the top-level sequence is a boolean with inputValueCalc. I get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_empty_02 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: RepUnbounded - No forward progress at byte 0. Attempt to parse element.item succeeded but consumed no data.
[error] Please re-examine your schema to correct this infinite loop.

works when items are ints, not strings.

See test empty_02 in the following files:
scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",['ForInteroperabilityTest'],2014-10-27 15:10:57+00:00,2019-05-23 17:24:15+00:00,2021-05-20 12:35:07+00:00,Closed,13114499,DAFFODIL-1080
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I wrote up a schema that defines a sequence of a recurring string element. This string element has inputValueCalc set on it. It causes the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_empty_05 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:123)

See test empty_05 in the following files:
scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-27 15:04:14+00:00,2014-12-17 14:05:07+00:00,2015-01-05 19:54:28+00:00,Closed,13114498,DAFFODIL-1079
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"It seems that there might be an issue (perhaps with encoding?) on the build server. All of the tests passed on my machine before pushing up, and going through the logs, to the naked eye it seems that the test (test_lowercase_05) should have passed:

java.lang.Exception:  Comparison failed. 
Expected <e_lowercase5><one>`�� A 8 O ��</one><lower>`�� a 8 o i��</lower></e_lowercase5> 
Actual   <e_lowercase5><one>`�� A 8 O ��</one><lower>`�� a 8 o i</lower></e_lowercase5> 
Differences were (path, expected, actual):  (e_lowercase5/lower,'`�� a 8 o i��','`�� a 8 o i')

I have moved the test from scala to scala-debug for now.

daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-27 13:14:58+00:00,2016-07-12 12:06:30+00:00,2016-07-12 12:06:30+00:00,Closed,13114497,DAFFODIL-1078
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"NOTE: This is only an issue with the ""serialization-with-dpath2"" branch, not the current 0.15.0 branch

I set up a sequence where the first item is a float, that can be NaN (NaN) or Infinity (INFINITY), and the second is calculated via in inputValueCalc, that calls round() on the first element.

With XPath, when the first element is NaN, the result is a parse error. With DPath, there are no errors and the second element parses as 0

With XPath, when the first element is INFINITY, the result is a parse error. With DPath, there are no errors and the second element parses as 2147483647

See tests round_07 and round_13 in the following file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-25 13:14:07+00:00,2014-11-05 19:53:49+00:00,2014-11-07 20:01:39+00:00,Closed,13114496,DAFFODIL-1077
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"NOTE: this issue is with the ""serializatoin-with-dpath2"" branch, not the current 0.15.0 branch.

I wrote test not_04 to test the following: ""If $arg is...a node with [nilled] true, fn:not returns true""
I set up a sequence where the first element is a nillable string (nameVal), and the second is a boolean with inputValueCalc set to fn:not(nameVal). This test only works against the current implementation with XPath when I cast nameVal to a string, but when I run it against the dpath2 branch, I get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_not_04 failed: edu.illinois.ncsa.daffodil.dsom.SchemaDefinitionError: Schema Definition Error: Value has not been set.

Please see test not_04 in the following file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-24 14:10:22+00:00,,2020-08-05 18:56:40+00:00,Reopened,13114495,DAFFODIL-1076
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"NOTE: this issue is seen in the ""serialization-with-dpath2"" branch, not the current 0.15.0 branch

I wrote test ""not_07"" to test the following:
""If $arg is the empty sequence... fn:not returns true""

Whenever I try to reference the sequence that I defined, I get the following error:

Schema Definition Error: Query-style paths not supported. Must have '[...]' after array-element's name. Offending path step: 'ex:num'.

In this case, I don't want to access a particular item in the array, but the array itself.

See tests not_05 and not_07 in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-24 14:08:40+00:00,2016-09-14 21:23:31+00:00,2017-07-26 20:12:21+00:00,Closed,13114494,DAFFODIL-1075
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"NOTE: This issue is specifically with the ""serialization-with-dpath2 branch"", not the current 0.15.0 branch

Test (not_11) is attempting to test this scenario for the function fn:not():
""If $arg is a value of any numeric type...fn:not returns true if the operand value is NaN...""

I define a sequence, where the first element is a float (num), and the second is a boolean, which is set via inputValueCalc to the result of fn:not(num). The input for the test is the textStandardNaNRep. This test works against the current 0.15.0 branch, but when I test it against remotes/origin/serialization-with-dpath2, I get the following error:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_not_11 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed due to: Cannot convert 'NaN' from Double type to Long (No other details are available.)..

Please see test not_11 in the following file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml",[],2014-10-24 14:07:00+00:00,2014-11-18 15:04:58+00:00,2014-12-15 17:38:52+00:00,Closed,13114493,DAFFODIL-1074
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Not all system/API will want/be able to read schemas from the harddrive. It might be helpful to have an alternate compile method that can read in all schema information from memory. This could certainly be helpful if we ever had a two pass system that autogenerated schemas. It would be nice not to have to temporarily write them to disc.

One thing that makes this tricky is out to handle import/includes, since those use schemaLocation to define where to find a schema.",[],2014-10-24 13:24:57+00:00,,2018-10-23 16:41:59+00:00,Open,13114492,DAFFODIL-1073
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have some test coverage for XPath functions already. However, we were originally working on the assumption that XPath itself has already been well-tested. Now that we have our own implementation (DPath), we can no longer make those assumptions.

We need to fully exercise the following string-related functions (See tables 65-67 in the spec for more info):
fn:empty
fn:exists
fn:exactly-one
fn:count
fn:local-name (2 versions)
fn:namespace-uri (2 versions)
fn:nilled

I believe we should have a minimum of 5 tests for each function, including negative tests.",[],2014-10-21 14:34:30+00:00,2015-02-20 16:30:41+00:00,2015-02-27 14:25:42+00:00,Closed,13114491,DAFFODIL-1072
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have some test coverage for XPath functions already. However, we were originally working on the assumption that XPath itself has already been well-tested. Now that we have our own implementation (DPath), we can no longer make those assumptions.

We need to fully exercise the following string-related functions (See table 64 in the [spec|https://redmine.ogf.org/dmsf_files/13334?download=] for more info):
fn:year-from-dateTime
fn:month-from-dateTime
fn:day-from-dateTime
fn:hours-from-dateTime
fn:minutes-from-dateTime
fn:seconds-from-dateTime
fn:year-from-date
fn:month-from-date
fn:day-from-date
fn:hours-from-time
fn:minutes-from-time
fn:seconds-from-time

I believe we should have a minimum of 5 tests for each function, including negative tests.",[],2014-10-21 14:25:56+00:00,2014-11-05 16:31:56+00:00,2014-11-05 16:32:02+00:00,Closed,13114490,DAFFODIL-1071
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have some test coverage for XPath functions already. However, we were originally working on the assumption that XPath itself has already been well-tested. Now that we have our own implementation (DPath), we can no longer make those assumptions.

We need to fully exercise the following string-related functions (See tables 60 and 61 in the [spec|https://redmine.ogf.org/dmsf_files/13334?download=] for more info):
fn:true
fn:false
fn:not

I believe we should have a minimum of 5 tests for each function, including negative tests.",[],2014-10-21 14:23:38+00:00,2014-10-24 15:12:12+00:00,2014-10-30 18:59:57+00:00,Closed,13114489,DAFFODIL-1070
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have some test coverage for XPath functions already. However, we were originally working on the assumption that XPath itself has already been well-tested. Now that we have our own implementation (DPath), we can no longer make those assumptions.

We need to fully exercise the following string-related functions (See table 62 in the spec for more info):
fn:abs
fn:ceiling
fn:floor
fn:round
fn:round-half-to-even (2 versions)

I believe we should have a minimum of 5 tests for each function, including negative tests.",[],2014-10-21 14:21:22+00:00,2014-10-26 13:45:40+00:00,2014-10-30 19:12:47+00:00,Closed,13114488,DAFFODIL-1069
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have some test coverage for XPath functions already. However, we were originally working on the assumption that XPath itself has already been well-tested. Now that we have our own implementation (DPath), we can no longer make those assumptions. 

We need to fully exercise the following string-related functions (See table 63 in the [spec|https://redmine.ogf.org/dmsf_files/13334?download=] for more info):
fn:concat
fn:substring (2 versions)
fn:string-length
fn:upper-case
fn:lower-case
fn:contains
fn:starts-with
fn:ends-with
fn:substring-before
fn:substring-after

I believe we should have a minimum of 5 tests for each function, including negative tests.",[],2014-10-21 14:11:37+00:00,2014-10-29 21:42:28+00:00,2014-11-04 19:55:31+00:00,Closed,13114487,DAFFODIL-1068
Improvement,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,The daffodil calabash extension should be updated to report errors instead of just logging them.,[],2014-10-20 16:27:01+00:00,2014-11-05 18:49:43+00:00,2014-11-05 18:51:35+00:00,Closed,13114486,DAFFODIL-1067
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In some cases, a Daffodil user only wants a pass/fail answer, i.e. does this file match my format or not. In these such cases, it would be beneficial if we could avoid building the infoset to save on memory and time cpu time.",[],2014-10-20 14:34:03+00:00,2017-09-03 21:24:45+00:00,2018-09-13 14:13:32+00:00,Closed,13114485,DAFFODIL-1066
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"From an Email thread with James Garriss:

While I got the workaround working, I definitely think this is an improvement opportunity for your API.  It should have simple methods that:

��       Detect a ���leftover data��� condition.
��       Return some sort of pointer to the location of the leftover data.
��       Return the entirety of the leftover data.

This would be super helpful for anyone trying to use Daffodil in a filter.

-----Original Message-----
From: Steve Lawrence [mailto:slawrence@tresys.com]
Sent: Wednesday, October 08, 2014 10:05 AM
...
Subject: Re: Daffodil 0.14 - warning about extra, unprocessed data

Yep, it looks like our CLI has two ways we determine if there is left
over data.

The first is the isAtEnd method. The problem with this is that I think
it only works if you provide the size of your data to the parse()
method. Otherwise, it will always return false. This is a bug. However,
the workaround is to get the size of your input data, and pass it to the
parse function, e.g.:

  ParseResult pr = processorFactory.parse(input, lengthOfInput)

The second way is to read the internal state to determine the length of
the data and compare that with the resulting data location. This is what
the Scala CLI does when the length isn't known. The problem with this
method is that it is internal information that is not available via the
Java API, so while it works for our CLI written in Scala, it can't be
used in your GUI. I'm not sure this information should be available via
the API, I think we just need to fix the first bug.

So the short of it, pass in the length of your data and I think isAtEnd
will work.
- Steve",[],2014-10-15 20:23:19+00:00,2018-07-13 16:53:48+00:00,2018-09-24 12:13:55+00:00,Closed,13114484,DAFFODIL-1065
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,There are 3rd party XML unit-test-oriented libraries that do comparison of XML including isolating the differences. Scalaz library perhaps? Anyway we should consider switching to one of those and not maintaining all the XML comparison stuff we need for testing (which is in XMLUtils),[],2014-10-15 17:24:38+00:00,2018-01-05 19:07:27+00:00,2018-09-13 14:12:03+00:00,Closed,13114483,DAFFODIL-1064
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Not a big deal right now, but does the xs prefix being hardcoded here cause problems? Do we eventually need to remove hardcoded prefixes?",[],2014-10-15 16:30:31+00:00,2017-04-06 17:57:09+00:00,2018-09-13 14:13:30+00:00,Closed,13114482,DAFFODIL-1063
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are a bunch of deprecation warnings now due to the code base having more than one way of dealing with QName resolution.

Need to get rid of these warnings.",[],2014-10-15 16:27:58+00:00,2015-01-15 20:25:21+00:00,2015-02-03 22:18:21+00:00,Closed,13114481,DAFFODIL-1062
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Should all dateTime formats be using this 'u' for the extended year?

""Extended year. This is a single number designating the year of this calendar system, encompassing all supra-year fields. For example, for the Julian calendar system, year numbers are positive, with an era of BCE or CE. An extended year value for the Julian calendar system assigns positive values to CE years and negative values to BCE years, with 1 BCE being year 0.""",[],2014-10-15 16:15:10+00:00,,2018-09-13 14:04:34+00:00,Open,13114480,DAFFODIL-1061
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Right now the Dpath expression parser doesn't provide detailed information about where sub-expressions are within an overall expression.

Since expressions can be fairly large, finer granularity positions for diagnostic messaging would be a big improvement. Right now we can just say ""this error occurred"", and the position is just that of the entire expression.",[],2014-10-15 16:11:16+00:00,,2019-10-03 15:56:21+00:00,Open,13114479,DAFFODIL-1060
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The DPath implementation of the DFDL Expression language does not implement the more verbose forms of path expressions that use the ""parent::"" and ""self::"" and such notations.

The corresponding short forms "".."" and ""."" work of course. Just these longer forms aren't supported.",[],2014-10-15 15:10:50+00:00,,2018-09-13 14:04:39+00:00,Open,13114478,DAFFODIL-1059
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently we don't take schema compilation time into account when running performance tests. However, since serialization is being added in Spin 15, it would be nice to see what kind of performance gain we get when loading a pre-compiled schema versus compiling the schema and then parsing. We should see how the performance subcommand of the CLI handles specifying a pre-compiled parser on the command-line, and tweak it to actually measure the performance gain.",[],2014-10-14 20:26:04+00:00,2015-07-14 18:43:27+00:00,2015-07-14 18:50:58+00:00,Closed,13114477,DAFFODIL-1058
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Dev has moved numerous tests from scala to scala-debug as part of the DPath and serialization changes. In most cases they have listed the associated bug inline with the test declaration in scala/scala-debug. We need to verify that these tests now fail, mark them as executed in TestLink, and log the associated bug. It might be easier to look at a diff and tackle these as soon as the code is pushed, rather than perform our regular method of executing these debug tests during a test cycle.",[],2014-10-14 19:15:45+00:00,2014-11-10 20:18:33+00:00,2014-11-10 20:18:39+00:00,Closed,13114476,DAFFODIL-1057
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Trivial,"From Mike: Yeah, this is a decrease of precision, but the new DPath implementation changes came with some loss of proper categorization. Basically, some areas where the code was clearly compilation time or clearly runtime have been replaced by common code that is used in both cases, and that code issues an SDE. Nothing recaptures this and converts it into a ""Runtime"" SDE currently.

So I'd say it's a bug that we've lost this precision, because I like having the separation where SDEs that are detected to occur at runtime are explicitly identified. But the DFDL spec doesn't say when anything has to be detected.

So if we view the test as testing the DFDL spec requirement, then making the test less precise is ok. If we view the test as verifying our desired behavor for Daffodil, then the loss of precision is a bug.

I suppose really there are two tests then.... I would prefer not to fix this particular issue right away however.

Changes in diagnostic behavior are probably the biggest observable places where behavior will have changed

Associated test(s):
test_variableRefError",[],2014-10-14 18:16:51+00:00,2020-08-05 18:53:45+00:00,2020-08-05 18:53:45+00:00,Closed,13114475,DAFFODIL-1056
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This test has been removed by dev as part of the Dpath changes. Please verify the reasoning for this deletion, and update the corresponding test. We will likely delete the existing test from Testlink, and come up with a test to verify the new behaviour. Also verify that any associated requirements are still valid.",[],2014-10-14 17:24:51+00:00,2014-11-10 22:01:16+00:00,2014-11-10 22:01:24+00:00,Closed,13114474,DAFFODIL-1055
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"There are several tests in functions.tdml that have been changed by dev as part of the DPath implementation. Dev has left comments on these tests. Please clean up the tests (address/remove comments), and make sure associated test cases and requirements are correct.",[],2014-10-14 17:09:57+00:00,2014-11-10 14:58:57+00:00,2014-11-10 14:59:06+00:00,Closed,13114473,DAFFODIL-1054
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"These tests have been updated by dev as part of the DPath changes, but the corresponding test cases have not been modified. We also need to verify that the associated requirements are still accurate and applicable.",[],2014-10-14 16:58:11+00:00,2014-11-07 18:15:35+00:00,2014-11-07 18:15:39+00:00,Closed,13114472,DAFFODIL-1053
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See notes in test once DPath & Serialization code is pushed. test, test case, and potentially mapped req need to be updated.",[],2014-10-14 15:38:16+00:00,2014-11-06 15:39:06+00:00,2014-11-06 15:39:13+00:00,Closed,13114471,DAFFODIL-1052
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"containsEntity is now containsDFDLEntities. The functionality of the tests has been updated, but the names, descriptions, scala files, etc. still need to be updated.

The requirements and test mappings also need to reflect this change.",[],2014-10-14 15:33:34+00:00,2014-11-03 21:08:07+00:00,2014-11-03 21:08:13+00:00,Closed,13114470,DAFFODIL-1051
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"stringLiteralFromString is now encodeDFDLEntities. The functionality of the tests has been updated, but the names, descriptions, scala files, etc. still need to be updated.

The requirements and test mappings also need to reflect this change.",[],2014-10-14 15:29:26+00:00,2014-11-03 21:00:53+00:00,2014-11-03 21:01:00+00:00,Closed,13114469,DAFFODIL-1050
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The occursCount tests have already been updated by the dev team to use fn:count instead of dfdl:occursCount. However, the test names, descriptions, etc. still reference occursCount. The following will need to be updated once the modified tests are pushed:

- Test names & descriptions
- Scala file referencing tests
- Requirement for occursCount (now obsolete), either modify to reflect fn:count or create new
- test mappings",[],2014-10-14 15:19:00+00:00,2014-11-26 17:48:25+00:00,2014-11-26 17:48:34+00:00,Closed,13114468,DAFFODIL-1049
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"ICU's date/time classes are not serializable or thread-safe. Serializability isn't a big deal (we can alwrays wrap it in similar to how we handle DFDLCharset), but thread safetey is a pain to have to deal with. We end up with lots of ThreadLocal variables, and if we miss any, we've got a hard to find race condition.

JodaTime looks promising. It's formatters don't appear to be serializable, but they are thread safe and immutable.",[],2014-10-13 20:19:22+00:00,,2018-09-13 14:04:21+00:00,Open,13114467,DAFFODIL-1048
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Right now, if someone using the Java API wants to just collect all trace output in a single string, or change the command in the trace output, they essentially need to create their own trace mechanism. This should not be necessary. Built-in trace debuggers should exist that can be easily overridden to provide added functionality without the need to reimplement the whole tracer.

Similarly, logging should be more easy to override by java API users to provided added functionality without needing to duplicate much of the code.",[],2014-10-13 18:24:47+00:00,,2018-09-13 14:03:54+00:00,Open,13114466,DAFFODIL-1047
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"The ICU library does not provide a way to pass 'no timezone' to the SimpleDateFormat/Calendar objects.  We need a way to specify 'no timezone' to be compliant with the dfdl:timezoneFromDateTime, and the like, functions.

Essentially, the function will never be able to return an 'empty string' when there is no timezone.

From spec:

""Returns the timezone component of $arg if
any as an xs:string. The $arg is of type
xs:dateTime, xs:date and xs:time respectively.

If $arg has a timezone component, then the
result is a string in the format of an ISO Time
zone designator. Interpreted as an offset from
UTC, its value may range from +14:00 to -
14:00 hours, both inclusive. The UTC time
zone is represented as ""+00:00"". If the $arg
has no timezone component, then """" (empty
string) is returned.""",[],2014-10-10 15:54:47+00:00,2015-01-15 19:51:43+00:00,2015-01-27 22:23:05+00:00,Closed,13114465,DAFFODIL-1046
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"It is hard to debug TDML files because the file and line number information in diagnostic messages don't refer to correct line numbers of the TDML file, but rather to file and line in some generated temp file.

The TDML runner uses a different loader than the one we use to read DFDL schemas. This is for whitespace preservation reasons (allows us to preserve whitespace by using CDATA bracketing). 

The DaffodilXMLLoader that we use to read DFDL schemas provides file and line number information, but will not supercede such information if it is already in the XML (I think). This allows one to read a TDML file, producing file and line number information, then write out a temporary schema file from parts of the TDML file. This written schema will have file and line number information pointing back at the originally loaded TDML file which is what you want.

However, the Constructing XML Parser that TDML runner uses does not gather file and line number information (currently, at least we haven't put in the work to make it do this.)

The TDML runner generates a temp file containing the schema. This temp file is then what file/line numbers refer to in diagnostic messages. But the file/line numbers you want should be the tdml file and line number within that. 

So we either 

* make the constructing parser produce file and line number information

* figure out how to get past the whitespace-preservation/CDATA issue differently so that we can use the regular DaffodilXMLLoader instead of the constructing parser. 

One idea is to require significant whitespace to be inserted using Private-Use-Area (PUA) characters. So if you want a Carriage Return (CR) in your data you would write &amp;#xE00D; which XML will not view as whitespace but we can remap into a 0x0d in the data and/or infoset. 

We also already have some support for using DFDL character entitites in TDML data so ""%CR;"" could be used to represent a CR character in data, though to represent it in the expected infoset we would have to invert this projection, and the difficulty is that the XML containing these DFDL character entities isn't ""real XML"". Some individual characters would instead be represented by several characters. Lengths would all be off. 

If we want others to use TDML to report bugs and such, we need to fix this line number issue.",[],2014-10-09 06:50:08+00:00,2015-01-07 16:00:20+00:00,2015-01-29 23:05:36+00:00,Closed,13114464,DAFFODIL-1045
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test test_expression_type_error2()

The test has an expression which clearly is erroneous. 
{code}
<xs:element name=""e3"" type=""xs:int"" dfdl:inputValueCalc=""{ 2.5 }"" />
{code}
where a decimal/floating point constant is given as the value for an xs:int type element. 

Current behavior just truncates and produces the value 2.

This is the right semantics for the xs:int(...) function call. 

This from the XPath functions spec: 

If ST is xs:decimal, xs:float or xs:double, then TV is SV with the fractional part discarded and the value converted to xs:integer. Thus, casting 3.1456 returns 3 and -17.89 returns -17. Casting 3.124E1 returns 31. If SV is too large to be accommodated as an integer, (see [XML Schema Part 2: Datatypes Second Edition] for ��implementation-defined�� limits on numeric values) an error is raised [err:FOCA0003]. If SV is one of the special xs:float or xs:double values NaN, INF, or -INF, an error is raised [err:FOCA0002].

Right now, if a value is returned by an expression via inputValueCalc, then it is converted to the type of the element in exactly the same way that an argument to a function is converted.

This leads to the strange anomalies like  test_expression_type_error2() where there is a clear mistake by the schema author.

Fixing this so we can issue an SDE or warning requires that the DPath constant folding be enhanced substantially so that it can not only determine if an entire expression is a constant or not, but sub-expressions within an expression.",[],2014-10-09 01:54:11+00:00,2019-01-11 14:06:05+00:00,2021-05-20 12:34:19+00:00,Closed,13114463,DAFFODIL-1044
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The type Complex cannot be converted to .....

This schema definition error is produced in situations where one has a complex element type, but you are using it in an expression that requires a simple type.

The message needs to provide more info. E.g., 

test_checkConstraintsComplexTypeFails has an expression containing dfdl:checkConstraints(.) but on a complex type. The message doesn't contain the expression text anywhere. 

test_assertFailShowsValue2 has an assertion which tries to evaluate the expression ""."" on a complex type. Again no mention of the expression, or it appearing in an assertion test.",['beginner'],2014-10-09 01:37:05+00:00,2020-10-01 20:39:20+00:00,2020-11-18 17:40:01+00:00,Closed,13114462,DAFFODIL-1043
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"tests that used to work (when we used Saxon), no longer work and have been parked in scala-debug. 

It isn't clear exactly how strict this parsing is supposed to be. We know the ICU libraries even at their most strict aren't very strict.

test_timeStrictCheckPolicy01
test_timeStrictCheckPolicy02
test_dateStrictCheckPolicy01
test_timeFormatting5",[],2014-10-09 01:27:37+00:00,,2020-12-16 20:44:52+00:00,Open,13114461,DAFFODIL-1042
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I revisited the HL7 schema provided by IBM and made the tweak from textStandardExponentCharacter -> textStandardExponentRep, to see what other issues there may be. The parse appears to be hanging consistently. I reran the CLI in very verbose mode (-vvv), and see the following type of output over and over:

[debug] DFDLElement leafFindProperty encoding on element.HL7::LocalComplexTypeDef::sequence::ElementRef(anyHL7Segment)::element.anyHL7Segment::GlobalComplexTypeDef(anyHL7Segment.TYPE)::choice::choice::ElementRef(ADJ)::element.ADJ::GlobalComplexTypeDef(ADJ.CONTENT)::sequence::sequence[2]::ElementRef(ADJ.7.AdjustmentReasonPA)::DFDLElement
[debug] DFDLElement leafFindProperty NotFound(List(element.HL7::LocalComplexTypeDef::sequence::ElementRef(anyHL7Segment)::element.anyHL7Segment::GlobalComplexTypeDef(anyHL7Segment.TYPE)::choice::choice::ElementRef(ADJ)::element.ADJ::GlobalComplexTypeDef(ADJ.CONTENT)::sequence::sequence[2]::ElementRef(ADJ.7.AdjustmentReasonPA)::DFDLElement),List())
[debug] ChainPropProvider(DFDLElement) chainFindProperty encoding.
[debug] DFDLElement leafFindProperty encoding on element.HL7::LocalComplexTypeDef::sequence::ElementRef(anyHL7Segment)::element.anyHL7Segment::GlobalComplexTypeDef(anyHL7Segment.TYPE)::choice::choice::ElementRef(ADJ)::element.ADJ::GlobalComplexTypeDef(ADJ.CONTENT)::sequence::sequence[2]::ElementRef(ADJ.7.AdjustmentReasonPA)::element.ADJ.7.AdjustmentReasonPA::DFDLElement
[debug] DFDLElement leafFindProperty NotFound(List(element.HL7::LocalComplexTypeDef::sequence::ElementRef(anyHL7Segment)::element.anyHL7Segment::GlobalComplexTypeDef(anyHL7Segment.TYPE)::choice::choice::ElementRef(ADJ)::element.ADJ::GlobalComplexTypeDef(ADJ.CONTENT)::sequence::sequence[2]::ElementRef(ADJ.7.AdjustmentReasonPA)::element.ADJ.7.AdjustmentReasonPA::DFDLElement),List())
[debug] ChainPropProvider(DFDLFormat) chainFindProperty encoding.
[debug] DFDLFormat leafFindProperty encoding on SchemaDocument::DFDLFormat
[debug] DFDLFormat leafFindProperty NotFound(List(SchemaDocument::DFDLFormat),List())
[debug] DFDLFormat leafFindProperty encoding on SchemaDocument::DFDLFormat
[debug] DFDLFormat leafFindProperty Found(US-ASCII,SchemaDocument::DFDLFormat)
[debug] ChainPropProvider(DFDLFormat) chainFindProperty encoding.
[debug] DFDLFormat leafFindProperty encoding on SchemaDocument::DFDLFormat
[debug] DFDLFormat leafFindProperty NotFound(List(SchemaDocument::DFDLFormat),List())
[debug] DFDLFormat leafFindProperty encoding on SchemaDocument::DFDLFormat
[debug] DFDLFormat leafFindProperty Found(US-ASCII,SchemaDocument::DFDLFormat)

I see repeating blocks of output like this for the following properties:
- encoding
- encodingErrorPolicy
- bitOrder
- alignmentUnits
- alignment
- separator

Most of these properties are in fact defined in HL7Format.xsd; the only ones missing are encodingErrorPolicy and bitOrder, which is to be expected. The input file I'm trying to parse is 433 bytes. I let it run and it was still spinning after close to an hour. 

Full command run:
daffodil-cli/target/start -vvv parse -s ../data/DFDLSchemas-HL7-v2.7-f53bd9c/GenericHL7.xsd -r HL7 ../data/DFDLSchemas-HL7-v2.7-f53bd9c/A01.txt

I've updated DFDL-828 to include this information.",[],2014-10-07 19:16:30+00:00,2014-11-19 15:22:27+00:00,2014-12-16 21:49:30+00:00,Closed,13114460,DAFFODIL-1041
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,* test_dfdl_782 in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/usertests/TestUserSubmittedTestsDebig.scal,[],2014-10-03 16:27:07+00:00,2014-11-10 17:26:38+00:00,2014-11-10 17:26:47+00:00,Closed,13114459,DAFFODIL-1040
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Scala has a built in function that checks the java version is correct, e.g.

{code}
scala.util.Properties.isJavaAtLeast(""1.7"")
{code}

We should use this built-in rather than reimplement this functionality in CheckJavaVersion. It would make our code simpler and more understandable. Note that there is also currently a bug in that the error message. It always requires 1.7, even if we ever changed it to require a later version.",[],2014-10-02 02:24:11+00:00,2015-06-16 16:01:49+00:00,2015-06-17 17:29:48+00:00,Closed,13114458,DAFFODIL-1039
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This bug is currently happening on the serialization-with-dpath branch, but I'm parking it here because it is so strange, and very well may move with the eventual integration of this branch back into the mainline.

The below is in scala-debug section14.sequence-groups.

{code}
/**
   * The test_baseline() below fails if you have dbg on it as here. 
   * It passes if you don't have dbg on it.
   * 
   * The problem is some interaction of the try/catch surrounding expression
   * evaluation at compile time and the InteractiveDebugger/Trace
   * 
   * We run the expression and catch errors if it
   * ISNT constant, as a way of determining whether it is a constant. The 
   * expression is { .. } which is NOT constant, and a throw of IllegalStateException
   * occurs which is caught (supposed to be anyway) very nearby where it is
   * thrown. But somehow, we end up exiting as if the exception was not caught.
   * 
   * This happens on the final, 26th such throw. All earlier throws/catch work
   * fine. (If you set a breakpoint on IllegalStateException caught and uncaught
   * you can set the hit count to 26 and watch what happens here.
   * 
   * I am mystified by this. -mikeb 2014-09-26
   */
  def dbg = {
    Debugger.withTracing(false)
    // LoggingDefaults.setLoggingLevel(LogLevel.Debug)
  }
  @Test def test_baseline() { dbg; runner_01.runOneTest(""initiatedContentSeqBaseline"") }

{code}",[],2014-09-26 16:02:36+00:00,2014-11-13 14:05:35+00:00,2014-11-13 14:05:35+00:00,Closed,13114457,DAFFODIL-1038
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"As the spec states, 'If dfdl:initiator is """" (the empty string), then the Initiator region is of length zero, and no initiator is expected.'

However, there is no way to set the initiator up this way when using element from, The following causes an error:
<dfdl:property name=""initiator""></dfdl:property>

{code}
2014-09-18 12:39:38:652  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[SchemaDocument::DFDLFormat@@justThisOneProperties has no value due to scala.MatchError: <dfdl:property dafint:col=""41"" dafint:line=""10"" name=""separator"" xmlns:dafint=""urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:ex=""http://www.example.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema""/> (of class scala.xml.Elem).]
[error] Test edu.illinois.ncsa.daffodil.section08.property_scoping.TestPropertyScoping.test_defaultForm_04 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: scala.MatchError: <dfdl:property dafint:col=""41"" dafint:line=""10"" name=""separator"" xmlns:dafint=""urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:ex=""http://www.example.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema""/> (of class scala.xml.Elem)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:485)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.dsom.DFDLFormatAnnotation.justThisOneProperties$lzycompute(DFDLAnnotation.scala:372)
[error]     at edu.illinois.ncsa.daffodil.dsom.DFDLFormatAnnotation.justThisOneProperties(DFDLAnnotation.scala:372)
[error]     at edu.illinois.ncsa.daffodil.dsom.LeafPropProvider$class.leafFindProperty(PropProviders.scala:89)
[error]     at edu.illinois.ncsa.daffodil.dsom.DFDLFormatAnnotation.leafFindProperty(DFDLAnnotation.scala:180)
[error]     at edu.illinois.ncsa.daffodil.dsom.ChainPropProvider$$anonfun$1.apply(PropProviders.scala:130)
[error]     at edu.illinois.ncsa.daffodil.dsom.ChainPropProvider$$anonfun$1.apply(PropProviders.scala:129)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
[error]     at scala.collection.AbstractTraversable.map(Traversable.scala:105)
[error]     at edu.illinois.ncsa.daffodil.dsom.ChainPropProvider.lookupPropertyInSources(PropProviders.scala:129)
[error]     at edu.illinois.ncsa.daffodil.dsom.ChainPropProvider.chainFindProperty(PropProviders.scala:121)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent$$anonfun$6.apply(AnnotatedSchemaComponent.scala:98)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent$$anonfun$6.apply(AnnotatedSchemaComponent.scala:98)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
[error]     at scala.collection.AbstractTraversable.map(Traversable.scala:105)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.findDefaultOrNonDefaultProperty(AnnotatedSchemaComponent.scala:98)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.findDefaultProperty(AnnotatedSchemaComponent.scala:131)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.findPropertyOption(AnnotatedSchemaComponent.scala:149)
[error]     at edu.illinois.ncsa.daffodil.schema.annotation.props.gen.BitOrderMixin$class.bitOrderLookupResult(GeneratedCode.scala:2817)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.bitOrderLookupResult$lzycompute(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.bitOrderLookupResult(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.schema.annotation.props.gen.BitOrderMixin$class.edu$illinois$ncsa$daffodil$schema$annotation$props$gen$BitOrderMixin$$x$111(GeneratedCode.scala:2819)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.edu$illinois$ncsa$daffodil$schema$annotation$props$gen$BitOrderMixin$$x$111$lzycompute(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.edu$illinois$ncsa$daffodil$schema$annotation$props$gen$BitOrderMixin$$x$111(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.schema.annotation.props.gen.BitOrderMixin$class.optionBitOrder(GeneratedCode.scala:2818)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.optionBitOrder$lzycompute(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.optionBitOrder(AnnotatedSchemaComponent.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.BitOrderMixin$class.defaultBitOrder(GrammarMixins.scala:189)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.defaultBitOrder$lzycompute(Groups.scala:64)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.defaultBitOrder(Groups.scala:64)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData$lzycompute(Elements.scala:200)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.elementRuntimeData(Elements.scala:187)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData$lzycompute(Elements.scala:185)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.runtimeData(Elements.scala:185)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$16.apply(Elements.scala:161)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase$$anonfun$16.apply(Elements.scala:148)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7.apply(OOLAG.scala:313)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply$mcV$sp(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:308)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:307)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:374)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:77)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:75)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:74)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler$$anonfun$compileInternal$1.apply(Compiler.scala:225)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler$$anonfun$compileInternal$1.apply(Compiler.scala:217)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler.compileInternal(Compiler.scala:217)
[error]     at edu.illinois.ncsa.daffodil.compiler.Compiler.compile(Compiler.scala:250)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:463)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:273)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:264)
[error]     at edu.illinois.ncsa.daffodil.section08.property_scoping.TestPropertyScoping.test_defaultForm_04(TestPropertyScoping.scala:54)
[error]     ...
{code}

See test test_defaultForm_04 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section08/property_scoping/PropertyScoping.tdml
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section08/property_scoping/defaultForm_04.dfdl.xsd",[],2014-09-18 19:46:07+00:00,2014-12-09 13:58:37+00:00,2014-12-17 22:52:18+00:00,Closed,13114456,DAFFODIL-1037
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See test test_localAnnotation_05 in the following files:

daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section08/property_scoping/TestPropertyScoping.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section08/property_scoping/PropertyScoping.tdml

It results in the following error:
{code}
2014-09-18 10:48:41:567  edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.e5::LocalComplexTypeDef::sequence@@Prod(Prod)@@gram has no value due to java.util.NoSuchElementException: None.get.]
[error] Test edu.illinois.ncsa.daffodil.section08.property_scoping.TestPropertyScoping.test_localAnnotation_05 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: java.util.NoSuchElementException: None.get
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:485)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.processors.ComplexTypeCombinator.<init>(PrimitivesElementKinds.scala:50)
[error]     at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1360)
[error]     at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1360)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:73)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContentSpecifiedLength$1.apply(GrammarMixins.scala:888)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContentSpecifiedLength$1.apply(GrammarMixins.scala:888)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:247)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:891)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:891)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:247)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:895)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:895)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:247)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:954)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:950)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:282)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:73)
[error]     at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1139)
[error]     at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1139)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:266)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$12.apply(Grammar.scala:264)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:262)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$13.apply(Grammar.scala:286)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$13.apply(Grammar.scala:286)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.parser$lzycompute(Grammar.scala:284)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.parser(Grammar.scala:284)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$4$$anonfun$apply$1.apply(Runtime.scala:129)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$4$$anonfun$apply$1.apply(Runtime.scala:127)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$4.apply(Runtime.scala:127)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$4.apply(Runtime.scala:127)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parser$lzycompute(Runtime.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parser(Runtime.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:107)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:106)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1$$anonfun$apply$mcV$sp$5.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7$$anonfun$apply$1.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:647)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4$$anonfun$apply$33.apply(OOLAG.scala:562)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:469)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$4.apply(OOLAG.scala:568)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:552)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:650)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7.apply(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$7.apply(OOLAG.scala:313)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(OOLAG.scala:313)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply$mcV$sp(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:308)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:308)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:307)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:374)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:77)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:75)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:74)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.isError(Runtime.scala:118)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:91)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:87)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:79)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:87)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:627)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:530)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:469)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:273)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:264)
[error]     at edu.illinois.ncsa.daffodil.section08.property_scoping.TestPropertyScoping.test_localAnnotation_05(TestPropertyScoping.scala:55)
[error]     ...

{code}",[],2014-09-18 17:58:05+00:00,2014-11-21 18:21:32+00:00,2014-12-18 04:18:21+00:00,Closed,13114455,DAFFODIL-1036
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We have tests that depend on this behavior:

<element name=""i"" type=""xs:int"" dfdl:inputValueCalc=""{ dfdl:checkConstraints(.) }""/>

That shouldn't work. ""."" means ""value of this element"". Even though there are no constraints so the checkConstraints function *could* return without needing to see the value of ""."" it still isn't a correct schema construct. 

Really the constraint checking is against the value of the simple-typed element.

Tests dfdlCheckConstraints and dfdlCheckConstraints2 both have this issue.

This case, where ""."" is a sub-expression inside a dfdl:inputValueCalc, can be recognized and a diagnostic issued that says you cannot use ""."" because the inputValueCalc expression is computing that value.",['beginner'],2014-09-12 00:14:40+00:00,2020-10-01 20:38:21+00:00,2020-11-20 02:07:01+00:00,Closed,13114454,DAFFODIL-1035
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The vCard 2.1 schemas created by IBM (on github) cause an abort in Daffodil caused by trying to format 'unbounded' as a number. 

(as reported by Steve Hanson of IBM)",['ForInteroperabilityTest'],2014-09-09 18:54:11+00:00,2019-10-15 17:16:47+00:00,2021-05-20 12:34:34+00:00,Closed,13114453,DAFFODIL-1034
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This sbt plugin looks like it has matured quite a bit since we implemented daffodil-pack. I think it can do everything we currently require, plus it has support for building things like rpm's, dep's, msi's, etc. It would be nice if we could have the same or more functionality with a plugin and not have this messy nesting of sbt projects.

This could even potentially replace the sbt-stage plugin.",[],2014-09-08 13:45:11+00:00,2014-11-05 16:47:37+00:00,2014-12-01 16:15:10+00:00,Closed,13114452,DAFFODIL-1033
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"From the spec - A choice that declares no branches in the DFDL schema is a schema definition error.

See test:
ngf-dfdl-2789:Choice_noBrances-test_choice_noBranch

In files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section15/choice_groups/choice.tdml
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section15/choice_groups/noBranches.dfdl.xsd
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section15/choice_groups/TestChoiceDebug.scala","['beginner', 'reverify']",2014-09-05 21:05:07+00:00,2020-09-14 12:39:25+00:00,2020-09-24 13:39:35+00:00,Closed,13114451,DAFFODIL-1032
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Empty string should be a valid value for default value of defineVariable but when trying to use it I get the following error:

edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: Expression result is not a node

From the spec - To set the default value to """" (empty string), the defaultValue attribute syntax must be used, or the expression { """" } must be used as the element value.

See tests:
ngf-dfdl-2783:Variables_r1-test_emptyDefault
ngf-dfdl-2784:Variables_r2-test_emptyDefault2

In files: 
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/variables/TestVariablesDebug.scala",[],2014-09-05 20:28:46+00:00,2014-11-26 17:22:46+00:00,2014-11-26 17:23:10+00:00,Closed,13114450,DAFFODIL-1031
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"I created a test that expects a Schema Definition Error. When running the test, there is a correct SDE but it doesn't get caught and so the test fails with the SDE.

See test:
ngf-dfdl-2782:Variables_r2-test_doubleEmptyDefault

In the files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/variables/TestVariablesDebug.scala",[],2014-09-05 20:21:16+00:00,2015-01-13 00:55:24+00:00,2015-01-13 19:16:49+00:00,Closed,13114449,DAFFODIL-1030
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Small thing, but if you type:

(debug) display data
(debug) step

you get
error: undefined command: data

It would be good if when I gave it the display data command (which should have been 'display info data') it checked that the command was valid - perhaps even by running it.",[],2014-09-05 13:25:55+00:00,2015-01-21 13:34:21+00:00,2015-01-27 22:52:00+00:00,Closed,13114448,DAFFODIL-1029
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"From requirements for inputValueCalc, ""It is not possible to place this property in scope on a dfdl:format annotation."" The test for this is using a schema that has inputValueCalc defined in format. The test parses and uses the value from inputValueCalc on the element instead of having an error.

See test in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section17/calc_value_properties/TestInputValueCalcDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section17/calc_value_properties/inputValueCalc.tdml

Test:
ngf-dfdl-2781:InputValueCalc-test_InputValueCalc_in_format",[],2014-09-04 18:58:45+00:00,2016-09-02 19:03:59+00:00,2016-09-28 21:53:21+00:00,Closed,13114447,DAFFODIL-1028
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"From the requirements, ""It is a schema definition error if dfdl:inputValueCalc and dfdl:outputValueCalc are specified on the same element."" Test for this condition parses without getting the SDE. 

See test in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section17/calc_value_properties/TestInputValueCalcDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section17/calc_value_properties/inputValueCalc.tdml

Test:
ngf-dfdl-2780:InputValueCalc-test_InputValueCalc_with_outputValueCalc",[],2014-09-04 18:47:46+00:00,2017-08-17 15:08:21+00:00,2017-08-17 15:08:54+00:00,Closed,13114446,DAFFODIL-1027
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"An exception was found when accidentally using the -c option for the input data. For example:

{code}
daffodil parse -s ../examples/pcap/pcap.dfdl.xsd -c ../examples/pcap/dns.cap
{code}

Results in the following exception:
{code}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+B
ug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.nio.charset.MalformedInputException: Input length = 1
        at java.nio.charset.CoderResult.throwException(CoderResult.java:288)
        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:377)
        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:210)
        at java.io.InputStreamReader.read(InputStreamReader.java:205)
        at java.io.BufferedReader.fill(BufferedReader.java:165)
        at java.io.BufferedReader.read(BufferedReader.java:186)
        at scala.io.BufferedSource$$anonfun$iter$1$$anonfun$apply$mcI$sp$1.apply
$mcI$sp(BufferedSource.scala:38)
        at scala.io.Codec.wrap(Codec.scala:68)
        at scala.io.BufferedSource$$anonfun$iter$1.apply(BufferedSource.scala:38
)
        at scala.io.BufferedSource$$anonfun$iter$1.apply(BufferedSource.scala:38
)
        at scala.collection.Iterator$$anon$9.next(Iterator.scala:162)
        at scala.collection.Iterator$$anon$17.hasNext(Iterator.scala:511)
        at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:327)
        at scala.io.Source.hasNext(Source.scala:226)
        at scala.xml.parsing.MarkupParser$class.ch(MarkupParser.scala:104)
        at scala.xml.parsing.ConstructingParser.ch(ConstructingParser.scala:47)
        at scala.xml.parsing.MarkupParser$class.document(MarkupParser.scala:221)

        at scala.xml.parsing.ConstructingParser.document(ConstructingParser.scal
a:47)
        at edu.illinois.ncsa.daffodil.configuration.ConfigurationLoader$.getConf
iguration(ConfigurationLoader.scala:61)
        at edu.illinois.ncsa.daffodil.configuration.ConfigurationLoader$.getConf
iguration(ConfigurationLoader.scala:68)
        at edu.illinois.ncsa.daffodil.Main$.loadConfigurationFile(Main.scala:498
)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:642)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1075)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}",['beginner'],2014-09-04 18:44:34+00:00,,2021-01-13 23:15:28+00:00,Open,13114445,DAFFODIL-1026
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Per requirements, inputValueCalc should not refer to the element the property is on or cause a circular reference to the element. Tests for these conditions parse without problems but errors are expected. 

See tests in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section17/calc_value_properties/TestInputValueCalcDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section17/calc_value_properties/inputValueCalc.tdml

Tests: 
ngf-dfdl-2776:InputValueCalc-test_InputValueCalc_circular_ref
ngf-dfdl-2775:InputValueCalc-test_InputValueCalc_refers_self",['beginner'],2014-09-04 18:43:02+00:00,2020-10-01 20:38:38+00:00,2020-11-18 17:55:17+00:00,Closed,13114444,DAFFODIL-1025
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"According to the spec, inputValueCalc should not be used on an element that is optional, global, or an array. The tests for these conditions are currently parsing and not throwing any errors.

See tests in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section17/calc_value_properties/TestInputValueCalcDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section17/calc_value_properties/inputValueCalc.tdml

Tests:
ngf-dfdl-2777:InputValueCalc-test_InputValueCalc_optional_elem
ngf-dfdl-2779:InputValueCalc-test_InputValueCalc_global_elem
ngf-dfdl-2778:InputValueCalc-test_InputValueCalc_array_elem",[],2014-09-04 18:22:25+00:00,2019-06-10 16:57:39+00:00,2021-05-20 12:34:39+00:00,Closed,13114443,DAFFODIL-1024
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Before releasing s15, we must update the dependencies and licenses page. Dependencies have changed.",[],2014-09-04 17:35:33+00:00,2014-11-11 14:38:50+00:00,2014-12-04 17:38:34+00:00,Closed,13114442,DAFFODIL-1023
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When git references are ambigous (e.g. tag and branch with the same name), our version detection fails. Note that this is only an issue when dealing with bug fix releases, since only these releases will be on branches that are ambiguous with existing tags.",[],2014-09-03 19:06:20+00:00,2014-09-04 17:31:44+00:00,2014-10-07 18:49:39+00:00,Closed,13114441,DAFFODIL-1022
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The binary zip/bz2 files we distribute do not have the copyright notices in them for the library jars we are including. 

Many licenses/copyrights, including our own, require reproducing the copyright notice in distributions. 

We also need to make these licenses available for separate download. This is important as other people cannot often even download our stuff without scrutinizing ours and all the licenses/copyright notices transitively of everything we include. (This is the constraint IBM folks are under, and we want them to be able to demo our stuff.) 

Best bet I think is for us to lift all copyright/license files from the source jars, pile them all in one directory, and then we can put that up on the wiki and in the zip/bz2.

 That way it is in the distribution, but also people can look at it before download. 

We should double-check that none of the software we are including is licensed under the GPL (any version), as that would preclude others from using it in many situations.",[],2014-09-03 13:52:30+00:00,2014-09-04 17:32:04+00:00,2014-10-08 17:35:18+00:00,Closed,13114440,DAFFODIL-1021
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Right now all our libraries are automatically pulled down from the interent using sbt except two libraries that are part of ICU that we must provide manually. 

We should file a bug report with ICU folks, and ask that these libraries not be orphaned like they are now.",[],2014-08-27 13:27:08+00:00,2015-08-21 14:18:16+00:00,2015-09-02 13:29:20+00:00,Closed,13114439,DAFFODIL-1020
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"The ""info data"" command for the CLI debugger does not appear to be showing the correct bits before parsing has started. Previously, when starting a test ""info data"" would show ""��� (-1 to -1)"" which indicated that it wasn't looking at the input yet. Now it shows ""������ (0 to -1)"". 

I'm not sure exactly where this change took place but as an example, commit fd97c25ff35516c029ddca0393724ecdcf0f8b28 seems to be displaying this correctly.

This can be tested by running the following and then typing ""info data"" from the debug prompt:
> daffodil-cli/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/input/input2.txt",[],2014-08-19 20:35:14+00:00,2015-01-20 17:11:36+00:00,2015-01-22 22:57:02+00:00,Closed,13114438,DAFFODIL-1019
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is no code in the daffodil-runtime1 module, so this and its eclipse-projects counterparts should be removed to avoid confusion about where code belongs.",[],2014-08-14 17:50:49+00:00,2014-11-19 20:52:19+00:00,2014-11-21 18:26:34+00:00,Closed,13114437,DAFFODIL-1018
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There's misleading old Unparser code. 

It will be less error prone to start from scratch building the unparser code to be symmetric with the new parser code that uses serializable runtime data objects.

Hence, remove all the old unparser code.",[],2014-08-14 17:49:44+00:00,2014-11-11 14:46:22+00:00,2014-12-02 19:17:28+00:00,Closed,13114436,DAFFODIL-1017
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Trivial,"With the old -r and -n options, we had a test where you specify -n and a namespace without specifying a root. The CLI would complain.

WIth the new functionality, if you provide a namespace and no root, the CLI tries to use the namespace as the root.

eg:

echo -ne ""12"" | ./daffodil-cli/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r ""{http://www.example.org/example1/}""

I would expect this to recognize that the information enclosed in {} is the namespace, and no root is provided. However, we get the following error:

[error] Compilation (ProcessorFactory) produced 1 errors/warnings.
[error] Schema Definition Error: No root element found for {http://www.example.org/example1/} in any available namespace
Schema context: SchemaSet. Location in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd.",[],2014-08-14 15:30:57+00:00,2020-08-05 18:48:34+00:00,2020-08-05 18:48:34+00:00,Closed,13114435,DAFFODIL-1016
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Unsupported+Features+by+Release,[],2014-08-14 15:08:01+00:00,2015-02-04 20:48:28+00:00,2015-02-09 15:49:40+00:00,Closed,13114434,DAFFODIL-1015
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Need to update DelimiterParsers to use new RuntimeData or pass information via parameters to get the information it needs,[],2014-08-13 15:11:29+00:00,2014-08-13 18:56:14+00:00,2014-11-14 18:28:52+00:00,Closed,13114433,DAFFODIL-1014
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-08-13 13:17:59+00:00,,2018-09-13 14:04:25+00:00,Open,13114432,DAFFODIL-1013
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently there is not a very clear separation between what is needed at compile time and what is needed at runtime. This results in many objects that can't be garbage collected, makes serialization very difficult, and makes the code harder to follow in general. Separating parsers from primitives and having a clear idea of what is runtime data and what is compile time is the first step to solving many of our performance problems.",[],2014-08-12 18:28:05+00:00,2014-08-13 17:52:08+00:00,2014-11-13 20:49:28+00:00,Closed,13114431,DAFFODIL-1012
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"It would be nice if you could load in a schema into the debugger and have it associate the schema with the parsers. This would allow one to view the properties associated with all parsers, even if the parsers themselves do not store the requested properties. This might also allow for features like easier setting of breakpoints and things like autocompletion of paths.",[],2014-08-12 17:50:19+00:00,,2018-10-23 16:41:03+00:00,Open,13114430,DAFFODIL-1011
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The checks for unordered sequence and choice branch violations were removed because they currently are performance at runtime, but should be done statically at compile time. The new DPath compiler will make that much easier to accomplish. The following tests are currently commented out, and should be readded once the DPath compiler is implemented:

* test_simple_invalid_path_to_branch
* test_simple_invalid_path_to_branch_does_not_exist
* test_nested_multiple_invalid_paths_to_branch
* test_nested_invalid_path_to_branch
* test_nested_invalid_path_to_branch_2
* test_nested_invalid_path_to_branch_3",[],2014-08-12 15:51:38+00:00,2019-10-03 13:01:43+00:00,2021-05-20 12:35:02+00:00,Closed,13114429,DAFFODIL-1010
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"With the latest source, I can ""sbt publish-local"" in the top-level daffodil project, which was successful. I then navigated to the daffodil-pack subproject and ran ""sbt pack"". I got the following error:

{code}[info] Compiling 1 Scala source to C:\cygwin\home\jchab\daffodil\daffodil-pack\project\target\scala-2.10\sbt-0.13\classes...
[error] symbol value DescribeRegex does not exist in DaffodilBuild.<init>
[error] uncaught exception during compilation: scala.reflect.internal.FatalError
scala.reflect.internal.FatalError:
     while compiling: C:\cygwin\home\jchab\daffodil\daffodil-pack\project\build.scala
        during phase: icode
     library version: version 2.10.2
    compiler version: version 2.10.2
  reconstructed args: -classpath C:\cygwin\home\jchab\daffodil\daffodil-pack\project\target\scala-2.10\sbt-0.13\classes;C:\Users\jchab\.ivy2\cache\org.apache.commons\commons-compress\jars\commons-compress-1.5.jar;C:\Users\jchab\.ivy2\cache\org.tukaani\xz\jars\xz-1.2.jar;C:\Users\jchab\.ivy2\cache\commons-io\commons-io\jars\commons-io-1.3.2.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\sbt\jars\sbt-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\main\jars\main-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\actions\jars\actions-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\classpath\jars\classpath-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\launcher-interface\jars\launcher-interface-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\interface\jars\interface-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\io\jars\io-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\control\jars\control-0.13.0.jar;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-compiler.jar;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-reflect.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\completion\jars\completion-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\collections\jars\collections-0.13.0.jar;C:\Users\jchab\.ivy2\cache\jline\jline\jars\jline-2.11.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\api\jars\api-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-integration\jars\compiler-integration-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\incremental-compiler\jars\incremental-compiler-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\logging\jars\logging-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\process\jars\process-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\relation\jars\relation-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compile\jars\compile-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\persist\jars\persist-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-tools.sbinary\sbinary_2.10\jars\sbinary_2.10-0.4.2.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\classfile\jars\classfile-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-ivy-integration\jars\compiler-ivy-integration-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\ivy\jars\ivy-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\cross\jars\cross-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.apache.ivy\ivy\jars\ivy-2.3.0-rc1.jar;C:\Users\jchab\.ivy2\cache\com.jcraft\jsch\jars\jsch-0.1.46.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\run\jars\run-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\task-system\jars\task-system-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\tasks\jars\tasks-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\tracking\jars\tracking-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\cache\jars\cache-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\testing\jars\testing-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\test-agent\jars\test-agent-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\test-interface\jars\test-interface-1.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\main-settings\jars\main-settings-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\apply-macro\jars\apply-macro-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\command\jars\command-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-interface\jars\compiler-interface-src-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-interface\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_8_2\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_9_2\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_9_3\jars\compiler-interface-bin-0.13.0.jar -bootclasspath C:\Program Files (x86)\Java\jre7\lib\resources.jar;C:\Program Files (x86)\Java\jre7\lib\rt.jar;C:\Program Files (x86)\Java\jre7\lib\sunrsasign.jar;C:\Program Files (x86)\Java\jre7\lib\jsse.jar;C:\Program Files (x86)\Java\jre7\lib\jce.jar;C:\Program Files (x86)\Java\jre7\lib\charsets.jar;C:\Program Files (x86)\Java\jre7\lib\jfr.jar;C:\Program Files (x86)\Java\jre7\classes;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-library.jar

  last tree to typer: TypeTree(class Byte)
              symbol: class Byte in package scala (flags: final abstract)
   symbol definition: final abstract class Byte extends
                 tpe: Byte
       symbol owners: class Byte -> package scala
      context owners: anonymous class anonfun$3 -> package <empty>

== Enclosing template or block ==

Template( // val <local $anonfun>: <notype>, tree.tpe=anonfun$3
  ""scala.runtime.AbstractFunction1"", ""scala.Serializable"" // parents
  ValDef(
    private
    ""_""
    <tpt>
    <empty>
  )
  // 3 statements
  DefDef( // final def apply(v: String): sbt.ModuleID
    <method> final <triedcooking>
    ""apply""
    []
    // 1 parameter list
    ValDef( // v: String
      <param> <triedcooking>
      ""v""
      <tpt> // tree.tpe=String
      <empty>
    )
    <tpt> // tree.tpe=sbt.ModuleID
    Apply( // def %(revision: String): sbt.ModuleID in class GroupArtifactID, tree.tpe=sbt.ModuleID
      sbt.`package`.toGroupID(""edu.illinois.ncsa"").%%(""daffodil-cli"").""$percent"" // def %(revision: String): sbt.ModuleID in class GroupArtifactID, tree.tpe=(revision: String)sbt.ModuleID
      ""v"" // v: String, tree.tpe=String
    )
  )
  DefDef( // final def apply(v1: Object): Object
    <method> final <bridge>
    ""apply""
    []
    // 1 parameter list
    ValDef( // v1: Object
      <param> <triedcooking>
      ""v1""
      <tpt> // tree.tpe=Object
      <empty>
    )
    <tpt> // tree.tpe=Object
    Apply( // final def apply(v: String): sbt.ModuleID, tree.tpe=sbt.ModuleID
      DaffodilBuild$$anonfun$3.this.""apply"" // final def apply(v: String): sbt.ModuleID, tree.tpe=(v: String)sbt.ModuleID
      Apply( // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=String
        TypeApply( // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=()String
          ""v1"".""$asInstanceOf"" // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=[T0 >: ? <: ?]()T0
          <tpt> // tree.tpe=String
        )
        Nil
      )
    )
  )
  DefDef( // def <init>(): anonfun$3
    <method> <triedcooking>
    ""<init>""
    []
    List(Nil)
    <tpt> // tree.tpe=anonfun$3
    Block( // tree.tpe=Unit
      Apply( // def <init>(): scala.runtime.AbstractFunction1 in class AbstractFunction1, tree.tpe=scala.runtime.AbstractFunction1
        DaffodilBuild$$anonfun$3.super.""<init>"" // def <init>(): scala.runtime.AbstractFunction1 in class AbstractFunction1, tree.tpe=()scala.runtime.AbstractFunction1
        Nil
      )
      ()
    )
  )
)

== Expanded type of tree ==

TypeRef(TypeSymbol(final abstract class Byte extends ))

symbol value DescribeRegex does not exist in DaffodilBuild.<init>
        at scala.reflect.internal.SymbolTable.abort(SymbolTable.scala:49)
        at scala.tools.nsc.Global.abort(Global.scala:254)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadIdent$1(GenICode.scala:1038)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:1044)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply3$1(GenICode.scala:838)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:851)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:1077)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:1069)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArrayValue$1(GenICode.scala:1097)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:1103)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadQualifier(GenICode.scala:1196)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply1$1(GenICode.scala:741)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:766)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadQualifier(GenICode.scala:1196)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply1$1(GenICode.scala:741)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:766)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1246)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genLoadArguments$1.apply(GenICode.scala:1244)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadArguments(GenICode.scala:1244)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.genLoadApply6$1(GenICode.scala:935)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:967)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genStat(GenICode.scala:187)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genStat$1.apply(GenICode.scala:156)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase$$anonfun$genStat$1.apply(GenICode.scala:156)
        at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
        at scala.collection.immutable.List.foldLeft(List.scala:84)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:1068)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:124)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:72)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:149)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:99)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:72)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:90)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.gen(GenICode.scala:68)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.apply(GenICode.scala:64)
        at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:464)
        at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:431)
        at scala.tools.nsc.Global$GlobalPhase$$anonfun$run$1.apply(Global.scala:431)
        at scala.collection.Iterator$class.foreach(Iterator.scala:727)
        at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)
        at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:431)
        at scala.tools.nsc.backend.icode.GenICode$ICodePhase.run(GenICode.scala:57)
        at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1583)
        at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1557)
        at scala.tools.nsc.Global$Run.compileSources(Global.scala:1553)
        at scala.tools.nsc.Global$Run.compile(Global.scala:1662)
        at xsbt.CachedCompiler0.run(CompilerInterface.scala:123)
        at xsbt.CachedCompiler0.run(CompilerInterface.scala:99)
        at xsbt.CompilerInterface.run(CompilerInterface.scala:27)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
        at java.lang.reflect.Method.invoke(Unknown Source)
        at sbt.compiler.AnalyzingCompiler.call(AnalyzingCompiler.scala:102)
        at sbt.compiler.AnalyzingCompiler.compile(AnalyzingCompiler.scala:48)
        at sbt.compiler.AnalyzingCompiler.compile(AnalyzingCompiler.scala:41)
        at sbt.compiler.AggressiveCompile$$anonfun$3$$anonfun$compileScala$1$1.apply$mcV$sp(AggressiveCompile.scala:98)
        at sbt.compiler.AggressiveCompile$$anonfun$3$$anonfun$compileScala$1$1.apply(AggressiveCompile.scala:98)
        at sbt.compiler.AggressiveCompile$$anonfun$3$$anonfun$compileScala$1$1.apply(AggressiveCompile.scala:98)
        at sbt.compiler.AggressiveCompile.sbt$compiler$AggressiveCompile$$timed(AggressiveCompile.scala:159)
        at sbt.compiler.AggressiveCompile$$anonfun$3.compileScala$1(AggressiveCompile.scala:97)
        at sbt.compiler.AggressiveCompile$$anonfun$3.apply(AggressiveCompile.scala:142)
        at sbt.compiler.AggressiveCompile$$anonfun$3.apply(AggressiveCompile.scala:86)
        at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:38)
        at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:36)
        at sbt.inc.Incremental$.cycle(Incremental.scala:73)
        at sbt.inc.Incremental$$anonfun$1.apply(Incremental.scala:33)
        at sbt.inc.Incremental$$anonfun$1.apply(Incremental.scala:32)
        at sbt.inc.Incremental$.manageClassfiles(Incremental.scala:41)
        at sbt.inc.Incremental$.compile(Incremental.scala:32)
        at sbt.inc.IncrementalCompile$.apply(Compile.scala:26)
        at sbt.compiler.AggressiveCompile.compile2(AggressiveCompile.scala:150)
        at sbt.compiler.AggressiveCompile.compile1(AggressiveCompile.scala:70)
        at sbt.compiler.AggressiveCompile.apply(AggressiveCompile.scala:45)
        at sbt.Compiler$.apply(Compiler.scala:70)
        at sbt.Defaults$.sbt$Defaults$$compileTaskImpl(Defaults.scala:722)
        at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:716)
        at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:716)
        at scala.Function1$$anonfun$compose$1.apply(Function1.scala:47)
        at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:42)
        at sbt.std.Transform$$anon$4.work(System.scala:64)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:237)
        at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
        at sbt.Execute.work(Execute.scala:244)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:237)
        at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
[error] (compile:compile) scala.reflect.internal.FatalError:
[error]      while compiling: C:\cygwin\home\jchab\daffodil\daffodil-pack\project\build.scala
[error]         during phase: icode
[error]      library version: version 2.10.2
[error]     compiler version: version 2.10.2
[error]   reconstructed args: -classpath C:\cygwin\home\jchab\daffodil\daffodil-pack\project\target\scala-2.10\sbt-0.13\classes;C:\Users\jchab\.ivy2\cache\org.apache.commons\commons-compress\jars\commons-compress-1.5.jar;C:\Users\jchab\.ivy2\cache\org.tukaani\xz\jars\xz-1.2.jar;C:\Users\jchab\.ivy2\cache\commons-io\commons-io\jars\commons-io-1.3.2.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\sbt\jars\sbt-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\main\jars\main-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\actions\jars\actions-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\classpath\jars\classpath-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\launcher-interface\jars\launcher-interface-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\interface\jars\interface-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\io\jars\io-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\control\jars\control-0.13.0.jar;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-compiler.jar;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-reflect.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\completion\jars\completion-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\collections\jars\collections-0.13.0.jar;C:\Users\jchab\.ivy2\cache\jline\jline\jars\jline-2.11.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\api\jars\api-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-integration\jars\compiler-integration-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\incremental-compiler\jars\incremental-compiler-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\logging\jars\logging-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\process\jars\process-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\relation\jars\relation-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compile\jars\compile-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\persist\jars\persist-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-tools.sbinary\sbinary_2.10\jars\sbinary_2.10-0.4.2.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\classfile\jars\classfile-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-ivy-integration\jars\compiler-ivy-integration-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\ivy\jars\ivy-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\cross\jars\cross-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.apache.ivy\ivy\jars\ivy-2.3.0-rc1.jar;C:\Users\jchab\.ivy2\cache\com.jcraft\jsch\jars\jsch-0.1.46.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\run\jars\run-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\task-system\jars\task-system-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\tasks\jars\tasks-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\tracking\jars\tracking-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\cache\jars\cache-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\testing\jars\testing-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\test-agent\jars\test-agent-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\test-interface\jars\test-interface-1.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\main-settings\jars\main-settings-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\apply-macro\jars\apply-macro-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\command\jars\command-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-interface\jars\compiler-interface-src-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\compiler-interface\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_8_2\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_9_2\jars\compiler-interface-bin-0.13.0.jar;C:\Users\jchab\.ivy2\cache\org.scala-sbt\precompiled-2_9_3\jars\compiler-interface-bin-0.13.0.jar -bootclasspath C:\Program Files (x86)\Java\jre7\lib\resources.jar;C:\Program Files (x86)\Java\jre7\lib\rt.jar;C:\Program Files (x86)\Java\jre7\lib\sunrsasign.jar;C:\Program Files (x86)\Java\jre7\lib\jsse.jar;C:\Program Files (x86)\Java\jre7\lib\jce.jar;C:\Program Files (x86)\Java\jre7\lib\charsets.jar;C:\Program Files (x86)\Java\jre7\lib\jfr.jar;C:\Program Files (x86)\Java\jre7\classes;C:\Users\jchab\.sbt\boot\scala-2.10.2\lib\scala-library.jar
[error]
[error]   last tree to typer: TypeTree(class Byte)
[error]               symbol: class Byte in package scala (flags: final abstract)
[error]    symbol definition: final abstract class Byte extends
[error]                  tpe: Byte
[error]        symbol owners: class Byte -> package scala
[error]       context owners: anonymous class anonfun$3 -> package <empty>
[error]
[error] == Enclosing template or block ==
[error]
[error] Template( // val <local $anonfun>: <notype>, tree.tpe=anonfun$3
[error]   ""scala.runtime.AbstractFunction1"", ""scala.Serializable"" // parents
[error]   ValDef(
[error]     private
[error]     ""_""
[error]     <tpt>
[error]     <empty>
[error]   )
[error]   // 3 statements
[error]   DefDef( // final def apply(v: String): sbt.ModuleID
[error]     <method> final <triedcooking>
[error]     ""apply""
[error]     []
[error]     // 1 parameter list
[error]     ValDef( // v: String
[error]       <param> <triedcooking>
[error]       ""v""
[error]       <tpt> // tree.tpe=String
[error]       <empty>
[error]     )
[error]     <tpt> // tree.tpe=sbt.ModuleID
[error]     Apply( // def %(revision: String): sbt.ModuleID in class GroupArtifactID, tree.tpe=sbt.ModuleID
[error]       sbt.`package`.toGroupID(""edu.illinois.ncsa"").%%(""daffodil-cli"").""$percent"" // def %(revision: String): sbt.ModuleID in class GroupArtifactID, tree.tpe=(revision: String)sbt.ModuleID
[error]       ""v"" // v: String, tree.tpe=String
[error]     )
[error]   )
[error]   DefDef( // final def apply(v1: Object): Object
[error]     <method> final <bridge>
[error]     ""apply""
[error]     []
[error]     // 1 parameter list
[error]     ValDef( // v1: Object
[error]       <param> <triedcooking>
[error]       ""v1""
[error]       <tpt> // tree.tpe=Object
[error]       <empty>
[error]     )
[error]     <tpt> // tree.tpe=Object
[error]     Apply( // final def apply(v: String): sbt.ModuleID, tree.tpe=sbt.ModuleID
[error]       DaffodilBuild$$anonfun$3.this.""apply"" // final def apply(v: String): sbt.ModuleID, tree.tpe=(v: String)sbt.ModuleID
[error]       Apply( // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=String
[error]         TypeApply( // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=()String
[error]           ""v1"".""$asInstanceOf"" // final def $asInstanceOf[T0 >: ? <: ?](): T0 in class Object, tree.tpe=[T0 >: ? <: ?]()T0
[error]           <tpt> // tree.tpe=String
[error]         )
[error]         Nil
[error]       )
[error]     )
[error]   )
[error]   DefDef( // def <init>(): anonfun$3
[error]     <method> <triedcooking>
[error]     ""<init>""
[error]     []
[error]     List(Nil)
[error]     <tpt> // tree.tpe=anonfun$3
[error]     Block( // tree.tpe=Unit
[error]       Apply( // def <init>(): scala.runtime.AbstractFunction1 in class AbstractFunction1, tree.tpe=scala.runtime.AbstractFunction1
[error]         DaffodilBuild$$anonfun$3.super.""<init>"" // def <init>(): scala.runtime.AbstractFunction1 in class AbstractFunction1, tree.tpe=()scala.runtime.AbstractFunction1
[error]         Nil
[error]       )
[error]       ()
[error]     )
[error]   )
[error] )
[error]
[error] == Expanded type of tree ==
[error]
[error] TypeRef(TypeSymbol(final abstract class Byte extends ))
[error]
[error] symbol value DescribeRegex does not exist in DaffodilBuild.<init>
Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore?{code}",[],2014-08-11 18:49:01+00:00,2014-08-13 17:57:29+00:00,2014-08-13 17:57:33+00:00,Closed,13114428,DAFFODIL-1009
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See the tests that start with the following:
""test_whiteSpaceDuringValid""
in the file:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml

According to the spec, with textNumberCheckPolicy set to ""lax"", all whitespace is treated as zero. Based on this, we would expect ""9 9"" to parse as ""909"". This most likely seems to be an issue with the spec rather than the implementation.",[],2014-08-11 17:17:06+00:00,2014-08-13 15:07:05+00:00,2014-08-13 15:07:05+00:00,Closed,13114427,DAFFODIL-1008
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Leftover Data Check not behaving as expected:

sequence of two elements, separated by a pipe ""|""
the first is a delimited-length string, and the second is an explicit length integer, length size 3 bytes.

[dfdl] (0.14.0)$ echo -n ""string|1234"" | ./daffodil-cli/target/start parse -s ./daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/cli_schema.dfdl.xsd -r leftover
<ex:leftover xmlns:ex=""http://example.com"">
  <ex:e3>string</ex:e3>
  <ex:e4>123</ex:e4>
</ex:leftover>

The parse seems to ignore the extra digit, and only parses 3 bytes.

However, if I change the input to ""string|123"", the parse complains about leftover data:

[dfdl] (0.14.0)$ echo -n ""string|123"" | ./daffodil-cli/target/start parse -s ./daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/cli_schema.dfdl.xsd -r leftover
[error] Left over data. 10 bytes available. Location: byte 10
UTF-8 text starting at byte 8 is: (23)
Data (hex) starting at byte 8 is: (0x3233)
<ex:leftover xmlns:ex=""http://example.com"">
  <ex:e3>string</ex:e3>
  <ex:e4>123</ex:e4>
</ex:leftover>

I'm in the process of writing up some TDML tests as well for this.",[],2014-08-08 19:49:04+00:00,2021-01-29 15:04:00+00:00,2021-01-29 15:04:18+00:00,Closed,13114426,DAFFODIL-1007
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, there is no way in the tdml runner to set tunables, such as ""requireBitOrderProperty"".",[],2014-08-07 19:20:35+00:00,2016-12-23 15:51:01+00:00,2017-07-27 12:05:56+00:00,Closed,13114425,DAFFODIL-1006
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"When the bitOrder is changed in the documentPart at a bit that is not on a byte boundary, there should be an error. This is erroring but with an Abort exception instead of a nice error message. 

edu.illinois.ncsa.daffodil.exceptions.Abort: bitOrder can only change on a byte boundary.
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:71)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:62)
[error] edu.illinois.ncsa.daffodil.tdml.Document$$anonfun$checkForBadBitOrderTransitions$1.apply(TDMLRunner.scala:953)

See test ""bitOrderChangeInvalid"" in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala and daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/BitOrderInvalid.tdml",[],2014-08-07 17:20:56+00:00,2018-01-25 22:30:54+00:00,2018-09-13 14:13:27+00:00,Closed,13114424,DAFFODIL-1005
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"If the expression provided to the eval command is not a valid expression and fails to compile, the debugger immediately exits. Instead, it should just print a message to the user about what was incorrect and bring the user back to the debug prompt.",[],2014-08-07 16:54:34+00:00,2015-01-30 20:20:00+00:00,2015-02-04 16:30:42+00:00,Closed,13114423,DAFFODIL-1004
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If you set a display for occursBounds, and step through, it is possible to get an exception if you're not currently in a part of the parse where the item is relevant (i think):

[dfdl] (0.14.0)$ echo ""0,1,2,3,4,5,6,7,8"" > input.txt
[dfdl] (0.14.0)$ ./daffodil-cli/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix input.txt
(debug) display info oc
(debug) s

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:337)
	at scala.collection.immutable.Nil$.head(List.scala:334)
	at scala.collection.mutable.Stack.top(Stack.scala:131)
	at edu.illinois.ncsa.daffodil.processors.MPState.occursBounds(PState.scala:91)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoOccursBounds$.apply(InteractiveDebugger.scala:1295)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$apply$8.apply(InteractiveDebugger.scala:1003)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$apply$8.apply(InteractiveDebugger.scala:1001)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:34)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.apply(InteractiveDebugger.scala:1001)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$.apply(InteractiveDebugger.scala:442)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.edu$illinois$ncsa$daffodil$debugger$InteractiveDebugger$$runCommand(InteractiveDebugger.scala:277)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1$$anonfun$apply$mcV$sp$3.apply(InteractiveDebugger.scala:170)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1$$anonfun$apply$mcV$sp$3.apply(InteractiveDebugger.scala:170)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:45)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply$mcV$sp(InteractiveDebugger.scala:170)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply(InteractiveDebugger.scala:153)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply(InteractiveDebugger.scala:153)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.after(InteractiveDebugger.scala:153)
	at edu.illinois.ncsa.daffodil.debugger.Debugger$.after(Debugger.scala:63)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:96)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:160)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:158)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:158)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:89)
	at edu.illinois.ncsa.daffodil.processors.ElementCombinatorBase$StatementElementParser.parse(ElementCombinator.scala:249)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:89)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.liftedTree1$1(Runtime.scala:225)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.<init>(Runtime.scala:224)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:221)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:220)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:220)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:179)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:678)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:676)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:91)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:675)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:1075)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)",[],2014-08-07 15:16:56+00:00,2015-01-21 13:34:43+00:00,2015-01-27 20:04:20+00:00,Closed,13114422,DAFFODIL-1003
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"The help output of the CLI lists occursBounds, which appears to be the new name for occursCount.

(debug) help info occursBounds
  display the current occurs bounds

The wiki still says occursBounds. I was going to just update the wiki and not bother with a ticket, but it looks like the shorthand (in the actual CLI) is still ""oc"", and has not been updated to ""ob"".

(debug) display info oc
(debug) display info ob
(debug) s
  occursBounds: 1024
  error: undefined info command: ob",[],2014-08-07 15:13:41+00:00,2015-01-21 13:34:51+00:00,2015-01-29 22:13:56+00:00,Closed,13114421,DAFFODIL-1002
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"In the document for bitOrder at [http://redmine.ogf.org/dmsf_files/13309], section 3.2 states that there are only 3 valid combinations of bitOrder and byteOrder and other combinations should produce a schema definition error. I created a test with byteOrder of 'bigEndian' and bitOrder of 'leastSignificantBitFirst' but the test parses without errors.

See test 'test_bigEndianLeastFirst' in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala and daffodil-cd test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/BitOrder.tdml",[],2014-08-06 20:51:19+00:00,2018-01-26 16:06:13+00:00,2018-01-30 14:07:39+00:00,Closed,13114420,DAFFODIL-1001
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"The change in DFDL-857 is not yet reflected in the wiki:

https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Command+Line+Interface",[],2014-08-06 17:21:13+00:00,2014-08-06 20:00:28+00:00,2014-08-07 17:43:42+00:00,Closed,13114419,DAFFODIL-1000
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"IBM's ISO8583 format currently uses ""textStandardExponentCharacter"" instead of ""textStandardExponentRep"", and also uses lengthKind ""prefixed"" which is not yet implemented in Daffodil.",['ForInteroperabilityTest'],2014-08-06 16:00:57+00:00,2018-12-13 13:50:44+00:00,2021-05-20 20:01:48+00:00,Closed,13114418,DAFFODIL-999
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Per section 24 of the spec, using regular expression constructs that are not common to both ICU and Java 7 in a DFDL regular expression should result in a schema definition error. Instead, I am seeing a ClassCastException.

java.lang.ClassCastException: edu.illinois.ncsa.daffodil.processors.InfosetDocument cannot be cast to edu.illinois.ncsa.daffodil.processors.InfosetElement
[error]     at edu.illinois.ncsa.daffodil.processors.PState.parentElement(PState.scala:222)
[error]     at edu.illinois.ncsa.daffodil.processors.PState.getContext(PState.scala:162)
[error]     at edu.illinois.ncsa.daffodil.processors.PState.SDE(PState.scala:193)

See tests in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/assertions/TestAssertionsDebug.scala",[],2014-07-30 14:43:29+00:00,2015-01-23 14:52:07+00:00,2015-01-29 20:00:14+00:00,Closed,13114417,DAFFODIL-998
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Function occursCount was removed and plain old xpath fn:count() is the replacement.,[],2014-07-28 17:37:25+00:00,2014-11-11 16:45:00+00:00,2014-11-12 20:20:55+00:00,Closed,13114416,DAFFODIL-997
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Currently, the maximum file size that parses successfully for CSV is 250MB. A 300MB file failed with the following error:

edu.illinois.ncsa.daffodil.exceptions.Abort: Usage error.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:71)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:62)
edu.illinois.ncsa.daffodil.processors.InStreamFixedWidthTextOnly.atCharPos(InStreamTextOnly.scala:107)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:71)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:62)
        at edu.illinois.ncsa.daffodil.processors.InStreamFixedWidthTextOnly.atCharPos(InStreamTextOnly.scala:107)",[],2014-07-25 19:32:48+00:00,2016-09-14 21:31:14+00:00,2017-07-27 14:23:12+00:00,Closed,13114415,DAFFODIL-996
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Currently, a 250MB pcap file will parse successfully with daffodil. The 500MB file errors out due to DFDL-688. New pcap files will need to be created to test between 250MB and 500MB for a better idea of the max file size that daffodil can parse.",[],2014-07-25 15:42:05+00:00,2016-09-14 21:32:30+00:00,2016-10-18 15:00:47+00:00,Closed,13114414,DAFFODIL-995
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"These two new properties will, unlike other DFDL properties, need to have a default value if they aren't defined.

bitOrder='mostSignificantBitFirst'
encodingErrorPolicy='replace'

should be the defaults. 

There should be a separate Daffodil-specific switch that turns on/off whether these properties get default values or not.  E.g., 

daffodil:features=""bitOrderRequired encodingErrorPolicyRequired""

The flag, if present, would disable the default.",[],2014-07-25 13:11:20+00:00,2014-07-31 16:50:24+00:00,2014-08-14 18:44:48+00:00,Closed,13114413,DAFFODIL-994
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"There are a handful of vars that do not appear to be thread safe. For example:

var matchedAtLeastOnce (needs to be moved into Register)
var nextState (Can this just be a val? Is anyone actually changing this?)
var EC/EEC (I think we need to generate a new DFA if the escape chars are dynamic. we cannot change them in an existing DFA, since some other parse may be using it).",[],2014-07-22 16:37:21+00:00,2014-07-23 12:37:25+00:00,2014-08-14 22:05:05+00:00,Closed,13114412,DAFFODIL-993
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-07-22 15:16:35+00:00,2014-08-04 19:06:49+00:00,2014-08-12 20:54:03+00:00,Closed,13114411,DAFFODIL-992
Task,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"When parsing an optional element, alignment that differs from following elements has been changed from a Schema Definition Error to a Schema Definition Warning. The spec needs to be updated to reflect this.

This is in section 12.1 Aligned Data:
""To avoid ambiguity when parsing, optional elements where the minimum number of occurrences is zero cannot have alignment properties different from the items that follow them. It is a schema definition error otherwise.""

The requirement ""DFDL-12-011R:alignment - avoid ambiguity when parsing"" should be updated as well.",[],2014-07-21 15:29:42+00:00,2018-08-15 17:12:15+00:00,2018-10-08 15:27:20+00:00,Closed,13114410,DAFFODIL-991
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,This function is quite slow and is a hot spot. Need to optimize it.,[],2014-07-21 12:27:10+00:00,2014-07-21 12:30:26+00:00,2014-07-31 22:44:24+00:00,Closed,13114409,DAFFODIL-990
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Calling setVariable more than once results in a Parse Error but the spec states that this should be a Schema Definition Error.

""Even if the errors are detected at processing time, the errors associated with write-after-read, and double-write are schema definition errors because they indicate the schema is not properly designed to use variables consistent with their single-assignment behavior.""

See test doubleSetErr in daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section07/variables/TestVariables.scala  for the current behavior.",[],2014-07-18 19:33:12+00:00,2014-12-08 17:55:52+00:00,2014-12-16 03:42:12+00:00,Closed,13114408,DAFFODIL-989
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, the IP addresses parsed from the pcap example schema are represented in hex. Each byte represents a segment of the IP. Modify the schema to convert and display this IP in a more human-readable format (e.g. 192.168.170.1)",[],2014-07-17 18:52:33+00:00,2014-07-18 15:06:22+00:00,2014-07-18 17:33:38+00:00,Closed,13114407,DAFFODIL-988
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently, evertime parseMethod is called it createes a new TextDelimitedParser based on the escapeSchema. This should all be turned into Static/Dyanmic factories (maybe even get rid of the parseMethod function) so that we only create these parsers when necessary.",[],2014-07-15 16:31:31+00:00,2014-07-31 16:39:43+00:00,2014-08-14 22:05:18+00:00,Closed,13114406,DAFFODIL-987
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is an OGF conference in September in London UK. IBM co-chair of DFDL workgroup, Steve Hanson, would like to demo and present Daffodil along side IBM's DFDL in a DFDL-related tutorial session.

We need to provide presentation materials, a working executable, and demo scripts.",[],2014-07-15 16:03:09+00:00,2014-11-11 14:39:44+00:00,2014-11-11 14:39:44+00:00,Closed,13114405,DAFFODIL-986
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When testing out the new validation of the pcap schema, I modified the icmp input file so the version was 1.4 instead of 2.4. The parse failed as expected, but this is the output:

[error] Parse Error: Assertion failed. PCAP version must be 2.4
Parsed value was: <PCAPHeader>...</PCAPHeader>
....

from Steve:
the assert is on the header, not the version major/minor elements. It
might not be a bad idea to show one depth deeper into the infoset for
the 'Parsed value was' thing. However, this would show the entire header
and be a bit too verbose, which wouldn't be too useful. To get around
that we could add a sequence, so the schema would be something like:

<PCAPHeader>
   ...
   <Version>
      <Major>1</Major>
      <Minor>4</Minor>
   </Version>
   ...
</PCAPHeader>

Then put the assert on the Version element. Changing the schema to
output that, plus going one layer deeper on the parsed value would give
something like:

Parsed value was: <Version><Major>1</Major><Minor>4</Minor></Version>",[],2014-06-30 22:28:20+00:00,2014-07-01 16:05:33+00:00,2014-07-01 19:03:25+00:00,Closed,13114404,DAFFODIL-985
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,,[],2014-06-30 18:16:59+00:00,2014-07-25 21:13:38+00:00,2014-07-30 16:32:36+00:00,Closed,13114403,DAFFODIL-984
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Recently a regression was found in a large schema test. (fogbugz 22091).

I have isolated the issue to an ordinary self-contained TDML test that is part of the regular daffodil source base.

The problem was that when we changed InStream and PState to copy less, all our standard regression tests passed, but a large schema test regressed 

Test test_backtrack1 recreates the problem. That is to say, if you back out the fix (line 258 of InStream.scala) that put back the old copying behavior, then this test will illustrate the failure. (With the fix, it doesn't fail.) THe point is, the fix is undesirable as it increases copying, so really we don't want this fix.",[],2014-06-27 23:51:43+00:00,2015-05-06 20:47:15+00:00,2015-05-12 15:47:27+00:00,Closed,13114402,DAFFODIL-983
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"I think something that we should probably start doing is getting rid of these anonymous parsers. The main reason is that it's hard to tell exactly what is used from the primitive. Ideally, everything a parser needs should be passed into to it (either as a paramter, or via a helper class). When the parser is anonymous, it makes it very difficult to tell what is needed from the primitive and what isn't, which makes figuring out serialization much harder.  For example, I assume charset, stringlengthInBitsFunc, and codepointWidth need to be serialized, but it's unclear if the parser needs those or if they are just intermediary values and they don't actually need to be serialized. I have to read the anonymous parse function to figure it out.",[],2014-06-26 19:44:47+00:00,2014-07-23 18:40:10+00:00,2014-08-05 18:36:25+00:00,Closed,13114401,DAFFODIL-982
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"CachedDynamic essentially wraps around compiledExpressoin, which already knows about if something is constant or not. The only thing is really gets us the the conversion to a more useful form (e.g. list of ints) and error checking. Modifying the CompiledExpression to take the conv function and then perform the duties of CachdDynamic is probably a better way to handle this.",[],2014-06-26 19:37:30+00:00,2016-05-17 12:03:44+00:00,2016-07-26 14:32:01+00:00,Closed,13114400,DAFFODIL-981
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When parsing with the PCAP schema in daffodil-examples, and parsing against a file that is not PCAP (e.g. docx) the magic number DFDL expression will set byteOrder to an invalid value. This causes a compile time SDE at runtime, which causes an invariant broken abort:

{code}
edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:123)
edu.illinois.ncsa.daffodil.ExecutionMode$.requireCompilerMode(ExecutionMode.scala:97)
edu.illinois.ncsa.daffodil.dsom.ImplementsThrowsSDE$class.SDE(SDE.scala:231)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:95)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:123)
	at edu.illinois.ncsa.daffodil.ExecutionMode$.requireCompilerMode(ExecutionMode.scala:97)
	at edu.illinois.ncsa.daffodil.dsom.ImplementsThrowsSDE$class.SDE(SDE.scala:231)
	at edu.illinois.ncsa.daffodil.dsom.SchemaComponent.SDE(SchemaComponent.scala:48)
	at edu.illinois.ncsa.daffodil.schema.annotation.props.Enum.stringToEnum(Properties.scala:124)
	at edu.illinois.ncsa.daffodil.schema.annotation.props.gen.ByteOrder$.apply(GeneratedCode.scala:2775)
	at edu.illinois.ncsa.daffodil.processors.RuntimeExplicitByteOrderMixin$class.getByteOrder(PrimitivesBinaryNumber.scala:83)
	at edu.illinois.ncsa.daffodil.processors.UnsignedKnownLengthRuntimeByteOrderBinaryNumber.getByteOrder(PrimitivesBinaryNumber.scala:179)
	at edu.illinois.ncsa.daffodil.processors.BinaryNumberBase$$anon$1$$anonfun$parse$1.apply(PrimitivesBinaryNumber.scala:143)
{code}",[],2014-06-23 12:43:41+00:00,2014-06-27 14:35:57+00:00,2014-06-30 18:00:02+00:00,Closed,13114399,DAFFODIL-980
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"hexBinary should be able to work at any alignment. 

The length is ok to restrict to a multiple of 8 bits, but alignment shouldn't be required.

This is needed for the mil-std-2045 header format's authentication blocks (each is 64 bits, aligned on any bit boundary)",[],2014-06-20 20:23:42+00:00,2017-04-05 13:07:25+00:00,2017-07-31 21:07:07+00:00,Closed,13114398,DAFFODIL-979
New Feature,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"When running a CLI test using the debugger from a cygwin terminal the debugger seems to hang after any input. So after starting the debugger you see the (debug) prompt, type a command, hit enter, and then nothing ever happens. Also the debugger displays a warning that it is being used in a non interactive console which is not the case. This is not a problem when running in a windows command prompt.

This can be tested by running the following command on Windows in a cygwin terminal:
daffodil-cli/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/input/input1.txt",[],2014-06-18 16:53:03+00:00,,2020-12-16 20:35:14+00:00,Open,13114397,DAFFODIL-978
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Worth it to try Saxon-EE (get eval copy) and see if it helps with XPath performance.,[],2014-06-16 19:48:29+00:00,2014-08-05 17:32:11+00:00,2014-08-05 18:28:35+00:00,Closed,13114396,DAFFODIL-977
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,It appears saxon traverses the entire tree to evaluate expressions. Need to have a workaround so this isn't required.,[],2014-06-10 12:37:17+00:00,2014-11-11 14:40:16+00:00,2014-11-26 17:37:33+00:00,Closed,13114395,DAFFODIL-976
Task,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"the largest file in the Performance test set is 100MB.
Please indicate the largest that can currently be processed.",[],2014-06-09 17:57:37+00:00,2014-07-25 19:42:56+00:00,2014-07-25 19:43:19+00:00,Closed,13114394,DAFFODIL-975
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In cases were delimiter/escaparChars/etc are static, we can create all the necessary DFAs at compile time. Right now, we create a new DFA for every parse, which is going to hurt performance. We should follow the pattern used in PrimitivesTextNumber.scala and use different static/dynamic factories that optimize dfa creation.",[],2014-06-09 12:26:49+00:00,2014-06-27 13:49:44+00:00,2014-07-11 17:56:08+00:00,Closed,13114393,DAFFODIL-974
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Breakpoints do not seem to be working now in the CLI. I went back to an earlier commit (94b2cc54412c2ebbfbaf3d4916f5591ce2f4b17c) and confirmed that they were working there. 

This can be tested by running the following:
$ daffodil-cli/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/input/input2.txt
(debug) break element.cell
(debug) continue

The debugger should show the breakpoint being hit by printing ""breakpoint 1: element.cell"".

Not sure if this is something test team should be fixing since it has to do with the CLI. If it is, feel free to assign back to me.",[],2014-06-05 20:12:28+00:00,2015-01-16 13:54:42+00:00,2015-01-22 22:38:54+00:00,Closed,13114392,DAFFODIL-973
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"To test:
{code}
$ LANG=en_US sbt test
{code}",[],2014-06-05 16:48:47+00:00,2017-04-05 13:04:24+00:00,2018-09-13 14:13:24+00:00,Closed,13114391,DAFFODIL-972
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-06-04 21:18:14+00:00,2014-06-11 14:57:10+00:00,2014-07-18 17:35:48+00:00,Closed,13114390,DAFFODIL-971
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-06-04 21:17:27+00:00,2014-08-05 16:27:02+00:00,2014-08-14 22:06:17+00:00,Closed,13114389,DAFFODIL-970
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-06-04 21:16:45+00:00,2014-07-01 14:35:43+00:00,2014-07-14 22:29:07+00:00,Closed,13114388,DAFFODIL-969
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Replace it with something that is thread safe and does not rely on a CharReader,[],2014-06-04 21:16:08+00:00,2015-07-24 13:44:59+00:00,2017-08-18 18:48:51+00:00,Closed,13114387,DAFFODIL-968
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-06-04 21:15:14+00:00,2014-06-11 16:46:17+00:00,2014-08-14 22:06:40+00:00,Closed,13114386,DAFFODIL-967
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Add tests to performance repo for each data type to demonstrate how long the parser takes to abort or recover from invalid data.,[],2014-06-03 19:25:52+00:00,,2020-12-16 20:33:20+00:00,Open,13114385,DAFFODIL-966
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"When implementing DFDL-951 there were two test regressions.  Both dealing with a 4-byte character.  It seems as though the getStringInChars method of the reader only reads/interprets the first 2 bytes instead of the 4.

In daffodil-test, section11/content_framing_properties/
TestContentFramingPropertiesDebug.scala
Look for the DFDL-951 regression comment.",[],2014-06-03 13:45:00+00:00,,2020-08-05 18:46:19+00:00,Open,13114384,DAFFODIL-965
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"To determine the raw parse speed of pcap, create a modified pcap schema with expressions for packet size replaced with a static size, with corresponding input data.",[],2014-06-02 18:29:34+00:00,2014-07-18 17:52:20+00:00,2014-07-21 19:33:10+00:00,Closed,13114383,DAFFODIL-964
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2014-06-02 15:09:57+00:00,2014-06-27 14:38:17+00:00,2014-06-30 18:16:09+00:00,Closed,13114382,DAFFODIL-963
Bug,[],gmcdonald,Gavin McDonald,daffodil-srobinson,Scott Robinson,Major,"README shows:
         Daffodil requires Scala 2.9.2

Seems like it should be Scala 2.10.4 or Scala 2.9.2 or higher

RELEASE shows:
    $ cd daffodil-pack/target/scala-2.9.2/pack",[],2014-05-30 11:24:11+00:00,2014-05-30 14:18:55+00:00,2014-05-30 18:56:40+00:00,Closed,13114381,DAFFODIL-962
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"There is still some discussion on what the expected output should be for the escape scheme test ""scenario3_11_postfix"". The test is currently failing and will need to have the expected output updated when a decision is made. 

The test is located in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeScenarios.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeDebug.scala",[],2014-05-27 19:25:18+00:00,,2018-09-13 14:04:28+00:00,Open,13114380,DAFFODIL-961
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,,[],2014-05-27 17:12:22+00:00,2014-11-06 20:44:02+00:00,2014-11-06 20:44:07+00:00,Closed,13114379,DAFFODIL-960
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"https://opensource.ncsa.illinois.edu/stash/scm/dfdl/daffodil.git
the repo contains COPYRIGHT file.  This information is:

Copyright (c) 2012-2013 Tresys Technology, LLC. All rights reserved.

this should be updated to include 2014",[],2014-05-22 19:36:58+00:00,2015-01-12 23:11:13+00:00,2015-01-13 22:13:01+00:00,Closed,13114378,DAFFODIL-959
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"There are still cases where the encodingErrorPolicy = ""replace"" but invalid characters are not being replaced with the special character. There is an example of the replacement working correctly in the test ""encodingErrorReplace"", but this is not consistently working.

See failing tests in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml

Working test located in:
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingProperties.scala",[],2014-05-21 19:11:17+00:00,2015-01-13 18:32:11+00:00,2015-01-14 20:51:29+00:00,Closed,13114377,DAFFODIL-958
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"- Add support for throughput and bytes/second statistics in performance runner
- Check to make sure that all data was parsed by checking isAtEnd",[],2014-05-20 16:05:38+00:00,,2018-12-13 19:39:03+00:00,Open,13114376,DAFFODIL-957
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Timeout of 10 seconds is not long enough for many performance tests with the multi threaded runner and the following exception is thrown.

java.util.concurrent.TimeoutException: Futures timed out after [10 seconds]",[],2014-05-20 15:37:47+00:00,2014-05-28 15:12:30+00:00,2014-05-28 19:22:55+00:00,Closed,13114375,DAFFODIL-956
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fixing bugs and adding additional features to the back-end has become very difficult. 

Rewriting and reorganizing the back end has become unavoidable.

This ticket is a general one for these kinds of back-end revisions. It will be closed once we have got the back-end restructured to the point where we can start to fix and enhance it more effectively.",[],2014-05-20 14:08:37+00:00,2015-01-16 01:10:16+00:00,2015-01-16 18:03:30+00:00,Closed,13114374,DAFFODIL-955
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We need to replace expectJ with something else. We've always had problems with it (e.g not working on windows well, random failures) but they haven't been too consistent. However, recent updates to Daffodil seem to be causes random CLI failures more often. Because of this, we have disabled the CLI portion of the automated build test. We need to replace expectJ with something else so that we can turn these tests back on.",[],2014-05-20 12:24:40+00:00,2014-08-22 18:56:07+00:00,2014-08-27 20:40:28+00:00,Closed,13114373,DAFFODIL-954
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"sbt gen-managed does not work correctly.  It expects sbt gen-mangaged.

Also, eclipse appears to state daffodil-lib is missing required source folder: 'resource_managed'.",[],2014-05-19 16:31:56+00:00,2014-05-19 18:27:24+00:00,2014-05-27 20:52:57+00:00,Closed,13114372,DAFFODIL-953
Task,[],gmcdonald,Gavin McDonald,daffodil-npatrick,Norman Patrick,Major,"After fixing DFDL-939 and DFDL-714, there are some tests that are failing to invalid schemas.  In this patch we are elevating Xerces schema validation warnings to Daffodil Schema Definition Errors.  This is causing theses tests to fail because, even though the are not using the invalid portions of the schema file, Xerces is throwing an error when it loads the files.

Affected tests:

daffodil-cli
test_2358_CLI_Parsing_SimpleParse_stdOut_extVars
test_1585_CLI_Parsing_MultifileSchema_methodImportSameDir
test_1971_CLI_Parsing_traceMode01
test_1972_CLI_Parsing_traceMode02

daffodil-lib
test_combinations_03
test_combinations_04
test_namespace_scope_01
test_namespace_scope_02
test_namespace_ultra_uniqueness_01 test_namespace_ultra_uniqueness_02
test_namespace_ultra_uniqueness_03
test_namespace_ultra_uniqueness_04",[],2014-05-16 14:24:38+00:00,2015-05-01 19:44:34+00:00,2015-05-11 16:23:30+00:00,Closed,13114371,DAFFODIL-952
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When the length kind is a constant value, we can do much better than parser combinators.",[],2014-05-15 14:36:48+00:00,2014-06-03 13:54:36+00:00,2014-06-12 18:05:19+00:00,Closed,13114370,DAFFODIL-951
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Scala parser combinators are not thread safe, and so we have a lot of synchronized code surrounding them, which cause lots of performance issues. Remove as much of the parser cominbator code as possible (most of it should be dead code) to make it easier to figure out where synchronization is occurring, and whether or not it's necessary.",[],2014-05-14 17:33:37+00:00,2014-05-15 15:53:41+00:00,2014-06-02 16:02:52+00:00,Closed,13114369,DAFFODIL-950
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,We need to remove all the {code}synchronize { ... }{code} blocks. These are causing locks that greatly decrease performance.,[],2014-05-14 17:28:29+00:00,2014-06-16 17:16:48+00:00,2014-06-28 21:05:23+00:00,Closed,13114368,DAFFODIL-949
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"It would be nice to have our continuous integration testing also do some degree of a performance ""smoke test"". Ideally this would check against the performance of the previous code base. If the new check-in has a drastic impact on performance, there would be a message sent to the team, similar to the regression test failure messages that are currently sent.",[],2014-05-06 19:53:54+00:00,2014-11-11 16:33:43+00:00,2014-11-11 16:33:48+00:00,Closed,13114367,DAFFODIL-948
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"If a user specifies something like dfdl:separator="" "", they probably intended to have dfdl:separator=""%SP;"". However, since dfdl:separator is a space separated list of separators, this is treated as if there is no separator. We should warn the user when they have spaces at the beginning or end of for dfdl properties that are space separated lists.",[],2014-05-05 17:32:45+00:00,2018-11-12 21:10:39+00:00,2021-05-20 20:01:29+00:00,Closed,13114366,DAFFODIL-947
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Non thread-safe code is causing the following exception when running the csv examples with the multi threaded runner:

org.jdom2.IllegalAddException: The Content already has an existing parent ""ex:record""
	at org.jdom2.ContentList.checkPreConditions(ContentList.java:211)
	at org.jdom2.ContentList.add(ContentList.java:244)
	at org.jdom2.ContentList.add(ContentList.java:79)
	at java.util.AbstractList.add(AbstractList.java:108)
	at org.jdom2.Element.addContent(Element.java:917)
	at edu.illinois.ncsa.daffodil.processors.InfosetElement.addElement(Infoset.scala:104)
	at edu.illinois.ncsa.daffodil.processors.OccursCountExpression$$anon$5$$anonfun$parse$2.apply(RepParsers.scala:284)
	at edu.illinois.ncsa.daffodil.processors.OccursCountExpression$$anon$5$$anonfun$parse$2.apply(RepParsers.scala:277)",[],2014-05-02 13:32:15+00:00,2014-05-02 15:14:11+00:00,2014-05-20 15:40:35+00:00,Closed,13114365,DAFFODIL-946
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"When running the command below, a segfault is encountered.

./daffodil-cli/target/start performance -t 5 -N 20 -s ~/Documents/DFASegfaultFiles/csvMixedNarrow.dfdl.xsd  ~/Documents/DFASegfaultFiles/peopleData_1k.txt 
<function0>: caught java.lang.UnsupportedOperationException: empty.maxBy
java.lang.UnsupportedOperationException: empty.maxBy
	at scala.collection.TraversableOnce$class.maxBy(TraversableOnce.scala:208)
	at scala.collection.mutable.MutableList.maxBy(MutableList.scala:30)
	at edu.illinois.ncsa.daffodil.processors.dfa.TextDelimitedParserBase.longestMatch(TextDelimitedParser.scala:42)
	at edu.illinois.ncsa.daffodil.processors.dfa.TextDelimitedParserBase.parse(TextDelimitedParser.scala:112)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited.parseMethod(PrimitivesLengthKind.scala:622)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4$$anonfun$parse$4.apply(PrimitivesLengthKind.scala:721)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4$$anonfun$parse$4.apply(PrimitivesLengthKind.scala:687)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:244)
	at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4.parse(PrimitivesLengthKind.scala:687)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.RepUnboundedPrim$$anon$4.parseAllRepeats(RepParsers.scala:233)
	at edu.illinois.ncsa.daffodil.processors.RepPrim$RepParser.parse(RepParsers.scala:69)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.liftedTree1$1(Runtime.scala:222)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.<init>(Runtime.scala:221)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:218)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:217)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:217)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:177)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply$mcV$sp(Main.scala:764)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply(Main.scala:762)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply(Main.scala:762)
	at scala.actors.Futures$$anonfun$1.apply(Future.scala:127)
	at scala.actors.Futures$$anonfun$1.apply(Future.scala:127)
	at scala.actors.FutureActor$$anonfun$act$1.apply(Future.scala:93)
	at scala.actors.FutureActor$$anonfun$act$1.apply(Future.scala:93)
	at scala.actors.Reactor$class.seq(Reactor.scala:280)
	at scala.actors.FutureActor.seq(Future.scala:55)
	at scala.actors.Reactor$$anon$3.andThen(Reactor.scala:258)
	at scala.actors.FutureActor.act(Future.scala:94)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.ReactorTask.run(ReactorTask.scala:33)
	at scala.concurrent.forkjoin.ForkJoinPool$AdaptedRunnable.exec(ForkJoinPool.java:611)
	at scala.concurrent.forkjoin.ForkJoinTask.quietlyExec(ForkJoinTask.java:422)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.mainLoop(ForkJoinWorkerThread.java:340)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:325)
<function0>: caught java.lang.UnsupportedOperationException: empty.maxBy
java.lang.UnsupportedOperationException: empty.maxBy
	at scala.collection.TraversableOnce$class.maxBy(TraversableOnce.scala:208)
	at scala.collection.mutable.MutableList.maxBy(MutableList.scala:30)
	at edu.illinois.ncsa.daffodil.processors.dfa.TextDelimitedParserBase.longestMatch(TextDelimitedParser.scala:42)
	at edu.illinois.ncsa.daffodil.processors.dfa.TextDelimitedParserBase.parse(TextDelimitedParser.scala:112)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited.parseMethod(PrimitivesLengthKind.scala:622)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4$$anonfun$parse$4.apply(PrimitivesLengthKind.scala:721)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4$$anonfun$parse$4.apply(PrimitivesLengthKind.scala:687)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:244)
	at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
	at edu.illinois.ncsa.daffodil.processors.StringDelimited$$anon$4.parse(PrimitivesLengthKind.scala:687)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.StmtEval$StatementElementParser.parse(StatementParsers.scala:89)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.RepUnboundedPrim$$anon$4.parseAllRepeats(RepParsers.scala:233)
	at edu.illinois.ncsa.daffodil.processors.RepPrim$RepParser.parse(RepParsers.scala:69)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.liftedTree1$1(Runtime.scala:222)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5$$anon$1.<init>(Runtime.scala:221)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:218)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$5.apply(Runtime.scala:217)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:217)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:177)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply$mcV$sp(Main.scala:764)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply(Main.scala:762)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$125$$anonfun$126$$anonfun$2.apply(Main.scala:762)
	at scala.actors.Futures$$anonfun$1.apply(Future.scala:127)
	at scala.actors.Futures$$anonfun$1.apply(Future.scala:127)
	at scala.actors.FutureActor$$anonfun$act$1.apply(Future.scala:93)
	at scala.actors.FutureActor$$anonfun$act$1.apply(Future.scala:93)
	at scala.actors.Reactor$class.seq(Reactor.scala:280)
	at scala.actors.FutureActor.seq(Future.scala:55)
	at scala.actors.Reactor$$anon$3.andThen(Reactor.scala:258)
	at scala.actors.FutureActor.act(Future.scala:94)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.ReactorTask.run(ReactorTask.scala:33)
	at scala.concurrent.forkjoin.ForkJoinPool$AdaptedRunnable.exec(ForkJoinPool.java:611)
	at scala.concurrent.forkjoin.ForkJoinTask.quietlyExec(ForkJoinTask.java:422)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.mainLoop(ForkJoinWorkerThread.java:340)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:325)",[],2014-05-02 13:30:03+00:00,2014-05-05 19:42:16+00:00,2014-05-13 20:06:20+00:00,Closed,13114364,DAFFODIL-945
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This might be the same or related to bug DFDL-917. 

But I have a very specific tiny test case that illustrates it. (scala-debug - test_delimsCheck)",[],2014-04-30 18:32:53+00:00,2014-04-30 19:03:46+00:00,2014-04-30 19:03:46+00:00,Closed,13114363,DAFFODIL-944
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"There is a note in the code pertaining to this. Instead of setting the threadpool size via the system property, we want to create a new ExecutionContext and specify the threadpool size that way. However, ExecutionContext is not available until scala 2.10.",[],2014-04-29 20:05:49+00:00,2014-05-16 18:46:43+00:00,2014-05-27 17:11:14+00:00,Closed,13114362,DAFFODIL-943
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We have a lot of patterns to dealing with static vs dynamic properties. We need to pick one and update all the existing parsers to use that pattern so we can have a consistent code base, as well as no confusing handling of dynamic properties. PrmitivesTextNumber was the most recent pattern for handling this. See if that works well for other parsers.",[],2014-04-25 13:46:10+00:00,2020-01-13 14:16:59+00:00,2020-04-13 18:20:49+00:00,Closed,13114361,DAFFODIL-942
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"When fixing DFDL-940, I came across some issues running some tests.  AY and AX in TresysTests.scala (located in daffodil-test-ibm1).

It would appear to be due to the Utility.trim method used in the TDMLRunner to trim the expected and actual parse results.  Whitespace (specifically CR LFs) would go missing and cause tests to fail.",[],2014-04-25 13:20:02+00:00,2015-02-04 17:20:51+00:00,2015-02-05 21:09:09+00:00,Closed,13114360,DAFFODIL-941
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,The parser combinators are extremely slow and are noticeably affecting performance. We need to replace those with a state machine tailored specifically for DFDL delimiter scanning (including escape characters). Should be much faster and more memory efficient.,[],2014-04-23 15:32:31+00:00,2014-04-28 16:29:58+00:00,2014-05-16 16:38:31+00:00,Closed,13114359,DAFFODIL-940
Bug,[],gmcdonald,Gavin McDonald,daffodil-npatrick,Norman Patrick,Major,"Running the CLI generates an error similar to the following:

[error] Schema Definition Warning: DFDL Schema Validation warned due to the following:  DFDL Schema Validation Warning due to org.xml.sax.SAXParseException; systemId: file:/C:/Users/npatrick/Documents/Projects/test-daffodil/global_element.dfdl.xsd; lineNumber: 18; columnNumber: 47; schema_reference.4: Failed to read schema document './complex_types.dfdl.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>. File: C:\Users\npatrick\Documents\Projects\test-daffodil\global_element.dfdl.xsd
Schema context: SchemaSet. Location in global_element.dfdl.xsd.

There does not seem to be any legitimate error because the test data is parsed correctly.  I was able to reproduce this error in spin 12, but not spin 11.",[],2014-04-21 19:19:37+00:00,2014-05-15 16:40:09+00:00,2014-08-06 17:53:57+00:00,Closed,13114358,DAFFODIL-939
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"added test_quote_test1.

You can't do obvious things in TDML Like
<document>&quot;</document>
<infoset><dfdlInfoset><foo>&quot;</foo></dfdlInfoset></infoset>

It fails the comparison because it thinks the expected infoset is literally the string ""&amp;quot;"", not replacing the &amp;quot; by the "" character.",[],2014-04-10 23:22:56+00:00,2014-05-01 17:22:34+00:00,2021-05-18 14:38:36+00:00,Closed,13114357,DAFFODIL-938
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We have these Fake DFDL schema objects (defined in dsom.Types.scala), and they are risky. There is a fake SchemaSet for example.

Now the way OOLAG works is that it accumulates diagnostic objects on the ""root"" component of the schema components. That root could be this Fake SchemaSet for example, and then error messages would accumulate there, and (1) be lost (2) never be reclaimed. The Fakes is a scala object, so a global mutable variable.

Change so that using say, Fakes.fakeSD, creates a new SchemaDocument object each time. I.e., make it a factory for new fake schema components, not a singleton set of fixed shared ones.",[],2014-04-08 22:41:42+00:00,2014-04-10 21:02:01+00:00,2014-08-05 17:53:16+00:00,Closed,13114356,DAFFODIL-937
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"OOLAG library's requiredEvaluations feature is baroque and needs revising.

There are much easier ways to do this than the lazy ZZ list stuff and army of optional arguments that are there now. 

Cleaning this up helps with making the objects on the heap easier to understand (particularly important when looking for memory leaks with a memory analyzer tool like MAT or jvisualvm.",[],2014-04-08 22:37:22+00:00,2014-04-10 21:04:07+00:00,2014-05-22 18:27:23+00:00,Closed,13114355,DAFFODIL-936
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"0.13.0 has encodingErrorPolicy=""replace"". (DFDL-893). This is to implement the much more challenging precise-error feature. This creates performance challenges because one cannot buffer-ahead character conversion from bytes in the obvious ways that say, java.io.BufferedReader does.",[],2014-04-08 22:25:12+00:00,,2020-12-29 17:34:32+00:00,Open,13114354,DAFFODIL-935
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Currently Daffodil requires that all incoming data fit in one java.nio.ByteBuffer. A separate issue (DFDL-881) is about allowing > 4GB files, but data sizes would still be limited by available address space.

A streaming approach has great advantages. It requires that the input can be streamed in (e.g., from a java.io.InputStream), but also requires that the DFDL Infoset can be streamed out. (Think SAX parser 'events' coming out).  This is complicated by the DFDL notion of points of uncertainty. E.g., until a choice branch has been resolved none of the elements on any branch can be emitted since ""backtracking"" may invalidate them.",[],2014-04-08 22:20:51+00:00,2020-09-04 17:28:35+00:00,2020-09-24 20:15:59+00:00,Closed,13114353,DAFFODIL-934
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Every parser action copies a lot of state objects right now. These data structures could be redesigned so that most actions copy minimally.  This is still in keeping with the functional-programming style of I/O where input operations don't modify an I/O layer, rather they produce values and a new State. 

Currently the backend parsers consume and produce a PState. This object has many slots so copying it isn't cheap. One of the slots is an InStream object, also has to be copied, and depending on some things, a DFDLReader, may be there too.

All of these should be squished together into one class (called PState), which has a tree-like shape. The basic PState object should have two slots: bitPosition, and ""Everything Else"" so that just advancing the position causes minimal work. 

Also suspect: the stacks of array pos, child pos and group pos should go away and become Dynamic Variables. (This may apply to other things as well). 

The new PState should support the union of the operations of DFDLCharReader and InStream, plus should support getStringInBytes and getStringInCharacters methods so that primitives don't have to do their own charset decoding.",[],2014-04-08 21:52:53+00:00,2015-07-24 13:38:40+00:00,2015-12-16 16:01:48+00:00,Closed,13114352,DAFFODIL-933
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Create a single tdml file that contains the schema(s) and tests necessary to test the following escape scheme scenarios:

EC = escapeCharacter
EEC = escapeEscapeCharacter
PTERM = delimiter

Each line is a separate scenario. The first block is the input and the second is the expected output.

> (EC=EEC)!=PTERM[1], EC=EEC=/ PTERM=;
> foo;bar <x>foo</x><y>bar</y>
> foo/bar <x>foobar</x>
> foo/;bar <x>foo;bar</x>
> foo//;bar <x>foo/;bar</x>
> foo///bar <x>foo//bar</x> (Tricky!)
> foo///;bar <x>foo/;bar</x>
> foo; <x>foo</x> if PTERM is terminator or postfix sep. Parse Error otherwise.
> foo/; <x>foo;</x> Parse error if PTERM is required terminating markup.
> foo/;; <x>foo;</x> if PTERM is terminator or postfix sep. Parse Error otherwise
> foo//; <x>foo/</x> if PTERM is terminator or postfix sep. Parse Error otherwise
> foo///; <x>foo/;</x> (Tricky) if PTERM is infix separator or not-required terminator. Parse Error otherwise.
> foo/ <x>foo</x> (Tricky) if PTERM is infix separator or not-required terminator. Parse Error otherwise.
> foo/// <x>foo/</x>  if PTERM is infix separator or not-required terminator.
> 
> 
> (EEC = PTERM[1] != EC) EC=""/"" EEC=""$"" PTERM=""$;""
> 
> foo$;bar <x>foo</x><y>bar</y>
> foo/$;bar <x>foo</x><y>bar</x>
> foo$/$;bar <x>foo/</x><y>bar</y>
> foo$$;bar <x>foo$</x><y>bar</y>
> foo//$;bar <x>foo</x><y>bar</y> (Tricky)
> foo//////////bar <x>foobar</x> (all lonely ECs)
> foo$$$$$bar <x>foo$$$$$bar</x> (all lonely EECs)
> foo$//;bar <x>foo/;bar</x>
> foo$/$$;bar <x>foo/$</x><y>bar</y>
> foo$; <x>foo</x> parse error if PTERM is infix sep
> foo/$; <x>foo$;</x> parse error if PTERM is required terminator. 
> foo$/$; <x>foo/</x> if PTERM is terminator or postfix sep. PE otherwise.
> foo$$/$; <x>foo$/</x> if PTERM is terminator or postfix sep. PE otherwise.
> foo$$$//$; <x>foo$$/$;</x> parse error if PTERM is required terminator
> 
> 
> 
> (EC = PTERM[1]) != EEC  EC=/ EEC=$ TERM=/;
> 
> foo/;bar <x>foo</x><y>bar</y>
> foo$/;bar <x>foo/;bar</y>
> foo$$/;bar <x>foo$</x><y>bar</y>
> foo//; bar <x>foo/;bar</x>
> foo///;bar <x>foo/</x><y>bar</y>
> foo$//;bar <x>foo/</x><y>bar</y>
> foo$///;bar <x>foo//;bar</x> (Tricky!)
> foo$////;bar <x>foo//;bar</x> (Tricky!)
> foo$///////;bar <x>foo//;bar</x> (Tricky!)
> foo/; <x>foo</x> if PTERM is terminator or postfix sep. PE otherwise.
> foo$/; <x>foo/;</x>  if PTERM is terminator or postfix sep. PE otherwise.
> foo$$/; <x>foo$/;</x> if PTERM is not required. PE otherwise
> foo$//; <x>foo/</x> if PTERM is terminator or postfix sep. PE otherwise
> foo$/$/$/; <x>foo///;</x>if PTERM is not required. PE otherwise
> 
> EC=EEC=PTERM[1] EC=/ PTERM=/; 
> 
> foo/;bar <x>foo<x><y>bar</y>
> foo//;bar <x>foo/;bar</y>
> foo///;bar <x>foo/</x><y>bar</y>
> foo////bar <x>foo//bar</x>
> foo////;bar <x>foo//;bar<x> (Tricky)
> foo/////;bar <x>foo//<x><y>bar</y> (Tricky)
> foo <x>foo</x> if PTERM is not required. PE otherwise
> foo/; <x>foo</x> if PTERM is terminator or postfix sep. PE otherwise.
> foo//; <x>foo/;</x> if PTERM is not required. PE otherwise
> foo/// <x>foo/</x> if PTERM is not required. PE otherwise
> foo///; <x>foo</x>  if PTERM is terminator or postfix sep. PE otherwise.
> foo////; <x>foo//;</x> if PTERM is not required. PE otherwise",[],2014-03-31 18:16:48+00:00,2014-05-07 21:44:27+00:00,2014-05-28 16:20:41+00:00,Closed,13114351,DAFFODIL-932
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Given a utf-8 string with a single-byte non-decodable byte in the middle.

When we parse this the non-decodable byte will contribute a unicode replacement character to the string. 0xFFFD is the character code.

If you then take this string and call getBytes(""utf-8"") on it, you will not get the right length. You will get 3 instead of 1 for the error because 0xFFFD takes 3 bytes in utf-8.

The way we are measuring how far to move ahead in bytes right now, when we have a variable-width encoding like UTF-8, is to do exactly the above, call getBytes to find how long the string was.

This will cause us to move too far ahead into the data.

Test case to illustrate is TBD, but isn't too hard to put together. Just put a string per above with length coming from an expression. Put the string between two binary int fields. The binary int field after will not be parsed properly. because we will advance too far on the string.",[],2014-03-29 01:11:55+00:00,2018-07-13 16:53:14+00:00,2018-09-24 12:14:38+00:00,Closed,13114350,DAFFODIL-931
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"As part of fixing performance for text I broke mandatory text alignment.

See test  test_alignmentStringBitSkip, test_alignmentTerminatorBitSkip

Also related bug DFDL-929.",[],2014-03-28 14:34:01+00:00,2016-05-03 18:14:55+00:00,2016-09-07 22:29:46+00:00,Closed,13114349,DAFFODIL-930
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This is an obscure corner case.

A binary field, that is, say 5 bits wide can have a terminator. The terminator is text expressed in the current encoding, and that encoding usually has a mandatory alignment of 8-bits. Hence, we need to skip 3 bits before we start that terminator's first character. 

Right now, nothing will skip those bits, and I'm not sure how it will fall off the rails exactly. 

I would be happy to simply issue an SDE in this case and say that bit fields cannot have delimiters. I don't think we're doing anybody a favor by making this work. They are probably making an error if they are mixing bits and text in this ad-hoc way. 

Note that if the next element or model group begins after the 5 bit field, then we will align as that element/model group requires. It's only between the bit-field (the SimpleContent region in the DFDL Spec) and its own terminating markup (terminator, separators or terminators of enclosing things) where we don't currently have anything checking this alignment.",[],2014-03-26 20:57:38+00:00,2016-05-03 18:13:14+00:00,2016-09-07 22:29:11+00:00,Closed,13114348,DAFFODIL-929
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Some things we can validate:
- version (major/minor) number is 2.4
- thiszone is a valid timezone offset in seconds (e.g. 5 isn't valid) (in practice it's always zero)
- sigfigs (in practice, this is always zero)
- network must be a valid [network type|http://www.tcpdump.org/linktypes.html]
- timestamp seconds should be a reasonable time (e.g. not in the future, not really old)
- timestamp microseconds should be less than 1million
- incl_len must be <= snaplen
- orig_len must be >= incl_len, must be the same as incl_len if less than snaplen

Adding these validations should give more confidence that what we are parsing is actually a pcap file, and not just random binary data that happens parse correctly.",[],2014-03-19 16:43:47+00:00,2014-06-27 14:42:51+00:00,2014-07-01 16:34:58+00:00,Closed,13114347,DAFFODIL-928
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Add support for runtime calendarLanguage,[],2014-03-19 13:02:48+00:00,2016-03-18 15:13:14+00:00,2016-04-06 22:40:23+00:00,Closed,13114346,DAFFODIL-927
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Received a ClassCastException in a test with a sequence of elements with a complexType. 

See test sequenceWithComplexType in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/SequenceGroup.tdml
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/sequenceWithComplexType.dfdl.xsd
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroupsDebug.scala

Error:
{code}
edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV Error[element.e1::LocalComplexTypeDef::sequence::element.e2@@hasKnownRequiredSyntax has no value due to java.lang.ClassCastException: edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef cannot be cast to edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase.]
[error] Test edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroupsDebug.test_sequenceWithComplexType failed: edu.illinois.ncsa.daffodil.exceptions.Abort: java.lang.ClassCastException: edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef cannot be cast to edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:543)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:626)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:265)
{code}",[],2014-03-14 19:13:41+00:00,2016-09-14 22:58:22+00:00,2016-09-23 22:08:51+00:00,Closed,13114345,DAFFODIL-926
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This exception was first seen in DFDL-924. Please see that ticket for associated files
{code}
[dfdl] (multi-thread_perf_cli)$ ./daffodil-cli/target/start performance -s ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd -N 5 ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/test.txt 
--------------------
--------------------
5: byte array: [B@4f983433
5: newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

--------------------
--------------------
4: byte array: [B@7cef859d
--------------------
--------------------
2: byte array: [B@7aa49be5
2: newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

--------------------
3: byte array: [B@21a954f8
3: newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

--------------------
4: newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

--------------------
1: byte array: [B@5d474abb
1: newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

--------------------
[error] Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: State not bound for use by DFDL expression functions.
Schema context: element.website Location line 54 column 42 in file:/home/jchab/NGF/dfdl/../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd(no data location)
[error] Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: State not bound for use by DFDL expression functions.
Schema context: element.website Location line 54 column 42 in file:/home/jchab/NGF/dfdl/../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd(no data location)
<ex:file xmlns:ex=""http://www.example.org/example1/"">
  <ex:record>
    <ex:last>Krakens</ex:last>
    <ex:ssn>361-79-9964</ex:ssn>
    <ex:email>w.Krakens9597@gmail.com</ex:email>
    <ex:website>http://www.Krakens.com/</ex:website>
    <ex:DOB>1944-07-20+00:00</ex:DOB>
    <ex:weight>301</ex:weight>
    <ex:eyeColor>blue</ex:eyeColor>
  </ex:record>
</ex:file>
<ex:file xmlns:ex=""http://www.example.org/example1/"">
  <ex:record>
    <ex:last>Krakens</ex:last>
    <ex:ssn>361-79-9964</ex:ssn>
    <ex:email>w.Krakens9597@gmail.com</ex:email>
    <ex:website>http://www.Krakens.com/</ex:website>
    <ex:DOB>1944-07-20+00:00</ex:DOB>
    <ex:weight>301</ex:weight>
    <ex:eyeColor>blue</ex:eyeColor>
  </ex:record>
</ex:file>
<ex:file xmlns:ex=""http://www.example.org/example1/"">
  <ex:record>
    <ex:last>Krakens</ex:last>
    <ex:ssn>361-79-9964</ex:ssn>
    <ex:email>w.Krakens9597@gmail.com</ex:email>
    <ex:website>http://www.Krakens.com/</ex:website>
    <ex:DOB>1944-07-20+00:00</ex:DOB>
    <ex:weight>301</ex:weight>
    <ex:eyeColor>blue</ex:eyeColor>
  </ex:record>
</ex:file>
{code}",[],2014-03-03 21:07:19+00:00,2014-03-05 20:06:40+00:00,2014-03-05 20:33:49+00:00,Closed,13114344,DAFFODIL-925
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I'm seeing a very strange error when testing my multi-threaded runner changes. When trying to parse a single-line csv file twice, once in each thread, 5 times out of 10 it works. I get two full xml result trees and no errors. However, 4 of the other times, I get this error (for both threads). Note that this output prints out the thread number in each thread, then the input data (byte array) that is being used for the parse:
{code}
[dfdl] (0.13.0)$ ./daffodil-cli/target/start performance -s ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/test.txt
inside: 2
inside: 1
newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

[error] Parse Error: Convert to Integer (for xs:int): Out of Range: '301' converted to 330.01, is not in range for the type.
Schema context: element.weight Location line 69 column 56 in file:/home/jchab/NGF/dfdl/../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd
Data location was preceding byte 82
UTF-8 text starting at byte 80 is: (01,blue
)
Data (hex) starting at byte 80 is: (0x30312C626C75650A)
[error] Parse Error: Convert to Integer (for xs:int): Out of Range: '301' converted to 330.01, is not in range for the type.
Schema context: element.weight Location line 69 column 56 in file:/home/jchab/NGF/dfdl/../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd
Data location was preceding byte 82
UTF-8 text starting at byte 80 is: (01,blue
)
Data (hex) starting at byte 80 is: (0x30312C626C75650A)
{code}
the other 1 time out of 10, I saw this:
{code}
[dfdl] (0.13.0)$ ./daffodil-cli/target/start performance -s ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/test.txt
inside: 2
newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

inside: 1
newArr: Krakens,361-79-9964,w.Krakens9597@gmail.com,http://www.Krakens.com/,1944-07-20,301,blue

[error] Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: State not bound for use by DFDL expression functions.
Schema context: element.website Location line 54 column 42 in file:/home/jchab/NGF/dfdl/../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd(no data location)
<ex:file xmlns:ex=""http://www.example.org/example1/"">
  <ex:record>
    <ex:last>Krakens</ex:last>
    <ex:ssn>361-79-9964</ex:ssn>
    <ex:email>w.Krakens9597@gmail.com</ex:email>
    <ex:website>http://www.Krakens.com/</ex:website>
    <ex:DOB>1944-07-20+00:00</ex:DOB>
    <ex:weight>301</ex:weight>
    <ex:eyeColor>blue</ex:eyeColor>
  </ex:record>
</ex:file>
{code}
where one thread parsed the data successfully but the other erred out.

I've included the schema, input file, and CLI patch that I have been using.",[],2014-03-03 20:04:42+00:00,2014-03-03 20:54:42+00:00,2014-03-03 21:08:05+00:00,Closed,13114343,DAFFODIL-924
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Need documentation in both Java and Scala. Also, be sure to mention things like parallelism and how to parse multiple files using a single DataProcessor.",[],2014-01-29 13:43:34+00:00,2015-01-28 15:07:58+00:00,2015-02-04 20:44:43+00:00,Closed,13114342,DAFFODIL-923
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Right now, if you have an invalid regular expression for lengthPattern, like so
{code}dfdl:lengthPattern=""[a-z]{1, 2}""{code}
(there's an illegal space before the 2), then Daffodil prints a back trace like so:

{code}
edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Runtime parsers should not throw exceptions: java.util.regex.PatternSyntaxException: Unclosed counted closure near index 8
[a-z]{1, 2}
        ^
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:128)
edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:400)
edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:392)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:128)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:400)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:392)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser.parse(Parser.scala:392)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:165)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:164)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:161)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:160)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:160)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:152)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:495)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:493)
        at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:92)
        at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:492)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:776)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}

Invalid regular expressions should be treated as an SDE.",[],2014-01-22 17:23:44+00:00,2014-05-20 12:57:38+00:00,2014-08-05 19:41:19+00:00,Closed,13114341,DAFFODIL-922
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Below is a backtrace of the error. See email from Roger for the input files.

{code}

edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Runtime parsers should not throw exceptions: java.lang.ClassCastException: edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef cannot be cast to edu.illinois.ncsa.daffodil.dsom.SimpleTypeBase
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:128)
edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:400)
edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:392)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:128)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:400)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:392)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.AltCompParser.parse(Parser.scala:392)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
        at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:165)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:164)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:161)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:160)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:160)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:152)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:495)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$88.apply(Main.scala:493)
        at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:92)
        at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:492)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:776)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}",[],2014-01-22 14:34:19+00:00,2014-01-22 15:26:48+00:00,2014-03-14 19:42:15+00:00,Closed,13114340,DAFFODIL-921
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"When using a hiddenGroupRef to reference an element that has nested references an Abort exception was thrown.

See fogbugz-21038 for more information.",['reverify'],2014-01-15 21:54:12+00:00,2020-12-17 12:02:55+00:00,2020-12-17 12:02:55+00:00,Closed,13114339,DAFFODIL-920
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The XML pretty printers we use (in both the debugger and the CLI output) collapses all whitespace. However, whitespace can be meaningful. We should either have an option to not collapse whitespace, or to just make it the default.",[],2014-01-15 14:59:03+00:00,2020-07-30 20:59:29+00:00,2020-07-30 20:59:29+00:00,Closed,13114338,DAFFODIL-919
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL allows a sequence with an empty content region. 

Clarified on DFDL WG Call that this is disallowed if dfdl:sequenceKind=""unordered""",[],2014-01-14 16:44:19+00:00,2019-10-03 15:21:05+00:00,2021-05-20 12:34:00+00:00,Closed,13114337,DAFFODIL-918
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In the publicly available [NACHA schema|https://github.com/DFDLSchemas/NACHA], we are only able to successfully parse test data that contains ""nolines"" in the file name. A quick glance shows that other files have CRLF line endings, which are optional (parsed with WSP*) which daffodil is failing to parse correctly.",[],2014-01-14 14:44:52+00:00,2014-06-02 15:00:14+00:00,2014-06-30 22:16:47+00:00,Closed,13114336,DAFFODIL-917
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I have been creating data and tests for our ""csvMixedNarrow"" performance set. When attempting to parse the 200MB, 250MB, 500MB, and 1GB files, I get the following errors (both with tdml runner and CLI, giving sbt/start script 8GB of memory):

{noformat}
[jchab@localhost dfdl]$ ./daffodil-cli/target/start parse -s ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/csvMixedNarrow.dfdl.xsd ../ngf-dfdl/daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/csvMixedNarrow/peopleData_1g.txt 
Exception in thread ""main"" java.lang.StackOverflowError
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
	at scala.collection.immutable.Page.latest(PagedSeq.scala:237)
{noformat}

I get no errors when I parse <=150MB files of this type.
The input data and schema are both in our svn performance repo on the Tresys network.",[],2014-01-14 14:26:34+00:00,2015-10-28 13:45:24+00:00,2021-05-18 14:38:39+00:00,Closed,13114335,DAFFODIL-916
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"OGF has reworked its sites to use a new docuwiki. 

I believe the old URLs redirect for now, but this is the new primary DFDL page.

http://www.ogf.org/dokuwiki/doku.php/standards/dfdl/dfdl

We should make sure our pages/wiki are updated.",[],2014-01-13 16:39:39+00:00,2015-02-04 17:10:19+00:00,2015-02-04 18:08:49+00:00,Closed,13114334,DAFFODIL-915
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A common mistake is to import a DFDL schema that has a dfdl:format in it, thinking that is all you have to do in order to make that format work for you.

That actually accomplishes nothing. The dfdl:format annotation of an imported/included DFDL schema has no influence on the file importing/including it. 

So the original DFDL schema doing the include/import actually has no dfdl:format annotation in effect. 

But the error you get is something like ""alignment property undefined"" or something.

If there is no default format, the message should not just say that the property it needs is not found, but should point out that there was no default format specified where it could have found it.

Something like:
""The alignment property was not found. 
....file and line number informatino about where it is needed....

Note: there is no default format in this schema file. That is, no dfdl:format annotation at the top level of the schema file.""

It is these last two lines that need to be added. 

Alternatively, we could just warn that there is no default format in any given schema file, but that could be misleading since some schema files exist only to provide named format definitions, so this message would be spurious.",[],2013-12-11 19:41:49+00:00,,2018-09-13 14:04:30+00:00,Open,13114333,DAFFODIL-914
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Currently, if you have a schema that only includes complex types which are imported and used in other schemas, daffodil fails with an error stating:
{quote}
No global elements in foo.xsd
{quote}
This restriction should be removed.",[],2013-12-09 17:32:19+00:00,2021-02-02 18:45:31+00:00,2021-02-11 21:22:23+00:00,Closed,13114332,DAFFODIL-913
Task,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"The Nightly Test Results were blank after Nov 4, 2013.
No results file was created after Nov 19, 2013.

Needs investigated.",[],2013-11-27 23:44:45+00:00,2014-05-27 17:13:51+00:00,2014-05-27 17:15:14+00:00,Closed,13114331,DAFFODIL-912
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We need to create a git repo to store all our static web content (specificiation, javadoc, scaladoc, etc). Rob will setup the infrastructure so this content to be displayed on the opensource ncsa servers, we just need to set up the repo and get the content in in, then link the content from our wiki.",[],2013-10-16 15:14:49+00:00,2014-12-15 19:21:36+00:00,2014-12-17 21:17:41+00:00,Closed,13114330,DAFFODIL-911
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"{code}

~/NGF/dfdl (0.12.0) echo $DAFFODIL_CLASSPATH
/home/jchab/NGF/dfdl/daffodil-test/src/test/resources
~/NGF/dfdl (0.12.0) echo -n ""10"" | ./daffodil-0.12.0-SNAPSHOT/bin/daffodil.sh parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_11.dfdl.xsd --root root6
[error] Compilation (ProcessorFactory) produced 1 errors/warnings.
[error] Schema Definition Error: DFDL Schema Validation failed due to the following:
DFDL Schema Validation Error due to org.xml.sax.SAXParseException; systemId: file:///home/jchab/NGF/dfdl/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd; lineNumber: 22; columnNumber: 101; src-resolve.4.2: Error resolving component 'foo:stringy'. It was detected that 'foo:stringy' is in namespace 'http://www.w3.org/2001/XMLSchema', but components from this namespace are not referenceable from schema document 'file:///home/jchab/NGF/dfdl/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd'. If this is the incorrect namespace, perhaps the prefix of 'foo:stringy' needs to be changed. If this is the correct namespace, then an appropriate 'import' tag should be added to 'file:///home/jchab/NGF/dfdl/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd'. File: /home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_11.dfdl.xsd
Schema context: SchemaSet. Location in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_11.dfdl.xsd.
{code}

Note:
{code}
If this is the correct namespace, then an appropriate 'import' tag should be added to 'file:///home/jchab/NGF/dfdl/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd'
{code}

this is not the correct location of the schema - it should be
/home/jchab/NGF/dfdl/{color:red}daffodil-test/src/test/resources/{color}edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd",[],2013-10-16 12:36:48+00:00,2021-02-04 16:46:48+00:00,2021-05-18 10:24:43+00:00,Closed,13114329,DAFFODIL-910
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"{code}

~/NGF/dfdl (0.12.0) ./daffodil-cli/target/start parse --help
Usage: daffodil parse (-s <schema>... [-r <root> [-n <namespace>]] [-p <path>] |
                       -P <parser>)
                      [--validate [mode]]
                      [-D[{namespace}]<variable>=<value>...] [-o <output>]
                      [-c <file>] [infile]

Parse a file, using either a DFDL schema or a saved parser

Parse Options:
  -c, --config  <file>                   path to file containing configuratio
                                         items.
  -Dvariable=value [variable=value]...   variables to be used when parsing. A
                                         option namespace may be provided.
  -n, --namespace  <ns>                  the namespace of the root element.
                                         Requires --root.
  -o, --output  <file>                   write output to a given file. If not
                                         given or is -, output is written to
                                         stdout.
  -P, --parser  <file>                   use a previously saved parser.
  -p, --path  <path>                     path to the node to create parser.
  -r, --root  <node>                     the root element of the XML file to
                                         use. This needs to be one of the
                                         top-level elements of the DFDL schem
                                         defined with --schema. Requires
                                         --schema. If not supplied uses the
                                         first element of the first schema
  -s, --schema  <file>                   the annotated DFDL schema to use to
                                         create the parser. May be supplied
                                         multiple times for multi-schema
                                         support.
  -V, --validate  <mode>...              the validation mode. 'on', 'limited'
                                         or 'off'. Defaults to 'on' if mode i
                                         not supplied. (default = Off)
      --help                             Show help message
      --version                          Show version of this program

 trailing arguments:
  infile (not required)   input file to parse. If not specified, or a value o
                          -, reads from stdin.
{code}

examples:
{code}
  -V, --validate  <mode>...              the validation mode. 'on', 'limited'
                                         or 'off'. Defaults to 'on' if mode i
                                         not supplied. (default = Off)
{code}

{code}
                                         use. This needs to be one of the
                                         top-level elements of the DFDL schem
                                         defined with --schema. Requires
{code}

I am seeing this on a CentOS 6 VM",[],2013-10-15 18:05:13+00:00,2013-10-15 18:58:53+00:00,2013-10-15 19:48:55+00:00,Closed,13114328,DAFFODIL-909
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This test has been in the system for a while, but for some reason it's pointing to a ticket that does not seem related (DFDL-710). This ticket is just to track this test and the failure that it is currently seeing.

see test lengthRuntimeSDE in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindExplicitDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindExplicit.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/ExplicitTests.tdml",['beginner'],2013-10-15 16:44:24+00:00,,2020-08-05 18:39:56+00:00,Reopened,13114327,DAFFODIL-908
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"It appears that when the escapeEscapeCharacter is set to """" (empty string), the final separator (,) in a sequence does not get recognized as such, and the test fails for leftover data.

{code}
.......

(debug) 
  data:
       ��� (27 to 27)
    450,500
  infoset:
    <tns:e1EmptyEEC xmlns:tns=""http://example.com"">
      <tns:escapeChar>\</tns:escapeChar>
      <tns:strng>4,000,000</tns:strng>
      <tns:strng>5,000</tns:strng>
      <tns:strng>6,450</tns:strng>
    </tns:e1EmptyEEC>
(debug) 
Left over data: byte 27
UTF-8 text starting at byte 24 is: (450,500)
Data (hex) starting at byte 24 is: (0x3435302C353030)
[Fail] escapeExpressions_03
{code}

If i set the escapeEscape character to an arbitrary value (not used in the data), the test passes and all elements parse as expected.

See test_escapeExpressions_03 (failing test), and test_escapeExpressions_01, test_escapeExpressions_01b, test_escapeExpressions_02 for the workaround.

in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeScheme.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeScheme.tdml",[],2013-10-14 15:37:59+00:00,2013-10-14 19:13:41+00:00,2013-10-14 20:31:50+00:00,Closed,13114326,DAFFODIL-907
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Critical,"I noticed earlier today that there have not been any performance reports from the test harness lately. I spoke with Josh and we looked into the issue. It appears that the Solaris VM for performance testing is in an irreparable state. When booting, an error explains that the filesystem is corrupt and fsck must be run manually. I manage to get a prompt, and when I run fsck, it exits with code 39, which means ""uncorrectable errors detected - terminate immediately."" I believe this hangup with Solaris is the reason why we have not been getting Performance reports from the harness. In the meantime, I updated the harness config to run on all systems except Solaris while I look into the issue further. This might just require a complete reinstall of Solaris. It looks like there is a Snapshot in vmware from 4/24/2013. This might be a better option. I'm running the harness now against all other machines (including the host) to see if that 'fixes' the issue.",[],2013-10-08 20:45:27+00:00,2013-10-10 13:53:03+00:00,2013-10-10 13:53:07+00:00,Closed,13114325,DAFFODIL-906
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"There are several Log(Debug) calls that duplicate messages in subsequent PE calls. An example of this can be found in PrimitivesDelimiters.scala.

We don't need to call logging to duplicate things that will be PE or SDE.  True the PE might be masked by backtracking, but really these logging calls aren't a replacement for a decent trace that shows what is going on. Other tickets are about improving the trace with this information.

This ticket is about removing spurious logging calls that are clearly redundant with PE or SDE.",['beginner'],2013-10-04 16:58:41+00:00,,2019-06-20 22:05:47+00:00,Open,13114324,DAFFODIL-905
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"I attempted to move a test to the scala-debug section of the daffodil-cli-unittest project.  Unfortunately buildbot failed to compile the new file present in the scala-debug section.

This is likely due to the scala-debug folder not being setup correctly.

04-Oct-2013 08:46:51	[error] /home/opensource/data/bamboo/xml-data/build-dir/DFDL-MASTER17-JOB1/daffodil-cli/src/test/scala-debug/edu/illinois/ncsa/daffodil/parsing/TestCLIParsingDebug.scala:42: object CLI is not a member of package edu.illinois.ncsa.daffodil
04-Oct-2013 08:46:51	[error] import edu.illinois.ncsa.daffodil.CLI.Util._
04-Oct-2013 08:46:51	[error]                                   ^
04-Oct-2013 08:46:51	[error] one error found
04-Oct-2013 08:46:58	[error] (daffodil-cli/debug:compile) Compilation failed
04-Oct-2013 08:46:58	[error] Total time: 12 s, completed Oct 4, 2013 8:46:58 AM",[],2013-10-04 16:56:28+00:00,2019-03-13 13:34:53+00:00,2021-05-18 14:38:36+00:00,Closed,13114323,DAFFODIL-904
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I believe I have seen this happen before, where in the test I'm expecting a validation error but none occurs and I get a message when I run the test saying no Diagnostic message has been found. However, it doesn't seem to happen all of the time. For example, in test choice_errorNotSuppressed_validationErrorCheck, I have a validationErrors block where I expect the error DUMMYERROR. However, the test passes.

Test is in 
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section02/validation_errors/Validation.tdml",['reverify'],2013-10-03 19:08:11+00:00,2020-08-05 18:38:00+00:00,2020-08-05 18:38:00+00:00,Closed,13114322,DAFFODIL-903
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Perhaps the right thing is to use a flag like this for now, but just add a jira task to find and fix all of the tests that have this.

Locate tests that have the validateDFDLSchemas flag set to false.  Correct the tests that fail when setting the flag to true.",[],2013-10-03 18:01:18+00:00,2019-06-21 14:39:04+00:00,2021-05-18 14:38:33+00:00,Closed,13114321,DAFFODIL-902
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2013-10-01 19:21:29+00:00,2014-09-04 12:48:25+00:00,2014-09-15 19:07:25+00:00,Closed,13114320,DAFFODIL-901
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you have say,
{code}
 <xs:include schemaLocation=""xsd/built-in-formats.xsd""/> 
<dfdl:format ref=""foo:daffodilTest1"" .../> 
{code}
but the foo prefix is not bound to the current target namespace, This seems to just fail silently. It should give an SDE indicating the ref was not found.",[],2013-10-01 16:59:17+00:00,2021-02-04 14:50:04+00:00,2021-02-05 16:48:49+00:00,Closed,13114319,DAFFODIL-900
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are 3 files which contain the XML Schema for DFDL annotations.

DFDL_part1_simpletypes.xsd
DFDL_part2_attributes.xsd
DFDL_part3_model.xsd

These exist in the src/main/resources/xsd of BOTH daffodil-propgen and of daffodil-lib.

Maintenance of these has been undertaken in daffodil-lib, but in principle, daffodil-propgen really should be the home of these. The ones in daffodil-propgen are now out of date, which means the generated code does not see some changes. 

daffodil-lib should be getting these as a managed src or something from daffodil-propgen, in the same way it gets the generated code.

In addition, there is a combined file in daffodil-lib named DFDL_model_all_parts.xsd. This is a single schema file created by merging the DFDL_part1_simpletypes.xsd, DFDL_part2_attributes.xsd, and DFDL_part3_model.xsd together. This file is needed due to DFDL-714. Unless that bug is fixed, the file DFDL_model_all_parts.xsd should be machine generated, not hand-crafted.",[],2013-10-01 13:17:22+00:00,2014-05-16 19:52:41+00:00,2014-08-08 20:59:08+00:00,Closed,13114318,DAFFODIL-899
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In order to test data containing the us-ascii-7-bit-packed encoding, such as data conforming to MIL-STD-2045-47001D, it must be convenient to create strings in the data. 

A new keyword on tdml:documentPart element, encoding, is needed, and is usable when the type attribute is ""text"" (which is the default). 

Example:

<documentPart type=""text"" encoding=""us-ascii-7-bit-packed""><![CDATA[abcdefgh]]></documentPart>

In this case, each of the abcdefgh would be converted to a single character, occupying exactly 7 bits. The whole string occupies 7 bytes, or 56 bits.  In this case the overall string is a multiple of 8-bits in total length, but this should not be required. Text in this encoding can begin on any bit boundary, and occupy any multiple of 7 bits in length. 

Other encodings, such as UTF-16, UTF-32, can also be better exercised in this way. 

Note that this encoding should not assume bit ordering. See DFDL-896 and DFDL-897. 

Specifically, some data formats use us-ascii-7-bit-packed, and also use bit order of least-significant-bit-first.",[],2013-09-30 19:04:51+00:00,2014-12-31 20:29:58+00:00,2015-01-29 20:56:25+00:00,Closed,13114317,DAFFODIL-898
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See DFDL-896 for bitOrder feature.

In order to test this feature, the ability to specify data in binary, but with least-significant bit first is needed. Otherwise we'll be unable to create sufficient test cases.

There are two possible ways this can work. 

Consider a single byte with 3 bit fields within it, a 3-bit-long field containing value 3, or binary 011, another 3-bit-long field containing value 4 or binary 100, and a 2-bit-long field containing value 1 or binary 01.

The TDML of Daffodil today only supports most-significant-bit-first bit order so:

<documentPart type=""bits""> 011 100 01</documentPart>

That is equivalent to the byte 0x71 hex.

For least-significant-bit-first, there are a few possibilities.

One possibility is to add a bitOrder=""MSBFirst/LSBFirst"" attribute to documentPart. The default would be MSBFirst, which is consistent with today's behavior. The new value of LSBFirst would mean that we process the bits line by line, and concatenate them in LSB First order, though each line is written MSB-first order (the normal way we write numbers, i.e., where 011 binary means 3. This is consistent with some dump tools we have seen. So the same 3 fields of data would be:

<documentPart type=""bits"" bitOrder=""LSBitFirst"">
xxxxx011 first field
xx100xxx second field
01xxxxxx  third field.
</documentPart>

Notice that the 'x' characters are ignored. So this is equivalent to writing

<documentPart type=""bits"" bitOrder=""LSBitFirst"">
01 100 011 first second and third
</documentPart>

But see how the bits on the line are interpreted as numbered from right to left. Hence, viewed as a numeric byte in the data, this would be hex C6. 

The bitOrder attribute should be usable with any documentPart type, not just bits. So equivalent to the above:

<documentPart type=""byte"" bitOrder=""LSBitFirst"">
C6 first second and third
</documentPart>",[],2013-09-30 18:53:16+00:00,2019-06-21 14:56:02+00:00,2021-05-20 12:34:40+00:00,Closed,13114316,DAFFODIL-897
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"To support formats like MIL-STD-2045-47001D (which is public), DFDL needs enhancement with a property to allow specification of bit order. That is, whether the bits of a byte are numbered most-significant-bit-first, or least-significant-bit-first.

A new DFDL property will need to be created to specify this. 

See http://redmine.ogf.org/boards/15/topics/43 which is the DFDL public comment forum thread for this topic. 

Small example: 

    Consider a single byte with 3 bit fields within it, a 3-bit-long field containing value 3, or binary 011, another 3-bit-long field containing value 4 or binary 100, and a 2-bit-long field containing value 1 or binary 01.

    DFDL today interprets this most-significant bit first. So the binary representations are concatenated as 01110001 which is byte 0x71.

    A format like MIL-STD-2045-47001D instead requires that this be interpreted with least significant bit first so the same 3 fields turn into this number: 01100011 which is 0x63.",[],2013-09-30 18:25:58+00:00,2014-07-29 17:07:28+00:00,2014-08-06 17:54:14+00:00,Closed,13114315,DAFFODIL-896
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"When a format is redefined an error should occur informing of the duplicate definition. Currently, if there is a defineFormat using the same name as an existing format (i.e. daffodilTest1) there is no error and the newly defined format is not used. 

See test redefinedFormat:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/WhiteSpace.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala",['beginner'],2013-09-24 15:20:41+00:00,,2020-08-05 18:36:27+00:00,Open,13114314,DAFFODIL-895
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Part of DFDL-893 but worth carving off as a lower-priority aspect.

This was a comment on the original January 2011 version 1.0.3 spec of DFDL.

The Sept 2013 1.0.4 spec says: 

When utf16Width is 'variable', then on parsing an un-paired surrogate codepoint causes a decode error, which can be controlled via dfdl:encodingErrorPolicy. 

Is this the actual behavior, i.e., does ICU let us even do this? (If not then this will be an issue with the DFDL spec.)",[],2013-09-23 17:15:59+00:00,2020-12-16 20:24:21+00:00,2020-12-16 20:24:21+00:00,Closed,13114313,DAFFODIL-894
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,This property was added by an errata. It is important part of the text layer and has implications for performance of the text layer.,[],2013-09-23 17:13:28+00:00,2014-04-08 22:27:24+00:00,2014-05-21 19:17:34+00:00,Closed,13114312,DAFFODIL-893
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"approx line 157 in DelimSearchConstructs.scala, there is a default case with a Schema Definition Error. This code path is not currently reachable. The default case should be removed completely and rely on the compiler to ensure all cases are met.",[],2013-09-18 19:41:15+00:00,,2018-09-13 14:03:54+00:00,Open,13114311,DAFFODIL-892
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"This seems to be the primary measure of performance that the customer wants. Please update the harness to calculate this number. We can leave the current performance measurements and reporting as it is for now (kbs/s), and maybe just have the harness calculate this number and add as an extra field if it isn't too much work.",[],2013-09-18 18:13:42+00:00,2014-09-15 19:05:29+00:00,2014-09-15 19:05:33+00:00,Closed,13114310,DAFFODIL-891
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Please add a VM to the performance box for 64-bit Solaris 10, and add it to the harness configuration so it becomes part of the nightly runs.",[],2013-09-18 15:09:13+00:00,2014-02-13 13:16:10+00:00,2014-02-13 13:16:14+00:00,Closed,13114309,DAFFODIL-890
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"In our messages, e.g., this one:
{code}
2013-09-16 09:07:12:254  edu.illinois.ncsa.daffodil.dsom.Include Info[Included schema from file:/home/mbeckerle/git/daffodil-validation-FOUO/vmf/bin/xsd/vmfInternal.dfdl.xsd into namespace urn:vmfDFDLInternal.]
{code}
We print a date timestamp, then a class name, then the priority, then the message inside square brackets. 

The class name is not needed for user-oriented messages, so we should remove it. For aborts and invariant failures and such, the class is perfectly appropriate, but for SDEs, PEs, and their warning counterparts, this adds no value, and pushes the valuable part of the message much further out to the right where it is sometimes harder to read.",[],2013-09-16 13:11:04+00:00,,2019-07-03 12:52:54+00:00,Open,13114308,DAFFODIL-889
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,,[],2013-09-13 15:23:30+00:00,2014-05-07 19:45:46+00:00,2014-05-09 15:37:07+00:00,Closed,13114307,DAFFODIL-888
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"This seems to be a recent thing (since spin 12 started).  For many of the performance vms I gave them bogus hostnames like dfdl-rhel632, just to make it easier for me to know which machine I'm SSH'd into by looking at the command prompt.  It seems that something in the way the tests are run changed and no longer likes this.  Changing the host name to ""localhost"" seems to fix things and all tests run normally.

I get the following error message:

[trace] Stack trace suppressed: run last daffodil-perf/*:test-listeners for the full output.
[error] (daffodil-perf/*:test-listeners) java.net.UnknownHostException: dfdl-rhel632: dfdl-rhel632: Name or service not known

Full stack trace:

> last daffodil-perf/*:test-listeners
java.net.UnknownHostException: dfdl-rhel632: dfdl-rhel632: Name or service not known
        at java.net.InetAddress.getLocalHost(InetAddress.java:1466)
        at com.dadrox.sbt.test.reports.Xml.<init>(Xml.scala:17)
        at DaffodilBuild$$anonfun$testReportSettings$1.apply(build.scala:236)
        at DaffodilBuild$$anonfun$testReportSettings$1.apply(build.scala:236)
        at sbt.Scoped$RichInitialize$$anonfun$map$1$$anonfun$apply$4.apply(Structure.scala:168)
        at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
        at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
        at sbt.std.Transform$$anon$5.work(System.scala:71)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
        at sbt.Execute.work(Execute.scala:238)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:724)
Caused by: java.net.UnknownHostException: dfdl-rhel632: Name or service not known
        at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
        at java.net.InetAddress$1.lookupAllHostAddr(InetAddress.java:894)
        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1286)
        at java.net.InetAddress.getLocalHost(InetAddress.java:1462)
        at com.dadrox.sbt.test.reports.Xml.<init>(Xml.scala:17)
        at DaffodilBuild$$anonfun$testReportSettings$1.apply(build.scala:236)
        at DaffodilBuild$$anonfun$testReportSettings$1.apply(build.scala:236)
        at sbt.Scoped$RichInitialize$$anonfun$map$1$$anonfun$apply$4.apply(Structure.scala:168)
        at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
        at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
        at sbt.std.Transform$$anon$5.work(System.scala:71)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
        at sbt.Execute.work(Execute.scala:238)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
        at java.util.concurrent.FutureTask.run(FutureTask.java:166)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:724)
[error] (daffodil-perf/*:test-listeners) java.net.UnknownHostException: dfdl-rhel632: dfdl-rhel632: Name or service not known

[error] Total time: 5 s, completed Sep 12, 2013 1:30:47 PM",[],2013-09-12 17:35:29+00:00,2013-09-12 17:55:51+00:00,2013-09-12 18:03:16+00:00,Closed,13114306,DAFFODIL-887
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I've been trying to put together a schema/test that parses 3 different characters, and then has three sequences (all part of a top-level sequence with '|' as the separator). The first sequence will have the first character as a separator, the second sequence will use the second character, and so on. So this is my input:
{noformat}
.|-|#|1.2.3|1-2-3|3#9#1
{noformat}

debug output:
{code}
..... 
(debug) 
separator [1]: xs:string: -
  infoset:
    <ex:e2 xmlns:ex=""http://example.com"">
      <ex:a1>.</ex:a1>
      <ex:a1>-</ex:a1>
      <ex:a1>#</ex:a1>
      <ex:a2>
        <ex:num>1</ex:num>
      </ex:a2>
    </ex:e2>
  data:
           ��� (7 to 7)
    .|-|#|1.2.3|1-2-3|3#9#1
  failure:
    Parse Error: Sep('CompiledExpression({ fn:trace(xs:string(/ex:e2/ex:a1[dfdl:occursIndex()]), 'separator') })') - sequence: Delimiter not found!
    Schema context: sequence Location line 32 column 116 in file:/tmp/daffodil_tmp_7144462590172026171.dfdl.xsd
    Data location was preceding byte 7
    UTF-8 text starting at byte 0 is: (.|-|#|1.2.3|1-2-3|3#9#1)
    Data (hex) starting at byte 0 is: (0x2E7C2D7C237C312E322E337C312D322D337C3323392331)


The output from sbt is similar:
separator [1]: xs:string: .
separator [1]: xs:string: -
[error] Test edu.illinois.ncsa.daffodil.section16.array_optional_elem.TestArrayOptionalElem.test_arrayExpressions02 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Sep('CompiledExpression({ fn:trace(xs:string(/ex:e2/ex:a1[dfdl:occursIndex()]), 'separator') })') - sequence: Delimiter not found!
{code}

It seems to correctly find the separator in order to fill in the num element, but still fails.

I created a few more tests to try and narrow down the issue:
arrayExpressions02b - demonstrates that you can use an expression referencing a previous element to set the separator
arrayExpressions02c - similar to arrayExpressions02, except the expression with occursCount is used for the terminator property of the innermost element.
arrayExpressions02d - similar to arrayExpressions02, except the expression with occursCount is used for the initiator of the top-level element instead of the sequence separator.

It seems that this is only a problem when used in a property of the sequence.

see test arrayExpressions02 in the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestArrayOptionalElemDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section16/array_optional_elem/TestArrayOptionalElem.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section16/array_optional_elem/ArrayOptionalElem.tdml",[],2013-09-11 20:04:26+00:00,2015-03-24 15:48:21+00:00,2015-03-30 19:35:47+00:00,Closed,13114305,DAFFODIL-886
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-09-11 17:57:53+00:00,2013-10-14 14:31:10+00:00,2014-05-01 19:14:48+00:00,Closed,13114304,DAFFODIL-885
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"sequenceKind no longer has a default and must be specified.  Need to update the performance tests to use ""sequenceKind=""ordered""",[],2013-09-11 17:19:22+00:00,2014-02-13 13:15:34+00:00,2014-02-13 13:15:40+00:00,Closed,13114303,DAFFODIL-884
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Look at the linked tests. It appears that  when a root is not specified for these tests, rather than looking at the main schema for a root node, it first looks in built-in-formats.xsd. Because this file does not have a root node, it fails. It should be looking in multi_base_15.dfdl.xsd.",[],2013-09-10 13:35:59+00:00,2013-09-11 12:36:59+00:00,2013-10-01 19:05:46+00:00,Closed,13114302,DAFFODIL-883
Task,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,,[],2013-09-09 20:57:08+00:00,2013-09-09 22:17:13+00:00,2013-09-10 00:14:55+00:00,Closed,13114301,DAFFODIL-882
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,,[],2013-09-09 19:26:13+00:00,2014-08-05 17:56:04+00:00,2015-07-21 13:20:51+00:00,Closed,13114300,DAFFODIL-881
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"./daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/CompiledExpression.scala:517:        val msg = ""'%s' is an unterminated expression.  Add missing closing {color:blue}brac{color}, or escape opening brace with another opening brace.""",[],2013-09-09 18:31:13+00:00,2014-11-11 16:49:24+00:00,2014-11-12 20:16:41+00:00,Closed,13114299,DAFFODIL-880
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"For example, if you have the following:
{code}
dfdl:textStandardInfinityRep=""{ ../ex:infrep }""
{code}
it would be helpful if we displayed a warning alerting the user that they are probably using the infinity rep in a manner that will never evaluate.",['beginner'],2013-09-06 19:41:17+00:00,2020-10-15 13:41:35+00:00,2020-10-16 16:17:46+00:00,Closed,13114298,DAFFODIL-879
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"According to the spec, the number of digits after the E in scientific notation gives the minimum exponent digit count. I would expect that if textNumberCheckPolicy is strict, then data that provides a number of digits less than this minimum should fail. However the data parses without issue.

see test
textNumberPattern_scientificNotation02 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala",['beginner'],2013-09-05 13:51:28+00:00,,2020-08-05 18:34:31+00:00,Open,13114297,DAFFODIL-878
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When executing the test case for Windows compatibility I found that several tests were failing on Windows. They all seem to be issues with LF versus CRLF. These tests can be altered without affecting their purpose.

expCharEntities
nanCharEntities
infCharEntities
whitespace_expression
LengthProp_longTextLength",[],2013-09-04 19:00:22+00:00,2013-09-05 12:36:27+00:00,2013-09-05 17:58:30+00:00,Closed,13114296,DAFFODIL-877
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,Roger is creating schemas and monitoring info sets that are not in the form of TDML tests so they do not get regression tested.  We would like to add that test coverage.,[],2013-09-04 17:49:57+00:00,2013-10-02 14:16:31+00:00,2013-10-09 18:26:45+00:00,Closed,13114295,DAFFODIL-876
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-08-30 15:01:55+00:00,2013-08-30 19:25:06+00:00,2013-09-06 18:43:45+00:00,Closed,13114294,DAFFODIL-875
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"This is inconsistent with how getQName above is defined. That one returns (NS, String) and NS can be null. I think this one is more scala-y (e.g. Option[NS]), so I think this is correct. But can you open a bug to resolve the inconsistencies (i.e. fix the other getQName)?

getQName should return Option[NS] rather than NS.",[],2013-08-29 18:46:13+00:00,2015-01-15 20:29:56+00:00,2015-02-04 16:21:45+00:00,Closed,13114293,DAFFODIL-874
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"I think the namespace change for 'daf' might have to be a different ticket.  I noticed that the prefix 'daf' is being used for the daffodil extension namespace.  'dafint' is being used for the daffodil internal namespace... so we would either want to change 'daf' to 'dafext' and use 'daf' for the config, or create a new prefix.",[],2013-08-29 18:39:06+00:00,2014-03-26 15:13:27+00:00,2014-05-22 22:27:46+00:00,Closed,13114292,DAFFODIL-873
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The Delimiter class will need to be used by other  properties that aren't delimiters. For example, textStandardZeroRep is allowed to have DFDL character entities in it, so it could use this class for parsing, but it isn't a delimiter. We need to refactor this class to be a more general purpose class that converts strings into regular expressions that can parse strings.

While we're at it, It would probably be worth making it a little more functional and getting rid of the vars.",[],2013-08-26 18:20:33+00:00,2016-09-14 22:00:11+00:00,2017-08-18 14:29:26+00:00,Closed,13114291,DAFFODIL-872
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-08-25 14:15:06+00:00,2013-08-25 15:46:14+00:00,2013-08-25 15:46:19+00:00,Closed,13114290,DAFFODIL-871
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"See ticket DFDL-732 for details. Mike's note regarding testing the hexBinary use cases:

Binary data can have delimiters. Spec section 12.3.2 and 12.3.2.2 specifically. Errata 2.97 specifically allows it for hexBinary, and it has been allowed for numbers as well.

IBM has a point-of-sale terminal format called 4690-TLOG. Google it and it will get you to the github site with the DFDL schema they've written for it. Perhaps grab/derive a test directly from this stuff??

But it might use the DFDL Byte Value Entites (aka ""rawbytes entities"") which we don't have an implementation of yet. (They're actually hard to implement.)  

I am raising a clarification with the workgroup about whether delimited hexBinary can use characters in the delimiters, or must use rawbytes. This would mean dfdl:encoding would need to be used, but that is documented as not being needed for hexBinary, so I am not certain. 

TLOG uses packed decimal numbers with delimiters, so this is representation='binary' lengthKind='delimited' stuff.  The notion here was not to be too rigid. Sometimes people know their data, and they know that the bytes of the data won't contain certain byte values, so delimiting using specific byte values is allowed. In the case of TLOG, the delimiters are bytes that cannot appear in a packed decimal representation, so delimited works. 

I really wish we had used more specific names like lengthKind=""binaryDelimited"", lengthKind=""textDelimited"", so that we could provide better error checking for the much more common case of delimited with all textual data fields.

Now, that said, we don't have rawbytes yet. So perhaps this cannot be tested? I'd look at the tlog stuff though.",['reverify'],2013-08-23 19:38:13+00:00,2020-08-05 18:33:25+00:00,2020-08-05 18:33:25+00:00,Closed,13114289,DAFFODIL-870
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the latest version of the spec:
'The representation is examined for a match to one of the values of this property after padding has been trimmed away'.

however, when I create a test with padding before the zero, I get a parse error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_standardZeroRep04 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Convert to Integer (for xs:int): Unable to parse '*****nil' (using up all characters).
[error] Schema context: element.tnp80 Location line 74 column 1455 in file:/tmp/daffodil_tmp_1641632066521585436.dfdl.xsd
[error] Data location was preceding byte 8
[error] UTF-8 text starting at byte 8 is: ()
[error] Data (hex) starting at byte 8 is: (0x)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.PE(Parser.scala:154)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:110)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:72)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:252)
[error]     at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser.parse(PrimitivesTextNumber.scala:72)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:165)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:161)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:160)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:160)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:152)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:581)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:476)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:413)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:262)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:253)
[error]     at edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_standardZeroRep04(TestTextNumberProps.scala:100)
[error]     ...
{code}

See test standardZeroRep04
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala",[],2013-08-23 14:47:16+00:00,2013-08-23 18:35:39+00:00,2013-08-23 20:15:39+00:00,Closed,13114288,DAFFODIL-869
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Though this might not be a bug depending on the resolution for DFDL-867, the behavior goes against the current spec statement that ""DFDL Character classes ( WSP, WSP+, WSP* ) are allowed."" for textStandardZeroRep.

When I create an element and test that use WSP as the zero rep, I get this error:
{code}
[info] Test run started
[info] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_standardZeroRep09 started
[error] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_standardZeroRep09 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Convert to Integer (for xs:int): Unable to parse ' ' (using up all characters).
[error] Schema context: element.tnp84 Location line 74 column 3320 in file:/tmp/daffodil_tmp_1823519592799694349.dfdl.xsd
[error] Data location was preceding byte 1
[error] UTF-8 text starting at byte 0 is: ( )
[error] Data (hex) starting at byte 0 is: (0x20)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.PE(Parser.scala:154)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:110)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser$$anonfun$parse$1.apply(PrimitivesTextNumber.scala:72)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:252)
[error]     at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error]     at edu.illinois.ncsa.daffodil.processors.ConvertTextNumberParser.parse(PrimitivesTextNumber.scala:72)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:365)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:363)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:363)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:165)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:164)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:161)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:160)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:160)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:152)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:581)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:476)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:413)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:262)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:253)
[error]     at edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_standardZeroRep09(TestTextNumberProps.scala:90)
[error]     ...
{code}

see test standardZeroRep09 in
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml",[],2013-08-23 14:29:35+00:00,2013-08-26 18:31:03+00:00,2013-08-30 17:55:15+00:00,Closed,13114287,DAFFODIL-868
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"In the description for textStandardDecimalSeparator and others, it states:
""DFDL Character classes ( NL, WSP, WSP+, WSP*, ES ) are not allowed""

However, in textStandardZeroRep, it reads:
��� DFDL Character classes ( NL ES ) are not allowed.
��� DFDL Character classes ( WSP, WSP+, WSP* ) are allowed.

Since the examples are in parentheses, I would expect them to not contribute to the meaning of the bulletpoint, so they would contradict each other.

However, if this is actually saying that some character classes are allowed while others are not, it should provide the full list of accepted classes (though I have a feeling this is not the case)",[],2013-08-23 14:24:58+00:00,2014-05-01 19:26:55+00:00,2014-05-22 00:45:37+00:00,Closed,13114286,DAFFODIL-867
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This two functions are part of the public API. This is confusing for API users. Currently, there is not difference between the two functions. We either need to remove one of the functions of clarify the distinctions.",['beginner'],2013-08-22 17:25:50+00:00,2020-08-05 18:31:02+00:00,2020-08-05 18:31:02+00:00,Closed,13114285,DAFFODIL-866
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Message posed to Working Group by Mike:
{noformat}
The spec says that these need to be compatible.

""If the pattern uses digits/fractions then these must match any XML schema facets.""

We've fallen into this trap before. Facet constraints are about the logical value, not the physical rep, and so must make equal sense for binary representations as text representations.

I was considering what kinds of static cross checks would make sense here.

Example: suppose fractionDigits='2'.

Suppose textNumberPattern=""##""

the type must be xs:decimal since that's the only type that can have fractionDigits constrained in DFDL.

Is there a conflict of the facet with the textNumberPattern? I think not. Even though the pattern doesn't allow for any fractional part to be expressed, that means that all values will have less than or equal to 2 fractional digits (because no fractional digits always satisfies that.)

Now suppose textNumberPattern=""#.########""

Now the textNumberPattern will parse and accept things like 1.234 which have more than 2 fraction digits, but suppose the data simply doesn't contain any such. So all number in the data will obey the less than or equal to 2 fractional digits.

Lastly, suppose textNumberPattern=""9.9999""

So, interpreted naively, this requires the data to contain 5 digits, so this seems inconsistent with fractionDigits of 2. 

However, we know this depends on the strict/lax behavior of ICU libraries, and I believe this will happily parse the data ""0.0"" without error. Hence the data could still all have 2 or fewer fractional digits.

So, I think this idea that the totalDigits and fractionDigits facets can be cross-checked with the textNumberPattern is spurious and we should drop it.

I think it dates from a time when we were still confused about the separation of the DFDL Infoset, and facet constraints on its value spaces, which are abstract, versus the XML Infoset, where everything truly is a string as well as whatever its XML Schema type says.
{noformat}",[],2013-08-22 16:06:20+00:00,2013-09-23 15:40:28+00:00,2013-10-01 18:06:32+00:00,Closed,13114284,DAFFODIL-865
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Per Mike's suggestion, this feature would help us test scenarios where we need to be sure that certain errors are not displayed, including validation errors and warnings.",[],2013-08-22 13:14:44+00:00,,2018-09-13 14:03:56+00:00,Open,13114283,DAFFODIL-864
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This is a strange one. I have two patterns, and each one contains '+' in the positive pattern, which should match the literal '+'. It does seem to match, and get stripped from the data, but after that the data does not parse correctly, even if it's valid for the pattern and the type:

{code}
[info] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_textNumberPattern_specialChar06 started
2013-08-22 04:00:32:287  edu.illinois.ncsa.daffodil.tdml.ParserTestCase Error[Parse Error: Convert to Integer (for xs:int): Unable to parse '5' (using up all characters).
Schema context: element.tnp70 Location line 48 column 20683 in file:/tmp/daffodil_tmp_3788595172509738451.dfdl.xsd
Data location was preceding byte 2
UTF-8 text starting at byte 0 is: (+5)
Data (hex) starting at byte 0 is: (0x2B35)]
Bytes processed: 2
Characters processed: 2
{code}

I duplicated the test but used lengthKind=""explicit"" and a length of 1. I get the error ""Parse Error: Convert to Integer (for xs:int): Cannot parse number from empty string""

Something strange seems to be happening when the '+' is stripped, but I'm not seeing it for the other characters I tested.

Please see the following tests:
textNumberPattern_specialChar05
textNumberPattern_specialChar06
textNumberPattern_specialChar08

in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml",[],2013-08-22 11:15:13+00:00,2013-08-23 18:31:07+00:00,2013-08-23 20:00:16+00:00,Closed,13114282,DAFFODIL-863
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, ""validation errors cannot be suppressed by points of uncertainty."" However, the behavior of validation in this situation depends on the validation mode specified. If the mode of validation that waits until parsing is over is used, this is correct. However, if the ""validate as you go"" method is used, we only want the errors to come through for 2 scenarios: 
1. the branch with the validation error parses successfully
2. all choice branches fail.
This is my understanding based on your e-mail. Please feel free to correct me if I've gotten it wrong or missed something.",[],2013-08-21 14:13:21+00:00,2013-10-14 17:26:13+00:00,2013-10-14 17:26:24+00:00,Closed,13114281,DAFFODIL-862
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Trivial,"textStandardInfinityRep, textStandardNaNRep, and textStandardExponentRep are not ignoring case when dfdl:ignoreCase=""yes"". 

See test ""test_infnanCaseInsensitive"" in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala",['beginner'],2013-08-20 19:45:08+00:00,,2020-08-05 18:29:58+00:00,Open,13114280,DAFFODIL-861
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Major,"Parser does not seem to allow infinity when type is float. The test has dfdl:textStandardInfinityRep=""infinity"" but I get a parse error as it is trying to parse ""infinity"". 

See test ""test_infFloat"" in daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala",[],2013-08-20 19:39:29+00:00,2013-08-23 18:32:57+00:00,2013-08-26 19:14:03+00:00,Closed,13114279,DAFFODIL-860
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When I was working on test BE I was having trouble figuring out why the test was not parsing correctly. It was trying to parse the padding instead of stripping it. I created some basic tests to figure out what was going on and it appears that padding is not correctly stripped when the type is xs:decimal.

{color:red}decimalPadding01{color} - xs:decimal using a padChar and a textNumberPattern
{color:green}decimalPadding02{color} - same setup as decimalPadding01 but padding is turned off. This demonstrates that the textNumberPattern is acceptable for xs:decimal
{color:green}decimalPadding03{color} - same setup as decimalPadding01 but the type is xs:int. Demonstrates that this textNumberPattern & pad character combo works with other types
{color:red}decimalPadding04{color} - xs:decimal using a padChar and no textNumberPattern. Demonstrates that the pattern isn't hindering the parse.
{color:green}decimalPadding05{color} - uses padding only within textNumberPattern, no external pad Char.

The only tests that are failing are the ones that use a padChar with xs:decimal.

Tests are in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberProps.scala",[],2013-08-20 17:51:28+00:00,2013-08-30 14:24:01+00:00,2013-09-09 17:06:04+00:00,Closed,13114278,DAFFODIL-859
New Feature,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Compile time checks for isLastDeclaredRequiredElement were completed in DFDL-732.

There are a few cases that need to be checked at runtime.  For example, when an element with occursCountKind=""implicit"" and maxOccurs=""unbounded"" and was followed by a choice it is determined at runtime which element is selected.  Another example is when lengthKind=""parsed"" and the pattern used can match an empty string.",[],2013-08-20 15:58:52+00:00,2017-04-06 15:58:06+00:00,2017-04-06 15:58:06+00:00,Closed,13114277,DAFFODIL-858
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Rather than providing the namespace for the --root option via the --namespace option, we should be consistent with the -D option. So we should get rid of the --namespace option, and the --root option can optional contain a namespace, e.g. {code}--root=""{http://example.com}foo""{code}",[],2013-08-20 13:23:21+00:00,2014-06-03 14:07:47+00:00,2014-08-06 17:42:21+00:00,Closed,13114276,DAFFODIL-857
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We probably should have a ""maximally clean"" API in the sense that nothing is optional, and there is no var-args stuff.  Then we can add methods which are ""convenience methods"" and document them as such, and the current function signature which doesn't have external vars, and allows var-args can be one such convenience method if we want.

Additionally, see [Mike's comment|https://opensource.ncsa.illinois.edu/fisheye/cru/DFDL-200#c1739] about cleaning up the external variable API.",[],2013-08-19 20:52:10+00:00,2017-04-06 14:26:15+00:00,2018-09-13 14:13:25+00:00,Closed,13114275,DAFFODIL-856
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Section 7.7.2 of the spec lists variables that must be predefined:

||Name||Namespace URI||Type||Default value||External||
|encoding| http://www.ogf.org/dfdl/dfdl-1.0/| xs:string| 'UTF-8'| true| 
|byteOrder| http://www.ogf.org/dfdl/dfdl-1.0/| xs:string| 'bigEndian���| true| 
|binaryFloatRep| http://www.ogf.org/dfdl/dfdl-1.0/| xs:string| 'ieee���| true |
|outputNewLine| http://www.ogf.org/dfdl/dfdl-1.0/| xs:string| '%LF;'| true|",[],2013-08-19 20:39:30+00:00,2014-04-29 16:00:10+00:00,2014-04-29 16:00:10+00:00,Closed,13114274,DAFFODIL-855
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,testSequence1 randomly fails,[],2013-08-19 14:10:20+00:00,2013-08-19 16:51:47+00:00,2013-08-19 16:51:47+00:00,Closed,13114273,DAFFODIL-854
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I revisited test_simple_type_properties_text_number_13_01 because some tests should work now that advanced text number properties have been implemented. However, I get this error:

{code}
[error] Test edu.illinois.ncsa.daffodil.IBMTestsThatThrow.test_simple_type_properties_text_number_13_01 failed: edu.illinois.ncsa.daffodil.dsom.SchemaDefinitionError: Schema Definition Error: Feature not yet implemented: textNumberPattern with V symbol
[error] Schema context: element.decimal3. Location line 65 column 41 in file:/home/jchab/NGF/dfdl/daffodil-test-ibm1/target/scala-2.9.2/debug-classes/test-suite/ibm-contributed/dpanum_properties.dfdl.xsd.
{code}

to run the test:
{code}
> project daffodil-test-ibm1
> debug:test-only edu.illinois.ncsa.daffodil.IBMTestsThatThrow -- --tests=test_simple_type_properties_text_number_13_01
{code}",['COBOL'],2013-08-16 21:28:39+00:00,,2021-02-04 16:37:00+00:00,Open,13114272,DAFFODIL-853
New Feature,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"This is primarily an issue for cases where an element is maxOccurs=""unbounded"" occursCountKind=""implicit"", as this is only allowed on the last required element of a sequence (see DFDL-732)

So far I believe that we have the compile time checks completed.  However, there are cases where it cannot be determined whether or not an element is required at compile time.  For example:
 - unbounded/implicit element followed by a choice where a required element is selected at runtime (see edu.illinois.ncsa.daffodil.section14.occursCountKind.TestOCKImplicitNew test_ockImplicit12)
 - unbounded/implicit element followed by an element where lengthKind=pattern and that pattern can match an empty string. (see edu.illinois.ncsa.daffodil.section14.occursCountKind.TestOCKImplicitNew test_ockImplicit14)",[],2013-08-16 19:57:18+00:00,2019-05-02 02:04:37+00:00,2021-05-20 20:01:35+00:00,Closed,13114271,DAFFODIL-852
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, raw byte entities should not be allowed for textNumberStandardDecimalSeparator, textNumberStandardGroupingSeparator, etc. 

I created a few tests for this, and the data parses without an issue.
textStandardGroupingSeparator12
textStandardDecimalSeparator17

in files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberProps.scala",[],2013-08-16 18:23:10+00:00,2018-08-13 16:39:13+00:00,2018-10-05 12:22:14+00:00,Closed,13114270,DAFFODIL-851
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"""Schema Definition Warning: Property sequenceKind was not found. Defaulting *ot* 'ordered'""",[],2013-08-16 13:41:45+00:00,2013-09-23 16:57:40+00:00,2013-09-25 17:36:47+00:00,Closed,13114269,DAFFODIL-850
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I investigated this failure briefly, and it appears to be in test ""testSequence1"" in daffodil-runtime1/src/test/scala/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler.scala. This file has not changed since the end of June. The error itself is
 
edu.illinois.ncsa.daffodil.dsom.TestDsomCompiler.testSequence1 failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Exception while logging

This failure does not seem to be related to any changes Beth or I have made (we were the only two on the blame list), and this error did not occur in the automated build that kicked off at 7:45 this morning.",['thread-safety'],2013-08-16 12:14:55+00:00,2020-08-05 18:28:10+00:00,2020-08-05 18:28:10+00:00,Closed,13114268,DAFFODIL-849
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Remove sequenceKind defaulting from Groups.scala (it's in the Sequence class).

As a result, you will have to add the built-in-formats xsd to tests where it is missing.

Bug added in: DFDL-642
commit fa09ef",[],2013-08-16 12:12:27+00:00,2013-09-10 17:40:51+00:00,2013-09-12 17:13:50+00:00,Closed,13114267,DAFFODIL-848
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"According to the spec, textStandardDecimalSeparator ""Defines a whitespace separated list of single characters that appear (individually) in the data as the decimal separator.""

I tried using a list and I get this error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_textStandardDecimalSeparator11 failed: edu.illinois.ncsa.daffodil.exceptions.NotYetImplementedException: Not yet implemented: lists of textStandardDeciamalSeparator
{code}

I was curious about this error message since there're a typo in the property name, so I snooped around in the source and came across this:
{code}
    // TODO: ICU only supports a single separator
    Assert.notYetImplemented(dsl.length != 1, ""lists of textStandardDeciamalSeparator"")
{code}

I looked through the most recent errata and spec and saw no mention of this.",['beginner'],2013-08-15 19:51:45+00:00,,2020-08-05 18:26:57+00:00,Open,13114266,DAFFODIL-847
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec:
""If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are ignored in the negative subpattern. That means that ""#,##0.0#;(#)"" has precisely the same result as ""#,##0.0#;(#,##0.0#)""""

This requirement sets up a few scenarios:
||textNumberPattern||data||expected result||result||test||
|+##0.00;(0##0.00)|(400.00)|Parse|{color:red}SDE regarding pattern{color}|textNumberPattern_negativeIgnored02|
|    |(4030.00)|Parse Error|{color:red}SDE regarding pattern{color}|textNumberPattern_negativeIgnored01|
|0000;$###### 'is negative!'|$123456 is negative!|Parse Error|{color:red}Parses{color}|textNumberPattern_negativeIgnored03|
|    |$0234 is negative!|Parses|{color:green}Parses{color}|textNumberPattern_negativeIgnored04|
|#,##0.0#;(#)|(5)|Parse Error|{color:red}Parses{color}|textNumberPattern_negativeIgnored05|
|    |(3,450.00)|Parses|{color:green}Parses{color}|textNumberPattern_negativeIgnored06|

see files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberProps.scala",[],2013-08-15 14:32:11+00:00,2013-08-22 12:14:20+00:00,2013-08-22 12:14:29+00:00,Closed,13114265,DAFFODIL-846
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to errata item 2.21:

2.21. Section 13.6. Change meaning of textNumberCheckPolicy enum 'lax' to align with ICU.: ""If ���lax' and dfdl:textNumberRep is 'standard' then grouping separators are ignored, leading and trailing whitespace is ignored, leading zeros are ignored, quoted characters may be omitted.""

I wrote two tests for the last part of that requirement, and they result in Parse Errors.

see tests test_textNumberCheckPolicy_lax01, test_textNumberCheckPolicy_lax05
in files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberProps.scala",[],2013-08-14 20:55:43+00:00,,2020-10-05 21:58:53+00:00,Open,13114264,DAFFODIL-845
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"The spec states - ""If multiple dfdl:defineEscapeScheme definitions have the same 'name' attribute, in the same namespace, then it is a schema definition error.""

I created a test with 2 defineEscapeSchemes having the same name attribute within the same defineSchema but the test does not throw an error as expected.

Test is escapeSchemeNonUnique in the files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/escapeScheme/escapeScheme.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/escapeScheme/TestEscapeSchemeDebug.scala",['beginner'],2013-08-14 20:55:06+00:00,,2020-08-05 18:22:35+00:00,Open,13114263,DAFFODIL-844
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to Errata item 2.106:

2.106. Section 13.6. State that textStandardDecimalSeparator,
textStandardGroupingSeparator, textStandardExponentRep, textStandardInfinityRep, textStandardNanRep and textStandardZeroRep must all be entirely distinct from one another, and it is a schema definition otherwise.

I created a test where the grouping separator matched the decimal separator (both "".""), and the parse fails with an ambiguous parse error:
{code}

[error] Test edu.illinois.ncsa.daffodil.section13.text_number_props.TestTextNumberProps.test_textStandardGroupingSeparator03 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Convert to Double (for xs:double): Unable to parse '5.000.000.00' (using up all characters).
{code}

See test textStandardGroupingSeparator03 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdm
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section13/text_number_props/TextNumberProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section13/text_number_props/TestTextNumberPropsDebug.scala",[],2013-08-14 18:46:41+00:00,2013-09-04 13:14:50+00:00,2013-09-17 21:46:03+00:00,Closed,13114262,DAFFODIL-843
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"There are copies of DFDL_part1.. and the like in both daffodil-lib and daffodil-propgen. We should remove one copy and make is so one project is able to reference files in another project. 

Perhaps we should make it so the daffodil-propgen executable takes a schema as input, and then when it is executed in daffodil-lib, we pass in the schemas. This means the schemas would not have to reside in the propgen project.",[],2013-08-14 15:41:11+00:00,2014-05-08 15:31:05+00:00,2014-08-05 19:44:48+00:00,Closed,13114261,DAFFODIL-842
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"We don't care too much about being strictly 80 characters, but some lines (like in built-in-formats.xsd) contain extremely long lines that make diff'ing difficult.",[],2013-08-13 19:30:15+00:00,,2018-09-13 14:04:35+00:00,Open,13114260,DAFFODIL-841
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2013-08-13 15:47:09+00:00,2020-01-22 16:15:36+00:00,2020-02-25 20:59:34+00:00,Closed,13114259,DAFFODIL-840
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"built-in-formats.xsd is used for external tests, and SchemaUtils daffodilTest1 is used for embedded schemas. We should remove this from SchemaUtils and instead modify the tdml tests to include built-in-formats.xsd.

Also built-informats.xsd should be renamed built-in-formats.dfdl.xsd.",[],2013-08-13 14:36:47+00:00,2014-11-17 16:16:39+00:00,2014-11-19 20:43:17+00:00,Closed,13114258,DAFFODIL-839
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to requirement DFDL-12-006R: If dfdl:trailingSkip is specified when dfdl:lengthKind is 'delimited' or 'endOfParent' then a dfdl:terminator must be specified.

I found this requirement when I was trying to figure out how daffodil would handle a delimited-length element with a trailingSkip and no terminator. Currently, this situation is not detected and I'm still trying to figure out exactly what is happening in my test. I'd assume that this should result in a Schema Definition Error.",[],2013-08-09 19:07:05+00:00,2013-09-12 14:19:36+00:00,2013-09-17 18:38:09+00:00,Closed,13114257,DAFFODIL-838
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Turning on DelimDebug in a test causes stack overflow.  The test was AW000 in daffodil-test-ibm1.,[],2013-08-07 14:33:36+00:00,,2018-09-13 14:04:00+00:00,Open,13114256,DAFFODIL-837
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"We need to remove the DelimSearchConstructs class.  It contains an EscapeSchemeObject that retrieves the escape scheme information in a non-uniform way compared to other properties.

Replace with the appropriate use of the escape scheme properties.",[],2013-08-06 11:54:18+00:00,2014-06-27 13:48:27+00:00,2014-07-08 16:56:12+00:00,Closed,13114255,DAFFODIL-836
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"OptionalInfixSep should display as follows when using ""display info parser"" in the cli debugger:

<OptionalInfixSep><Sep ....></Sep></OptionalInfixSep>

Instead the debugger shows:
(debug)
  parser: <Sep>; List((?,sequence,element.nested::LocalComplexTypeDef::sequence::sequence), (,,sequence,element.nested::LocalComplexTypeDef::sequence))</Sep>
(debug)
  parser: <OptionalInfixSep/>",[],2013-08-01 16:33:02+00:00,2015-01-15 19:34:31+00:00,2015-01-22 22:41:28+00:00,Closed,13114254,DAFFODIL-835
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Daffodil should issue a warning when the user uses an incorrect namespace for dfdl namespace attribute.,[],2013-08-01 14:42:19+00:00,,2018-09-13 14:04:01+00:00,Open,13114253,DAFFODIL-834
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"JIRA ticket - because there is supposed to be one for all changes.

These are tiny little library changes to various unit-test-related utilities.",[],2013-08-01 02:02:49+00:00,2013-08-01 12:29:33+00:00,2013-09-05 13:05:41+00:00,Closed,13114252,DAFFODIL-833
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Whenever an Assert.notYetImplemented(...) is called, the message needs to indicate what feature is not yet implemented. 

These really should all become Schema Definition Errors, unless the notYetImplemented call is there for very short-term reasons.",[],2013-07-31 12:20:35+00:00,2013-09-23 16:14:53+00:00,2013-09-23 18:44:32+00:00,Closed,13114251,DAFFODIL-832
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,Looks like tdml:warnings has not been implemented yet.,[],2013-07-30 21:21:24+00:00,2015-01-23 14:53:37+00:00,2015-01-23 22:30:59+00:00,Closed,13114250,DAFFODIL-831
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This is another missing optimization.

We often have parsers that have nested <seq>....</seq>

This is never needed as these can be merged. This improves tracing and debugging by avoiding having these excess things there.

It also simply reduces the number of parser 'actions' a bit, so can't hurt for performance reasons. Every parsed element seems to have at least one excess <seq>...</seq> created around it.",[],2013-07-30 18:12:32+00:00,2018-09-07 15:06:40+00:00,2021-05-20 20:01:51+00:00,Closed,13114249,DAFFODIL-830
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I tried running a quick test specifying only the Generic Schema:

{code}
~/NGF/dfdl (0.11.0) daffodil-cli/target/start parse -s ../DFDLSchemas-HL7-v2.7-f53bd9c/GenericHL7.xsd -s ../DFDLSchemas-HL7-v2.7-f53bd9c/A01.txt 
[error] Compilation (ProcessorFactory) produced 1 errors/warnings.
[error] Schema Definition Error: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.
Schema context: file:/home/jchab/NGF/dfdl/../DFDLSchemas-HL7-v2.7-f53bd9c/A01.txt. Location in ../DFDLSchemas-HL7-v2.7-f53bd9c/GenericHL7.xsd.
~/NGF/dfdl (0.11.0) daffodil-cli/target/start parse -s ../DFDLSchemas-HL7-v2.7-f53bd9c/GenericHL7.xsd ../DFDLSchemas-HL7-v2.7-f53bd9c/A01.txt 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!                 Not Yet Implemented                  !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 You are using a feature that is not yet implemented:

 Not yet implemented: edu.illinois.ncsa.daffodil.exceptions.Assert$.notYetImplemented(Assert.scala:83)
edu.illinois.ncsa.daffodil.dsom.LocalElementMixin$class.isLastRequiredElementOfSequence(Elements.scala:712)
edu.illinois.ncsa.daffodil.dsom.LocalElementBase.isLastRequiredElementOfSequence(Elements.scala:732)
edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$arrayContentsWithSeparators$1.gd17$1(GrammarMixins.scala:1001)

 You can create a bug and track the progress of this
 feature at:

  https://opensource.ncsa.illinois.edu/jira/browse/DFDL

{code}

The schema and test data can be found here:
http://dfdlschemas.github.io/HL7-v2.7/",['beginner'],2013-07-30 17:44:47+00:00,,2019-06-20 22:12:16+00:00,Open,13114248,DAFFODIL-829
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"IBM has been creating public DFDL schemas for various data types. When these are released, we try to parse data against the schema using Daffodil for compatibility's sake. A set of DFDL schemas that model HL7 v2.7 messages are now available in a DFDLSchemas GitHub repsitory at http://dfdlschemas.github.io/HL7-v2.7/
([View on github|https://github.com/DFDLSchemas/HL7-v2.7])",['ForInteroperabilityTest'],2013-07-30 16:18:06+00:00,2019-05-29 18:09:59+00:00,2021-05-20 20:01:46+00:00,Closed,13114247,DAFFODIL-828
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Please see ticket DFDL-622 for context. This issue will likely be fixed once we upgrade to XPath 2.0 (DFDL-727),[],2013-07-30 13:24:32+00:00,2014-11-24 19:19:26+00:00,2014-11-24 19:20:19+00:00,Closed,13114246,DAFFODIL-827
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The Java LogWriter interface calls {{msg.format(args)}}, where {{msg}} is a pattern string and {{args}} is the list of format arguments. This is a bug, because {{format}} does not take a list as a parameter, it takes variable arguments. So it should look like this instead: {{msg.format(args:_*)}}",[],2013-07-29 18:57:22+00:00,2013-07-30 17:48:29+00:00,2013-08-01 18:14:57+00:00,Closed,13114245,DAFFODIL-826
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Tested both with and without Cygwin.

It seems that SBT will not find projects that are linked in daffodil-extra.  With Cygwin I tried using a standard symlink (ln -s) as I had on all other platforms and when SBT was launched, it could not find the daffodil-perf project.  I tried using Cygwin's environment variable winsymlinks so that it would create a symlink that also appeared as a Windows shortcut, but that didn't work either

I also tried just using Windows CMD and creating a shortcut with mklink, and sbt still could not find the linked project.",[],2013-07-25 18:55:27+00:00,2013-07-25 19:08:49+00:00,2013-07-25 19:14:51+00:00,Closed,13114244,DAFFODIL-825
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"fn:trace is important for debugging.

But it is not part of the standard. 

To serve as a Daffodil-specific debugging tool, it must be provided, but in an extension namespace that is the daffodil extension namespace (URN for which is in XMLUtils) typically bound to prefix dafext.",[],2013-07-24 14:53:05+00:00,2014-11-11 17:20:55+00:00,2014-11-13 14:17:01+00:00,Closed,13114243,DAFFODIL-824
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"While working on DFDL-732, I was unaware that when creating a string element with maxOccurs=""unbounded"" and occursCountKind=""implicit"" you are required to speicify the max/minLength facets.  Currently, if you don't it results in a very large, unhelpful stack trace:

[error] Test edu.illinois.ncsa.daffodil.section14.occursCountKind.TestOCKImplicitNew.test_ockImplicit7 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: StringFixedLengthInBytesFixedWidthCharacters - Exception:
[error] edu.illinois.ncsa.daffodil.processors.DFDLByteReader.getByteArray(DFDLReader.scala:105)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getByteAlignedBytes(InStream.scala:246)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getBytes(InStream.scala:208)
[error] edu.illinois.ncsa.daffodil.processors.StringLengthInBytes.parseInput(PrimitivesLengthKind.scala:161)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:48)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error] edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1.parse(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
..............................",['beginner'],2013-07-23 20:04:31+00:00,2021-01-14 15:06:49+00:00,2021-01-14 15:06:49+00:00,Closed,13114242,DAFFODIL-823
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,Daffodil currently does not SDE when the initiator property appears on an element that also has an inputValueCalc property.,['beginner'],2013-07-22 19:58:22+00:00,,2021-01-21 15:31:36+00:00,Open,13114241,DAFFODIL-822
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I know the title isn't totally clear.. I'll try to make up for it in my explanation. It seems like a tricky issue and it very well might be something we can't/don't need to change. 

the fn:dateTime function takes in an xs:date and an xs:time and combines them into an xs:dateTime. According to the documentation for this function (built-in XPath function), ""If exactly one of the arguments has a time zone, or if both arguments have the same time zone, the result has this time zone""

I created a test to try and demonstrate this, but if you specify a calendarPattern that does not have a timezone, the default timezone still gets filled in (+00:00), so I get the following output:

{code}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_fnDateTime_constructor_03 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed. Details: net.sf.saxon.trans.XPathException: Supplied date and time are in different timezones
[error] Schema context: element.dateTime Location line 41 column 120 in file:/tmp/daffodil_tmp_4711092766606570903.dfdl.xsd(no data location)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.PE(Parser.scala:209)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.PE(CompiledExpression.scala:121)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.PE(Parser.scala:204)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.PE(CompiledExpression.scala:121)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.evaluate(CompiledExpression.scala:157)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluationParser.eval(Primitives.scala:1672)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser$$anonfun$parse$6.apply(Primitives.scala:1688)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser$$anonfun$parse$6.apply(Primitives.scala:1685)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluationParser.withParseErrorThrowing(Primitives.scala:1664)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser.parse(Primitives.scala:1685)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:147)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:146)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:143)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:142)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:142)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:134)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:589)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:470)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:407)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:260)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:251)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_fnDateTime_constructor_03(TestDFDLExpressions.scala:157)
[error]     ...

{code}
see test test_fnDateTime_constructor_03",[],2013-07-18 19:33:45+00:00,2013-07-19 14:21:24+00:00,2013-07-19 14:21:50+00:00,Closed,13114240,DAFFODIL-821
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,,[],2013-07-18 16:45:18+00:00,2013-07-19 15:39:47+00:00,2013-07-19 15:40:09+00:00,Closed,13114239,DAFFODIL-820
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"There seems to be an inconsistency with how the xs:integer() constructor function behaves depending on how the arguments are provided. 

For example, if I create an element with
{code}
dfdl:inputValueCalc=""{ xs:integer(xs:float(45.4)) }""
{code}

I get the following
{code}
<integer>45</integer>
{code}
which is what I would expect.

However, if I create a sequence of two elements, the first is a float, and the second is an integer with
{code}
dfdl:inputValueCalc=""{ xs:integer(../ex:float) }""
{code}
with a document of 45.4, I get an error.

{code}
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_integer_constructor_06 failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: Expression evaluation failed. Details: net.sf.saxon.trans.XPathException: Cannot convert string ""45.4"" to an integer
[error] Schema context: element.intified Location line 25 column 107 in file:/tmp/daffodil_tmp_7865467733540051367.dfdl.xsd(no data location)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.PE(Parser.scala:209)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.PE(CompiledExpression.scala:121)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.PE(Parser.scala:204)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.PE(CompiledExpression.scala:121)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.evaluate(CompiledExpression.scala:157)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluationParser.eval(Primitives.scala:1653)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser$$anonfun$parse$6.apply(Primitives.scala:1669)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser$$anonfun$parse$6.apply(Primitives.scala:1666)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error]     at edu.illinois.ncsa.daffodil.processors.ExpressionEvaluationParser.withParseErrorThrowing(Primitives.scala:1645)
[error]     at edu.illinois.ncsa.daffodil.processors.IVCParser.parse(Primitives.scala:1666)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:147)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:146)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:143)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:142)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:142)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:134)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:589)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:470)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:407)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:260)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:251)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_integer_constructor_06(TestDFDLExpressions.scala:159)
[error]     ...
{code}

Please see the following tests:
test_integer_constructor_05
test_integer_constructor_06
test_integer_constructor_07
in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2013-07-18 16:23:44+00:00,2014-11-07 20:39:25+00:00,2014-11-11 16:37:56+00:00,Closed,13114238,DAFFODIL-819
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"DFDL-421 and DFDL-422 are the development tickets for the xs:integer data type (binary and text) but they have been closed. Rather than reopen one of them just to write tests for the constructor function (Req DFDL-23-078R), I am creating this ticket to track the creation of these tests.",[],2013-07-18 13:59:19+00:00,2013-07-18 16:39:13+00:00,2013-07-18 16:39:20+00:00,Closed,13114237,DAFFODIL-818
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"--validation should not be one of the available options for save-parser. Since saving a parser has not yet been implemented, this should just be a matter of removing the option from the help output (daffodil-cli/target/start save-parser --help) and the wiki ([Command Line Interface|https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Command+Line+Interface])",[],2013-07-16 17:56:23+00:00,2021-05-11 21:22:54+00:00,2021-05-12 17:48:16+00:00,Closed,13114236,DAFFODIL-817
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Need to add support for a \-q/\-\-quiet option, which disables warning output (only errors are displayed). Using this option with \-v/\-\-verbose should cause an error.",[],2013-07-16 16:57:57+00:00,,2018-09-13 14:03:53+00:00,Open,13114235,DAFFODIL-816
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"I added a ""--large"" option to the test harness a while back to enable the large file tests.  When testing with the most up to date stuff, it fails to apply the changes correctly.",[],2013-07-16 14:08:20+00:00,2013-07-16 16:33:33+00:00,2013-07-18 13:24:12+00:00,Closed,13114234,DAFFODIL-815
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Quite a few changes have been made to the CLI since the requirements were first drafted (addition of a trace mode, ability to provide instructions file, etc.) The requirements need to be updated to reflect all of these changes, and we need to make sure if an existing requirement is no longer met, that that is the intended behavior of the tool.",[],2013-07-16 13:12:28+00:00,2013-07-17 15:28:43+00:00,2013-07-17 15:29:02+00:00,Closed,13114233,DAFFODIL-814
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"An alternative to turning on validation and having to deal with warning messages is to build the valid/not-valid information into the infoset.

Turns out the DFDL Spec allows for this. Infoset Items have a 'valid' member which is a boolean indicating whether the item is valid or not. (See DFDL Spec section 4.1.2).

When validation is enabled, we should populate this member.

Hopefully there are standard ways to represent the information of a PSVI, that are settable/accessible from JDOM/DOM.

(If not we can invent one like: dafext:valid=""true"", or similar).",[],2013-07-15 22:46:51+00:00,,2018-09-13 14:03:59+00:00,Reopened,13114232,DAFFODIL-813
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to requirement DFDL-2-027R, ""Validation errors should not be suppressed by points of uncertainty""

I set up a choice where, due to an initiator, the first element is chosen. The data provided is not valid for the type, and it is also not valid for the facet attached to the element. I get a Parse Error as expected, but according to this requirement, I should also be seeing validation errors. I expect validation errors in the test, and the test is currently passing even though no validation errors are occurring. 

Please see tests choice_errorNotSuppressed_01 and choice_errorNotSuppressed_02 in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section02/validation_errors/Validation.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section02/validation_errors/TestValidationErrDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section02/validation_errors/TestValidationErr.scala",[],2013-07-12 15:22:48+00:00,2013-08-05 17:13:08+00:00,2013-08-05 17:13:38+00:00,Closed,13114231,DAFFODIL-812
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When fixing DFDL-808, some tests were modified so they would work again, but due to DFDL-809, the style of those tests puts some assertion checking in a place that is non-obvious and unituitive.

This JIRA issue is to revisit these tests, and move the asserts to the natural place (on the element declarations, not the element references to them.)

The tests are

test_nested_patterns_02
test_regexLookaheadFail
test_nested_seq_01
test_nested_seq
test_litNil6",['beginner'],2013-07-10 13:20:40+00:00,,2018-10-04 01:07:32+00:00,Open,13114230,DAFFODIL-811
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When issuing this PE, the delimiter string is not presented properly. It should convert the space to %SP;",['beginner'],2013-07-10 04:09:09+00:00,,2020-08-05 18:19:22+00:00,Open,13114229,DAFFODIL-810
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Given a global element with an assert on it having testKind pattern.

Use that element from inside a choice via an element ref.

The assert isn't executed at all.

Moving the assert from the element declaration to the element ref works, so some situations where pattern asserts inside a choice do work. 

Will create a test to illustrate.",[],2013-07-09 23:43:17+00:00,2018-09-07 14:38:06+00:00,2021-05-20 12:34:34+00:00,Closed,13114228,DAFFODIL-809
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Currently, if the pattern does not match at all, then that is a runtime error. 
This is not correct. It should just be length 0. 

This is not clear from the DFDL Specification (I will suggest a clarification of this be added.) 

Changing this code to do the right thing breaks several tests: 

test_nested_patterns_02
test_regexLookaheadFail 
test_nested_seq_01 
test_nested_seq
test_litNil6",[],2013-07-09 23:34:46+00:00,2015-01-22 13:54:43+00:00,2015-01-30 13:08:09+00:00,Closed,13114227,DAFFODIL-808
Improvement,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Currently, only certain errors are detected/reported by the test harness, namely the SSH connection errors that seem to occur on Windows.  Pretty much anything else will not be reported, other than not showing up in that nights result file.

It would be good to have better error reporting so that we can have a better understanding of what is causing them.",[],2013-07-09 21:06:25+00:00,2013-07-11 14:24:06+00:00,2013-07-16 13:31:15+00:00,Closed,13114226,DAFFODIL-807
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"With the automated debugger tests, it seems that the timeout is being hit with every test, regardless of whether or not data is matched correctly. I gathered the following statistics with variable timeout values for 15 tests:

parser
timeout 5 sec - 122s
timeout 10 sec - 131s
timeout 20 sec - 132s
timeout 30 sec - 148s

debug
timeout 5 sec - 77s
timeout 10sec - 152s
timeout 20 sec - 303s
timeout 30 sec - 452s

The timing for the debug tests is very consistent. Running the debug suite with a 5 second time out took about 77 seconds every time. The execution time increases by the same degree as the timeout. The CLI debugger isn't exiting correctly, so the test does not end until the timeout is reached.",[],2013-07-08 19:49:59+00:00,2014-11-11 15:19:06+00:00,2014-11-19 18:05:59+00:00,Closed,13114225,DAFFODIL-806
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When attampting to run the CLI in trace mode, I get the following exception/traceback:

{code}
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.lang.ClassCastException: edu.illinois.ncsa.daffodil.processors.InfosetDocument cannot be cast to edu.illinois.ncsa.daffodil.processors.InfosetElement
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Eval$.apply(InteractiveDebugger.scala:861)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$.apply(InteractiveDebugger.scala:441)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.edu$illinois$ncsa$daffodil$debugger$InteractiveDebugger$$runCommand(InteractiveDebugger.scala:275)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1$$anonfun$apply$mcV$sp$3.apply(InteractiveDebugger.scala:166)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1$$anonfun$apply$mcV$sp$3.apply(InteractiveDebugger.scala:166)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:30)
	at scala.collection.mutable.ListBuffer.foreach(ListBuffer.scala:44)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply$mcV$sp(InteractiveDebugger.scala:166)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply(InteractiveDebugger.scala:149)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$$anonfun$after$1.apply(InteractiveDebugger.scala:149)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingUnrestrictedMode$1.apply(ExecutionMode.scala:81)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.after(InteractiveDebugger.scala:149)
	at edu.illinois.ncsa.daffodil.debugger.Debugger$.after(Debugger.scala:52)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:136)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:147)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:146)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:143)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:142)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:142)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:134)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$80.apply(Main.scala:447)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$80.apply(Main.scala:446)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:92)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:445)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:724)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}

I've tried several commands that all result in this error after some expected debug output:

echo 0,1| ./daffodil-cli/target/start -t parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix -

./daffodil-cli/target/start --trace parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix daffodil-cli/src/test/resources/edu/illinois/ncsa/daffodil/CLI/input/input1.txt",[],2013-07-08 19:29:38+00:00,2013-07-08 20:15:54+00:00,2013-07-09 15:11:18+00:00,Closed,13114224,DAFFODIL-805
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I've been creating tests for XPath numeric functions (abs, floor, ceiling, etc) and came across a strange issue when testing round-half-to-even:

I set up a schema:
{code}
    <xs:element name=""round-hte"">
      <xs:complexType>
        <xs:sequence dfdl:separator="","">
          <xs:element name=""num"" type=""xs:float"" dfdl:lengthKind=""delimited""/>
          <xs:element name=""precision"" type=""xs:int"" dfdl:lengthKind=""delimited""/>
          <xs:element name=""roundval"" type=""xs:float"" dfdl:inputValueCalc=""{ fn:round-half-to-even(../ex:num,../ex:precision) }""/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>
{code}

I have a test with the following as input data:
{code}
3.0000075,6
{code}

so the first element in my infoset should just be the input data, but I get this:
{code}
<num>3.0000074</num>
{code}

I have no idea why the 5 is getting changed to a 4, but it happens in another test I created as well.

See test_xPathFunc_round_hte_07 and test_xPathFunc_round_hte_03. It also appears that floats have a decimal precision limit of 7 digits (see test_xPathFunc_round_hte_08) in:

M       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
M       daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
M       daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2013-07-05 19:27:44+00:00,2013-09-18 12:34:48+00:00,2013-09-18 12:35:28+00:00,Closed,13114223,DAFFODIL-804
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,Make sure each unit-style test in MainTests.scala has a corresponding ExpectJ automated test and remove MainTests.scala and dependency on system-rules.,[],2013-07-05 14:19:12+00:00,2013-07-15 19:37:13+00:00,2013-07-15 19:58:42+00:00,Closed,13114222,DAFFODIL-803
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"An element has an escape scheme defined:
{code}
<xsd:element name=""DisplayNameWithinQuotes"" type=""DisplayNameWithinQuotes""
                maxOccurs=""1"" minOccurs=""1"" dfdl:escapeSchemeRef=""DefaultPropertiesEscapeScheme"">
{code}
but Daffodil seems to be ignoring it.  The escape schema begins and ends with quotes:
{code}
                                    <dfdl:defineEscapeScheme name=""DefaultPropertiesEscapeScheme"">
                                                <dfdl:escapeScheme escapeBlockEnd=""&quot;"" escapeBlockStart=""&quot;""
                                                            escapeCharacter=""&quot;"" escapeEscapeCharacter=""&quot;"" escapeKind=""escapeBlock""
                                                            extraEscapedCharacters="", %#x0D; %#x0A;"" generateEscapeBlock=""whenNeeded""
                                                > </dfdl:escapeScheme>
                                    </dfdl:defineEscapeScheme>
{code}
Tested with an email header; it's the display name that is escaped:
{code}
To: ""Garriss Jr. James P."" <jgarriss@mitre.org>
{code}
Daffodil appears to be ignoring the escaping.  Here's the step in the trace where it does so:
{code}
parser: <StringDelimitedEndOfDataStatic/>
data:
      ??????????????????????????????????????????? (4 to 47)
  To: ""Garriss Jr. James P."" <jgarriss@mitre.org>??Date: Fri, 15 Feb 201
infoset:
  <MessageHeaders>
    <MessageHeadersArray>
      <To>
        <Mailbox>
          <DisplayEmailWithQuotedDisplayName>
            <DisplayNameWithinQuotes>
              &quot;Garriss Jr. James P.&quot; &lt;jgarriss@mitre.org&gt;
            </DisplayNameWithinQuotes>
          </DisplayEmailWithQuotedDisplayName>
        </Mailbox>
      </To>
    </MessageHeadersArray>
  </MessageHeaders>
----------------------------------------------------------------- 41
{code}
Files sent to Taylor per his request.",[],2013-07-05 11:47:41+00:00,2013-07-08 15:06:04+00:00,2013-08-23 13:42:18+00:00,Closed,13114221,DAFFODIL-802
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"I believe this problem is in TDMLRunner, but am not entirely sure.

For example:
<tdml:documentPart type=""byte"">1999999999999999</tdml:documentPart>

For some reason, each digit seems to be read as only 4 bits instead of a whole byte.  If the schema has dfdl:representation=""binary"" dfdl:lengthKind=""explicit"" dfdl:length=""{ 16 }"", the test will can an IndexOutOfBoundsException as there are not enough bits.

A good example of a test like this can be found in scala-debug/.../section05/simple_types/TestSimpleTypes2.scala, test_nonNegativeInteger_bin",[],2013-07-02 21:00:26+00:00,2013-07-05 15:22:26+00:00,2013-07-08 15:47:11+00:00,Closed,13114220,DAFFODIL-801
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I have a test that causes a validation error because the parsed data does not  adhere to the value of maxInclusive. The important excerpt from the schema is the following (other choices removed):
{code}
    <xs:element name=""root"">
      <xs:complexType>
         <xs:choice>
           <xs:element name=""max3"" dfdl:lengthKind=""delimited"">
             <xs:simpleType>
               <xs:restriction base=""xs:int"">
                 <xs:maxInclusive value=""3"" />
               </xs:restriction>
             </xs:simpleType>
           </xs:element>
           ..............
{code}

The validation error looks like this:

Value '8' is not facet-valid with respect to maxInclusive '3' for type '#AnonType_max3root'.

Would it be possible for the actually type (xs:int) to be pulled for this, instead of #AnonType? Also, the ""max3root"" is confusing, as it just smashes together the root element and the element in question.

see test test_choice_ignoreValidationErr_01:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section02/validation_errors/Validation.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section02/validation_errors/TestValidationErrDebug.scala

Note that the test currently passes because I do not include the questionable output in my expected validation error.",[],2013-07-02 15:55:33+00:00,2013-10-14 13:15:47+00:00,2013-10-14 13:15:53+00:00,Closed,13114219,DAFFODIL-800
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a separate bug for this so DFDL-483 doesn't get too hard to follow.

I wrote a test that uses a sequence with minOccurs = 3 and maxOccurs = unbounded.

[info] Test edu.illinois.ncsa.daffodil.section02.validation_errors.TestValidationErrDebug.test_facetCombos_fail_limited_02 started
Validation Succeeded!
2013-07-02 06:59:54:321  edu.illinois.ncsa.daffodil.tdml.ParserTestCase Error[Validation Error: {color:red}element.e occurred '7' times when it was expected to be a minimum of '3' and a maximum of '-1' times.{color}
Schema context: Some(element.arrayCombo). Location line 22 column 353 in file:/tmp/daffodil_tmp_3337200428269477730.dfdl.xsd. Data Context: byte 14

based on the schema I have an acceptable number of elements, but it seems to think I have too many because maxOccurs unbounded seems to be translated to -1.

see tests facetCombos_fail_limited_02 and facetCombos_fail_on_02 in the following files:

daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section02/validation_errors/TestValidationErrDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section02/validation_errors/Validation.tdml",[],2013-07-02 14:08:21+00:00,2013-08-16 11:44:17+00:00,2013-08-16 14:25:47+00:00,Closed,13114218,DAFFODIL-799
Improvement,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"review Wiki Errata Implemented/Not Implemented page: https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=22052868

synopsis:
Every errata that has a ""No"" status, and is not about unparsing, we need a JIRA task, and a requirement (or a few perhaps for the larger errata) to track them. Well, I guess we need requirements for all of them - I know Tham did an analysis of this not too far back.

For these errata numbers, I was not sure of the answers. I guessed, but someone from test really needs to see if I am right here. In some cases I may have been optimistic, others pessimistic versus reality.

3.22 - code is there. Do we have test coverage?
3.29 - I vaguely recall discussion of this. Did tests get created?

2.66 - tbd: what is the behavior and do we test this?
2.68 - is this done?
2.103 - do we have tests about alignment of individual instances of an array vs. the whole array?
2.116 - do we check this for defineVariable even?
2.117 - do we have test coverage of this. I recall the design discussions with Taylor, but not sure if this is tested.
2.120 - feels to me like we might have partial coverage of this.
2.121 - done? tested?
2.127 - done? tested?
2.129 - do we check for choice with no branches?
2.134 - done? tested?

comparing to Eratta at http://redmine.ogf.org/dmsf/dfdl-wg?folder_id=5485",[],2013-06-27 20:17:49+00:00,2020-10-21 20:06:26+00:00,2021-05-18 10:24:45+00:00,Closed,13114217,DAFFODIL-798
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you try to read text data, where the encoding is iso-8859-1, and the byte 0xFF is in the data, you will not get that character. The string will end before that character. 

Signed byte value for 0xFF is -1, and returning -1 means ""no more characters"". Have to read the byte (signed), convert to an unsigned int, and then return that so that 255 is returned.",[],2013-06-27 19:40:06+00:00,2013-07-08 20:17:22+00:00,2013-07-19 21:41:52+00:00,Closed,13114216,DAFFODIL-797
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Blocker,"The Buildbot has detected a failed buildBuild Reason: scheduler
Build Source Stamp: [branch 0.11.0] b88f8efe45b6e5080574109e5de63b6b271bbba0
Blamelist: Taylor Wise <twise@tresys.com>

BUILD FAILEDshell_6.stdio

The detailed log of the last build step below.


[info] Test run started
[info] Test edu.illinois.ncsa.daffodil.CLI.executing.TestCLIexecuting.test_995_CLI_Executing_Listing_negativeTest01 started
Bytes processed: 14
Characters processed: 14
Pass escape_entry1
Missing escape_entry1-5
Missing escape_entry2-11
Bytes processed: 7
Characters processed: 7
Pass escape_entry4_3
[info] Test run finished: 0 failed, 0 ignored, 1 total, 4.834s
[error] Failed: : Total 45, Failed 1, Errors 0, Passed 44, Skipped 0
[error] Failed tests:
[error] 	edu.illinois.ncsa.daffodil.CLI.debugger.TestCLIdebugger
java.lang.RuntimeException: Tests unsuccessful
	at scala.sys.package$.error(package.scala:27)
	at scala.Predef$.error(Predef.scala:123)
	at sbt.Tests$.showResults(Tests.scala:192)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:296)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:294)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
[error] (daffodil-cli/cli:test) Tests unsuccessful
[error] Total time: 624 s, completed Jun 25, 2013 12:05:52 PM",[],2013-06-25 18:20:07+00:00,2013-08-15 19:18:25+00:00,2013-08-16 12:41:29+00:00,Closed,13114215,DAFFODIL-796
Improvement,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"Currently, the averages.csv file in the reports/ directory on the dfdl-testharness machine is destroyed and recreated every day at 8:00 am.  It would be useful if we could simply append the new results, which would allow us to keep persistent comments in the averages.csv file",[],2013-06-25 17:40:34+00:00,,2018-09-13 14:03:59+00:00,Open,13114214,DAFFODIL-795
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Users will write dfdl:lengthPattern=""(.+?)(?=%CR;%LF;--)""

Then wonder why it doesn't work (witness DFDL-792). 

Turns out, DFDL entities aren't allowed in regular expressions, so the user has to write:

dfdl:lengthPattern=""(.+?)(?=\r\n--)""

We should examine properties that are supposed to be regex, and warn  if they contain things that look like DFDL entities.",[],2013-06-25 13:37:26+00:00,,2018-09-13 14:04:36+00:00,Open,13114213,DAFFODIL-794
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Blocker,"Related to 792.
Daffodil cannot match pattern ""--%CR;%LF;""
{code}
<xsd:element name=""first"" type=""xsd:string"" dfdl:terminator=""%CR;%LF;"" dfdl:lengthKind=""pattern""	dfdl:lengthPattern=""(.+?)(?=--%CR;%LF;)""/>
{code}",[],2013-06-24 18:54:40+00:00,2013-06-24 19:20:29+00:00,2013-08-23 13:42:45+00:00,Closed,13114212,DAFFODIL-793
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Blocker,"Daffodil won't match pattern %CR;%LF;--.  
{code}
<xsd:element name=""first"" type=""xsd:string"" dfdl:terminator=""%CR;%LF;"" dfdl:lengthKind=""pattern""	dfdl:lengthPattern=""(.+?)(?=%CR;%LF;--)""/>
{code}
Might be related to 765.",[],2013-06-24 18:43:32+00:00,2013-06-24 19:20:38+00:00,2013-08-23 13:43:03+00:00,Closed,13114211,DAFFODIL-792
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"Defining separators using a variable does not seem to work:
{code}
$ .daffodil parse -s MultipartBody.xsd alternative.txt 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please report this bug and help us fix it:

  https://opensource.ncsa.illinois.edu/confluence/display/DFDL/How+to+Report+a+Bug

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:95)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:106)
edu.illinois.ncsa.daffodil.processors.Text.getMatchedDelimiterInfo(PrimitivesDelimiters.scala:217)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:95)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:106)
	at edu.illinois.ncsa.daffodil.processors.Text.getMatchedDelimiterInfo(PrimitivesDelimiters.scala:217)
	at edu.illinois.ncsa.daffodil.processors.DynamicText$$anon$2$$anonfun$parse$2.apply(PrimitivesDelimiters.scala:328)
	at edu.illinois.ncsa.daffodil.processors.DynamicText$$anon$2$$anonfun$parse$2.apply(PrimitivesDelimiters.scala:268)
	at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
	at edu.illinois.ncsa.daffodil.processors.DynamicText.withParseErrorThrowing(PrimitivesDelimiters.scala:225)
	at edu.illinois.ncsa.daffodil.processors.DynamicText$$anon$2.parse(PrimitivesDelimiters.scala:266)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.RepUnboundedPrim$$anon$4.parseAllRepeats(RepParsers.scala:224)
	at edu.illinois.ncsa.daffodil.processors.RepPrim$RepParser.parse(RepParsers.scala:68)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:130)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:129)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:126)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:125)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:125)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:117)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:421)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:419)
	at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:92)
	at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:418)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:668)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}",[],2013-06-24 18:27:35+00:00,2013-08-14 19:10:24+00:00,2013-08-15 22:49:07+00:00,Closed,13114210,DAFFODIL-791
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"To demonstrate this create a test.  Before the runOneTest command create and add a Debugger.  Do not reset the Debugger to the global defaults at the end of the test.

As an example look in TestUserSubmittedTests.scala at test_dfdl_782.  Comment out the last two Debugger lines after runner.runOneTest.  This will cause all sorts of failures in SBT.","['dev-verify', 'thread-safety']",2013-06-24 18:20:14+00:00,,2021-01-20 19:10:11+00:00,Open,13114209,DAFFODIL-790
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"It is standard practice to use hyphens to separate multi-word options rather than camelCase. So, --validation-mode rather than --validationMode.

However, now that I think about it, the following is a little more simple:
{code}
--validate [mode]
{code}
So mode is optional, and we default to 'on' if a mode is not specified, similar to how the --debug option works.",[],2013-06-24 17:37:50+00:00,2013-09-30 14:23:45+00:00,2013-10-03 18:12:07+00:00,Closed,13114208,DAFFODIL-789
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"LineCounter2 class is in daffodil-core under src/test/scala.

It would be good if this was just driven directly from sbt so that it could be a standard automated part of a built/test/release cycle.

It should be modified to not require a hard-wired path name, etc.",[],2013-06-21 23:03:13+00:00,,2019-08-05 12:46:23+00:00,Open,13114207,DAFFODIL-788
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Via the JAPI, users see our choice of DOM-tree (JDOM); hence, that should be a current implementation of whatever library it is. Today we're using JDOM 1.1.3, but JDOM 2.x has been available for a while.

Note that once we have a larger user base, we'll be stuck supporting JDOM 2.x forever even if we change what is used internally by daffodil (for space or speed reasons perhaps). That would cost a pass over the data, but that said, it's easy to do.",[],2013-06-21 20:12:31+00:00,2014-05-01 19:15:08+00:00,2014-05-23 15:32:02+00:00,Closed,13114206,DAFFODIL-787
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Somehow I led us astray.

I thought the xs:appinfo source attribute used by DFDL should be the same as the DFDL namespace URL, but that's not the case.

I even put a check in which issues a warning if one uses http://www.ogf.org/dfdl/ and not the namespace URL.

This is wrong. 

Section 6.1 of the spec clearly states:

The xs:appinfo source URI http://www.ogf.org/dfdl/ is used to distinguish DFDL annotations from other annotations.

So we need to change to use that URL uniformly everywhere. We can make the code tolerant of the namespace URL or the correct source attribute value, but we should globally replace where we have it wrong.",[],2013-06-21 18:46:27+00:00,2013-06-25 14:06:40+00:00,2013-07-30 17:48:17+00:00,Closed,13114205,DAFFODIL-786
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you have a sequence (presumably same bug will occur for choice), and it begins with an annotation containing a dfdl:assert with testKind expression, then that is supposed to execute *after* the sequence children have been evaluated. This is consistent with elements and element refs, where an assert/discriminator with testKind=expression executes AFTER the element itself has been parsed. 

This is confusing for sequences and choices because the assert will appear lexically before the rest of the sequence/choice children, but it executes after. (Perhaps we should issue a warning because the workaround - described below - is actually a better & clearer way to write a schema.)

(When testKind=pattern, they execute before)

Same goes for discriminators. 

(Errata 3.25: Section 9. Evaluation Order for Statement Annotations)

Currently seems to execute before.

This is low priority because the workaround is easy. Just put the assert inside it's own sequence, and then insert *that* sequence below all the other things in the enclosing sequence.

You have to do this:

<sequence>
     ... where the assert was...
    <element .../>
    <element.../>
    <sequence>
         ... new location for assert ...
    </sequence>
</sequence>

So the annotation moves below, but is still first in the sequence that directly contains it, but that sequence is otherwise empty.",[],2013-06-21 16:39:42+00:00,2018-08-16 16:00:06+00:00,2018-08-16 16:00:15+00:00,Closed,13114204,DAFFODIL-785
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Our friends at IBM fed our PCAP schema to their DFDL implementation. 

It spat out some errors:

Properties that need a default in scope:
CTDV1118E : When 'sequenceKind' is 'ordered', DFDL property 'floating' must be set.
CTDV1236E : When number or calendar representation is binary, DFDL property 'binaryNumberCheckPolicy' must be set.
CTDV1263E : For a sequence, DFDL property 'sequenceKind' must be set.
CTDV1332E : DFDL property 'fillByte' must be set. 

We need to add these properties to all examples so that they will be portable.",['ForInteroperabilityTest'],2013-06-21 16:11:37+00:00,2019-06-20 16:46:07+00:00,2021-05-20 12:34:03+00:00,Closed,13114203,DAFFODIL-784
Improvement,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"Sequences that are referenced by the hiddenGroupRef always show up in the trace.  
{code}
<xsd:sequence dfdl:hiddenGroupRef=""MixedCaseMimeTypeGroup""/>
{code}
Sometimes this is good, but other times this is bad. 

To do:  add a flag to trace that allows this feature to be ON or OFF.",[],2013-06-20 18:02:47+00:00,2013-06-24 14:17:53+00:00,2013-08-23 13:43:25+00:00,Closed,13114202,DAFFODIL-783
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"User received an invariant failure due to a scala match error of null.  DupeDupeInvariant.zip.

Test will be added as JavaAPI test 10.",[],2013-06-20 14:48:26+00:00,2013-06-24 15:21:06+00:00,2013-06-26 15:00:40+00:00,Closed,13114201,DAFFODIL-782
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While creating tests for DFDL-241 I ran into this error. I soon realized that I wanted dfdl:lengthKind=""delimited"" for this element and changing this attribute fixed my problem. I believe I should have been getting an SDE asking for min/maxLength, or maybe something different since the string had a binary representation - something more descriptive and helpful than the error below.

[info] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b started
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: StringFixedLengthInBytesFixedWidthCharacters - Exception: 
[error] edu.illinois.ncsa.daffodil.processors.DFDLByteReader.getByteArray(DFDLReader.scala:105)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getByteAlignedBytes(InStream.scala:246)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getBytes(InStream.scala:208)
[error] edu.illinois.ncsa.daffodil.processors.StringLengthInBytes.parseInput(PrimitivesLengthKind.scala:161)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:48)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error] edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1.parse(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:130)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:129)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:126)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:125)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:125)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:117)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:556)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error] edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error] edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b(TestDFDLExpressions.scala:64)
[error] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[error] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] java.lang.reflect.Method.invoke(Method.java:601)
[error] org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
[error] org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[error] org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
[error] org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[error] org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runners.Suite.runChild(Suite.java:127)
[error] org.junit.runners.Suite.runChild(Suite.java:26)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:160)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:138)
[error] com.novocode.junit.JUnitRunner.run(JUnitRunner.java:90)
[error] sbt.TestRunner.delegateRun(TestFramework.scala:58)
[error] sbt.TestRunner.run(TestFramework.scala:51)
[error] sbt.TestRunner.runTest$1(TestFramework.scala:71)
[error] sbt.TestRunner.run(TestFramework.scala:80)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10$$anonfun$apply$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10$$anonfun$apply$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:200)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10.apply(TestFramework.scala:188)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] scala.collection.TraversableLike$class.map(TraversableLike.scala:233)
[error] scala.collection.immutable.List.map(List.scala:76)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$5.work(System.scala:71)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
[error] sbt.Execute.work(Execute.scala:238)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
[error] sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
[error] java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
[error] java.lang.Thread.run(Thread.java:722)
[error] 
[error] Schema context: element.b0m Location line 80 column 71 in file:/tmp/daffodil_tmp_7355745031498832314.dfdl.xsd
[error] Data location was preceding byte 0
[error] UTF-8 text starting at byte 0 is: (littleEndian.)
[error] Data (hex) starting at byte 0 is: (0x6C6974746C65456E6469616E2E00010001)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.PE(Parser.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:54)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:38)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error]     at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1.parse(PrimitivesLengthKind.scala:38)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:130)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:129)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:126)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:125)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:117)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:556)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b(TestDFDLExpressions.scala:64)
[error]     ...

The test (byteOrderExpr7b) is nearly identical to byteOrderExpr7. The only difference is the lengthKind for the string. byteOrderExpr 7 passes.

Please see the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/runtime_properties/runtime-properties.tdml",[],2013-06-20 14:13:57+00:00,2013-09-18 17:01:41+00:00,2013-09-18 18:06:02+00:00,Closed,13114200,DAFFODIL-781
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"Performing:

$ git checkout origin/0.10.1

Then attempting to build using SBT fails with a java.lang.AssertionError.  This is because of line 278 of build.scala.  I suspect that because I checked out the remote instance of the branch, it could not detect the 'tracking' reference and failed at the assertion.

Performing:
$ git checkout 0.10.1

works because 0.10.1 is setup to track origin/0.10.1.

In short, we need a better error message here.

Portion of the trace:

> [debug] Scala compilation took 9.592334588 s [debug] Step 2 changed 
> sources and immdediate dependencies:
> [debug]                Set(/home/developer/daffodil_10.1/daffodil/project/build.scala)
> [debug] Non-trivial strongly connected components:
> [debug]
> [debug] Step 2 invalidated sources:
> [debug]                Set(/home/developer/daffodil_10.1/daffodil/project/build.scala)
> [debug] Copy resource mappings:
> [debug]
> java.lang.AssertionError: assertion failed
>                  at scala.Predef$.assert(Predef.scala:146)
>                  at DaffodilBuild$$anonfun$14.apply(build.scala:278)
>                  at DaffodilBuild$$anonfun$14.apply(build.scala:247)
>                  at sbt.Init$Value$$anonfun$apply$6.apply(Settings.scala:329)
>                  at sbt.EvaluateSettings$$anonfun$sbt$EvaluateSettings$$constant$1.apply(INode.scala:158)
>                  at sbt.EvaluateSettings$$anonfun$sbt$EvaluateSettings$$constant$1.apply(INode.scala:158)
>                  at sbt.EvaluateSettings$MixedNode.evaluate0(INode.scala:177)
>                  at sbt.EvaluateSettings$INode.evaluate(INode.scala:132)
>                  at sbt.EvaluateSettings$$anonfun$sbt$EvaluateSettings$$submitEvaluate$1.apply$mcV$sp(INode.scala:64)
>                  at sbt.EvaluateSettings.sbt$EvaluateSettings$$run0(INode.scala:73)
>                  at sbt.EvaluateSettings$$anon$3.run(INode.scala:69)
>                  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
>                  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
>                  at java.lang.Thread.run(Thread.java:722)",[],2013-06-20 11:34:48+00:00,2013-08-30 14:21:16+00:00,2013-09-06 18:03:36+00:00,Closed,13114199,DAFFODIL-780
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While creating tests for DFDL-241 I ran into this error. I soon realized that I wanted dfdl:lengthKind=""delimited"" for this element and changing this attribute fixed my problem. I believe I should have been getting an SDE asking for min/maxLength, or maybe something different since the string had a binary representation - something more descriptive and helpful than the error below.

[info] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b started
[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b failed: edu.illinois.ncsa.daffodil.processors.ParseError: Parse Error: StringFixedLengthInBytesFixedWidthCharacters - Exception: 
[error] edu.illinois.ncsa.daffodil.processors.DFDLByteReader.getByteArray(DFDLReader.scala:105)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getByteAlignedBytes(InStream.scala:246)
[error] edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getBytes(InStream.scala:208)
[error] edu.illinois.ncsa.daffodil.processors.StringLengthInBytes.parseInput(PrimitivesLengthKind.scala:161)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:48)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error] edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error] edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1.parse(PrimitivesLengthKind.scala:38)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:130)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:129)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:126)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:125)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:125)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:117)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:556)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error] edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error] edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b(TestDFDLExpressions.scala:64)
[error] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[error] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] java.lang.reflect.Method.invoke(Method.java:601)
[error] org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
[error] org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[error] org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
[error] org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[error] org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runners.Suite.runChild(Suite.java:127)
[error] org.junit.runners.Suite.runChild(Suite.java:26)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:160)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:138)
[error] com.novocode.junit.JUnitRunner.run(JUnitRunner.java:90)
[error] sbt.TestRunner.delegateRun(TestFramework.scala:58)
[error] sbt.TestRunner.run(TestFramework.scala:51)
[error] sbt.TestRunner.runTest$1(TestFramework.scala:71)
[error] sbt.TestRunner.run(TestFramework.scala:80)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10$$anonfun$apply$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10$$anonfun$apply$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:200)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10.apply(TestFramework.scala:188)
[error] sbt.TestFramework$$anonfun$9$$anonfun$apply$9$$anonfun$10.apply(TestFramework.scala:188)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] scala.collection.TraversableLike$class.map(TraversableLike.scala:233)
[error] scala.collection.immutable.List.map(List.scala:76)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$5.work(System.scala:71)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
[error] sbt.Execute.work(Execute.scala:238)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
[error] sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
[error] java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
[error] java.lang.Thread.run(Thread.java:722)
[error] 
[error] Schema context: element.b0m Location line 80 column 71 in file:/tmp/daffodil_tmp_7355745031498832314.dfdl.xsd
[error] Data location was preceding byte 0
[error] UTF-8 text starting at byte 0 is: (littleEndian.)
[error] Data (hex) starting at byte 0 is: (0x6C6974746C65456E6469616E2E00010001)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.PE(Parser.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:54)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:38)
[error]     at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error]     at edu.illinois.ncsa.daffodil.processors.PrimParser.withParseErrorThrowing(ProcessorBases.scala:9)
[error]     at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1.parse(PrimitivesLengthKind.scala:38)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error]     at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error]     at scala.collection.immutable.List.foreach(List.scala:76)
[error]     at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error]     at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:130)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:129)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:126)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:125)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:125)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:117)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:556)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error]     at edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_byteOrderExpr7b(TestDFDLExpressions.scala:64)
[error]     ...

The test (byteOrderExpr7b) is nearly identical to byteOrderExpr7. The only difference is the lengthKind for the string. byteOrderExpr 7 passes.

Please see the following files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/runtime_properties/runtime-properties.tdml",[],2013-06-19 16:23:51+00:00,2013-06-20 14:15:17+00:00,2013-06-24 15:44:52+00:00,Closed,13114198,DAFFODIL-779
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"I stumbled upon this while working on DFDL-777.  ""testBinaryLongRunningForProfiling"" was failing due to the expected result not matching the actual, somehow this was causing a roughly 700% increase in performance in ""testLongRunningForProfiling"", which is the test that immediately follows the failed binary test.

As soon as I fixed testBinaryLongRunningForProfiling so that the expected result was correct, testLongRunningForProfiling went back to its usual speed.

It seems very interesting to me that the result of a test would effect the performance of a different test, especially to such a degree.  Also, why is the test so much faster when the previous test fails?  Is TDMLRunner holding something back when the test gets run correctly?

This should be easily reproducible, all you need to do is change the expected result for the ""PCAP1"" parserTestCase in daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/profiling/Profiling.tdml",[],2013-06-19 14:57:06+00:00,2017-04-06 15:25:30+00:00,2018-09-13 14:13:24+00:00,Closed,13114197,DAFFODIL-778
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Mike made some changes to the PCAP schema that greatly increased the speed of one of our tests (longRunningForProfiling) but he forgot to change the expected results for BinaryLongRunningForProfiling, causing the test to fail.  The expected result needs to be updated to work with the updated schema.",[],2013-06-19 14:24:56+00:00,2013-06-20 14:03:04+00:00,2013-06-20 14:03:49+00:00,Closed,13114196,DAFFODIL-777
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I just sent you an e-mail about this, but here's the general idea:

Steve recently made some changes that allow us to link to projects outside of the dfdl repository (DFDL-753). If you create a symlink in the daffodil-extra directory to another project directory elsewhere, this project appears along with the others in sbt. Steve mentions in the ticket that this could be used for the performance data that does not fit in the repo. This could be the proper long-term solution to how we tie our svn repo to the rest of the performance data. Please look into this when you have the chance and see if it's a feasible solution.",[],2013-06-19 12:35:55+00:00,2013-07-30 20:25:05+00:00,2013-08-06 13:52:21+00:00,Closed,13114195,DAFFODIL-776
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a test that contains a sequence of delimited-length integer elements. Each element has an initiator but there are no terminators or separators defined. The parser is unable to detect the second element's initator in order to finish parsing the first element. Is this the expected behavior?

The test is test_entityAndNonMix_02:

[error] Test edu.illinois.ncsa.daffodil.section06.entities.TestEntities_01.test_entityAndNonMix_02 failed: java.lang.Exception: Parse Error: Convert to Integer (for xs:int): Unable to parse '1 SP2' (using up all characters).
[error] Schema context: element.e1 Location line 22 column 70 in file:/tmp/daffodil_tmp_7560375840263432956.dfdl.xsd
[error] Data location was preceding byte 7
[error] UTF-8 text starting at byte 0 is: ( ;1 SP2)
[error] Data (hex) starting at byte 0 is: (0x203B3120535032)
[error] at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:559)
[error] at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error] at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error] at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error] at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error] at edu.illinois.ncsa.daffodil.section06.entities.TestEntities_01.test_entityAndNonMix_02(TestEntities_01.scala:53)
[error] ...


The 1 should be parsed as the first element, and the 2 should be the second. The test is in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/Entities.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/entities/TestEntities_01.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/entities/TestEntities.scala",[],2013-06-18 16:08:00+00:00,2013-06-19 02:25:44+00:00,2013-06-20 13:56:34+00:00,Closed,13114194,DAFFODIL-775
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In RuntimePropertyMixins.scala, many checks are done to make sure various character entities aren't in the data, for example:
{code}
this.schemaDefinitionUnless(!s.contains(""%NL;""), ""textStandardDecimalSeparator cannot contain NL"")
{code}
Because this just does String.contains, it doesn't take into account character entities that were escaped. For example, the following would be incorrectly considered a schema definition error:
{code}
textStandardInfinityRep=""%%NL;""
{code}
Checks should be performed using the EntityReplacer",['beginner'],2013-06-18 15:12:32+00:00,2021-03-29 15:44:41+00:00,2021-03-31 16:58:26+00:00,Closed,13114193,DAFFODIL-774
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"I have content with quotes:
{code}
 

Content-Type: text/html; charset=""UTF-8""
{code}
 

I see the quotes represented as &quot; in the infoset in the Trace view:

 
{code}
  <ContentType>

    <MimeType>

      <Type>text</Type>

      <Subtype>html</Subtype>

    </MimeType>

    <Parameter>

      <key>charset</key>

      <value>&quot;UTF-8&quot;</value>

    </Parameter>

  </ContentType>
{code}
 

When I extract the results from JDom, I see the quotes again:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?><ContentType><MimeType><Type>text</Type><Subtype>html</Subtype></MimeType><Parameter><key>charset</key><value>""UTF-8""</value></Parameter></ContentType>

 {code}",['beginner'],2013-06-15 00:29:39+00:00,,2020-08-05 18:17:22+00:00,Open,13114192,DAFFODIL-773
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"When attempting to run sbt on my mac with the latest source, I get the following warning/error messages:
{code}
[warn] 	::::::::::::::::::::::::::::::::::::::::::::::
[warn] 	::          UNRESOLVED DEPENDENCIES         ::
[warn] 	::::::::::::::::::::::::::::::::::::::::::::::
[warn] 	:: de.johoop#jacoco4sbt;1.2.4: not found
[warn] 	:: com.typesafe.sbt#sbt-start-script;0.8.0: not found
[warn] 	:: com.typesafe.sbt#sbt-pgp;0.8: not found
[warn] 	::::::::::::::::::::::::::::::::::::::::::::::
[warn] 
[warn] 	Note: Some unresolved dependencies have extra attributes.  Check that these dependencies exist with the requested attributes.
[warn] 		de.johoop:jacoco4sbt:1.2.4 (sbtVersion=0.11.2, scalaVersion=2.9.1)
[warn] 		com.typesafe.sbt:sbt-start-script:0.8.0 (sbtVersion=0.11.2, scalaVersion=2.9.1)
[warn] 		com.typesafe.sbt:sbt-pgp:0.8 (sbtVersion=0.11.2, scalaVersion=2.9.1)
[warn] 
[error] {file:/Users/jchab/middle_man/daffodil/project/}default-a0cd25/*:update: sbt.ResolveException: unresolved dependency: de.johoop#jacoco4sbt;1.2.4: not found
[error] unresolved dependency: com.typesafe.sbt#sbt-start-script;0.8.0: not found
[error] unresolved dependency: com.typesafe.sbt#sbt-pgp;0.8: not found
Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? 
{code}

I realized I had an older version of sbt and updated to the latest. This did the trick. It'd be nice if sbt's complaints were more straightforward, since it took me a little bit to figure out what the problem was.",[],2013-06-14 17:29:51+00:00,2013-06-17 14:44:35+00:00,2013-06-21 00:54:09+00:00,Closed,13114191,DAFFODIL-772
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I believe the recent fix for ""Use of fn:function in an expression with no xmlns:fn=""..."" in the file should be an SDE"" broke our ability to parse ISO8583 data with the schemas and data provided here:

https://github.com/DFDLSchemas/ISO8583

I get the following errors:

~/NGF/dfdl/ISO8583 (master) {color:green}../daffodil-cli/target/start parse -r ISO8583_1987 -s ISO8583Format.xsd -s ISO8583_1987.xsd ISO8583_1987_Test_Data_1.txt {color}
[error] Compilation (ProcessorFactory) produced 5 errors/warnings.
[error] Schema Definition Error: Expression compiler reports: net.sf.saxon.trans.XPathException: {color:red}XPath syntax error at char 28 in {...) then fn:false() else fn:t...}:
    Prefix fn has not been declared{color}
Schema context: element.ISO8583_1987::LocalComplexTypeDef::sequence::group.ref.Bitmaps_Group::sequence::element.PrimaryBitmap::GlobalComplexTypeDef(PrimaryBitmapType)::sequence::element.Bit001::DFDLSetVariable. Location line 59 column 113 in file:/home/jchab/NGF/dfdl/ISO8583/ISO8583_1987.xsd.
[error] Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/' should be 'http://www.ogf.org/dfdl/dfdl-1.0/'.
Schema context: SchemaDocument. Location line 43 column 52 in file:/home/jchab/NGF/dfdl/ISO8583/ISO8583Format.xsd.
[error] Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/' should be 'http://www.ogf.org/dfdl/dfdl-1.0/'.
Schema context: SchemaDocument. Location line 32 column 103 in file:/home/jchab/NGF/dfdl/ISO8583/ISO8583_1987.xsd.
[error] Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/' should be 'http://www.ogf.org/dfdl/dfdl-1.0/'.
Schema context: SchemaDocument. Location line 37 column 3 in file:/home/jchab/NGF/dfdl/ISO8583/ISO8583Types.xsd.
[error] Schema Definition Warning: The xs:appinfo source attribute value 'http://www.ogf.org/dfdl/' should be 'http://www.ogf.org/dfdl/dfdl-1.0/'.
Schema context: element.Bit001. Location line 56 column 125 in file:/home/jchab/NGF/dfdl/ISO8583/ISO8583_1987.xsd.

Since we no longer have the ability to use the fn prefix for functions without declaring it, this schema is invalid to us.",[],2013-06-14 17:01:36+00:00,2014-05-01 19:19:32+00:00,2014-08-06 16:02:49+00:00,Closed,13114190,DAFFODIL-771
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to Spec item 3.1. Section 14.5. Changes to property hiddenGroupRef:

""Empty string is not an allowed value""

Though the TDML runner complains if you use the empty string for the hiddenGroupRef property, when tdml validation is off the data parses and no error is thrown.

See test hiddenGroupEmpty in the following files:
#
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/SequenceGroup.tdml
# modified:   daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroupsDebug.scala
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroups.scala",[],2013-06-14 15:57:51+00:00,2013-06-14 23:21:33+00:00,2013-06-25 20:34:28+00:00,Closed,13114189,DAFFODIL-770
Task,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"Need to determine if all VM's are proportionate for CPU and Memory Stats.
Solaris runs at 8-15% while other VM's are 100-130% CPU.",[],2013-06-13 23:04:09+00:00,2013-06-21 18:17:51+00:00,2013-07-08 22:53:26+00:00,Closed,13114188,DAFFODIL-769
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Right now, if both name and ref are provided, we just ignore name. This is an invalid schema and should throw an Error",[],2013-06-13 18:42:50+00:00,,2021-01-15 17:49:37+00:00,Open,13114187,DAFFODIL-768
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"The entire pcap directory in daffodil-perf is included in the released daffodil tar/zip. When running the tdml file using the pack files, all the profiling tests fail with the error:

{code}
[error] Compilation (ProcessorFactory) produced 2 errors/warnings.
[error] Schema Definition Error: Included schema not found at location edu/illinois/ncsa/daffodil/pcap/pcap.dfdl.xsd. Classpath was empty.
Schema context: Include. Location line 17 column 79 in file:/home/slawrence/downloads/daffodil/daffodil-0.10.1-rc1/examples/pcap/profilingPCAP.dfdl.xsd.
[error] Schema Definition Error: Referenced element not found: ex:pcap.
Schema context: ElementRef(pcap). Location line 21 column 35 in file:/home/slawrence/downloads/daffodil/daffodil-0.10.1-rc1/examples/pcap/profilingPCAP.dfdl.xsd.
{code}

So it looks like we have including the pcap schema using edu/illinois/ncsa/.... With the recent changes to how schemas are included, I think we should be able to get rid of the edu/illinois/ stuff and these tests should work outside of the daffodil repo.",[],2013-06-13 14:12:31+00:00,2013-06-26 18:42:49+00:00,2013-06-28 18:32:22+00:00,Closed,13114186,DAFFODIL-767
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,See test: test_variableRefError in daffodil-test scala-debug.,[],2013-06-12 21:17:26+00:00,2013-09-06 16:59:14+00:00,2013-09-09 17:18:21+00:00,Closed,13114185,DAFFODIL-766
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"For example:
{code}
<xsd:sequence dfdl:separator="";%SP;"">
{code}

Causes this error:
{code}
edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error[Schema Definition Error: Invalid DFDL Entity (%;) found in "";%SP;""
{code}",[],2013-06-12 20:00:18+00:00,2013-06-18 16:09:44+00:00,2013-06-18 16:10:29+00:00,Closed,13114184,DAFFODIL-765
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Whenever the occursCount function should return the value of one, this error is seen instead:

[error] Test edu.illinois.ncsa.daffodil.section23.dfdl_expressions.TestDFDLExpressions.test_occursCount_1b failed: java.lang.Exception: Runtime Schema Definition Error: dfdl:occursCount did not receive a NodeSeq back, check your path.

The exact same schema works when occursCount is greater than 1.

See tests:
occursCount_1b
occursCount_3b
in the following files:
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
# modified:   daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2013-06-12 14:54:55+00:00,2013-08-30 14:21:55+00:00,2013-09-18 16:37:18+00:00,Closed,13114183,DAFFODIL-764
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This shouldn't always use the most recent tag, instead, versions should be based on the version branch being developed for.",[],2013-06-12 13:40:32+00:00,2013-06-12 14:50:33+00:00,2013-06-18 15:02:46+00:00,Closed,13114182,DAFFODIL-763
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"Eclipse can't find the tests in TestCLIParsing.scala, TestCLIDebugger.scala and the like due to the package statement at the top not matching the package folder structure.

Example: In TestCLIParsing.scala
package edu.illinois.ncsa.daffodil.CLI.parsing <-- tests can't be found or run
changing it to:
package edu.illinois.ncsa.daffodil.parsing <-- test can be found and run.

After making this change, another issue presents itself. Apparently Eclipse seems to think that its current working directory is wherever the project file is located.

Also, I just did a pull today (06-12-2013) and the daffodil-cli-unittest project in Eclipse can't find the LogFactory class.  I right-clicked the project select Properties -> Java Build Path.  Select the Libraries tab and add commons-logging-1.1.1.jar and this resolves the exception.

For me this was DFDL_GIT_ROOT\eclipse-projects\cli-test.  As a result of this, the calls to Util.getExpectedString could not find the appropriate 'output' files and thus fail the tests with FileNotFound exceptions.",[],2013-06-11 21:08:29+00:00,2015-06-16 16:09:04+00:00,2015-06-29 21:41:33+00:00,Closed,13114180,DAFFODIL-762
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"It could be due to recent changes to prevent converting from JDOM to Scala Node to JDOM again.  In fact, it���s likely.  I���m currently seeing that the infoset is correct before it reaches this ���new��� code.

As an example of the current ���content��� of the Date element:

[[Element: <DayOfTheWeek/>], [Element: <Day/>], [Element: <Month/>], [Element: <Year/>], [Element: <TimeOfDay/>], [Element: <Zone/>]]

This is before it makes it to the new code.  So this appears to be right in that it doesn���t contain the additional Hour/Min information.  And I just verified that after it pass through the ���removeHiddenElements��� code that it alters this to:

[[Element: <DayOfTheWeek/>], [Element: <Day/>], [Element: <Month/>], [Element: <Year/>], [Element: <TimeOfDay/>], [Element: <Hour/>], [Element: <Minute/>], [Element: <Second/>], [Element: <Zone/>], [Element: <PlusOrMinus/>], [Element: <TimeZone/>]]

So there is definitely something wrong.",[],2013-06-10 15:00:06+00:00,2013-06-11 18:47:48+00:00,2013-07-02 23:23:56+00:00,Closed,13114179,DAFFODIL-761
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"This is needed to allow for release candidates and the like, (e.g 0.10.0-rc1)",[],2013-06-10 14:26:41+00:00,2013-06-12 13:45:38+00:00,2013-06-17 16:53:44+00:00,Closed,13114178,DAFFODIL-760
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"The Performance Test (look at MAC) has bounced siginificantly the past 3 days.
This needs investigated.

6/9 - On Mac OS X 10.8 test test_pcap_test was %82.081865 faster than previous average On Mac OS X 10.8 test test_many_elem_test was %28.400955 faster than previous average On Windows Vista 32 bit test test_many_elem_test was %12.878788 faster than previous average

6/8 - On RHEL 5.8 64 bit test testBinaryLongRunningForProfiling was %8.056312 faster than previous average On Windows Vista 32 bit test test_many_elem_test was %24.355301 slower than previous average

6/7 - On Windows Vista 32 bit test test_csv_test was %6.532807 slower than previous average On Mac OS X 10.8 test test_pcap_test was %45.068024 slower than previous average On Windows Vista 32 bit test test_pcap_test was %6.748709 slower than previous average On Windows Vista 32 bit test test_hundred_no_namespaces was %7.193676 slower than previous average On Windows Vista 32 bit test test_many_elem_test was %17.508418 faster than previous average",[],2013-06-10 13:53:26+00:00,2013-07-15 17:48:59+00:00,2013-07-15 17:51:49+00:00,Closed,13114177,DAFFODIL-759
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The trace output can be improved a little, and then a lot.

A little: just remove the printing out of the parser - not relevant to a DFDL user.

A lot: Examples below of
 * better data dump format, with text + hex, or just text, or just hex
 * remove all the redundant parts of filenames. Use just the filename (so long as it is unambiguous), and then at the end of the trace display which files are located in what directories.
 * short schema component designators (see [https://opensource.ncsa.illinois.edu/confluence/pages/viewpage.action?pageId=22053271])
 * optional use of the Unicode illustration characters: like *␊␍␠␉* (see [https://en.wikipedia.org/wiki/Unicode_control_characters#Control_pictures]) which is way better than actually doing a CR and LF because those move the text around. (There are these Unicode characters for all the otherwise non-printing control characters. They are #x240A for linefeed and #x240D for carriage return.) Note however, that on MS-Windows, the ordinary cmd console isn't unicode-capable by default, so we need these to print as something else on that platform.

My experience is that

(1) you sometimes need to see what came right before stopping point so as to infer the cause, not just look at the consequences, hence, the dump starts a little before where the actual stop was.

(2) unless the data is all text in a uniform encoding with no decoding errors, you will need to see hex and text or both to figure out what could be going on.

So I'm just laying out for you what that might look like to solicit feedback. Currently the stuff we print has had very little thought put into how it is displayed.

So, in a scenario where there is a possible mixture of binary data and text data, your message might be:
{code:java}
Error PE-845-231J: Left over data starting at byte 23.
Data context in file testData.dat:

Pos                   V                              V
-- 16: 4e55 2045 6d61 6373 2c20 6f6e 6520 636f NU Emacs, one co
-- 80: 6d70 6f6e 656e 7420 6f66 2074 6865 2047 mponent of the G <<
- 144: 4e55 2f4c 696e 7578 206f 7065 7261 7469 NU/Linux operati
- 208: 6e67 2073 7973 7465 6d2e 0a0a 456d 6163 ng system.␊␊Emac
- 272: 7320 5475 746f 7269 616c 094c 6561 726e s Tutorial.Learn

Schema component: e1/~t1/G::g1/S/S[2]/e2
Schema location: line 27 column 17 file baz.dfdl.xsd
Files mentioned in this trace were:
    baz.dfdl.xsd located at file:/foo/bar/
    testData.dat located at file:/mydata/
{code}
If you were in a 100% text and uniform encoding scenario, then perhaps the dump would drop the hex and make the text lines longer:
{code:java}
Error: Left over data starting at character 23.
Data context in file testData.dat:
                                              V
-- 1:   ..Welcome to GNU Emacs, one component of the GNU/Linux operati <<
- 64: ng system.␊␊Emacs Tutorial.Learn basic keystroke commands.Emacs

Schema component: e1/~t1/G::g1/S/S[2]/e2
Schema location: line 27 column 17 file baz.dfdl.xsd
Files mentioned in this trace were:
    baz.dfdl.xsd located at file:/foo/bar/
    testData.dat located at file:/mydata/
{code}",[],2013-06-08 04:31:26+00:00,,2021-02-03 19:09:06+00:00,Open,13114176,DAFFODIL-758
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Right now we don't supply these schemas. They live inside our jars.

Instructions on how to use need to go in a README file in the directory with them.",[],2013-06-07 21:44:45+00:00,2014-12-31 20:33:08+00:00,2015-02-05 22:09:44+00:00,Closed,13114175,DAFFODIL-757
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Consider:

[error] Parse Error: Term('%CR;%LF;') - element.ContentType: Delimiter not found!

Schema context: element.ContentType Location line 16 column 99 in file:/C:/���/ContentType.xsd

Data location was preceding byte 23

UTF-8 text starting at byte 16 is: (age/jpg/png

)

Data (hex) starting at byte 16 is: (0x6167652F6A70672F706E670D0A)

 The information is there if you start at byte 16, and count over to byte 23 you find /png. 

But that is way too indirect. 

Knowing that the delimiter was not found is helpful, as it knowing that it was looking for %CR;%LF; for a terminator.  But I think this error could be improved by also telling me what value was found.  Perhaps the error message could look a bit more like this:

[parsing error] While processing the ContentType element, the terminator ���%CR;%LF;��� was expected,

but the value ���/png��� was found instead.

Location:  line 16 column 99 in file:/C:/���/ContentType.xsd",['beginner'],2013-06-07 20:16:00+00:00,,2020-08-05 18:14:14+00:00,Reopened,13114174,DAFFODIL-756
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Blocker,"The Buildbot has detected a failed buildBuild Reason: scheduler Build Source Stamp: [branch master] cfdfba0a761eb354b4fa8b796a323b3327cda6a4
Blamelist: Mike Beckerle <mbeckerle@tresys.com>

BUILD FAILEDshell_3.stdio

The detailed log of the last build step below.

sincerely,
 -The Buildbot


_______________________________________________
[info] Loading project definition from /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/project
[info] Set current project to daffodil (in build file:/home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/)
[info] Compiling 1 Scala source to /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-core/target/scala-2.9.2/debug-classes...
[info] Compiling 1 Scala source to /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/target/scala-2.9.2/debug-classes...
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:80: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""*word"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:94: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""37!"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:107: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""*37!"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:135: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""943.281"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:162: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""50.93^%XYZ^42"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:199: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""11235.8qwerty"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:236: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""abc87654321"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:264: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""246813579,90.3761,hello,100"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:288: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""246813579,90.3761,abc,10034567"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:322: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""567,word,choice1:203867"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:356: not found: value TestUtils
[error]     TestUtils.testUnparsing(testSchema, infoset, ""567,word,choice2:2038.67"")
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:370: not found: value TestUtils
[error]     TestUtils.testUnparsingBinary(testSchema, infoset, bytes)
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:384: not found: value TestUtils
[error]     TestUtils.testUnparsingBinary(testSchema, infoset, bytes)
[error]     ^
[error] /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-runtime1/src/test/scala-debug/edu/illinois/ncsa/daffodil/dsom/TestDsomCompiler2.scala:430: not found: value TestUtils
[error]     TestUtils.testUnparsingBinary(testSchema, infoset, bytes)
[error]     ^
[error] 14 errors found
[info] Compiling 1 Scala source to /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-tdml/target/scala-2.9.2/debug-classes...
[info] Compiling 26 Scala sources to /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-test/target/scala-2.9.2/debug-classes...
[info] Compiling 2 Scala sources to /home/buildbot/ngf-daffodil-rhel6-buildbot/ngf-daffodil-rhel6-buildbot/build/daffodil-test-ibm1/target/scala-2.9.2/debug-classes...
[error] (daffodil-runtime1/debug:compile) Compilation failed [error] Total time: 36 s, completed Jun 7, 2013 12:06:45 PM",[],2013-06-07 17:25:28+00:00,2013-06-07 17:45:59+00:00,2013-07-03 17:29:25+00:00,Closed,13114173,DAFFODIL-755
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We can construct a daffodil/eclipse-projects directory, and put all the eclipse stuff for all sub-projects in there.

Take daffodil-core for example.

We could tuck the daffodil-core-unittest project, which exists purely for the benefit of eclipse, into eclipse-projects/core-unittest.

Then, we could create side by side with that, eclipse-projects/core.

core and core-unittest would each contain just a .project and a .classpath. daffodil-core directory itself would no longer be an eclipse project. The core would use the same tricks to reach the src/main that the core-unittest uses to reach the test directories. It's done via an eclipse linked resource.

Since the .project and .classpath files are both rooted by way of the DAFFODIL_ROOT variable, this would allow them to be entirely outside the sbt file structure.

so we end up with eclipse-projects/core, core-unittest, lib, lib-unittest, runtime1, runtime1-nittest, etc. etc.

we can even put the daffodil 'root' eclipse project in eclipse-projects/daffodil (or maybe eclipse-projects/root), and it won't cause the trouble it causes when eclipse projects are nested.",[],2013-06-07 15:58:34+00:00,2013-06-10 17:46:20+00:00,2013-06-20 22:07:47+00:00,Closed,13114172,DAFFODIL-754
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Some tests are specifically not included in the main repo. We need a way to be able to link these projects automatically via sbt so they can be run if we have them.,[],2013-06-07 15:05:30+00:00,2013-06-10 14:47:15+00:00,2013-06-19 13:08:42+00:00,Closed,13114171,DAFFODIL-753
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to show the infoset element as part of the assertion failure message, specifically for an assertion on an element of simple type.

(For an assert on a complex type element, or a sequence or choice, it's trickier. There I think we could show the infoset object, but as in many places where we need to show this, we need to be able to elide unnecessary substructure or parent structure. Otherwise these will get big and unweildy. - separate JIRA issue should we decide to go there.)

-------------------------------------
From: Garriss Jr., James P. [jgarriss@mitre.org]
Sent: Friday, June 07, 2013 10:23 AM
To: Mike Beckerle; Stephen Lawrence
Subject: [daffodil 0.10] Error message improvement suggestion

I have this simple input:

 

MIME-Version: dog

 

Obviously invalid.  I���m describing it with this schema:

 

            <xsd:element name=""MimeVersion"" dfdl:initiator=""MIME-Version:%SP;"" dfdl:terminator=""%NL;"" dfdl:length=""3"" dfdl:lengthKind=""explicit"">
                        <xsd:annotation>
                                    <xsd:appinfo source=""http://www.ogf.org/dfdl/dfdl-1.0/"">
                                                <dfdl:assert test=""{ dfdl:checkConstraints(.) }"" message=""MIME-Version must have a value of '1.0'.""/>
                                    </xsd:appinfo>
                        </xsd:annotation>
                        <xsd:simpleType>
                                    <xsd:restriction base=""xsd:string"">
                                                <xsd:enumeration value=""1.0""/>
                                    </xsd:restriction>
                        </xsd:simpleType>
            </xsd:element>

 

The error message I get is:

 

[error] Parse Error: Assertion failed. MIME-Version must have a value of '1.0'.

Schema context: element.MimeVersion Location line 13 column 135 in file:/C:/���/MimeVersion.xsd

Data location was preceding byte 19

UTF-8 text starting at byte 16 is: (g

)

Data (hex) starting at byte 16 is: (0x670D0A)

 

Getting my assertion message back is helpful, as it tells me what the right value should be.  But I think this error could be improved by also telling me what value was found.  Perhaps the message could look at bit more like this:

 

[parsing error] While processing the MimeVersion element, the value ���dog��� was found.

This fails the assertion: MIME-Version must have a value of '1.0'.

Schema: Location line 13 column 135 in file:/C:/���/MimeVersion.xsd",[],2013-06-07 14:33:44+00:00,2019-04-24 14:25:48+00:00,2021-05-21 14:24:12+00:00,Closed,13114170,DAFFODIL-752
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See bug DFDL-702 for reference. Alignment is currently limited to values that are powers of two (2,4,8,16,etc.) Any bit-alignment should be acceptable (depending on the encoding, data type, etc.) For 7-bit-ascii, any alignment should be allowed.

I set the alignment for 7-bit-ASCII to 6 bits and get the following error:
[error] Test edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingProperties.test_alignmentPacked7BitASCII_02 failed: java.lang.Exception: Schema Definition Error: For property 'alignment', value must be a power of 2 (and fit in a 32 bit integer). Found: 6()
[error] Schema context: element.e7. Location line 211 column 121 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml.
See test alignmentPacked7BitASCII_02 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingProperties.scala",[],2013-06-07 12:31:39+00:00,2020-08-05 18:13:11+00:00,2020-08-05 18:13:11+00:00,Closed,13114169,DAFFODIL-751
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"'help condition'
""If the result of the DFDL expression{color:red}s{color} is not a boolean value, it is treated as false.""

In the wiki under Arguments for 'help display':
""<debugger command>""
In the output for the actual 'help display' command:
""<debugger_command>""

The output for some commands seems a little redundant now. e.g. 'help enable':
{code}
(debug) help enable
  Usage: e[nable] <type> <id>
  
  Enable a breakpoint or display. Valid values for <type> are ""breakpoint""
  and ""display"".
  
  Example: enable breakpoint 1
           enable display 1
  
  Subcommands:
    breakpoint  enable a breakpoint
    display     enable a display
{code}

The description explains that the value values for ""type"" are breakpoint and display. The example then shows the use of 'breakpoint' and 'display'. Then the subcommands section reiterates the two options. It might be confusing to the user that 'breakpoint' and 'display' are referred to within this help as both ""types"" and ""subcommands"". It might be best to pick one and stick with it, removing the other.

description for 'path' within wiki entry for 'info'
""display the schema component designator""
description in actual 'help info' command:
""display the current schema component designator/path""

The output of 'help info' for Subcommands has the short form in the wiki but not in the actual output.

breakOnFailure description has typos in both wiki and actual output:
wiki:
Set {color:red}whether or the {color}debugger should break on failures. If set to false
the normal processing occurs. If set to true, any errors cause a break. Note that due to the backtracking behavior, not all failures are fatal.
output:
whether or {color:red}not stop break{color} on failures

breakOnlyOnCreation:
wiki mentions ""<value> must be either true/false or 1/0. ""
help output does not

dataLength:
wiki mentions ""This only affects the 'info data' command.""
help output does not

infosetLines:
wiki has much more detail: ""This only affects the 'info infoset' command. This shows the last <value> lines of the infoset. If <value> is less than or equal to zero, the entire infoset is printed.""

removeHidden: 
similar to issues above. much less info than in the wiki. This might be acceptable.",[],2013-06-06 17:19:17+00:00,2015-01-27 20:40:15+00:00,2015-01-27 21:01:35+00:00,Closed,13114168,DAFFODIL-750
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While testing DFDL-313 I created a test to make sure newlines within expressions were preserved. I tried to set up my infoset but I had the spacing wrong. The test still passed. I created a few more tests with varying whitespace in the infoset and they all pass. 

See the following tests:
test_internal_space_preserved2
test_internal_space_preserved3a
test_internal_space_preserved3b

In these files:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml",[],2013-06-06 15:35:26+00:00,2015-03-18 14:27:25+00:00,2015-03-31 13:26:23+00:00,Closed,13114167,DAFFODIL-749
Bug,[],gmcdonald,Gavin McDonald,efahl,Elizabeth Fahl,Minor,"There are two typos in the help for unparse and one for parse. 

1. ""Unparse an infoset file, using either a DFDL schema or a saved paser"" Should be ""parser"".

2. For root: ""This needs to be one of the top-level elements of the DFDL schem defined with --schema."" Should be ""DFDL schema"". - This one appears in both sections.

Commands to see the typos:
./daffodil-cli/target/start parse --help
./daffodil-cli/target/start unparse --help",[],2013-06-06 15:28:23+00:00,2015-01-15 20:28:34+00:00,2015-01-20 20:25:20+00:00,Closed,13114166,DAFFODIL-748
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"The JAPI is still writing some info directly to the output, notably this warning message (which occurs every time an included schema is referenced):
{code}
2013-06-06 11:06:35:998  edu.illinois.ncsa.daffodil.dsom.Include Info[Included schema from file:/C:/Users/jgarriss/Documents/Coding/Java/Polyphony/schemas/DefaultProperties.xsd into namespace No_Namespace.]
{code}
I assume there is a similar warning when a file is imported.

In the JAPI, nothing should be written directly to output.  Everything should be captured and made available to the developer via the API.",[],2013-06-06 15:12:37+00:00,,2021-02-18 18:11:49+00:00,Open,13114165,DAFFODIL-747
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"While going over tests for spin 10, I came across a test in dfdl-test/.../section05/simple_types/TestSimpleTypes.scala that was in debug and does not have a ticket associated with it, so now this is that ticket.  The test name is test_datePattern04

The test is attempting to use ""Q2 2012"" as the input data and process a date/time value out of it.  It is expecting ""2013-02-13+00:0"" but it currently receives an SDE saying: Schema Definition Error: Character 'Q' not allowed in dfdl:calendarPattern for date",[],2013-06-06 14:29:00+00:00,2013-06-06 15:54:49+00:00,2013-06-07 14:02:25+00:00,Closed,13114164,DAFFODIL-746
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While trying to troubleshoot the test discussed in DFDL-744, I changed the parent's length from a pattern to an explicit value.

I get the following error:
{code}

[error] Test edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern.testLengthKindPatternCompound2 failed: java.lang.Exception: Parse Error: SpecifiedLengthExplicitBytesFixedParser - Exception: 
[error] edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.PECheck(Parser.scala:187)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.PECheck(SpecifiedLength.scala:149)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.parse(SpecifiedLength.scala:168)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesFixedParser.edu$illinois$ncsa$daffodil$processors$SpecifiedLengthExplicitBytesFixedParser$$super$parse(SpecifiedLength.scala:304)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesFixedParser$$anonfun$parse$5.apply(SpecifiedLength.scala:304)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesFixedParser$$anonfun$parse$5.apply(SpecifiedLength.scala:297)
[error] edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:223)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.withParseErrorThrowing(SpecifiedLength.scala:149)
[error] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitBytesFixedParser.parse(SpecifiedLength.scala:297)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:336)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:334)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:334)
[error] edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:135)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:163)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:162)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:159)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:158)
[error] scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:80)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:158)
[error] edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:150)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:554)
[error] edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error] edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error] edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error] edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern.testLengthKindPatternCompound2(TestLengthKindPattern.scala:55)
[error] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[error] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] java.lang.reflect.Method.invoke(Method.java:601)
[error] org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
[error] org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[error] org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
[error] org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[error] org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
[error] org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runners.Suite.runChild(Suite.java:127)
[error] org.junit.runners.Suite.runChild(Suite.java:26)
[error] org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
[error] org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
[error] org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
[error] org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
[error] org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
[error] org.junit.runners.ParentRunner.run(ParentRunner.java:309)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:160)
[error] org.junit.runner.JUnitCore.run(JUnitCore.java:138)
[error] com.novocode.junit.JUnitRunner.run(JUnitRunner.java:90)
[error] sbt.TestRunner.delegateRun(TestFramework.scala:58)
[error] sbt.TestRunner.run(TestFramework.scala:51)
[error] sbt.TestRunner.runTest$1(TestFramework.scala:71)
[error] sbt.TestRunner.run(TestFramework.scala:80)
[error] sbt.TestFramework$$anonfun$6$$anonfun$apply$8$$anonfun$7$$anonfun$apply$9.apply(TestFramework.scala:178)
[error] sbt.TestFramework$$anonfun$6$$anonfun$apply$8$$anonfun$7$$anonfun$apply$9.apply(TestFramework.scala:178)
[error] sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:190)
[error] sbt.TestFramework$$anonfun$6$$anonfun$apply$8$$anonfun$7.apply(TestFramework.scala:178)
[error] sbt.TestFramework$$anonfun$6$$anonfun$apply$8$$anonfun$7.apply(TestFramework.scala:178)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1$$anonfun$apply$8.apply(Tests.scala:121)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[error] scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[error] scala.collection.immutable.List.foreach(List.scala:76)
[error] scala.collection.TraversableLike$class.map(TraversableLike.scala:233)
[error] scala.collection.immutable.List.map(List.scala:76)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.Tests$$anonfun$makeSerial$1.apply(Tests.scala:121)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:47)
[error] sbt.std.Transform$$anon$5.work(System.scala:71)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
[error] sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
[error] sbt.Execute.work(Execute.scala:238)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
[error] sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:159)
[error] sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
[error] java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:166)
[error] java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
[error] java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
[error] java.lang.Thread.run(Thread.java:722)
[error] 
[error] Schema context: element.ab Location line 36 column 76 in file:/tmp/daffodil_tmp_1956417834728294207.dfdl.xsd
[error] Data location was preceding byte 1
[error] UTF-8 text starting at byte 0 is: (0aaa,bb//5)
[error] Data (hex) starting at byte 0 is: (0x306161612C62622F2F35)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:559)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error]     at edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern.testLengthKindPatternCompound2(TestLengthKindPattern.scala:55)
[error]     ...
{code}

The test is LengthKindPatternCompound2 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/PatternTests.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindPatternDebug.scala",[],2013-06-05 15:31:46+00:00,2014-08-12 17:54:39+00:00,2014-08-12 17:54:40+00:00,Closed,13114163,DAFFODIL-745
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"While testing Spin 10, I came across a test in scala-debug and could not find an associated test. The test defines a sequence with lengthKind = pattern. The sequence contains two elements, separated by a ',' and both with lengthKind='delimited'. Based on this statement in the spec:
""On parsing, the length of an element with dfdl:lengthKind 'delimited' is determined by scanning the datastream for ... the end of an enclosing element designated by its known length"" I would not expect the following error:
{code}
[error] Test edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern.testLengthKindPatternCompound failed: java.lang.Exception: Parse Error: The parsed length of the children was greater than that of the parent.
[error] Schema context: element.ab Location line 21 column 86 in file:/tmp/daffodil_tmp_7189552609605246540.dfdl.xsd(no data location)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:559)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:394)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:257)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:248)
[error]     at edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindPattern.testLengthKindPatternCompound(TestLengthKindPattern.scala:53)
[error]     ...
{code}

I would expect the length of the second element to be 'delimited' by the length of the parent element. 

The test is testLengthKindPatternCompound in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/PatternTests.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindPatternDebug.scala

Is the spec just misleading in that regard, and this test should be using lengthKind=""endOfParent"" instead of delimited?",[],2013-06-05 15:17:28+00:00,2014-08-12 17:51:39+00:00,2014-08-12 17:51:41+00:00,Closed,13114162,DAFFODIL-744
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"James Garriss said:

... I ran into this error message from Daffodil.  While it happily tells me which schema it can���t find, it doesn���t tell which schema wants it.  Since my schema is really a set of 10 interconnected schemas, I really need this error message to give me both, something like:

 

Subject.xsd includes DefaultProperties.xsd, but DefaultProperties.xsd cannot be found.

 

Here���s the error:

 

C:\Users\jgarriss\Documents\DFDL_Schemas_Email2\02_Message_Headers>C:\Users\jgarriss\daffodil\bin\da

ffodil -v parse -s MessageHeaders.xsd -r MessageHeaders messageHeaders01.txt

[error] Compilation (ProcessorFactory) produced 8 errors/warnings.

[error] Schema Definition Error: Included schema not found at location C:\Users\jgarriss\Documents\D

FDL_Schemas_Email2\02_Message_Headers\DefaultProperties.xsd. Searched these classpath locations:

C

\Users\jgarriss\daffodil\bin\..\lib\commons-logging-1.1.1.jar;C

\Users\jgarriss\daffodil\bin\..\lib\daffodil-cli_2.9.2-0.10.0.jar;C

\Users\jgarriss\daffodil\bin\..\lib\daffodil-core_2.9.2-0.10.0.jar;C

\Users\jgarriss\daffodil\bin\..\lib\daffodil-lib_2.9.2-0.10.0.jar;C

\Users\jgarriss\daffodil\bin\..\lib\daffodil-tdml_2.9.2-0.10.0.jar;C",[],2013-06-05 14:55:01+00:00,2013-09-11 17:08:49+00:00,2013-09-11 17:09:57+00:00,Closed,13114161,DAFFODIL-743
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"{code}
C:\Users\jgarriss\Documents\DFDL_Schemas_Email\02_Message_Headers>C:\Users\jgarriss\daffodil\bin\daffodil parse -s Subject.xsd -r Subject subject01.txt
[error] Compilation (ProcessorFactory) produced 4 errors/warnings.
[error] Schema Definition Error: Included schema not found at location C:\Users\jgarriss\Documents\DFDL_Schemas_Email\02_Message_Headers\DefaultProperties.xsd. Searched these classpath locations:
{code}

Maybe this is related to absolute path checking not working on Windows?",[],2013-06-05 12:27:43+00:00,2015-05-05 15:00:53+00:00,2015-05-26 20:51:27+00:00,Closed,13114160,DAFFODIL-742
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,Schema definition warnings (like when the appinfo source is using the old style without dfdl-1.0) are currently logged as errors when using the CLI. These should be logged as warnings.,[],2013-06-05 12:21:26+00:00,2015-01-22 14:14:10+00:00,2015-01-29 23:15:13+00:00,Closed,13114159,DAFFODIL-741
Improvement,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Minor,Test should have an automatic way to screen all new files for the Tresys Copyright.  Ideally this would run in build bot but I could listen to an argument that pleads for it to run only when executed (like once during each Spin).,[],2013-06-04 18:16:50+00:00,2018-10-04 01:03:53+00:00,2018-10-04 01:03:53+00:00,Closed,13114158,DAFFODIL-740
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When running the TDML runner from the CLI, it's difficult to determine why something change. It needs to be updated to:

1) Get rid of the colors so it works better on windows
2) If --verbose is provided, it should print out why a test failed rather than saying it just failed",[],2013-06-04 15:05:24+00:00,2013-08-30 14:22:55+00:00,2013-09-22 18:37:32+00:00,Closed,13114157,DAFFODIL-739
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"There are tests in scala-debug that pass, and tests in scala-new that are likely duplicates of tests now in scala. These tests should be examined and dealt with.",[],2013-06-03 14:00:51+00:00,2013-06-28 19:06:30+00:00,2013-06-28 19:06:36+00:00,Closed,13114156,DAFFODIL-738
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"Suppose I have these headers:
{code}
Date: Sat, 14 Feb 2013 08:54:52 -0500
From: ""Bob Smith"" <bob@smith.org>
Message-Id: <208E8372-A9D9-468A-9B4B-BD97ED28F64C@smith.org>
X-MS-Exchange-Organization-AuthAs: Internal
Subject: What's up, dog?
{code}
Suppose I account for them with this set of choices:
{code}
						<xsd:choice dfdl:initiatedContent=""yes"">
							<xsd:element ref=""Date""/>
							<xsd:element ref=""From""/>
							<xsd:element ref=""MessageId""/>
							<xsd:element ref=""Subject""/>
							<xsd:element ref=""ReturnPath""/>
							<!-- all unknown and unwanted headers -->
							<!--<xsd:sequence dfdl:hiddenGroupRef=""UnwantedHeadersGroup""/>-->
						</xsd:choice>
{code}
Notice that I have commented my ""catch-all"".  The problem is obvious:  These is not choice for the X-MS-Exchange-Organization-AuthAs header.  This should result in a parsing error that says, ""No choice available for X-MS-Exchange-Organization-AuthAs.""

But, it throws another error, one that is very misleading:
{code}
[error] Parse Error: Assertion failed. Subject must appear 1 time.
{code}
Looking at the input, you see that there is a Subject and that it appears 1 time.  The problem is parsing fails at the unhandled input, but the assertions are checked *after* the parsing error and then mask it.

Perhaps the solution is to ignore assertions when the data can't be parsed?

To see the problem, look at MessageHeaders.xsd, line 42.  The assertions are up at line 31.",[],2013-05-31 14:06:43+00:00,,2018-09-13 14:03:56+00:00,Open,13114155,DAFFODIL-737
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"This is a specific task related to DFDL-623 (edit-compile-test cycle too slow).

Current sbt reruns propgen every time you do a compilation.

This invalidates daffodil-lib, which then must also be recompiled, and that seems to ripple to everything that uses daffodil-lib. 

We need to change the sbt scripts so that propgen, which changes only rarely, is rerun only if needed, so as to minimize rebuilding.",[],2013-05-30 13:16:15+00:00,2013-05-31 12:02:47+00:00,2013-05-31 12:37:11+00:00,Closed,13114154,DAFFODIL-736
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-05-30 13:07:47+00:00,2015-02-17 18:01:53+00:00,2015-02-19 19:01:39+00:00,Closed,13114153,DAFFODIL-735
Bug,[],gmcdonald,Gavin McDonald,daffodil-costello,Roger Costello,Critical,"I have this import element in my schema file:

<xsd:import namespace=""Foo"" schemaLocation=""Foo.xsd"" />

Everything works fine with Daffodil. Then, I add a letter to the beginning of Foo.xsd:

<xsd:import namespace=""Foo"" schemaLocation=""AFoo.xsd"" />

and, of course on my hard-drive I change the schema filename to AFoo.xsd

Using oXygen's validate capability I validated that I am importing the schema file correctly (so I know the import is correct).

Now when I run Daffodil it gives this error:

Schema Definition Error: Unable to import namespace Foo from XML catalog(s) jar:file ...

As far as I can tell the namespace and the file name must match.",[],2013-05-29 17:37:59+00:00,2013-05-31 18:08:58+00:00,2013-06-04 21:54:48+00:00,Closed,13114152,DAFFODIL-734
Wish,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"We have the initial infrastructure and some CLI Automation tests in the repo. We need to make sure all existing manual tests are converted to automated tests (except for those that require more attention than what can be provided by automation), and that all of these tests work on both Linux and Windows.",[],2013-05-29 16:18:09+00:00,2019-10-31 23:56:00+00:00,2021-05-20 20:01:36+00:00,Closed,13114151,DAFFODIL-733
Bug,[],gmcdonald,Gavin McDonald,daffodil-costello,Roger Costello,Critical,"My experiments have revealed that the use of maxOccurs=""unbounded"" in an element declaration results in the error shown at the bottom of this box.

For example, this element declaration uses maxOccurs=""unbounded"" and generates the error:

<xsd:element ref=""foo"" minOccurs=""0"" maxOccurs=""unbounded"" dfdl:occursCountKind=""implicit"" />

Whereas, if I remove maxOccurs=""unbounded"":

<xsd:element ref=""foo"" minOccurs=""0"" dfdl:occursCountKind=""implicit"" />

then I do not get the error and the output is correct (provided, of course, the input contains 0 or 1 occurrence).

Here is the error message that I get with maxOccurs=""unbounded"" (BTW, this error message is not useful):
{code}
edu.illinois.ncsa.daffodil.exceptions.NotYetImplementedException: Not yet implemented.
edu.illinois.ncsa.daffodil.exceptions.Assert$.notYetImplemented(Assert.scala:83)
edu.illinois.ncsa.daffodil.dsom.LocalElementMixin$class.isLastRequiredElementOfSequence(Elements.scala:721)
edu.illinois.ncsa.daffodil.dsom.LocalElementBase.isLastRequiredElementOfSequence(Elements.scala:741)
edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$arrayContentsWithSeparators$1.gd18$1(GrammarMixins.scala:975)
        at edu.illinois.ncsa.daffodil.exceptions.Assert$.notYetImplemented(Assert.scala:83)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementMixin$class.isLastRequiredElementOfSequence(Elements.scala:721)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementBase.isLastRequiredElementOfSequence(Elements.scala:741)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$arrayContentsWithSeparators$1.gd18$1(GrammarMixins.scala:975)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$arrayContentsWithSeparators$1.apply(GrammarMixins.scala:967)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$arrayContentsWithSeparators$1.apply(GrammarMixins.scala:965)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$18.apply(GrammarMixins.scala:922)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$18.apply(GrammarMixins.scala:922)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$recurrance$1.apply(GrammarMixins.scala:860)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$recurrance$1.apply(GrammarMixins.scala:860)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$16.apply(GrammarMixins.scala:842)
        at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$16.apply(GrammarMixins.scala:842)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:67)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$class.folder(GrammarMixins.scala:1161)
        at edu.illinois.ncsa.daffodil.dsom.Sequence.folder(Groups.scala:673)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114$$anonfun$apply$115.apply(GrammarMixins.scala:1159)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114$$anonfun$apply$115.apply(GrammarMixins.scala:1159)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at scala.collection.LinearSeqOptimized$class.foldRight(LinearSeqOptimized.scala:120)
        at scala.collection.immutable.List.foldRight(List.scala:76)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114.apply(GrammarMixins.scala:1159)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114.apply(GrammarMixins.scala:1159)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2.apply(GrammarMixins.scala:1159)
        at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2.apply(GrammarMixins.scala:1159)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$modelGroupSyntax$1.apply(GrammarMixins.scala:1139)
        at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$modelGroupSyntax$1.apply(GrammarMixins.scala:1139)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$class.separatedForPosition(GrammarMixins.scala:1037)
        at edu.illinois.ncsa.daffodil.dsom.Term.separatedForPosition(Groups.scala:53)
        at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$termContentBody$1.apply(GrammarMixins.scala:1141)
        at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$termContentBody$1.apply(GrammarMixins.scala:1141)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1198)
        at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1198)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContent$1.apply(GrammarMixins.scala:716)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContent$1.apply(GrammarMixins.scala:716)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1$$anonfun$apply$51.apply(GrammarMixins.scala:776)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1$$anonfun$apply$51.apply(GrammarMixins.scala:776)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$class.specifiedLength(GrammarMixins.scala:770)
        at edu.illinois.ncsa.daffodil.dsom.ElementBase.specifiedLength(Elements.scala:122)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:776)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:776)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:780)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:780)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:828)
        at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:827)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:313)
        at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:313)
        at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:73)
        at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1004)
        at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1004)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$27.apply(Grammar.scala:317)
        at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$27.apply(Grammar.scala:317)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.grammar.Prod.parser(Grammar.scala:315)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18$$anonfun$apply$1.apply(Runtime.scala:118)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18$$anonfun$apply$1.apply(Runtime.scala:116)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18.apply(Runtime.scala:116)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18.apply(Runtime.scala:116)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.parser(Runtime.scala:114)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:95)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:95)
        at edu.illinois.ncsa.daffodil.util.ZZ.head(ZList.scala:47)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(OOLAG.scala:326)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(OOLAG.scala:325)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(OOLAG.scala:325)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply$mcV$sp(OOLAG.scala:325)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply(OOLAG.scala:325)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply(OOLAG.scala:325)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply$mcV$sp(OOLAG.scala:334)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:316)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:316)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:316)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:311)
        at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
        at scala.collection.immutable.List.foreach(List.scala:76)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply$mcV$sp(OOLAG.scala:311)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:307)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:307)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:306)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:403)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:94)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:92)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:92)
        at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:92)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:92)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:92)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:91)
        at edu.illinois.ncsa.daffodil.processors.DataProcessor.isError(Runtime.scala:107)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:110)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:106)
        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
        at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:106)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$6.apply(Main.scala:162)
        at edu.illinois.ncsa.daffodil.Main$$anonfun$6.apply(Main.scala:159)
        at edu.illinois.ncsa.daffodil.util.Timer$.getTimeResult(Timer.scala:92)
        at edu.illinois.ncsa.daffodil.util.Timer$.getResult(Timer.scala:50)
        at edu.illinois.ncsa.daffodil.Main$.createProcessorFromSchemas(Main.scala:159)
        at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:393)
        at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:645)
        at edu.illinois.ncsa.daffodil.Main.main(Main.scala)
{code}",[],2013-05-29 15:56:30+00:00,2013-08-20 16:08:08+00:00,2013-08-23 19:41:27+00:00,Closed,13114150,DAFFODIL-732
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Calling 'result' on JAPI side of things multiple times causes an error.  Essentially we're attempting to add the 'content' (the root element of the result) to a Document when result is called.  Subsequent calls attempt to do it again, but the 'root element' already has a parent Document from the prior call.

Need to simply clone the node before adding it to the Document.",[],2013-05-28 15:03:52+00:00,2013-06-03 15:13:36+00:00,2013-06-13 18:46:17+00:00,Closed,13114149,DAFFODIL-731
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,The zip/tar created by daffodil-pack contains build.sbt. No need for this. It will just confuse users.,[],2013-05-24 21:04:03+00:00,2013-09-09 19:15:49+00:00,2013-09-10 20:19:56+00:00,Closed,13114148,DAFFODIL-730
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Recent buildbot failures have been attributed to the fact that the CLI tests are trying to use Java 6, when they should be using Java 7. The other tests use the correct version without issue. 

Andy suggested an enhancement to the failure routine to print out the packages used for the test when a failure is encountered.",[],2013-05-24 12:40:51+00:00,,2018-09-13 14:03:57+00:00,Open,13114147,DAFFODIL-729
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,define requirements for unparsing aspects of Java API,[],2013-05-23 19:31:37+00:00,2016-09-06 20:06:25+00:00,2021-05-18 14:38:38+00:00,Closed,13114146,DAFFODIL-728
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL expression language is based on a subset of XPath 2.0.

The ""2.0"" here is important, because XPath 2.0 is strongly typed, and does math in appropriate types. (XPath 1.0 casts everything to double, creating many problems with integer values that have decimal points in them, loss of precision, etc.)

At some point we should either implement the DFDL expression language directly, or plug in an XPath 2.0 implementation instead.

This has implications for JDOM usage, etc. (right now we use JDOM because it works with Saxon-B as our infoset)

Note below by J. Cranford, about an alternative XPath implementation to Saxonica's Saxon versions:


PsychoPath (http://wiki.eclipse.org/PsychoPathXPathProcessor) is an XPath2 processor that is now part of the Eclipse project.  Xerces-J bundles it for XPath 2.0 support, used in XML Schema 1.1 assertions. 

The somewhat tricky part is that psychopath releases are part of eclipse releases, so there isn't an obvious place to go to get just the latest PsychoPath release. Basically, you have to get the latest Eclipse Web Tools Platform (WTP) release and pull the jar straight out of there.  Instructions are at http://wiki.eclipse.org/PsychoPathXPathProcessor/UserManual, with specific link to WTP project in Xerces FAQ at http://xerces.apache.org/xerces2-j/faq-xs.html#faq-2. 

Options as I see them (in no particular order):

1. Extends JDOM's xpath API directly to plug in PsychoPath.
2. Extend psychopath to support JDOM directly.
3. Modify the underlying infoset to not be JDOM.",[],2013-05-23 12:39:50+00:00,2014-11-11 16:15:10+00:00,2014-11-26 17:44:14+00:00,Closed,13114145,DAFFODIL-727
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This reported by Jonathan Cranford:

I duplicated a problem Roger Costello ran into a few weeks ago in the 0.9.1 build.  I based the test schema on one of the OGF tutorials.  See attached for all files.

First, the working schema address.xsd in action:

C:\...\test> \users\jcranford\share\java\daffodil-0.9.1\bin\daffodil.bat parse -s address.xsd address.txt
<addresses>
  <address>
    <houseNumber>118</houseNumber>
    <street>Ridgewood Circle</street>
    <city>Rochester</city>
    <jurisdiction>
      <state>NY</state>
    </jurisdiction>
  </address>
  <address>
    <houseNumber>25</houseNumber>
    <street>The Hundred</street>
    <city>Romsey</city>
    <jurisdiction>
      <county>Hampshire</county>
    </jurisdiction>
  </address>
  <address>
    <houseNumber>279</houseNumber>
    <street>Lakeside Road</street>
    <city>Toronto</city>
    <jurisdiction>
      <province>Ontario</province>
    </jurisdiction>
  </address>
</addresses>


If you look at address.xsd, the key for us is the jurisdiction element - it can contain a state or county or province.

Now for the broken one: address-optional-choice.xsd

The only difference between the two schemas is in the jurisdiction element; address-optional-choice.xsd has the attributes in {color:red}red{color} below, but they���re missing in address.xsd.  In short, all branches of the choice are now optional.


  <xs:element dfdl:initiator=""state:"" {color:red}dfdl:occursCountKind=""implicit"" minOccurs=""0""{color} name=""state"" type=""xs:string""/>

  <xs:element dfdl:initiator=""county:"" {color:red}dfdl:occursCountKind=""implicit"" minOccurs=""0""{color} name=""county"" type=""xs:string""/>

  <xs:element dfdl:initiator=""province:"" {color:red}dfdl:occursCountKind=""implicit"" minOccurs=""0""{color} name=""province"" type=""xs:string""/>


The DFDL spec explicitly says that no branches in a choice may be optional; that is, minOccurs must be greater than 0.

Now, the faulty schema in action:

C:\...\test> \users\jcranford\share\java\daffodil-0.9.1\bin\daffodil.bat parse -s address-optional-choice.xsd address.txt
[error] Parse Error: *All alternatives failed*. Reason(s): List(Parse Error: Alternative failed.
Reason(s): List(Parse Error: Sep('%CR;%LF;') - element.address: Delimiter not found!
Schema context: element.address Location in file:/C:/Users/jcranford/IBM/wmbt80/workspace/test/address-optional-choice.xsd
Data location was preceding byte 61
UTF-8 text starting at byte 56 is: (NY]
[house:25*street:The Hundred*city:R)
���


I trimmed a bunch of noisy diagnostic output and *bolded* what I think is the important part.  I interpret this to mean that it couldn���t find an alternative to match.  The diagnostic output shows that it choked on ""NY""; it didn���t know how to parse it.

I think what Daffodil should do is detect minOccurs=0 branches in a choice and raise a Schema Definition Error, with some error message like ""A choice cannot contain optional elements, nor can a choice be optional"" (credit to Roger for the wording).  Instead, what it appears to be doing is failing the parse with a parse error.

It is interesting to note that I couldn���t even run this example in IBM���s MBTK; it flags the optional branch as an error in address-optional-choice.xsd.
 
Fyi,

-Jonathan Cranford",[],2013-05-23 12:29:13+00:00,2015-06-02 22:10:19+00:00,2015-06-10 18:09:16+00:00,Closed,13114144,DAFFODIL-726
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Minor,"Note, this does not appear related to a Windows folder with space in the folder name.


[info] Test edu.illinois.ncsa.daffodil.section12.length_properties.TestLengthProperties.test_LengthProp_longTextLength started
[error] Test edu.illinois.ncsa.daffodil.section12.length_properties.TestLengthProperties.test_LengthProp_longTextLength failed: java.lang.Exception: Did not find diagnostic message ""Parse failed to find exactly 557 characters"" in any of the actual diagnostic messages: 
[error] Left over data: byte 557
[error] UTF-8 text starting at byte 552 is: (uld do this)
[error] Data (hex) starting at byte 552 is: (0x756C6420646F2074686973)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:421)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:415)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:414)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:529)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:445)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:393)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:256)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:247)
[error]     at edu.illinois.ncsa.daffodil.section12.length_properties.TestLengthProperties.test_LengthProp_longTextLength(TestLengthProperties.scala:76)
[error]     ...
[info] Test run finished: 1 failed, 0 ignored, 58 total, 3.651s",[],2013-05-22 20:49:03+00:00,2017-04-06 15:15:00+00:00,2018-09-13 14:13:23+00:00,Closed,13114143,DAFFODIL-725
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Our trace mode does not show sufficient detail about what is going on in the scanning for delimiters. The primitives that do this need to be enhanced to provide information intended for display by the interactive debugger.,[],2013-05-21 21:00:49+00:00,,2019-07-03 12:52:47+00:00,Open,13114142,DAFFODIL-724
Improvement,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"run our suite of tests against the IBM implementation and note inconsistencies.
This will require significant test harness type development.
We'll call this Phase 1.",['ForInteroperabilityTest'],2013-05-21 18:53:33+00:00,2018-11-30 22:06:13+00:00,2021-05-20 20:01:25+00:00,Closed,13114141,DAFFODIL-723
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"It would be nice to be able to add comments to instruction files that are passed to the CLI debugger, especially for automated testing purposes.",[],2013-05-21 12:57:31+00:00,,2020-12-16 20:22:00+00:00,Open,13114140,DAFFODIL-722
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to Taylor, in the test for handling double newline entities as separators, there's a discrepancy between the result returned via our Scala api vs the java api. We are translating from JDOM to Scala Node to JDOM.  So it keeps replacing entities when it doesn't need to.

The infoset uses XML entities to represent '<' and '>' However, the ampersands in the entity are getting replaced. so {noformat}&lt;{noformat} becomes {noformat}&amp;lt;{noformat} instead of {noformat}<{noformat}

See test doubleNL in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/entities/TestEntities_01.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/entities/TestEntities.scala

I created a version of the test that uses CDATA tags and literal '<' and '>' characters (doubleNL2) and this seems to be a good workaround.",[],2013-05-20 14:26:19+00:00,2013-05-24 12:49:55+00:00,2013-05-28 15:28:12+00:00,Closed,13114139,DAFFODIL-721
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Please see the following output. I first run the command without the -o flag, and the data parses without error on stdout. In the second command, the only thing I add is the -o flag, with outfile.txt. I get the error about no global elements, and nothing gets written to outfile.txt.


~/NGF/dfdl (jira-676) daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/TopLevel.xsd -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/DefaultProperties.xsd daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/02nine_headers.txt
<tns:TopLevel xmlns:tns=""http://example.com"">
  <tns:MessageHeaders>
    Date: Fri, 15 Feb 2013 08:54:52 -0500
From: john@doe.com
To: jane@doe.com
Message-ID: &lt;OFB0B2662B.92FC9941-ON80257B1F.0045CE19-80257B1F.004ADB2A@doe.com&gt;
Subject: Hello World!
Return-Path: &lt;bob@smith.com&gt;
Thread-Index: Ac3NbaI+1oo+ltP4SSqsh0WAhpIVagAAZVmwAALaigABACxfkAAPsjwAAA8SeAAABZb0A==
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20120828 Thunderbird/16.0 Lightning/1.8b1
Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08jU534c0p
  </tns:MessageHeaders>
  <tns:Body>This is the body </tns:Body>
</tns:TopLevel>

~/NGF/dfdl (jira-676) daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/TopLevel.xsd -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/DefaultProperties.xsd -o outfile.txt daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/02nine_headers.txt
[error] Compilation (ProcessorFactory) produced 1 errors/warnings.
[error] Schema Definition Error: No global elements in: file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/DefaultProperties.xsd()
Schema context: SchemaSet. Location in daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/DefaultProperties.xsd.
~/NGF/dfdl (jira-676) cat outfile.txt 

----
I can't reproduce this with other more basic tests. It seems to either be specific to multi-file schemas or this test itself.",[],2013-05-17 17:31:53+00:00,2013-05-24 13:29:26+00:00,2013-05-27 14:51:23+00:00,Closed,13114138,DAFFODIL-720
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Minor,"On Getting Started for Developers 

This page calls out 2.9.2, we've moved on to 2.10.x

https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Getting+Started+for+Developers",[],2013-05-17 17:14:09+00:00,2013-05-24 19:17:17+00:00,2013-05-28 20:58:23+00:00,Closed,13114137,DAFFODIL-719
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I created a schema chain:
base schema: 
 rabbitHole - sequence of elements - ref is a13:nestSequence
Schema A:
 nestSequence - sequence of elements - ref is b13:nest
Schema B:
 nest - element - type is c13:nestType
Schema C:
 nestType - simpleType - restriction base is xs:nonExistent

I get a lot of identical errors. I thought maybe there's a message for each stage of the chain, but there appear to be more. In this case would we want an error message for each object in the chain? For example, in the output for test_combinations_02, there are two errors: one for the element that references the invalid format, and one for the format:

2013-05-17 07:48:30:666  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error:{color:red}[Schema Definition Error: Unknown time zone '5 o'clock somewhere'
Schema context: element.date2. Location line 16 column 140 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_06.dfdl.xsd.{color}]
2013-05-17 07:48:30:667  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error[{color:red}Schema Definition Error: Property calendarTimeZone defined as '5 o'clock somewhere'.
Schema context: SchemaDocument::DFDLFormat. Location line 16 column 77 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/subfolder/multi_C_06_nons.dfdl.xsd.{color}]
2013-05-17 07:48:30:667  edu.illinois.ncsa.daffodil.tdml.ParserTestCase Error[Schema Definition Error: Unknown time zone '5 o'clock somewhere'
Schema context: element.date2. Location line 16 column 140 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_06.dfdl.xsd.]
2013-05-17 07:48:30:667  edu.illinois.ncsa.daffodil.tdml.ParserTestCase Error[Schema Definition Error: Property calendarTimeZone defined as '5 o'clock somewhere'.
Schema context: SchemaDocument::DFDLFormat. Location line 16 column 77 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/subfolder/multi_C_06_nons.dfdl.xsd.]

----

Output for errorLocations_01:

[error] Test edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_errorLocations_01 failed: java.lang.Exception: Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error] Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error] Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error] Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error] Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error] Schema Definition Error: Type {http://www.w3.org/2001/XMLSchema}nonExistent is not an XSD primitive type.
[error] Schema context: simpleType.nestType. Location line 12 column 34 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.10/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_13.dfdl.xsd.
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:546)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:444)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:393)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:256)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:247)
[error]     at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_errorLocations_01(TestNamespaces.scala:87)
[error]     ...",[],2013-05-17 15:01:56+00:00,,2021-01-15 23:22:34+00:00,Reopened,13114136,DAFFODIL-718
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See test indexOutOfBounds_01.

This test fails. The diagnostic we produce is really poor. It directs you to the line with the error, but nowhere does it provide a clue that the length value, 6, might be too large for the data.",['beginner'],2013-05-16 21:15:57+00:00,,2020-08-05 18:06:33+00:00,Open,13114135,DAFFODIL-717
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test case multi_encoding_04. This is a root containing a sequence of two elements. Length kind is delimited, but the first child element has no terminator, and the sequence has no separator. 

See related issue DFDL-715.",['beginner'],2013-05-16 21:02:59+00:00,,2020-08-05 18:05:17+00:00,Open,13114134,DAFFODIL-716
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"If a field requires a delimiter coming from an enclosing sequence, enclosing element, or nest thereof, then all those possible delimiters must have the same character encoding as the field itself. 

It is an SDE otherwise. 

See test multi_encoding_05.",['beginner'],2013-05-16 21:02:18+00:00,,2020-08-05 18:04:41+00:00,Reopened,13114133,DAFFODIL-715
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Some time back, due to issues with include/import, I pre-merged the XML Schemas for DFDL annotations (The 3 files xsd/DFDL_part1_attributes.xsd, xsd/DFDL_part2_type.xsd, xsd/DFDL_part3_model.xsd), because the fact that part 3 included part 2, which included part 1, was somehow not working.

So a merged duplicate named DFDL_model_all_parts.xsd was created.

There have been extensive changes to include/import including support for relative file locations, etc.

Hence, this extra pre-merged schema may no longer be needed.

It would be good to remove it and go back to the original 3 files if possible so that we eliminate maintaining duplicate locations. 

Right now, only prop-gen reads the separate 3-part files, the rest of the system (xerces-based validation when loading) uses the combined 'all-parts' schema.",[],2013-05-16 12:55:05+00:00,2014-05-15 16:39:58+00:00,2014-08-08 19:05:38+00:00,Closed,13114132,DAFFODIL-714
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Simultaneous with the conversion to scala 2.10, memory behavior is much worse.

When I run unit tests now, it fails due to out of heap, or GC overhead limit exceeded. This is true even when the JVM is given 6Gig heap space. 

One test, test_ExplicitLengthBytesNotGiven, allocates a giant array. 

This test fails now, and its presence in the suite really aggravates things. It is commented out now because it makes forward progress working impossible.

Without that test, behavior is still bad. Tests run, but are broken up by GC pauses which happen more and more frequently as tests are run (from sbt). 

So something is leaking memory now.",[],2013-05-14 23:24:01+00:00,2014-05-12 20:15:40+00:00,2014-05-29 21:12:35+00:00,Closed,13114131,DAFFODIL-713
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"It is a bug if an error message only mentions the location of a type definition, and not the element, because obviously a named type can be shared and have instances all over the place, only one of which is violating its constraints.

James Garriss was moving asserts around from types to elements so as to get a better diagnostic message. The message shouldn't actually change (much) if an assert moves from a shared type definition to an element. 

This may be a general principle our error messages are not dealing with currently. If you have a global element declaration for example, then unless it is the root element, any errors should definitely give you file and line number for the element reference. Similarly types have to give you the location of the specific element of that type. (which then might mean the specific location of an element reference if the element was a global element declaration).

So, you will want file and line number of exactly what assert failed, and ideally, of exactly the constraint itself (e.g., the pattern facet definition), you also need the file and line for the point of usage of the type/element.


________________________________________
From: Garriss Jr., James P. [jgarriss@mitre.org]
Sent: Tuesday, May 14, 2013 2:25 PM
To: Mike Beckerle; Stephen Lawrence
Cc: jcranford@mitre.org
Subject: RE: [daffodil] explosion on a choice

> You want checkConstraints() to be called in an assert, on every element of simple type that has any constraints.

Concur.

> The convenient way to do this is by defining your own library of simple types

Already exists.

> put the asserts there, then express the schema as elements of those types exclusively.

I started it that way, but then moved the checkConstraints up to higher level elements.  My reason is because the error messages made more sense at the higher level.

For example.

  Plain email
    Sequence
      Local part (type = atomic)
      Domain (type = atomic or domain)

  Atomic (restricted string)
  Domain (restricted string)

If I put the checkConstraint on Local part (instead of Atomic), the error message can say something specific about local parts.  Easier to understand/debug.",['dev-verify'],2013-05-14 18:46:10+00:00,,2021-01-20 18:37:31+00:00,Open,13114130,DAFFODIL-712
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I'm not sure if this functionality is even implemented yet but I still don't believe I should be getting such a vague message, especially an Abort.
----
[error] Test edu.illinois.ncsa.daffodil.section07.variables.TestVariables.test_setVarAbsolutePath {color:red}failed: edu.illinois.ncsa.daffodil.exceptions.Abort: Boolean isConstant is false. Cannot request a constant value.{color}
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[error] edu.illinois.ncsa.daffodil.exceptions.Assert$.usageError(Assert.scala:75)
[error] edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.constant(CompiledExpression.scala:131)
[error] edu.illinois.ncsa.daffodil.dsom.CompiledExpression.constantAsString(CompiledExpression.scala:97)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[error]     at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageError(Assert.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.RuntimeExpression.constant(CompiledExpression.scala:131)
[error]     at edu.illinois.ncsa.daffodil.dsom.CompiledExpression.constantAsString(CompiledExpression.scala:97)
[error]     at edu.illinois.ncsa.daffodil.processors.StaticText$$anonfun$11.apply(PrimitivesDelimiters.scala:81)
[error]     at edu.illinois.ncsa.daffodil.processors.StaticText$$anonfun$11.apply(PrimitivesDelimiters.scala:80)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:244)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at scala.collection.TraversableLike$class.map(TraversableLike.scala:244)
[error]     at scala.collection.AbstractTraversable.map(Traversable.scala:105)
[error]     at edu.illinois.ncsa.daffodil.processors.StaticText.<init>(PrimitivesDelimiters.scala:80)
[error]     at edu.illinois.ncsa.daffodil.processors.StaticDelimiter.<init>(PrimitivesDelimiters.scala:65)
[error]     at edu.illinois.ncsa.daffodil.processors.StaticSeparator.<init>(PrimitivesDelimiters.scala:453)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$$anonfun$staticSeparator$1.apply(GrammarMixins.scala:1080)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$$anonfun$staticSeparator$1.apply(GrammarMixins.scala:1080)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:89)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$class.sepRule(GrammarMixins.scala:1085)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.sepRule$lzycompute(Groups.scala:53)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.sepRule(Groups.scala:53)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$$anonfun$infixSep$1.apply(GrammarMixins.scala:1095)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$$anonfun$infixSep$1.apply(GrammarMixins.scala:1095)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:73)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$class.separatedForPosition(GrammarMixins.scala:1040)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.separatedForPosition(Groups.scala:53)
[error]     at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$separatedScalarDefaultable$1.apply(GrammarMixins.scala:851)
[error]     at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$separatedScalarDefaultable$1.apply(GrammarMixins.scala:851)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:89)
[error]     at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$16.apply(GrammarMixins.scala:842)
[error]     at edu.illinois.ncsa.daffodil.dsom.LocalElementGrammarMixin$$anonfun$16.apply(GrammarMixins.scala:842)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:67)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$class.folder(GrammarMixins.scala:1164)
[error]     at edu.illinois.ncsa.daffodil.dsom.Sequence.folder(Groups.scala:664)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114$$anonfun$apply$115.apply(GrammarMixins.scala:1162)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114$$anonfun$apply$115.apply(GrammarMixins.scala:1162)
[error]     at scala.collection.immutable.List$$anonfun$foldRight$1.apply(List.scala:306)
[error]     at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized.scala:111)
[error]     at scala.collection.immutable.List.foldLeft(List.scala:84)
[error]     at scala.collection.immutable.List.foldRight(List.scala:306)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114.apply(GrammarMixins.scala:1162)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2$$anonfun$apply$114.apply(GrammarMixins.scala:1162)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2.apply(GrammarMixins.scala:1162)
[error]     at edu.illinois.ncsa.daffodil.dsom.SequenceGrammarMixin$$anonfun$groupContent$2.apply(GrammarMixins.scala:1162)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$modelGroupSyntax$1.apply(GrammarMixins.scala:1142)
[error]     at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$modelGroupSyntax$1.apply(GrammarMixins.scala:1142)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.TermGrammarMixin$class.separatedForPosition(GrammarMixins.scala:1040)
[error]     at edu.illinois.ncsa.daffodil.dsom.Term.separatedForPosition(Groups.scala:53)
[error]     at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$termContentBody$1.apply(GrammarMixins.scala:1144)
[error]     at edu.illinois.ncsa.daffodil.dsom.ModelGroupGrammarMixin$$anonfun$termContentBody$1.apply(GrammarMixins.scala:1144)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1201)
[error]     at edu.illinois.ncsa.daffodil.dsom.ComplexTypeBaseGrammarMixin$$anonfun$mainGrammar$1.apply(GrammarMixins.scala:1201)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContent$1.apply(GrammarMixins.scala:716)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$complexContent$1.apply(GrammarMixins.scala:716)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1$$anonfun$apply$51.apply(GrammarMixins.scala:776)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1$$anonfun$apply$51.apply(GrammarMixins.scala:776)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$class.specifiedLength(GrammarMixins.scala:770)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBase.specifiedLength(Elements.scala:122)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:776)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarComplexContent$1.apply(GrammarMixins.scala:776)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$bar(Grammar.scala:88)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:780)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultableContent$1.apply(GrammarMixins.scala:780)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:828)
[error]     at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$scalarDefaultablePhysical$1.apply(GrammarMixins.scala:827)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty$lzycompute(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.isEmpty(Grammar.scala:313)
[error]     at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:73)
[error]     at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1007)
[error]     at edu.illinois.ncsa.daffodil.dsom.GlobalElementDeclGrammarMixin$$anonfun$document$1.apply(GrammarMixins.scala:1007)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:296)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$26.apply(Grammar.scala:294)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram$lzycompute(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$27.apply(Grammar.scala:317)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod$$anonfun$27.apply(Grammar.scala:317)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.parser$lzycompute(Grammar.scala:315)
[error]     at edu.illinois.ncsa.daffodil.grammar.Prod.parser(Grammar.scala:315)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18$$anonfun$apply$1.apply(Runtime.scala:118)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18$$anonfun$apply$1.apply(Runtime.scala:116)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18.apply(Runtime.scala:116)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$18.apply(Runtime.scala:116)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parser$lzycompute(Runtime.scala:114)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.parser(Runtime.scala:114)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:95)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$2.apply(Runtime.scala:95)
[error]     at edu.illinois.ncsa.daffodil.util.ZZ.head$lzycompute(ZList.scala:47)
[error]     at edu.illinois.ncsa.daffodil.util.ZZ.head(ZList.scala:47)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(OOLAG.scala:326)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(OOLAG.scala:325)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(OOLAG.scala:325)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply$mcV$sp(OOLAG.scala:325)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply(OOLAG.scala:325)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2$$anonfun$1.apply(OOLAG.scala:325)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody$lzycompute(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.lazyBody(OOLAG.scala:674)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6$$anonfun$apply$21.apply(OOLAG.scala:591)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:498)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply$mcV$sp(OOLAG.scala:334)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:316)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:316)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:316)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:311)
[error]     at scala.collection.immutable.List.foreach(List.scala:318)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply$mcV$sp(OOLAG.scala:311)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:307)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1.apply(OOLAG.scala:307)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.checkErrors(OOLAG.scala:306)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.isError(OOLAG.scala:403)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply$mcZ$sp(Compiler.scala:94)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:92)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1$$anonfun$apply$mcZ$sp$2.apply(Compiler.scala:92)
[error]     at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply$mcZ$sp(Compiler.scala:92)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:92)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$isError$1.apply(Compiler.scala:92)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.isError(Compiler.scala:91)
[error]     at edu.illinois.ncsa.daffodil.processors.DataProcessor.isError(Runtime.scala:107)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:110)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory$$anonfun$onPath$1.apply(Compiler.scala:106)
[error]     at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingCompilerMode$1.apply(ExecutionMode.scala:46)
[error]     at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:106)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:512)
[error]     at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:409)
[error]     at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:358)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:221)
[error]     at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:212)
[error]     at edu.illinois.ncsa.daffodil.section07.variables.TestVariables.test_setVarAbsolutePath(TestVariables.scala:51)
----

The test is in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section07/variables/TestVariablesDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section07/variables/TestVariables.scala",[],2013-05-14 18:26:49+00:00,2018-09-07 14:37:20+00:00,2021-05-20 12:35:08+00:00,Closed,13114129,DAFFODIL-711
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See discussion below. 

-----Original Message-----
From: Mike Beckerle [mailto:mbeckerle@tresys.com]
Sent: Tuesday, May 14, 2013 10:57 AM
To: Garriss Jr., James P.; Stephen Lawrence
Subject: RE: [daffodil] error error error error message



Well, here is what is happening. Because your schema has alternatives in it (choice), and none of them are passing, it is rolling up the reasons why all the alternatives failed, and listing them all.

This is a hack, but in general, if your choice has nothing that matches, it may not be for the reason that the last branch failed on that is of interest. It could be because the first, or any of the others failed that the overall thing fails.

A much more verbose presentation of this would help that lays out each failure, and the point in the schema where that choice alternative was, etc.

We will make a JIRA issue to improve this.
________________________________
From: Garriss Jr., James P. [jgarriss@mitre.org]
Sent: Tuesday, May 14, 2013 10:25 AM
To: Stephen Lawrence
Cc: Mike Beckerle
Subject: [daffodil] error error error error message

I added a check constraints to the display name, forcing Daffodil to validate the set of allowed characters on parse.  And it does!  It gives me the assertion error message, which is good.

But...it appears to throw the same set of error messages 4 times.  Is that a bug?

Here's the key schema:

    <xsd:simpleType name=""DisplayName"">
        <xsd:annotation>
            <xsd:appinfo source=""http://www.ogf.org/dfdl/dfdl-1.0/"">
                <dfdl:assert test=""{ dfdl:checkConstraints(.) }"" message=""A display name has a restricted set of allowed characters""/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base=""xsd:string"">
            <xsd:pattern value=""[A-Za-z0-9!#$%&amp;'*+-/=?^_`\{\|\}]+""/>
        </xsd:restriction>
    </xsd:simpleType>

Here's the input (the @ is not allowed):

From: ""John@Doe"" <johndoe@examplename.com>

Here's the output:

C:\Users\jgarriss\Documents\DFDL_Schemas_Email\02_Message_Headers>C:\Users\jgarriss\daffodil\bin\daffodil parse -s From.xsd -r From from06_invalid_dis
play.txt
[error] Parse Error: All alternatives failed. Reason(s): List(Parse Error: Alternative failed. Reason(s): List(Parse Error: Init('<') - element.Displa
yEmail: Delimiter not found!
Schema context: element.DisplayEmail Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F))
Schema context: element.DisplayEmailWithoutDisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F), Parse Error: Alternative faile
d. Reason(s): List(Parse Error: Assertion failed. A display name has a restricted set of allowed characters
Schema context: simpleType.DisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 17
UTF-8 text starting at byte 16 is: ( <johndoe@examplename.com>
)
Data (hex) starting at byte 16 is: (0x203C6A6F686E646F65406578616D706C656E616D652E636F6D3E0D0A))
Schema context: element.DisplayEmailWithoutDisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F), Parse Error: Alternative faile
d. Reason(s): List(Parse Error: Assertion failed. A display name has a restricted set of allowed characters
Schema context: simpleType.DisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 17
UTF-8 text starting at byte 16 is: ( <johndoe@examplename.com>
)
Data (hex) starting at byte 16 is: (0x203C6A6F686E646F65406578616D706C656E616D652E636F6D3E0D0A))
Schema context: element.DisplayEmailWithoutDisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F), Parse Error: Alternative faile
d. Reason(s): List(Parse Error: Assertion failed. A local part has a restricted set of allowed characters
Schema context: element.LocalPart Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 11
UTF-8 text starting at byte 8 is: (ohn@Doe"" <johndoe@examplename.com>
)
Data (hex) starting at byte 8 is: (0x6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F6D3E0D0A))
Schema context: element.DisplayEmailWithoutDisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F))
Schema context: element.DisplayEmailWithoutDisplayName Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Email.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (From: ""John@Doe"" <johndoe@examplename.co)
Data (hex) starting at byte 0 is: (0x46726F6D3A20224A6F686E40446F6522203C6A6F686E646F65406578616D706C656E616D652E636F)",[],2013-05-14 17:37:55+00:00,,2020-08-05 18:01:20+00:00,Open,13114128,DAFFODIL-710
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Rather than placing checkConstraints everywhere, we need the ability to enable validation so facets are always checked.",[],2013-05-14 14:57:16+00:00,2013-05-14 17:42:14+00:00,2013-08-20 16:47:53+00:00,Closed,13114127,DAFFODIL-709
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Critical,"If a string is constrained with a pattern facet and checkConstraint is used, it will check constraints, but it will not fail for the comma.

For example, these examples fail for the local part:

From: ""John Doe"" <john:doe@examplename.com>
From: ""John Doe"" <john]doe@examplename.com>
From: ""John Doe"" <john*doe@examplename.com>

But it won't fail for this one:

From: ""John Doe"" <john,doe@examplename.com>

Here's the element I'm using:

{code}
            <xsd:element dfdl:textStringPadCharacter=""%SP;"" name=""LocalPart"">
                <xsd:annotation>
                    <xsd:appinfo source=""http://www.ogf.org/dfdl/dfdl-1.0/"">
                        <dfdl:assert test=""{ dfdl:checkConstraints(.) }"" message=""A local part has a restricted set of allowed characters""/>
                    </xsd:appinfo>
                </xsd:annotation>
                <xsd:simpleType>
                    <xsd:restriction base=""xsd:string"">
                        <xsd:pattern value=""[.A-Za-z0-9!#$%&amp;'*+-/=?^_`\{\|\}~]+""/>
                    </xsd:restriction>
                </xsd:simpleType>
            </xsd:element>
{code}",[],2013-05-14 14:35:43+00:00,2013-09-09 13:44:04+00:00,2013-09-18 17:33:02+00:00,Closed,13114126,DAFFODIL-708
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"If an element is a string that is restricted with the pattern facet, Daffodil ignores the restriction.

For example, Daffodil allows john,doe to be a valid LocalPart, even though the comma is not an allowed character.
{code}
<xsd:element dfdl:textStringPadCharacter=""%SP;"" name=""LocalPart"">
    <xsd:simpleType>
        <xsd:restriction base=""xsd:string"">
            <xsd:pattern value=""[.A-Za-z0-9!#$%&amp;'*+-/=?^_`{|}~]+""/>
        </xsd:restriction>
    </xsd:simpleType>
</xsd:element>
{code}",[],2013-05-14 13:21:54+00:00,2013-05-14 14:58:45+00:00,2013-05-14 18:37:28+00:00,Closed,13114125,DAFFODIL-707
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-05-10 19:54:37+00:00,2013-05-28 15:52:48+00:00,2013-05-28 15:55:19+00:00,Closed,13114124,DAFFODIL-706
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"""DelimParseResultult""


./daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/processors/PrimitivesDelimiters.scala:139:        log(LogLevel.Debug, ""%s - %s - DelimParseResultult: %s"", this.toString(), eName, result)
./daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/processors/PrimitivesDelimiters.scala:370:        log(LogLevel.Debug, ""%s - %s - DelimParseResultult: %s"", this.toString(), eName, result)

It's also used as a variable name in a commented out chunk of code in 
./daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/processors/Primitives.scala (line 183)",[],2013-05-10 16:07:07+00:00,2013-10-08 13:51:14+00:00,2013-10-08 18:14:10+00:00,Closed,13114123,DAFFODIL-705
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"This is similar to the original issue of DFDL-612 however that ticket got conveluted and during the troubleshooting another unrelated bug was interjected.

Here is this bug:

In a folder, named ""root-dfdl"", all tests run from SBT Command, will PASS.
However, that same repository cloned to a folder with a space in the name,
""root dfdl"" will create 3 failure.

I have attached the results of two runs of daffodil-test; one with folder containing a space and the 2nd a folder with no space.",[],2013-05-09 20:27:23+00:00,2013-05-21 17:42:47+00:00,2013-05-28 21:00:40+00:00,Closed,13114122,DAFFODIL-704
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"If you have an array with minOccurs > 0, then that many array elements are required. 

Suppose this is in a sequence separated by commas. Suppose minOccurs is 4.

Then it will want to find exactly 3 infix sepators between 4 items. If it doesn't find one of those separators, you will get an error 'delimiter not found' which is true, but it would also be helpful to have some information about the fact that it is trying to create a required array element, and the name of that element, and the index position it is currently at (or trying to fill in.)",[],2013-05-09 20:24:41+00:00,2015-01-23 14:38:10+00:00,2015-02-02 19:56:08+00:00,Closed,13114121,DAFFODIL-703
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the errata and the updated spec:

US-ASCII-7bit-packed, the alignment is 1-bit (textual data in this encoding may
appear on any bit boundary, i.e., no byte alignment is required).

However, when I set this up I get the same error I get for other encodings:

[error] Test edu.illinois.ncsa.daffodil.section11.content_framing_properties.TestContentFramingProperties.test_alignmentPacked7BitASCII failed: java.lang.Exception: {color:red}Schema Definition Error: The given alignment (4 bits) must be a multiple of the encoding specified alignment (8 bits) for (String) when representation='text'. Encoding: US-ASCII-7-BIT-PACKED{color} Schema context: element.e6. Location line 208 column 101 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml.

The test is alignmentPacked7BitASCII in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section11/content_framing_properties/ContentFramingProps.tdml 
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingProperties.scala",[],2013-05-07 18:40:14+00:00,2013-06-13 12:14:41+00:00,2013-06-13 12:16:41+00:00,Closed,13114120,DAFFODIL-702
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Scala 2.10 appears to have better detection of common errors (e.g. unreachable code, fruteless tests, etc). Additionally, the scallop library which is heavily used by the CLI has made a lot of nice improvements, but it uses things only available in 2.10 (like reflection).",[],2013-05-06 20:30:43+00:00,2014-05-13 16:10:57+00:00,2014-05-29 21:05:58+00:00,Closed,13114119,DAFFODIL-701
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Going down a rabbit hole, I started seeing how difficult it would be to upgrade to scala 2.10. Not too bad, but it found some warnings:

{code}
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:256: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef
[warn]           case gct: GlobalComplexTypeDef => gct.element.nearestEnclosingSequence
[warn]                     ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:257: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalGroupDef
[warn]           case gd: GlobalGroupDef => gd.groupRef.nearestEnclosingSequence
[warn]                    ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:284: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef
[warn]           case gct: GlobalComplexTypeDef => gct.element.inChoiceBeforeNearestEnclosingSequence
[warn]                     ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:285: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalGroupDef
[warn]           case gd: GlobalGroupDef => gd.groupRef.inChoiceBeforeNearestEnclosingSequence
[warn]                    ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:178: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef
[warn]           case gct: GlobalComplexTypeDef => gct.element.allTerminatingMarkup
[warn]                     ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:179: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalGroupDef
[warn]           case gd: GlobalGroupDef => gd.groupRef.allTerminatingMarkup
[warn]                    ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:310: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalComplexTypeDef
[warn]           case gct: GlobalComplexTypeDef => gct.element.immediatelyEnclosingModelGroup
[warn]                     ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:311: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.Term cannot also be a edu.illinois.ncsa.daffodil.dsom.GlobalGroupDef
[warn]           case gd: GlobalGroupDef => gd.groupRef.immediatelyEnclosingModelGroup
[warn]                    ^
[warn] /home/slawrence/tresys/daffodil/daffodil.git/daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/Groups.scala:426: fruitless type test: a value of type edu.illinois.ncsa.daffodil.dsom.ModelGroup cannot also be a edu.illinois.ncsa.daffodil.dsom.GroupRef
[warn]       case (g: GroupRef) => Some(g)
{code}

Basically, the code is doing {{this match}} with some of the cases being GlobalComplexTypeDef and GlobalGroupDef, which don't appear to inherit from Term (which is what {{this}} is).

Also, note that the last line of the above output is a fruitless match of GroupRef/ModelGroup.",[],2013-05-06 20:26:55+00:00,2013-05-15 19:30:39+00:00,2013-05-16 17:43:31+00:00,Closed,13114118,DAFFODIL-700
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"It'd be nice if the output of 'help set' showed the default values for the settings listed. This is the current output:

{noformat}
(debug) help set
  Usage: set <setting> <value>
  
  Change a debugger setting, the list of settings are below.
  
  Subcommands:
    breakOnFailure       whether or not stop break on failures
    breakOnlyOnCreation  whether or not breakpoints should occur only on element creation, or always
    dataLength           set the maximum number of bytes of the data to display
    infosetLines         set the maximum number of lines of the infoset to display
    removeHidden         set whether or not to remove Daffodil internal attributes when displaying the infoset (true/false or 1/0)
    wrapLength           set the maximum number of bytes to display before wrapping

{noformat}

Also it doesn't look like the wiki has been updated with some of the newer settings.",[],2013-05-06 19:06:35+00:00,2013-05-24 13:32:18+00:00,2013-05-31 18:43:37+00:00,Closed,13114117,DAFFODIL-699
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to requirement DFDL-12-011R:

""To avoid ambiguity when parsing, optional elements and variable-occurrence arrays where the minimum number of occurrences is zero cannot have alignment properties different from the items that follow them. It is a schema definition error otherwise.""

I created a sequence where the middle element is optional. The alignment settings are different from the settings of the element that follows. I do not get the Schema Definition Error that I would expect based on the requirement above.

See test alignmentOptionalElem in the following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/aligned_data/Aligned_Data.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedDataDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedData.scala",[],2013-05-06 16:35:02+00:00,2013-09-16 11:42:25+00:00,2013-09-17 18:18:34+00:00,Closed,13114116,DAFFODIL-698
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I copied testJavaAPI3 in 
daffodil-core/src/test/java/edu/illinois/ncsa/daffodil/example/TestJavaAPI.java
and added a new element to 
daffodil-core/src/test/resources/test/japi/mySchema3.dfdl.xsd
I modified the test (new test is testJavaAPI4) to reference my new element (e4) and my new data file (myData2.bat)
When I run the test it still seems to be referencing element e3, the first element in the schema. When I swap e3 and e4 in the schema, all tests that reference that schema use e4 - the first element.

Steve suggested trying the compiler's setDistinguishedRootNode before running compile, and that worked with no problems. It only seems to be the ProcessorFactory's setDistinguishedRootNode method that isn't working.

I commented out the failing test (testJavaAPI4) and added the passing test that uses the compiler's method (testJavaAPI4b)",[],2013-05-03 17:10:19+00:00,,2021-01-20 21:45:23+00:00,Open,13114115,DAFFODIL-697
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If we create a daffodil-api project, then we can generate a focused API-only scaladoc set.",[],2013-05-02 23:01:23+00:00,2015-02-05 14:23:53+00:00,2015-02-05 14:23:53+00:00,Closed,13114114,DAFFODIL-696
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This error situation is undetected right now.

test_multi_encoding_02 is this situation. The field is utf-8, but the separator on the enclosing sequence is us-ascii. Even though those are compatible character encodings, it's generally non-sensible for this to be changing between a lengthKind='delimited' field, and its delimiter (which is the group separator).

We need to explicitly check that the encoding (charset, not the name of the encoding - there are aliases) is the same across separator and element when the element has no terminator. All possible terminating markup and the item itself must be the same charset.",[],2013-05-02 18:59:47+00:00,2017-04-06 14:58:04+00:00,2018-09-13 14:13:19+00:00,Closed,13114113,DAFFODIL-695
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"I get the following stack overflow when running the interactive debugger now:
{code}
Exception in thread ""main"" java.lang.StackOverflowError
	at edu.illinois.ncsa.daffodil.util.Enum$EnumVal.<init>(Enum.scala:43)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugState$Continue$.<init>(InteractiveDebugger.scala:63)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugState$.Continue(InteractiveDebugger.scala:63)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugState$Continue$.<init>(InteractiveDebugger.scala:63)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugState$.Continue(InteractiveDebugger.scala:63)
        ...
{code}

Appears to be caused by the new Enum changes, it is not immediately clear to me what the problem is.",[],2013-05-02 18:56:21+00:00,2013-05-06 14:13:19+00:00,2013-05-06 19:50:50+00:00,Closed,13114112,DAFFODIL-694
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-05-02 16:56:46+00:00,2013-06-04 14:44:20+00:00,2013-06-07 16:40:03+00:00,Closed,13114111,DAFFODIL-693
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the most recent spec changes, implicit alignment is encoding-dependent. I created two tests that reference elements with an encoding of utf-16be. I would expect the alignment to be 16 bits. These tests fail with the following error:

[info] - test_implicitAlignmentUIntT2 *** FAILED ***
{color:red}[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.{color}
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
[info] edu.illinois.ncsa.daffodil.processors.DFDLJavaIOStreamDecoder$$anonfun$implRead$1.apply$mcV$sp(DFDLJavaIOStreamDecoder.scala:363)
[info] scala.util.control.Breaks.breakable(Breaks.scala:39)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLJavaIOStreamDecoder$$anonfun$implRead$1.apply$mcV$sp(DFDLJavaIOStreamDecoder.scala:363)
[info]   at scala.util.control.Breaks.breakable(Breaks.scala:39)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLJavaIOStreamDecoder.implRead(DFDLJavaIOStreamDecoder.scala:319)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLJavaIOStreamDecoder.read(DFDLJavaIOStreamDecoder.scala:245)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLJavaIOInputStreamReader.read(DFDLJavaIOInputStreamReader.scala:60)
[info]   at scala.collection.immutable.PagedSeq$$anonfun$fromReader$1.apply(PagedSeq.scala:87)
[info]   at scala.collection.immutable.PagedSeq$$anonfun$fromReader$1.apply(PagedSeq.scala:87)
[info]   at scala.collection.immutable.Page.addMore(PagedSeq.scala:256)
[info]   ...

The tests are in implicitAlignmentUIntT2 and implicitAlignmentUShortT2 in following files:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/aligned_data/Aligned_Data.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedDataDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedData.scala",[],2013-05-02 15:52:00+00:00,2013-05-23 10:29:37+00:00,2013-05-24 11:21:37+00:00,Closed,13114110,DAFFODIL-692
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When a DFDL expression is compiled, function names should be scrutinized, and the prefixes should have to be defined.

I believe right now whether you write fn:true() or just true() it will evaluate correctly. This is wrong. If there is a xmlns=""..."" then just true() should be the true function in that namespace, which probably doesn't exist.",[],2013-05-02 14:59:35+00:00,2013-07-11 15:51:50+00:00,2013-07-11 15:51:56+00:00,Closed,13114109,DAFFODIL-691
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Blocker,"notice many instances of FileNotFoundException:

when run from a sub-directory of My Documents however the fail doesn't prevail when run frm a different directory structure such as C:\users\aseyler\dfdl\

(here are the first few errors from daffodil-core)

[info] Loading project definition from C:\Users\aseyler\My Documents\my-dfdl\dfdl\project
[info] Set current project to daffodil (in build file:/C:/Users/aseyler/My%20Documents/my-dfdl/dfdl/)
[info] TresysTests3:
Bytes processed: 1
Characters processed: 0
[info] - test_testOne
Bytes processed: 2
Characters processed: 0
[info] - test_testMany
Bytes processed: 1
Characters processed: 0
[info] - test_testNone
[info] - test_AB006 *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: java.io.FileNotFoundException: C:\Users\aseyler\My%20Documents\my-dfdl\dfdl\daffodil-core\target\scala-2.9.2\test-classes\test-suite\tresys-contributed\AB.dfdl.xsd (The system cannot find the path specified) Schema context: file:/C:/Users/aseyler/My%2520Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AB.dfdl.xsd. Location in file:/C:/Users/aseyler/My%20Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AB.dfdl.xsd.
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:512)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:411)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:360)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:223)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:214)
[info]   at edu.illinois.ncsa.daffodil.TresysTests3.test_AB006(TresysTests3.scala:60)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   ...
[info] - test_AF000 *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: java.io.FileNotFoundException: C:\Users\aseyler\My%20Documents\my-dfdl\dfdl\daffodil-core\target\scala-2.9.2\test-classes\test-suite\tresys-contributed\AF.dfdl.xsd (The system cannot find the path specified) Schema context: file:/C:/Users/aseyler/My%2520Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd. Location in file:/C:/Users/aseyler/My%20Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd.
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:512)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:411)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:360)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:223)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:214)
[info]   at edu.illinois.ncsa.daffodil.TresysTests3.test_AF000(TresysTests3.scala:64)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   ...
[info] - test_AF001 *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: java.io.FileNotFoundException: C:\Users\aseyler\My%20Documents\my-dfdl\dfdl\daffodil-core\target\scala-2.9.2\test-classes\test-suite\tresys-contributed\AF.dfdl.xsd (The system cannot find the path specified) Schema context: file:/C:/Users/aseyler/My%2520Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd. Location in file:/C:/Users/aseyler/My%20Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd.
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:512)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:411)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:360)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:223)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:214)
[info]   at edu.illinois.ncsa.daffodil.TresysTests3.test_AF001(TresysTests3.scala:65)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   ...
[info] - test_AF002 *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: java.io.FileNotFoundException: C:\Users\aseyler\My%20Documents\my-dfdl\dfdl\daffodil-core\target\scala-2.9.2\test-classes\test-suite\tresys-contributed\AF.dfdl.xsd (The system cannot find the path specified) Schema context: file:/C:/Users/aseyler/My%2520Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd. Location in file:/C:/Users/aseyler/My%20Documents/my-dfdl/dfdl/daffodil-core/target/scala-2.9.2/test-classes/test-suite/tresys-contributed/AF.dfdl.xsd.
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:512)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:411)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:360)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:223)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:214)
[info]   at edu.illinois.ncsa.daffodil.TresysTests3.test_AF002(TresysTests3.scala:66)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)




[error] Failed: : Total 331, Failed 40, Errors 0, Passed 291, Skipped 0
[error] Failed tests:
[error] 	edu.illinois.ncsa.daffodil.MainTests
[error] 	edu.illinois.ncsa.daffodil.TresysTests3
[error] 	edu.illinois.ncsa.daffodil.IBMTestsThatPass
[error] 	edu.illinois.ncsa.daffodil.tdml.TestTDMLRunner
[error] 	edu.illinois.ncsa.daffodil.TresysTests
java.lang.RuntimeException: Tests unsuccessful
	at scala.sys.package$.error(package.scala:27)
	at scala.Predef$.error(Predef.scala:123)
	at sbt.Tests$.showResults(Tests.scala:192)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:296)
	at sbt.Defaults$$anonfun$testTasks$6.apply(Defaults.scala:294)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
[error] (daffodil-core/test:test) Tests unsuccessful
[error] Total time: 26 s, completed May 1, 2013 5:04:34 PM",[],2013-05-01 21:12:38+00:00,2013-05-06 17:20:28+00:00,2013-05-06 23:30:30+00:00,Closed,13114108,DAFFODIL-690
Sub-task,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"While attempting to reproduce a different error, I stumbled upon this one.  Using test_pcap_500m, I set alignment=""implicit"" instead of alignment=""8"" in the schema that it uses:

daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/pcap/profilingPCAP.dfdl.xsd


[info] - test_pcap_500m *** FAILED ***
[info]   java.lang.OutOfMemoryError: GC overhead limit exceeded
[info]   at scala.LowPriorityImplicits.intWrapper(LowPriorityImplicits.scala:32)
[info]   at scala.collection.mutable.ResizableArray$class.copyToArray(ResizableArray.scala:75)
[info]   at scala.collection.mutable.ArrayBuffer.copyToArray(ArrayBuffer.scala:47)
[info]   at scala.collection.TraversableOnce$class.copyToArray(TraversableOnce.scala:226)
[info]   at scala.collection.mutable.ArrayBuffer.copyToArray(ArrayBuffer.scala:47)
[info]   at scala.collection.TraversableOnce$class.toArray(TraversableOnce.scala:234)
[info]   at scala.collection.mutable.ArrayBuffer.toArray(ArrayBuffer.scala:47)
[info]   at scala.collection.immutable.StringLike$class.format(StringLike.scala:270)
[info]   at scala.collection.immutable.StringOps.format(StringOps.scala:31)
[info]   at scala.runtime.StringAdd.formatted(StringAdd.scala:22)

The 500MB PCAP file is located on a server at Tresys in an SVN repo: svn co svn+ssh://username@repos/repos/svn/ngf-dfdl/Input/pcap/",[],2013-05-01 19:09:36+00:00,2017-04-06 15:49:59+00:00,2018-09-13 14:13:29+00:00,Closed,13114107,DAFFODIL-689
Sub-task,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"When attempting to run the test ""test_pcap_500m"" in daffodil-perf/.../pcap I get the following stack trace:

[info] - test_pcap_500m *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: bit positions are limited to 32-bit signed integer by underlying libraries.
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:71)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:62)
[info] edu.illinois.ncsa.daffodil.processors.DFDLCharReader$.apply(DFDLReader.scala:133)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:71)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:62)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLCharReader$.apply(DFDLReader.scala:133)
[info]   at edu.illinois.ncsa.daffodil.processors.DFDLByteReader.newCharReader(DFDLReader.scala:122)
[info]   at edu.illinois.ncsa.daffodil.processors.InStreamFromByteChannel.getCharReader(InStream.scala:174)
[info]   at edu.illinois.ncsa.daffodil.processors.TextReader$class.getReader(Primitives.scala:1657)
[info]   at edu.illinois.ncsa.daffodil.processors.StringLength.getReader(PrimitivesLengthKind.scala:64)
[info]   at edu.illinois.ncsa.daffodil.processors.StringLengthInBytes.parseInput(PrimitivesLengthKind.scala:204)
[info]   at edu.illinois.ncsa.daffodil.processors.StringLength$$anon$1$$anonfun$parse$1.apply(PrimitivesLengthKind.scala:96)

Mike believes that this may be caused due to checking bit length and not byte length:
""It should be checking byte position, i.e., bit position >> 3. The code there is comparing bit position, so you get 1/8 as large a piece of possible data.

Max int is 2,147,483,647, so 1/8 is ballpark 250M. Less than 500M.

It's a theory anyway.""",[],2013-05-01 18:36:31+00:00,2017-04-06 15:47:06+00:00,2018-09-13 14:13:28+00:00,Closed,13114106,DAFFODIL-688
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Critical,"I added a number of tests that measure performance as file size increases for CSV files.  Currently, performance degrades quickly as the file size gets larger.  For example, I got the following numbers by running the test on the machine described in the environment section:

200k - 58.3 kb/s
400k - 36.3 kb/s
600k - 26.8 kb/s
800k - 20.3 kb/s
1m   - 15.0 kb/s
5m   - 1.7 kb/s

The tests have been added to the daffodil-perf/src/test/.../csv/TestCSV.scala

The data files are located in a different repository on Tresys's network:

svn+ssh://username@repos/repos/svn/ngf-dfdl/Input/csv",[],2013-05-01 15:21:27+00:00,2014-11-13 22:18:06+00:00,2014-11-17 15:33:35+00:00,Closed,13114105,DAFFODIL-687
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Found this string in sbt test output:

failure: string matching regex `DD' expected

Notice the mismatched quotation mark kinds around DD.","['beginner', 'reverify']",2013-05-01 13:34:23+00:00,2020-12-14 14:41:07+00:00,2020-12-15 19:52:10+00:00,Closed,13114104,DAFFODIL-686
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"One schema (MessageHeaders) imports another (B); both import DefaultProperties.  On parsing, a separatorSuppressionPolicy error is thrown.

The CLI says:
2013-04-30 14:50:03:639  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Schema Definition Error: separatorSuppressionPolicy='never' not a
llowed in combination with occursCountKind='Parsed'.() Schema context: element.MessageHeadersArray. Location in file:/C:/Users/jgarriss/Documents/DFDL
_Schemas_Email/02_Message_Headers/MessageHeaders.xsd.]

The JAPI says:
2013-04-30 14:54:46:875  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 40; columnNumber: 6; cvc-complex-type.3.2.2: Attribute 'separatorSuppressionPolicy' is not allowed to appear in element 'dfdl:format'.) Schema context: file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/DefaultProperties.xsd. Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/MessageHeaders.xsd]

This is error is unexpected b/c none of the files use the separatorSuppressionPolicy property.  I can't tell what the real is or how to fix it.",[],2013-04-30 19:01:15+00:00,2013-09-09 13:16:59+00:00,2013-09-09 13:16:59+00:00,Closed,13114103,DAFFODIL-685
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"We can't run java tests using JUnitSuite. Instead, the junit-interface library must be used.",[],2013-04-30 18:27:36+00:00,2013-05-02 13:18:20+00:00,2013-05-02 19:14:39+00:00,Closed,13114102,DAFFODIL-684
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I didn't put this under the alignment ticket (DFDL-362) or the hexBinary ticket (DFDL-98) because I'm not entirely sure what's causing the issue. The test is impAlignmentHexBinary, and this is the error:


[info] - test_impAlignmentHexBinary *** FAILED ***
{color:red}[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: scala.MatchError: HexBinary (of class scala.Enumeration$Val){color}
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:514)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:595)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:236)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:581)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:677)
[info]   at edu.illinois.ncsa.daffodil.grammar.Prod.gram(Grammar.scala:292)
[info]   at edu.illinois.ncsa.daffodil.grammar.Prod.deref(Grammar.scala:277)
[info]   at edu.illinois.ncsa.daffodil.grammar.Gram.$tilde(Grammar.scala:66)
[info]   at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$elementLeftFraming$1.apply(GrammarMixins.scala:779)
[info]   at edu.illinois.ncsa.daffodil.dsom.ElementBaseGrammarMixin$$anonfun$elementLeftFraming$1.apply(GrammarMixins.scala:779)
[info]   ...

The test is in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/aligned_data/Aligned_Data.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedData.scala
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/aligned_data/TestAlignedDataDebug.scala",[],2013-04-30 14:47:26+00:00,2013-05-01 13:41:49+00:00,2013-05-01 17:35:24+00:00,Closed,13114101,DAFFODIL-683
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Major,"Added checkConstraint() to an element.  If the input is good, no problem.  When the input is bad, the error message doesn't have anything to do with the checkConstraint.  I can't tell if the checkConstraint is failing, or if some other bug prevents it from running.

Date: Mon   <--- Works fine
Date: XYZ   <--- Throws unexpected error

Parse Error: Term('%NL;') - element.Date: Delimiter not found!
Schema context: element.Date Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/CheckConstraint.xsd
Data location was preceding byte 6
UTF-8 text starting at byte 0 is: (Date: XYZ
)
Data (hex) starting at byte 0 is: (0x446174653A2058595A0A)

Expected error:  Invalid day of the week.  The delimiter is not the problem.  It's there and is found if the day of the week is correct.

Here's the schema:
{code}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsd:schema xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/""
	xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
	
	<xsd:include
		schemaLocation=""C:\Users\jgarriss\Documents\DFDL_Schemas_Email\02_Message_Headers\DefaultProperties.xsd""/>
	<xsd:annotation>
		<xsd:appinfo source=""http://www.ogf.org/dfdl/"">
			<dfdl:format ref=""DefaultPropertiesFormat""/>
		</xsd:appinfo>
	</xsd:annotation>
	
	<xsd:element name=""Date"" dfdl:initiator=""Date:%SP;"" dfdl:terminator=""%NL;"">
		<xsd:complexType>
			
			<xsd:sequence dfdl:initiator="""" dfdl:separator=""%SP;"" dfdl:separatorPolicy=""suppressed"">
				<xsd:element name=""DayOfTheWeek"" dfdl:length=""3"" dfdl:lengthKind=""explicit""
					dfdl:occursCountKind=""implicit"" minOccurs=""0"">
					<xsd:annotation>
						<xsd:appinfo source=""http://www.ogf.org/dfdl/dfdl-1.0/"">
							<dfdl:assert test=""{ dfdl:checkConstraints(.) }""
								message=""Invalid day of the week""/>
						</xsd:appinfo>
					</xsd:annotation>
					
					<xsd:simpleType>
						<xsd:restriction base=""xsd:string"">
							<xsd:enumeration value=""Mon""/>
							<xsd:enumeration value=""Tue""/>
							<xsd:enumeration value=""Wed""/>
							<xsd:enumeration value=""Thu""/>
							<xsd:enumeration value=""Fri""/>
							<xsd:enumeration value=""Sat""/>
							<xsd:enumeration value=""Sun""/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:element>
				
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
{code}",[],2013-04-30 13:43:45+00:00,2013-05-15 19:18:48+00:00,2013-05-31 16:28:21+00:00,Closed,13114100,DAFFODIL-682
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,example commands with 'help <command>' - 'help set' doesn't have an example. seems to be the only one.,[],2013-04-29 19:32:19+00:00,2013-05-24 13:32:01+00:00,2013-06-06 17:14:14+00:00,Closed,13114099,DAFFODIL-681
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I believe this is a result of the changes made for the suggestion in ticket DFDL-575 - debugger should report failures when they are encountered.

{noformat}
~/NGF/dfdl (master) ./daffodil-core/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix input.txt
(debug) break element.cell
(debug) display info arrayIndex
(debug) c
  arrayIndex: 1
  failure:
    Parse Error: Array position not greater than (1)
    Schema context: element.row Location in file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
    Data location was preceding byte 0
    UTF-8 text starting at byte 0 is: (3,3,0,3,0,3,3,1,2,3,2,2,2,3,2,3,3)
    Data (hex) starting at byte 0 is: (0x332C332C302C332C302C332C332C312C322C332C322C322C322C332C322C332C33)
(debug) 
  arrayIndex: 1
  failure:
    Parse Error: Group position not greater than (1)
    Schema context: element.row Location in file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
    Data location was preceding byte 0
    UTF-8 text starting at byte 0 is: (3,3,0,3,0,3,3,1,2,3,2,2,2,3,2,3,3)
    Data (hex) starting at byte 0 is: (0x332C332C302C332C302C332C332C312C322C332C322C322C322C332C322C332C33)
(debug) 
  arrayIndex: 1
  failure:
    Parse Error: Array position not greater than (1)
    Schema context: element.cell Location in file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
    Data location was preceding byte 0
    UTF-8 text starting at byte 0 is: (3,3,0,3,0,3,3,1,2,3,2,2,2,3,2,3,3)
    Data (hex) starting at byte 0 is: (0x332C332C302C332C302C332C332C312C322C332C322C322C322C332C322C332C33)
(debug) 
  arrayIndex: 1
  failure:
    Parse Error: Group position not greater than (1)
    Schema context: element.cell Location in file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd
    Data location was preceding byte 0
    UTF-8 text starting at byte 0 is: (3,3,0,3,0,3,3,1,2,3,2,2,2,3,2,3,3)
    Data (hex) starting at byte 0 is: (0x332C332C302C332C302C332C332C312C322C332C322C322C322C332C322C332C33)
(debug) 
  breakpoint 1: element.cell   
  arrayIndex: 1
(debug) 
  breakpoint 1: element.cell   
  arrayIndex: 2
(debug) 
  breakpoint 1: element.cell   
  arrayIndex: 3
(debug) info infoset
  infoset:
    <tns:matrix xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>3</tns:cell>
        <tns:cell>3</tns:cell>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrix>
(debug) 
{noformat}

""Parse Error: Array position not greater than (1)"" doesn't seem like a valid error to me in general. It's likely that I'm missing something behind the scenes, but in the end the data parses with no issues.",[],2013-04-29 19:29:46+00:00,2013-05-06 13:36:24+00:00,2013-05-06 19:04:26+00:00,Closed,13114098,DAFFODIL-680
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"The scala API has access to the bitPos and bytePos. If you provide a length, then it has an atEnd predicate. This can be used to determine, whether all the data has been consumed, which is a requirement for many applications of DFDL. 

The Java API (JAPI) also needs these same capabilities.",[],2013-04-29 19:23:37+00:00,2013-04-29 19:26:16+00:00,2013-05-03 18:12:05+00:00,Closed,13114097,DAFFODIL-679
Comment,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"disable can disable either a breakpoint or a display, depending on what type you provide. However, there are two separate commands for removing a breakpoint (delete) and removing a display (undisplay). There have been a few times that I have tried the command ""delete display 1"", forgetting about ""undisplay"". I'm not saying it needs to be changed, as ""undisplay"" seems like a more accurate command than ""delete display"", but I figure if I'm being repeatedly tripped up by it then others will be too.",[],2013-04-29 19:13:31+00:00,2013-05-24 13:31:49+00:00,2013-05-27 15:11:03+00:00,Closed,13114096,DAFFODIL-678
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Blocker,"Daffodil does not appear to recognize what an unsignedInt is.

This code

<xsd:element name=""Day"" dfdl:length=""2"" dfdl:lengthKind=""explicit"" dfdl:textNumberPattern=""#0"">
	<xsd:simpleType>
		<xsd:restriction base=""xsd:unsignedInt"">
			<xsd:maxInclusive value=""31""/>
		</xsd:restriction>
	</xsd:simpleType>
</xsd:element>

on this input

15

creates this error message:

2013-04-29 14:16:52:161  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Expected an unsigned int for this facet. Schema
context: element.Day. Location in file:/C:/Users/jgarriss/Documents/DFDL_Schemas_Email/02_Message_Headers/Date.xsd.]

Which appears to be telling me that 15 is not an unsigned int.

Note:  this bug appears in the CLI but not the JAPI, which is odd.",[],2013-04-29 18:52:17+00:00,2013-05-14 15:07:23+00:00,2013-05-14 15:07:28+00:00,Closed,13114095,DAFFODIL-677
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Blocker,"Set a terminator as a double new line (%NL;%NL;).  This causes Daffodil to throw an error on the CLI (and JAPI) that I don���t understand:

Parse Error: Term('%NL;%NL;') - element.MessageHeaders: Remote delimiter found instead of local!

Part of the DFDL:

<xsd:element name=""TopLevel"">
	<xsd:complexType>
		<xsd:sequence>
			<xsd:element name=""MessageHeaders"" dfdl:lengthKind=""delimited""
				dfdl:terminator=""%NL;%NL;"" type=""xsd:string""/>
			<xsd:element name=""Body"" type=""xsd:string""/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:element>

Input:

Date: Sat, 15 Feb 2013 08:54:52 -0500

This is the body",[],2013-04-29 18:48:45+00:00,2013-05-17 11:56:31+00:00,2013-05-20 16:30:59+00:00,Closed,13114094,DAFFODIL-676
Bug,[],gmcdonald,Gavin McDonald,daffodil-james.garriss,James Garriss,Critical,"Set the separator as a double new line (%NL;%NL;).  It appears that Daffodil treats the 2 new lines as one.  I see the same issue in CLI and JAPI.

Part of the DFDL:

<xsd:element name=""TopLevel"">
	<xsd:complexType>
		<xsd:sequence dfdl:separator=""%NL;%NL;"">
			<xsd:element name=""MessageHeaders"" dfdl:lengthKind=""delimited""
				 type=""xsd:string""/>
			<xsd:element name=""Body"" 
				 type=""xsd:string""/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:element>

Input:

Date: xsw, 15 Feb 2013 08:54:52 -0500
From: john@doe.com
To: jane@doe.com
Message-ID: <OFB0B2662B.92FC9941-ON80257B1F.0045CE19-80257B1F.004ADB2A@doe.com>
Subject: Hello World!
Return-Path: <bob@smith.com>
Thread-Index: Ac3NbaI+1oo+ltP4SSqsh0WAhpIVagAAZVmwAALaigABACxfkAAPsjwAAA8SeAAABZb0A==
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20120828 Thunderbird/16.0 Lightning/1.8b1
Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08jU534c0p

This is the body",[],2013-04-29 18:45:24+00:00,2013-05-17 13:38:32+00:00,2013-05-20 14:56:41+00:00,Closed,13114093,DAFFODIL-675
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"""help condition"" prints the following string:

  Set a condition on a specified breakpoint. When a breakpoint
  is encountered, the debugger only {color:red}puases{color} if the DFDL expression
  evaluates to true. If the result of the DFDL expressions is not
  a boolean value, it is treated as false.",[],2013-04-29 18:17:16+00:00,2013-04-29 18:34:03+00:00,2013-04-29 19:38:57+00:00,Closed,13114092,DAFFODIL-674
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I'm assuming we want these constructor functions to be implemented alongside the type they return. When I try to use the xs:hexBinary() function I get this error:

[info] - test_hexBinary_func *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: Feature not yet implemented: {http://www.w3.org/2001/XMLSchema}hexBinary() Schema context: element.hex. Location line 4381 column 133 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml.

Please see test hexBinary_func in the following files:

daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml",[],2013-04-29 17:23:31+00:00,2013-04-30 19:52:59+00:00,2013-04-30 20:54:43+00:00,Closed,13114091,DAFFODIL-673
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"hexBinary is an opaque type
13.1 Properties Common to All Simple Types:
Opaque: representation is assumed to be ���binary��� and the representation property is not examined.

I created a test to verify that the representation property is not examined. This test originally passed, but now I get the following error:

[info] - test_hexBinary_rep *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: Implicit Alignment is not allowed for HexBinary with representation='text'. Use representation='binary' instead.() Schema context: element.hB_rep. Location line 4391 column 107 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml.

If this is the intended behavior, then the spec is misleading.",[],2013-04-29 16:43:47+00:00,2013-09-09 15:18:50+00:00,2013-09-09 17:51:26+00:00,Closed,13114090,DAFFODIL-672
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"In hexBinary tests, it seems like the result should match regardless of case. For example, a test will currently fail if you try to match against ""0A0B"" (the result will be ""0a0b"") even if your input string was ""0A0B""

I'm not sure if this is possible or if it wouldn't be worth the work but it'd be nice.",[],2013-04-26 16:31:48+00:00,2013-04-26 16:51:16+00:00,2013-06-17 14:59:24+00:00,Closed,13114089,DAFFODIL-671
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a test with a hexBinary element of implicit length (maxLength set to 10 bytes).

Original hex string:
00 64 00 6F 00 6E 00 27 00 74 00 20 00 74 00 72 00 69 00 6D 00 20 00 69 00 74 00 21

I would expect the output to be:
 00 64 00 6f 00 6e 00 27 00 74
but this is what I get:
 64 00 6f 00 6e 00 27 00 74

I have two tests with different hex strings and the results are similar. I can understand leading 00s getting trimmed for an unsignedInt or some other type like that, but for a text string those leading 0's seem important.

tests are:
  hexBinary_Implicit_03
  hexBinary_Implicit_03b
in the following files:
  daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml
  daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala
  daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes.scala",[],2013-04-26 15:21:14+00:00,2013-04-26 19:15:24+00:00,2013-04-29 15:25:08+00:00,Closed,13114088,DAFFODIL-670
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"According to the spec:
XML schema does not define an empty sequence that is the content of a complex type as effective content so any DFDL annotations on such a construct would be ignored. It is a schema definition error if the empty sequence is the content of a complex type.

I set this up in test emptySequenceSDE, but there is no error:

[info] - test_emptySequenceSDE *** FAILED ***
{color:red}[info]   java.lang.Exception: Expected error. Didn't get one. Actual result was <emptySeq></emptySeq>
{color}
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:479)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:402)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:350)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:222)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:213)
[info]   at edu.illinois.ncsa.daffodil.section14.sequence_groups.TestSequenceGroups.test_emptySequenceSDE(TestSequenceGroups.scala:77)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)

The test is emptySequenceSDE in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/SequenceGroup.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroupsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroups.scala",['beginner'],2013-04-25 20:34:15+00:00,,2020-08-05 17:56:51+00:00,Open,13114087,DAFFODIL-669
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to an errata to the spec:

2.48. Section 14.1. Spec states that an empty sequence that is the content of a complex type
is a schema definition error. Many schema processors are not able to distinguish this
condition from a complex type with no content at all (it is not required to do so by the XML
Schema specification). As a complex type with no content is not useful in DFDL, change the
spec to state that both conditions are schema definition errors.

Note that this case is for complexTypes with NO content, not to be confused (and I confused them at length) with complexTypes with EMPTY content.

Instead of a neatly packaged SDE I get this error:

[info] - test_noContentComplexSDE *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: scala.MatchError: List() (of class scala.collection.immutable.Nil$)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:501)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:577)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:234)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:563)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:659)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply$mcV$sp(OOLAG.scala:332)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:314)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:314)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:314)
[info]   ...


The test is noContentComplexSDE in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/SequenceGroup.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroupsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroups.scala",[],2013-04-25 20:31:07+00:00,2013-05-21 16:07:07+00:00,2013-05-22 17:02:43+00:00,Closed,13114086,DAFFODIL-668
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to DFDL-6-078R:

When recognizing expressions:
'{{' as the first characters should be treated as the literal '{' and not a DFDL expression

Test expressionRules03 tests this, and the test fails. I had to comment out the section of the schema that uses '{{' because it causes this error:

Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 29; columnNumber: 138; cvc-pattern-valid: Value '{{' is not facet-valid with respect to pattern '(\{[^\{].*\})|(\{\})' for type 'DFDLExpression'.)

test is located in:
./daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/expressions.tdml
./daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2013-04-25 15:39:57+00:00,2013-09-09 14:32:25+00:00,2013-09-09 18:25:10+00:00,Closed,13114085,DAFFODIL-667
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"This is similar to DFDL-660, in that I believe this validation error is preventing 'acceptable' namespaces from working.

Note: ([W3C XML Documentation I've been using - See ""Names and Tokens""|http://www.w3.org/TR/xml/#sec-common-syn])

According to this, ':' should be acceptable in namespace names, both as the starting character and any other character. However, when I try this, the test fails with:

[info]   org.xml.sax.SAXParseException: Element or attribute do not match QName production: QName::=(NCName':')?NCName.

Also, should we be able to use XML character entities in namespace names? I believe it should be allowed but I get the same error as above when I try it.",[],2013-04-25 12:34:33+00:00,2013-05-23 12:22:03+00:00,2013-05-24 11:37:07+00:00,Closed,13114084,DAFFODIL-666
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Consider this error message:

{code}
    2013-04-24 14:39:57:580  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Schema Definition Error: Property leadingSkip is not defined.
Searched these locations: List(element.Addresses::LocalComplexTypeDef::sequence::ElementRef(Address)::element.Address::LocalComplexTypeDef::sequence::DFDLSequence)
Searched these default locations: List(). Schema context: sequence. Location in file:/Users/jgarriss/daffodil-0.9.0/bin/AddressTwo.xsd.]
{code}

Look at the first List under ""Searched these locations"".

1) It does not provide a file and line number, just the schema component path. 

2) The path is a mess and not very consistently structured or useful. 

3) ""Searched these locations"" is not a very good description. What it is doing is combining properties from possibly several places. E.g., could be from a list of an element reference, an element declaration, a simple type def, and more simple type defs forming a restriction chain. 

However, if there is exactly one location, then it is the context of the error, so there's no point in saying that it searched these locations at all.

When there are multiple locations it should say ""Non-default properties were combined from these locations:...""

When it says ""Searched these default locations: List()"" that should be ""there were no default formats"". (However, see DFDL-664, because we might rule this out elsewhere.)

Lastly, the phrase
{code}
 Schema context: sequence. Location in file:/Users/jgarriss/daffodil-0.9.0/bin/AddressTwo.xsd.
{code}

is lacking a line number, and saying it's a 'sequence' is silly. It should be giving a useful schema component path.",[],2013-04-24 22:24:45+00:00,,2018-09-13 14:04:15+00:00,Reopened,13114083,DAFFODIL-665
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Because of the way lexical scoping works in DFDL, a schema which doesn't have a default format, but which contains anything nested. E.g.,
{code}
<complexType name=""foo""/>
   <sequence>
     ...
   </sequence>
</complexType>
{code}
That sequence in there. That has no properties at all that apply to it by default unless they are in the default format of the containing schema file. 

This characteristic makes a DFDL schema file containing any elements or types or groups so useless that we should simply reject it.

The only DFDL schemas that might not have a default format would be schemas that are libraries themselves of just named format definitions. That is, they contain only dfdl:defineFormat annotations, or dfdl:defineEscapeSchema annotations, and no element, type, or group definitions at all. 

Right now the error you get is about missing leadingSkip property, because that's the first property we're looking for. But that is really understating the problem, because there are no properties at all!",['beginner'],2013-04-24 22:16:51+00:00,,2020-08-25 19:37:37+00:00,Open,13114082,DAFFODIL-664
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In an array with minOccurs not mentioned (defaults to 1), and maxOccurs='unbounded' with dfdl:occursCountKind='implicit', we are happily creating zero elements. It should fail if it can't get 1 element. 

dfdl:occursCountKind='implicit' means that it is within minOccurs and maxOccurs instances.

This is very mystifying to new naive users (and I fell into this trap myself too a lot when using occursCountKind='parsed', which always accepts zero instances regardless of minOccurs.)",[],2013-04-24 22:09:26+00:00,2013-05-10 16:29:08+00:00,2013-05-10 20:49:40+00:00,Closed,13114081,DAFFODIL-663
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,May have been fixed by recent namespace updates?,[],2013-04-24 21:59:45+00:00,2015-01-20 19:14:39+00:00,2015-01-20 19:14:55+00:00,Closed,13114080,DAFFODIL-662
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Appears that the CLI is an application for converting whole files to XML, and in that, people expect no left over data at the end.

Optionally - we could accept a flag to say this is a warning/error or ignore, but I suspect the right behavior is just error for the CLI.",[],2013-04-24 19:56:34+00:00,2013-05-06 14:19:40+00:00,2013-05-06 19:08:01+00:00,Closed,13114079,DAFFODIL-661
Comment,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When testing out the limits of namespaces, I created two tests to demonstrate that the ""middle dot"" (��) is acceptable within a namespace name, but not as the first character. In the test that I expect to fail, this is the error I get:

[info] - test_namespaceSpecialChars2 *** FAILED ***
{color:red}[info]   org.xml.sax.SAXParseException: Element or attribute do not match QName production: QName::=(NCName':')?NCName.
{color}
[info]   at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
[info]   at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
[info]   at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.loadXML(DaffodilXMLLoader.scala:434)
[info]   at scala.xml.factory.XMLLoader$class.loadFile(XMLLoader.scala:47)
[info]   at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.loadFile(DaffodilXMLLoader.scala:411)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.findModel(TDMLRunner.scala:273)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.findModel(TDMLRunner.scala:318)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:339)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:222)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:213)

Would it be possible to get a more descriptive error (or at least a Schema Definition Error so it can be matched in a tdml test)? I was also trying to figure out if DFDL-506 is at all related to this. 

The test is namespaceSpecialChars2 in:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaceSpecialChar2.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespacesDebug.scala",[],2013-04-24 18:43:52+00:00,2013-04-26 16:17:45+00:00,2013-04-26 18:04:31+00:00,Closed,13114078,DAFFODIL-660
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2013-04-24 15:12:00+00:00,2013-05-02 13:17:41+00:00,2013-05-09 17:47:15+00:00,Closed,13114077,DAFFODIL-659
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec (+ errata):
It is a schema definition error if the empty sequence is the content of a complex type, or if a complex type has no content at all. 

I created a test for each scenario, and these are the errors I receive:

[info] - test_emptySequenceSDE *** FAILED ***
{color:red}[info]   java.lang.Exception: Did not find diagnostic message ""Schema Definition Error"" in any of the actual diagnostic messages: 
[info] Left over data: byte 0
{color}
[info] UTF-8 text starting at byte 0 is: (42,2)
[info] Data (hex) starting at byte 0 is: (0x34322C32)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:378)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:372)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:371)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:485)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:402)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:350)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:222)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:213)


[info] - test_emptyComplexSDE *** FAILED ***
{color:red}[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: scala.MatchError: List() (of class scala.collection.immutable.Nil$)
{color}
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.edu$illinois$ncsa$daffodil$dsom$oolag$OOLAG$OOLAGValue$$oolagTryCatch(OOLAG.scala:501)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue$$anonfun$6.apply(OOLAG.scala:577)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost.circularityDetector(OOLAG.scala:234)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:563)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$LV.value(OOLAG.scala:659)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply$mcV$sp(OOLAG.scala:332)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:314)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$2.apply(OOLAG.scala:314)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$.keepGoing(OOLAG.scala:75)
[info]   at edu.illinois.ncsa.daffodil.dsom.oolag.OOLAG$OOLAGHost$$anonfun$checkErrors$1$$anonfun$apply$mcV$sp$2.apply(OOLAG.scala:314)
[info]   ...

The tests are in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section14/sequence_groups/SequenceGroup.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroupsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section14/sequence_groups/TestSequenceGroups.scala",[],2013-04-24 13:03:24+00:00,2013-04-26 12:23:53+00:00,2013-04-26 12:23:53+00:00,Closed,13114076,DAFFODIL-658
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2013-04-22 17:39:54+00:00,2013-05-10 19:11:50+00:00,2013-06-17 16:47:16+00:00,Closed,13114075,DAFFODIL-657
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,The Automated CLI/Debugger tests are not currently Windows compatible. They need to work on all platforms that we support.,[],2013-04-22 15:19:31+00:00,2013-07-15 13:27:25+00:00,2013-07-15 13:27:31+00:00,Closed,13114074,DAFFODIL-656
Task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I realized towards the end of Friday that pushing the CLI/Debugger automation would cause build failures for buildbot, because ""sbt"" stage is not a part of its build process. I need to make sbt stage a dependency for sbt test, so it generates the start script automatically before tests are run.",[],2013-04-22 15:17:56+00:00,2013-05-20 13:21:18+00:00,2013-06-07 15:09:46+00:00,Closed,13114073,DAFFODIL-655
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"While testing DFDL-568 which focused on cases where the parent length was greater than the overall length of its children, I added a test case where the length of the parent was less than the overall length of its children to see what would happen.  I expected it to fail, and currently it does, but it does not give an appropriate error message.

Currently, it gives the following error message:
[info] - test_ExplicitLengthChildLengthMoreParent_Chars *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
[info] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.parse(SpecifiedLength.scala:167)
[info] edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitCharactersFixedParser$$anonfun$parse$6.apply(SpecifiedLength.scala:333)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
[info]   at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.parse(SpecifiedLength.scala:167)
[info]   at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitCharactersFixedParser$$anonfun$parse$6.apply(SpecifiedLength.scala:333)
[info]   at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitCharactersFixedParser$$anonfun$parse$6.apply(SpecifiedLength.scala:322)
[info]   at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:220)
[info]   at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthParserBase.withParseErrorThrowing(SpecifiedLength.scala:149)
[info]   at edu.illinois.ncsa.daffodil.processors.SpecifiedLengthExplicitCharactersFixedParser.parse(SpecifiedLength.scala:322)
[info]   at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:132)
[info]   at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:319)
[info]   ...

The test (test_ExplicitLengthChildLengthMoreParent_Chars) has been added to daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindExplicitDebug.scala",[],2013-04-19 18:18:11+00:00,2013-04-25 15:49:31+00:00,2013-05-07 16:50:53+00:00,Closed,13114072,DAFFODIL-654
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I ran the following command(s):

echo ""0,1,2,3"" > input.txt
daffodil-core/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix input.txt

When i get the (debug) prompt, I enter ""info data""
and I get this error/traceback:

edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
edu.illinois.ncsa.daffodil.ExecutionMode$.requireCompilerMode(ExecutionMode.scala:61)
edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.findPropertyOption(SchemaComponent.scala:410)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:87)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariant(Assert.scala:115)
	at edu.illinois.ncsa.daffodil.ExecutionMode$.requireCompilerMode(ExecutionMode.scala:61)
	at edu.illinois.ncsa.daffodil.dsom.AnnotatedSchemaComponent.findPropertyOption(SchemaComponent.scala:410)
	at edu.illinois.ncsa.daffodil.dsom.FindPropertyMixin$class.findProperty(PropertyScoping.scala:133)
	at edu.illinois.ncsa.daffodil.dsom.SchemaComponent.findProperty(SchemaComponent.scala:69)
	at edu.illinois.ncsa.daffodil.dsom.FindPropertyMixin$class.getProperty(PropertyScoping.scala:147)
	at edu.illinois.ncsa.daffodil.dsom.SchemaComponent.getProperty(SchemaComponent.scala:69)
	at edu.illinois.ncsa.daffodil.schema.annotation.props.gen.RepresentationMixin$class.representation(GeneratedCode.scala:376)
	at edu.illinois.ncsa.daffodil.dsom.ElementBase.representation(Elements.scala:122)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.printData(InteractiveDebugger.scala:777)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$InfoData$.apply(InteractiveDebugger.scala:831)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$apply$9.apply(InteractiveDebugger.scala:650)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$$anonfun$apply$9.apply(InteractiveDebugger.scala:648)
	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:34)
	at scala.collection.mutable.WrappedArray.foreach(WrappedArray.scala:33)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$Info$.apply(InteractiveDebugger.scala:648)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger$DebugCommandBase$.apply(InteractiveDebugger.scala:330)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.edu$illinois$ncsa$daffodil$debugger$InteractiveDebugger$$runCommand(InteractiveDebugger.scala:209)
	at edu.illinois.ncsa.daffodil.debugger.InteractiveDebugger.after(InteractiveDebugger.scala:134)
	at edu.illinois.ncsa.daffodil.debugger.Debugger$.after(Debugger.scala:83)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:133)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:319)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:317)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:76)
	at edu.illinois.ncsa.daffodil.processors.SeqCompParser.parse(Parser.scala:317)
	at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:132)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.liftedTree1$1(Runtime.scala:156)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3$$anon$1.<init>(Runtime.scala:155)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:152)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor$$anonfun$parse$3.apply(Runtime.scala:151)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:46)
	at edu.illinois.ncsa.daffodil.ExecutionMode$$anonfun$usingRuntimeMode$1.apply(ExecutionMode.scala:46)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:151)
	at edu.illinois.ncsa.daffodil.processors.DataProcessor.parse(Runtime.scala:146)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:369)
	at edu.illinois.ncsa.daffodil.Main$$anonfun$74.apply(Main.scala:369)
	at edu.illinois.ncsa.daffodil.debugger.DebugUtil$.time(DebugUtil.scala:117)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:369)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:573)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)

If I rerun the debugger and continue the parse without running ""info data"", everything works fine. ""info infoset"" seems fine.. I'm not sure why ""info data"" is doing this.",[],2013-04-18 20:04:21+00:00,2013-04-18 20:33:55+00:00,2013-04-21 13:58:02+00:00,Closed,13114071,DAFFODIL-653
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"In section05/simple_types/SimpleTypes, test_whiteSpaceDuringLengthExceededByte fails with an unclear error message.  The test is expecting a byte and receives ""99 99"".  The test currently fails with the following message:

Schema context: element.b_01 Location line 47 column 27 in file:/root/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml
Data location was preceding byte 4
UTF-8 text starting at byte 0 is: (99 99)
Data (hex) starting at byte 0 is: (0x3939203939)]
[info] - test_whiteSpaceDuringLengthExceededByte *** FAILED ***
[info]   java.lang.Exception: Did not find diagnostic message ""Placeholder"" in any of the actual diagnostic messages:
[info] Parse Error: Convert to Byte (for xs:byte): Out of Range: '99 9' converted to 999, is not in range for the type.
[info] Schema context: element.b_01 Location line 47 column 27 in file:/root/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml
[info] Data location was preceding byte 4
[info] UTF-8 text starting at byte 0 is: (99 99)
[info] Data (hex) starting at byte 0 is: (0x3939203939)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:378)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:372)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:371)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:485)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:402)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:350)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:222)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:213)
[info]   ...


In order to see the error message, you may need to edit the SimpleTypes.tdml file to expect an error message other than an empty string (this was one of the tests that simply had  <tdml:error/> or <tdml:error />, so it wasn't looking for any specific error message).

This bug also applies to the other whiteSpace*Byte tests that are expecting a non-specific error message",['beginner'],2013-04-18 14:12:47+00:00,2020-08-05 18:02:21+00:00,2020-11-18 14:24:57+00:00,Closed,13114070,DAFFODIL-652
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,The current error output for the CLI is too verbose. Normal users aren't going to care much about timestamp or daffodil class. All they really need is the error. Need to create a custom logger for the CLI to be more user friendly.,[],2013-04-18 13:11:34+00:00,2013-04-25 16:08:23+00:00,2013-05-31 15:38:21+00:00,Closed,13114069,DAFFODIL-651
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,"The debugger currently accesses data that it normal daffodil operations shouldn't access. Need to add an exception for the debugger, as it should be able to access anything it wants.",[],2013-04-17 15:31:35+00:00,2013-04-25 16:14:09+00:00,2013-04-26 13:32:06+00:00,Closed,13114068,DAFFODIL-650
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Right now, if the parser backtracks to a position p and then begins parsing text there again, even if the encoding is the same, a new DFDLCharReader will be created there at position p for the next parse.

This is unnecessary and inefficient. Once you have decoded a character at position p for encoding e, there's no reason to ever repeat that. 

We could cache the DFDLCharReader instances, and just reuse them on backtracking if the position and encoding are matching.",[],2013-04-11 20:27:55+00:00,2015-08-27 13:02:10+00:00,2015-12-16 16:05:44+00:00,Closed,13114067,DAFFODIL-649
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"AlignmentFill regions are placed in front of any item which has alignment > 1 bit, and this includes in front of anything with implicit alignment (unless the implicit alignment is 1 bit).

However, with some static analysis, one can determine that the item (sequence or element) already is aligned by necessity. I.e.,  the previous thing has left it on the right alignment boundary. 

For example, if several adjacent elements are text in the same encoding, then we don't need alignmentFill regions before each one. There are many more cases that are also relatively easy to determine.

An attribute (i.e., LV) on each alignable thing (element, sequence, choice) should indicates what its statically-known alignment is. This is the basis for the optimization. Then the alignmentFill primitive can just optimize itself out (via guard) when the statically known alignment is sufficient.",[],2013-04-11 17:41:15+00:00,2017-02-15 19:30:32+00:00,2017-04-20 18:14:29+00:00,Closed,13114066,DAFFODIL-648
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-04-11 14:18:22+00:00,2016-09-14 21:52:11+00:00,2017-08-01 18:05:25+00:00,Closed,13114065,DAFFODIL-647
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"As discussed in the e-mail chain ""Strange 'Conversion' Error"", I get the following error after a successful comparison is made between my expected error string and the resultant error string:

2013-04-10 04:49:01:299
edu.illinois.ncsa.daffodil.tdml.ParserTestCaseError [Conversion = 'N']

The expected error is as follows:

Parse Error Sep('%NL;') - element.record: Delimiter not found!",[],2013-04-10 13:27:18+00:00,2013-05-01 12:55:33+00:00,2013-05-01 18:49:43+00:00,Closed,13114064,DAFFODIL-646
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Trivial,"textBidi='yes'
textBidiTextOrdering
textBidiOrientation
textBidiSymmetric
textBidiTextShaped
textBidiNumeralShapes",[],2013-04-09 23:14:34+00:00,2020-05-01 15:14:07+00:00,2021-05-18 14:38:43+00:00,Closed,13114063,DAFFODIL-645
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2013-04-09 23:10:04+00:00,2020-06-10 14:18:02+00:00,2020-06-10 14:18:16+00:00,Closed,13114062,DAFFODIL-644
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2013-04-09 23:09:18+00:00,,2019-09-03 15:46:59+00:00,Open,13114061,DAFFODIL-643
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,,[],2013-04-09 23:07:45+00:00,2013-08-16 11:43:15+00:00,2013-09-04 18:33:20+00:00,Closed,13114060,DAFFODIL-642
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 23:00:52+00:00,2017-01-12 14:59:54+00:00,2017-01-19 20:00:11+00:00,Closed,13114059,DAFFODIL-641
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 23:00:21+00:00,2019-06-07 17:08:48+00:00,2021-05-20 20:01:33+00:00,Closed,13114058,DAFFODIL-640
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This is not a property. The unicodeByteOrderMark is a member of the Infoset Document Item. (aka the root element). 

It depends on the dfdl:encoding property, which can be a runtime expression; hence, this must be computed in an Evaluatable which in turn evaluates the encodingEv.
Likely an Evaluatable[Option[ByteOrder]] is the type. 

If no encoding property is defined this should be a constant None. 
If the encoding property is defined and known to NOT be one of UTF-8, UTF-16, or UTF-32, then this should be a constant None. 

When unparsing, the value will either have been set from parsing, or can be set from an API call. (New API method on Infoset needed.)
The API call is allowed, but the value ignored/unused by the unparser unless the encoding is UTF-8, UTF-16, or UTF-32. 

When the encoding evaluates to UTF-8, then the unicodeByteOrderMark will be determined by the first 3 bytes being:
* 0xEF 0xBF 0xBE - ByteOrder.LittleEndian - 3 bytes are consumed (note: strictly speaking, this shouldn't occur, but will if a naive utf-8 encoder encodes a little-endian BOM into a 3-byte UTF-8 sequence. To insure such data will round trip between UTF-8 and UTF-16 (LE - via BOM), we match this sequence, and choose LittleEndian byte order)
* 0xEF 0xBB 0xBF - ByteOrder-BigEndian - 3 bytes are consumed
* anything else - no bytes are consumed, and the unicodeByteOrderMark is not set (has no value)

when unparsing, if unicodeByteOrderMark is not set, then no byte order mark is output. 

For UTF-16,
* 0xFE 0xFF - byteOrder.BigEndian - 2 bytes are consumed
* 0xFF 0xFE - byteOrder.LittleEndian - 2 bytes are consumed
* anything else - parse error.

When unparsing, if encoding is UTF-16, and unicodeByteOrderMark is not set - unparse error.

UTF-32 works like utf-16, except the byte patterns are 00 00 FE FF for bigEndian, and FF FE 00 00 for littleEndian.

Recommended: package this code for reuse, assuming it needs to be used as a library for reading/decoding strings generally. It's not impossible that the above runtime errors when the byte order is not known, will be augmented in the future by a mode where each individual text string at fine granularity is examined for a byte order mark at the start.  There also may be a need for utf-16 heuristic byte-order determination - that is by looking at the bytes for the characters and determining if they make more sense as big-endian or little endian. 

",[],2013-04-09 22:58:30+00:00,2019-07-22 17:10:22+00:00,2019-07-22 17:10:30+00:00,Closed,13114057,DAFFODIL-639
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Advanced feature. 

Requires the raw-bytes entities feature in order to be useful.",[],2013-04-09 22:51:01+00:00,,2018-09-13 14:04:35+00:00,Open,13114056,DAFFODIL-638
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"zoned for the basic integer types.
Note that decimal, xs:integer, xs:nonNegativeInteger have a separate feature/issue.",[],2013-04-09 22:26:24+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:11+00:00,Closed,13114055,DAFFODIL-637
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Packed decimal implementation for the basic integer number types.
Note decimal, xs:integer, and xs:nonNegativeInteger have their own separate task.",[],2013-04-09 22:25:13+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114054,DAFFODIL-636
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 21:27:40+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114053,DAFFODIL-635
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 21:09:46+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114052,DAFFODIL-634
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 21:08:42+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:11+00:00,Closed,13114051,DAFFODIL-633
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 21:06:37+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:11+00:00,Closed,13114050,DAFFODIL-632
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2013-04-09 21:05:00+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:11+00:00,Closed,13114049,DAFFODIL-631
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Everything about zoned decimal,[],2013-04-09 20:29:02+00:00,2017-07-27 14:21:57+00:00,2017-07-27 14:23:12+00:00,Closed,13114048,DAFFODIL-630
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,All forms of packed decimal.,[],2013-04-09 20:28:14+00:00,2017-07-27 14:21:56+00:00,2017-07-27 14:23:12+00:00,Closed,13114047,DAFFODIL-629
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2013-04-09 19:06:11+00:00,,2018-10-23 16:39:20+00:00,Open,13114046,DAFFODIL-628
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"While most tests have been changed to no longer give aborts, there are currently 2 tests in daffodil-test/scala-debug that have an abort with the message ""Invariant broken"".  A Schema Definition Error message should be created for this and be used instead of an abort.

scala-debug/edu/illinois/ncsa/daffodil/section11/content_framing_properties/TestContentFramingPropertiesDebug.scala - test_encoding_property_expression

scala-debug/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespacesDebug.scala - test_multi_encoding_02",[],2013-04-09 14:19:58+00:00,2015-05-14 14:00:34+00:00,2015-06-11 21:14:48+00:00,Closed,13114045,DAFFODIL-627
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Everything we need access to for our CLI and Debugger needs to be exposed on the APIs (Java and Scala flavors). 

Someone should be able to take our API and create their own debugger that for example, has a Graphical user interface instead of command line. 

This means exposiing an API for accessing parser state during the middle of a parse operation, single stepping, etc.",[],2013-04-04 12:29:34+00:00,2020-12-16 20:21:13+00:00,2020-12-16 20:21:13+00:00,Closed,13114044,DAFFODIL-626
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"For scalability's sake, it would be nice to be able to automate our manual CLI Debugger tests. This would involve automating the string of inputs for each debugging session, and verifying the output after each command. If there is any functionality that could be added into the debugger in order to aid this process, that would be wonderful.",[],2013-04-04 12:08:33+00:00,2014-08-22 18:57:52+00:00,2014-08-22 18:58:16+00:00,Closed,13114043,DAFFODIL-625
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"Update SBT so that scalac is called with -optimise option.

Theoretically should increase the performance of 'for' loops.  And might increase performance overall.",[],2013-04-04 12:08:22+00:00,,2018-09-13 14:04:17+00:00,Open,13114042,DAFFODIL-624
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Our edit-compile-build cycle in Eclipse for Daffodil has gotten much too long.

It clearly affects my productivity dramatically, and it is much less fun too.

If we reorganize the source code into several distinct libraries with a minimum of inter-dependencies this will perhaps improve build time.",[],2013-04-02 11:38:43+00:00,2014-12-03 07:36:20+00:00,2015-02-06 16:27:23+00:00,Closed,13114041,DAFFODIL-623
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I parsed a date/time looking like this 04.02.2013 at 14:00:56-05:00

The infoset has: 2013-04-02T19:00Z

It basically adjusted the timezone so as to be the same point in time, but in the Z timezone.

I don't think this is right. Unless there is clear direction in the spec someplace, I think Daffodil should preserve the timezone information and present back in the same timezone.",[],2013-04-01 19:53:32+00:00,2013-07-30 13:29:33+00:00,2013-07-30 13:30:03+00:00,Closed,13114040,DAFFODIL-622
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"If you write a TDML file and it uses an external schema file, then that schema can include/import other schemas.

If you use the tdml:defineSchema element to embed the schema directly, then include/import do not seem to work.

This is bad because to make a nice compact TDML file as a bug report, you will want to avoid having to put lots of default format properties in it. You'll just want to include one of the built-in format defaults (IBMdefined/GeneralPurposeFormat.xsd, or some other).",[],2013-04-01 18:17:44+00:00,2013-04-01 20:35:32+00:00,2013-04-02 18:37:33+00:00,Closed,13114039,DAFFODIL-621
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I was working on verifying the fix for DFDL-557, including the tests in the ibm-contributed directory in daffodil-core. I noticed that test simple_type_properties_text_calendar_13_02 used the implicit calendarPattern for time, but the timezone information was in the form +01:00, and it was failing with our parser. I looked at the formatting and saw that the default format is HH:mm:ssZZZ, and ZZZ is the timezone offset, just like the IBM test used. In ours, it accepts 'GMT' (which is zzz) but not ""+01:00"" (ZZZ). This is most likely my fault because I originally pointed out that the implicit format should require the timezone, but my tests were wrong in that they used GMT instead of the hour offset. I'm working on fixing the tests and moving them to scala-debug.",[],2013-04-01 17:47:04+00:00,2013-04-17 13:34:01+00:00,2013-04-17 17:56:36+00:00,Closed,13114038,DAFFODIL-620
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"setVariable and readVariable currently construct a name string looking like this:

{http://www.example.com}foo

They use this as the key into a hash map to set/get the variable value.

At runtime the XPath processor has a QName object.

We do this expensive conversion of this QName into the above string form before reaching into the hash map.

There is no reason for this. The key to the hash map should just be the QName object itself. setVariable should construct this QName object statically.

Comparison of QNames has to be real equality. Unless QNames are interned I am pretty sure we can't get away with object identity (aka compare the pointers). 
But even if we have to compare the parts of a QName that's very preferable to constructing an expanded name string first, and then comparing it.",[],2013-03-29 22:57:01+00:00,2014-11-17 16:07:35+00:00,2014-12-01 20:48:50+00:00,Closed,13114037,DAFFODIL-619
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The performance tests test_indexLimit_100 and friends are extremely slow. This is at least partly due to the fact that an expression for occursCount is being evaluated over and over. For every row it is evaluated. Yet its value is constant at that point, i.e., its value is in a distant header record and never changing.

This needs to be optimized as this pattern is not unusual. 

It can be optimized by first implementing the dfdl:newVariableInstance annotation, then using it. We place the value of the occursCount expression into a variable, and then we reference the variable over and over, instead of the expression.",[],2013-03-29 22:36:38+00:00,2017-04-06 15:35:19+00:00,2018-09-13 14:13:32+00:00,Closed,13114036,DAFFODIL-618
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We need to keep Daffodil DFDL consistent with IBM's implementation as we know people will want to move schemas back and forth.

IBM had product in the field before the name change from separatorPolicy to separatorSuppressionPolicy, so they are going to support both.

Key: they are treated as the same property even though they have different names and different enum values. This is needed in order for schemas to continue to work that have a mixture of the old and new property names.

This means that you can have say, separatorSuppressionPolicy in some named format that you reference with dfdl:ref, but if you locally define separatorPolicy, it will override the separatorSuppressionPolicy. 

Right now these are treated as separate and incompatible in Daffodil. You can't have both in a schema. That's too rigid.",[],2013-03-29 21:41:19+00:00,,2020-08-05 17:52:32+00:00,Open,13114035,DAFFODIL-617
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Minor,"Done calibrating
[info] - testLongRunningForProfiling2 *** FAILED ***
[info]   java.lang.Exception: Parse Error: Term('%LF;') - element.row: Delimiter not found!
[info] Schema context: element.row Location line 60 column 40 in file:C:/Users/aseyler/Documents/DFDL-git/dfdl/daffodil-perf/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/profiling/profiling.dfdl.xsd
[info] Data location was preceding byte 1892
[info] UTF-8 text starting at byte 1888 is: (500,

[info] 501,502,503,504,505,506,507,508,50)
[info] Data (hex) starting at byte 1888 is: (0x3530302C0D0A3530312C3530322C3530332C3530342C3530352C3530362C3530372C3530382C3530)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:496)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:383)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:332)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:204)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$2.apply$mcV$sp(TestProfiling.scala:87)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$2.apply(TestProfiling.scala:86)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$2.apply(TestProfiling.scala:86)
[info]   at edu.illinois.ncsa.daffodil.profiling.Tak$.time(TestProfiling.scala:155)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling.testLongRunningForProfiling2(TestProfiling.scala:86)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   ...
Bytes processed: 13338526


[info] - testBinaryLongRunningForProfiling
JavaTak: Calibrating takeon units
tak call count = 1403025541 in 4372905913ns
Under current load, 1 CPU of this system executes 3.116768572782525 nanoseconds per tak call.
So on this system, currently, 1 takeon = 3.116768572782525ns
Done calibrating
[info] - testJavaTakCalibration
[info] - testLongRunningForProfiling *** FAILED ***
[info]   java.lang.Exception: Parse Error: Expression evaluation failed. Details: javax.xml.xpath.XPathExpressionException: no node for path { ../tns:matrix/tns:row[2]/tns:cell[2] }
[info] Schema context: element.row002col002 Location line 27 column 76 in file:C:/Users/aseyler/Documents/DFDL-git/dfdl/daffodil-perf/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/profiling/profiling.dfdl.xsd(no data location)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:496)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:383)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:332)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTestWithDataVolumes(TDMLRunner.scala:204)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$1.apply$mcV$sp(TestProfiling.scala:72)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$1.apply(TestProfiling.scala:71)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling$$anonfun$1.apply(TestProfiling.scala:71)
[info]   at edu.illinois.ncsa.daffodil.profiling.Tak$.time(TestProfiling.scala:155)
[info]   at edu.illinois.ncsa.daffodil.profiling.TestProfiling.testLongRunningForProfiling(TestProfiling.scala:71)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   ...",[],2013-03-28 21:32:53+00:00,2017-04-06 15:15:36+00:00,2018-09-13 14:13:31+00:00,Closed,13114034,DAFFODIL-616
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"Currently TDMLRunner does not check namespaces when comparing results.  For example, DFDL-611 went unnoticed even though elements were being give a namespace of ""No_Namespace"", which shouldn't happen",[],2013-03-28 14:48:03+00:00,2017-01-23 18:14:28+00:00,2018-09-13 14:13:29+00:00,Closed,13114033,DAFFODIL-615
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In the ""how to report a bug"" and/or ""how to ask a question"" pages of the wiki, I want to put a link to a forum, or mailing list subscription page, so we can advise people exactly how to report/ask. 

We need a mailing list or forum for users of daffodil, not developers.
This is so users can ask questions about daffodil, about DFDL generally, or can report bugs without having to be members of daffodil-dev or the dfdl-wg mailing list. 

I suspect these oss.tresys.com mailing lists only accept postings from members, and I'm not sure we want users signing up for daffodil-dev, so if we go for a mailing list then a different mailing list, daffodil-support (or some appropriate name for users to ask questions, etc.) is the right thing.

If there is some alternative kind of forum system we can use (perhaps there is one that is part of the ncsa atlassian stuff?) that is better than just email that's fine too, I just want to be able to give people something they can interact with that isn't full of developer-centric traffic also.",[],2013-03-27 19:38:15+00:00,2013-04-01 15:46:27+00:00,2013-04-18 15:50:37+00:00,Closed,13114032,DAFFODIL-614
Improvement,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"It would be a good idea to have the CLI tools (from pack files) give a message when a user tries to use the ""unparse"" command that it has not been implemented yet.",[],2013-03-27 19:27:07+00:00,2015-01-21 15:24:43+00:00,2015-01-21 15:30:48+00:00,Closed,13114031,DAFFODIL-613
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"Cannot run program ""javac"":

I have tried changing local options, git tricks and rebased.
This problem persists in daffodil-core although I can run other directories (daffodil-test and daffodil-lib)
See details:


C:\Users\aseyler\Documents\DFDL-git\dfdl>set SCRIPT_DIR=\Program Files\SBT\ 

C:\Users\aseyler\Documents\DFDL-git\dfdl>java -XX:MaxPermSize=1024m -Xmx2048m -Xms40m -Xss2m -XX:ReservedCodeCacheSize=128m -jar ""\Program Files\SBT\sbt-launch.jar"" daffodil-core/test 
[info] Loading project definition from C:\Users\aseyler\Documents\DFDL-git\dfdl\project
[info] Set current project to daffodil (in build file:/C:/Users/aseyler/Documents/DFDL-git/dfdl/)
[info] Compiling 33 Scala sources and 1 Java source to C:\Users\aseyler\Documents\DFDL-git\dfdl\daffodil-core\target\scala-2.9.2\test-classes...
java.io.IOException: Cannot run program ""javac"": CreateProcess error=2, The system cannot find the file specified
	at java.lang.ProcessBuilder.start(Unknown Source)
	at sbt.SimpleProcessBuilder.run(ProcessImpl.scala:386)
	at sbt.AbstractProcessBuilder.run(ProcessImpl.scala:138)
	at sbt.AbstractProcessBuilder$$anonfun$runBuffered$1.apply(ProcessImpl.scala:169)
	at sbt.AbstractProcessBuilder$$anonfun$runBuffered$1.apply(ProcessImpl.scala:169)
	at sbt.compiler.JavacLogger.buffer(AggressiveCompile.scala:178)
	at sbt.AbstractProcessBuilder.runBuffered(ProcessImpl.scala:169)
	at sbt.AbstractProcessBuilder.$bang(ProcessImpl.scala:166)
	at sbt.compiler.AggressiveCompile$$anonfun$forkJavac$1.apply(AggressiveCompile.scala:157)
	at sbt.compiler.AggressiveCompile$$anonfun$forkJavac$1.apply(AggressiveCompile.scala:152)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.externalJavac$1(JavaCompiler.scala:82)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1$$anonfun$apply$2.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1$$anonfun$apply$2.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$withArgumentFile$1.apply(JavaCompiler.scala:103)
	at sbt.compiler.JavaCompiler$$anonfun$withArgumentFile$1.apply(JavaCompiler.scala:100)
	at sbt.IO$.withTemporaryDirectory(IO.scala:262)
	at sbt.compiler.JavaCompiler$.withArgumentFile(JavaCompiler.scala:100)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.apply(JavaCompiler.scala:79)
	at sbt.compiler.JavaCompiler$$anonfun$directOrForkJavac$1.apply(JavaCompiler.scala:75)
	at sbt.compiler.JavaCompiler$$anonfun$directOrForkJavac$1.apply(JavaCompiler.scala:71)
	at sbt.compiler.JavaCompiler$$anon$1.compile(JavaCompiler.scala:57)
	at sbt.compiler.JavaTool$class.apply(JavaCompiler.scala:26)
	at sbt.compiler.JavaCompiler$$anon$1.apply(JavaCompiler.scala:51)
	at sbt.compiler.JavaCompiler$class.compile(JavaCompiler.scala:17)
	at sbt.compiler.JavaCompiler$$anon$1.compile(JavaCompiler.scala:51)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile.sbt$compiler$AggressiveCompile$$timed(AggressiveCompile.scala:101)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(AggressiveCompile.scala:82)
	at sbt.classfile.Analyze$.apply(Analyze.scala:85)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply$mcV$sp(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile.sbt$compiler$AggressiveCompile$$timed(AggressiveCompile.scala:101)
	at sbt.compiler.AggressiveCompile$$anonfun$4.compileJava$1(AggressiveCompile.scala:80)
	at sbt.compiler.AggressiveCompile$$anonfun$4.apply(AggressiveCompile.scala:88)
	at sbt.compiler.AggressiveCompile$$anonfun$4.apply(AggressiveCompile.scala:60)
	at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:24)
	at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:22)
	at sbt.inc.Incremental$.cycle(Incremental.scala:40)
	at sbt.inc.Incremental$.compile(Incremental.scala:25)
	at sbt.inc.IncrementalCompile$.apply(Compile.scala:20)
	at sbt.compiler.AggressiveCompile.compile2(AggressiveCompile.scala:96)
	at sbt.compiler.AggressiveCompile.compile1(AggressiveCompile.scala:44)
	at sbt.compiler.AggressiveCompile.apply(AggressiveCompile.scala:31)
	at sbt.Compiler$.apply(Compiler.scala:79)
	at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:572)
	at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:572)
	at sbt.Scoped$$anonfun$hf2$1.apply(Structure.scala:578)
	at sbt.Scoped$$anonfun$hf2$1.apply(Structure.scala:578)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:159)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.io.IOException: CreateProcess error=2, The system cannot find the file specified
	at java.lang.ProcessImpl.create(Native Method)
	at java.lang.ProcessImpl.<init>(Unknown Source)
	at java.lang.ProcessImpl.start(Unknown Source)
	at java.lang.ProcessBuilder.start(Unknown Source)
	at sbt.SimpleProcessBuilder.run(ProcessImpl.scala:386)
	at sbt.AbstractProcessBuilder.run(ProcessImpl.scala:138)
	at sbt.AbstractProcessBuilder$$anonfun$runBuffered$1.apply(ProcessImpl.scala:169)
	at sbt.AbstractProcessBuilder$$anonfun$runBuffered$1.apply(ProcessImpl.scala:169)
	at sbt.compiler.JavacLogger.buffer(AggressiveCompile.scala:178)
	at sbt.AbstractProcessBuilder.runBuffered(ProcessImpl.scala:169)
	at sbt.AbstractProcessBuilder.$bang(ProcessImpl.scala:166)
	at sbt.compiler.AggressiveCompile$$anonfun$forkJavac$1.apply(AggressiveCompile.scala:157)
	at sbt.compiler.AggressiveCompile$$anonfun$forkJavac$1.apply(AggressiveCompile.scala:152)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.externalJavac$1(JavaCompiler.scala:82)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1$$anonfun$apply$2.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1$$anonfun$apply$2.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$withArgumentFile$1.apply(JavaCompiler.scala:103)
	at sbt.compiler.JavaCompiler$$anonfun$withArgumentFile$1.apply(JavaCompiler.scala:100)
	at sbt.IO$.withTemporaryDirectory(IO.scala:262)
	at sbt.compiler.JavaCompiler$.withArgumentFile(JavaCompiler.scala:100)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.apply(JavaCompiler.scala:83)
	at sbt.compiler.JavaCompiler$$anonfun$forkJavac$1.apply(JavaCompiler.scala:79)
	at sbt.compiler.JavaCompiler$$anonfun$directOrForkJavac$1.apply(JavaCompiler.scala:75)
	at sbt.compiler.JavaCompiler$$anonfun$directOrForkJavac$1.apply(JavaCompiler.scala:71)
	at sbt.compiler.JavaCompiler$$anon$1.compile(JavaCompiler.scala:57)
	at sbt.compiler.JavaTool$class.apply(JavaCompiler.scala:26)
	at sbt.compiler.JavaCompiler$$anon$1.apply(JavaCompiler.scala:51)
	at sbt.compiler.JavaCompiler$class.compile(JavaCompiler.scala:17)
	at sbt.compiler.JavaCompiler$$anon$1.compile(JavaCompiler.scala:51)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$mcV$sp$2.apply(AggressiveCompile.scala:83)
	at sbt.compiler.AggressiveCompile.sbt$compiler$AggressiveCompile$$timed(AggressiveCompile.scala:101)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(AggressiveCompile.scala:82)
	at sbt.classfile.Analyze$.apply(Analyze.scala:85)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply$mcV$sp(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile$$anonfun$4$$anonfun$compileJava$1$1.apply(AggressiveCompile.scala:81)
	at sbt.compiler.AggressiveCompile.sbt$compiler$AggressiveCompile$$timed(AggressiveCompile.scala:101)
	at sbt.compiler.AggressiveCompile$$anonfun$4.compileJava$1(AggressiveCompile.scala:80)
	at sbt.compiler.AggressiveCompile$$anonfun$4.apply(AggressiveCompile.scala:88)
	at sbt.compiler.AggressiveCompile$$anonfun$4.apply(AggressiveCompile.scala:60)
	at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:24)
	at sbt.inc.IncrementalCompile$$anonfun$doCompile$1.apply(Compile.scala:22)
	at sbt.inc.Incremental$.cycle(Incremental.scala:40)
	at sbt.inc.Incremental$.compile(Incremental.scala:25)
	at sbt.inc.IncrementalCompile$.apply(Compile.scala:20)
	at sbt.compiler.AggressiveCompile.compile2(AggressiveCompile.scala:96)
	at sbt.compiler.AggressiveCompile.compile1(AggressiveCompile.scala:44)
	at sbt.compiler.AggressiveCompile.apply(AggressiveCompile.scala:31)
	at sbt.Compiler$.apply(Compiler.scala:79)
	at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:572)
	at sbt.Defaults$$anonfun$compileTask$1.apply(Defaults.scala:572)
	at sbt.Scoped$$anonfun$hf2$1.apply(Structure.scala:578)
	at sbt.Scoped$$anonfun$hf2$1.apply(Structure.scala:578)
	at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
	at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
	at sbt.std.Transform$$anon$5.work(System.scala:71)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
	at sbt.Execute.work(Execute.scala:238)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:159)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
[error] (daffodil-core/test:compile) java.io.IOException: Cannot run program ""javac"": CreateProcess error=2, The system cannot find the file specified
[error] Total time: 46 s, completed Mar 27, 2013 1:30:27 PM",[],2013-03-27 17:49:56+00:00,2013-05-16 15:05:19+00:00,2013-05-16 15:05:19+00:00,Closed,13114030,DAFFODIL-612
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil injects this namespace, even though the schema doesn���t specify it.

<Date xmlns=""No_Namespace"">���

This ""No_Namespace"" binding needs to be filtered out. It is our internal marker for the no-namespace situation. Note that the elements without prefixed names truly have to be in no namespace. Just stripping the xmlns=""No_Namespace"" attribute from the top-level output element won't be sufficient.",[],2013-03-25 15:00:59+00:00,2013-03-25 19:20:56+00:00,2013-04-19 14:02:57+00:00,Closed,13114029,DAFFODIL-611
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"With this input:
{code}
Date: 20
{code}

And this schema:

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<xsd:schema xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/""
     xmlns:fmt=""http://www.ibm.com/dfdl/GeneralPurposeFormat""
     xmlns:ibmDfdlExtn=""http://www.ibm.com/dfdl/extensions""
     xmlns:ibmSchExtn=""http://www.ibm.com/schema/extensions"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
        
    <xsd:import namespace=""http://www.ibm.com/dfdl/GeneralPurposeFormat""
       schemaLocation=""IBMdefined/GeneralPurposeFormat.xsd"" />
    <xsd:annotation>
        <xsd:appinfo source=""http://www.ogf.org/dfdl/"">
            <dfdl:format ref=""fmt:GeneralPurposeFormat"" />
        </xsd:appinfo>
    </xsd:annotation>
        
    <xsd:element dfdl:initiator=""Date:%SP;"" dfdl:terminator=""%NL;""
       ibmSchExtn:docRoot=""true"" name=""Date"">
        <xsd:complexType>
            <xsd:sequence dfdl:initiator="""" dfdl:separator=""%SP;""
             dfdl:separatorPolicy=""suppressed"">
                <xsd:element dfdl:length=""2"" dfdl:lengthKind=""explicit""
                 dfdl:textNumberPattern=""#0"" ibmDfdlExtn:sampleValue=""1"" name=""Day"">
                    <xsd:simpleType>
                        <xsd:restriction base=""xsd:nonNegativeInteger"">
                            <xsd:maxInclusive value=""31"" />
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:element>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
{code}

A very long, very confusing trace is returned. It appears to related to the nonNegativeInteger. Changing that to an unsignedInt solves the problem and it parses as expected.",[],2013-03-22 19:20:57+00:00,2013-05-01 17:37:35+00:00,2013-05-07 16:05:53+00:00,Closed,13114028,DAFFODIL-610
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"First mentioned in DFDL-575:

If you issue an invalid command, you get the following error:
error: undefined info command: <command>
This error is misleading, as the problem has nothing to do with the info command.",[],2013-03-21 21:07:41+00:00,2013-04-29 14:15:25+00:00,2013-05-24 17:56:07+00:00,Closed,13114027,DAFFODIL-609
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"First mentioned in DFDL-575:
There is currently no way to conditionally break based on the contents of an element. For example, you might want the conditional breakpoint
condition 1 ./text() = 3
to only break when the elements contents is 3. The problem is that currently breakpoints only occur when an element is created, the idea being that you don't want to break when every little change happens to an element (often times there a many parsers that all affect the same element). However, when the element is created, it's contents are not set, so there is no way to break based on the content. Need to figure out a good solution to make both use cases work.",[],2013-03-21 21:06:04+00:00,2013-05-02 14:05:03+00:00,2013-05-06 19:09:39+00:00,Closed,13114026,DAFFODIL-608
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to Mike:

groupIndex - we perhaps shouldn't expose this. It's the position within the immediately enclosing group and it is used to decide if you need an infix separator from that group before the current element (groupIndex 1 no, >1 yes) I'll want to look at it, but most users....probably not.

Should we keep this as one of the variables available to the user?",[],2013-03-21 21:01:25+00:00,2013-05-24 13:31:26+00:00,2013-06-13 17:39:39+00:00,Closed,13114025,DAFFODIL-607
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I only ever get ""bitLimit: no bit limit set"" when I try to output this value.

According to Mike:

bit limit - we hardly ever use this, we haven't implemented most of the stuff that depends on it alot. So right now I'm not surprised it always seems undefined.

Do we want to keep this as one of the variables that can be displayed to the user?",[],2013-03-21 21:00:19+00:00,2013-04-23 18:09:00+00:00,2013-04-25 13:05:38+00:00,Closed,13114024,DAFFODIL-606
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"occursCount - I've spoken with Steve and Taylor about this, and am still
having trouble figuring out what this value should be, and why I'm not
getting any of the values I would expect: I have a very simple array that
parses integers:

{noformat}
~/NGF/dfdl (debugger) echo -e ""1,2,3,4,5"" > input.txt
~/NGF/dfdl (debugger) ./daffodil-core/target/start -d parse -s
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entit
ies/charClassEntities.dfdl.xsd -r matrix input.txt
(debug) display info occursCount
(debug) display info infoset
(debug) break element.cell
(debug) c
  occursCount: 1024
  infoset:
    <tns:matrixLimited xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrixLimited>
(debug)
  occursCount: 1024
  infoset:
    <tns:matrixLimited xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>1</tns:cell>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrixLimited>
(debug)
  occursCount: 1024
  infoset:
    <tns:matrixLimited xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>1</tns:cell>
        <tns:cell>2</tns:cell>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrixLimited>
(debug)
  occursCount: 1024
  infoset:
    <tns:matrixLimited xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>1</tns:cell>
        <tns:cell>2</tns:cell>
        <tns:cell>3</tns:cell>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrixLimited>
(debug)
  occursCount: 1024
  infoset:
    <tns:matrixLimited xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>1</tns:cell>
        <tns:cell>2</tns:cell>
        <tns:cell>3</tns:cell>
        <tns:cell>4</tns:cell>
        <tns:cell></tns:cell>
      </tns:row>
    </tns:matrixLimited>
{noformat}

I've tried this with unbounded arrays, and with arrays with specified min
and max occurs values, with occursCountKind = ""parsed"" and occursCountKind
= ""fixed""

I can't for the life of me get occursCount to return a value other than
1024. Mike agrees that this appears to be a bug.",[],2013-03-21 20:57:48+00:00,2015-01-21 13:35:46+00:00,2015-02-18 16:21:42+00:00,Closed,13114023,DAFFODIL-605
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"You mentioned this in DFDL-575, but I just ran into it too and thought it should have its own ticket. Right now the debugger always removes hidden elements no matter what the setting is.",[],2013-03-21 19:06:45+00:00,2015-01-20 16:06:02+00:00,2015-01-20 18:02:44+00:00,Closed,13114022,DAFFODIL-604
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,This should also be updated in the wiki.,[],2013-03-21 18:25:21+00:00,2013-05-21 17:30:31+00:00,2013-05-28 21:05:26+00:00,Closed,13114021,DAFFODIL-603
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"For many DFDL applications this is a must-have capability. 

Systems whose job is to scrutinize data carefully must have a controlled base of DFDL schemas that are well trusted. 

Reaching out the internet to get schemas is definitely unacceptable for these applications.

As for how to test this.... keep in mind that just disconnecting a test box from the internet won't do it. A test might not fail just because a probe for a schema on the internet failed. It might behave in some different manner if it is unable to successfully reach the internet, yet still be making the attempts. The requirement here is that it not even be attempting to contact the internet to get schemas.",[],2013-03-21 15:39:45+00:00,,2020-07-30 13:50:08+00:00,Open,13114020,DAFFODIL-602
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Trivial,"If I have the following infoset:

{noformat}
  infoset:
    <tns:matrixString xmlns:tns=""http://www.example.org/example1/"">
        <tns:row>
          <tns:cell>
            loooooooooooooooooooooooooooooooooooooooooong worddddddddddddddddddddddddddddddddd
          </tns:cell>
        </tns:row>
    </tns:matrixString>
{noformat}

and I set wrapLength to 10, I would expect the infoset to be broken up more. However I get this:

{noformat}
  infoset:
    <tns:matrixString xmlns:tns=""http://www.example.org/example1/""><tns:row><tns:cell>loooooooooooooooooooooooooooooooooooooooooong worddddddddddddddddddddddddddddddddd</tns:cell></tns:row></tns:matrixString>
{noformat}

Also, if I set it to a very large number (90000) I would expect it to not wrap at all, but I get this:
{noformat}
  infoset:
    <tns:matrixString xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>loooooooooooooooooooooooooooooooooooooooooong worddddddddddddddddddddddddddddddddd</tns:cell>
      </tns:row>
    </tns:matrixString>
{noformat}

I tried setting it to the length of ""long"", thinking it would put ""word"" on a new line, but I get this:
{noformat}

  infoset:
    <tns:matrixString 
    xmlns:tns=""http://www.example.org/example1/"">
      <tns:row>
        <tns:cell>
          loooooooooooooooooooooooooooooooooooooooooong worddddddddddddddddddddddddddddddddd
        </tns:cell>
      </tns:row>
    </tns:matrixString>
{noformat}",[],2013-03-21 14:28:23+00:00,2020-12-14 19:53:36+00:00,2020-12-15 20:07:18+00:00,Closed,13114019,DAFFODIL-601
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, if you have two breakpoints on the same element with different conditionals, only the first is applied. All breakpoints should apply.

To test:

~/NGF/dfdl (master) echo ""3,3,0,3,0,3,3,1,2,3,4,5,6,7,8,9,1,2,3,2,2,2,2,3"" > input.txt
~/NGF/dfdl (master) ./daffodil-core/target/start -d parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -r matrix input.txt
(debug) break element.cell
(debug) break element.cell
(debug) condition 1 dfdl:occursIndex() mod 2 = 1
(debug) condition 2 dfdl:occursIndex() mod 2 = 0
(debug) display info arrayIndex
(debug) info breakpoints
     breakpoints:
       1: element.cell   dfdl:occursIndex() mod 2 = 1
       2: element.cell   dfdl:occursIndex() mod 2 = 0
(debug) continue
     arrayIndex: 1
(debug)
     arrayIndex: 3
(debug)

second continue should output ""2"" instead of 3.",[],2013-03-21 13:42:16+00:00,2013-04-29 14:13:27+00:00,2013-04-29 18:44:35+00:00,Closed,13114018,DAFFODIL-600
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Trivial,"When fixing a bug having to do with namespaces for QName resolution and the escapeSchemeRef property, I found that several tests would be broken if we insisted on escapeSchemeRef being bound to """". 

Temporarily I made this a warning, not an error. But it needs to be changed to an error and the tests that break need to be fixed.",['beginnner'],2013-03-20 14:59:35+00:00,,2020-08-05 17:50:30+00:00,Open,13114017,DAFFODIL-599
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We had to change the Schema for DFDL Schemas so that it would tolerate non-native attributes (in order to fix DFDL-558).

This means the validator is no longer checking short form property bindings for correctness.

So we need to implement our own code so that every annotated schema component inspects any short-form properties on it, and checks that they are valid.

We can check some things centrally, i.e., is there a prefix bound to the DFDL namespace at all? 

Stubs for this are in SchemaComponent.scala in the definition of AnnotatedSchemaComponent class.",['beginner'],2013-03-20 14:56:59+00:00,2019-06-10 17:09:24+00:00,2021-05-20 12:34:15+00:00,Closed,13114016,DAFFODIL-598
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,"Right now, documentPart type=""file"" will look for paths relative to the classpath. This means that paths need to have the full edu/illinois/ncsa/daffodil/sectionXX/etc/etc, which is a pain. Instead, it should use the same algorithm used to find schema files, which is smarter about how it finds schemas. This would make passing around tdml files much easier.",[],2013-03-20 14:36:09+00:00,2013-03-20 16:04:16+00:00,2013-03-20 17:27:44+00:00,Closed,13114015,DAFFODIL-597
Sub-task,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,It would be very useful to have a script that could be called by a cron job everyday to gather performance statistics for Daffodil.,[],2013-03-19 19:43:46+00:00,2013-03-28 15:11:36+00:00,2013-03-28 18:24:45+00:00,Closed,13114014,DAFFODIL-596
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Per Mike's suggestion in DFDL-579 - We need to come up with a test which has a monstrously long string in it. 4Gbytes long specifically, so that parsing anything after it will definitely involve offsets larger than a 32-bit system can handle.
However, I know for certain this WILL break currently, and frankly, I don't have a solution to the problem, since we are dependent on Java's underlying libraries.",[],2013-03-19 18:19:49+00:00,2017-04-06 20:07:59+00:00,2017-04-06 20:07:59+00:00,Closed,13114013,DAFFODIL-595
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you do a web search for ""Data Format Description Language"", some very very old slide decks and academic papers come up which make it seem like a dead old topic.

In the year 2013, we need to post some modern public slide-decks on slideshare.com about DFDL & Daffodil both to show recent activity, appeal to people who want DFDL, recruit users and contributors, etc.",[],2013-03-18 22:53:31+00:00,2013-04-11 13:13:04+00:00,2016-10-11 13:42:45+00:00,Closed,13114012,DAFFODIL-594
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-03-18 18:13:14+00:00,2013-04-11 13:45:47+00:00,2013-04-11 13:45:53+00:00,Closed,13114011,DAFFODIL-593
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A handful of errata have changed the names of DFDL property and enum names.
IBM DFDL 1.0 is in the field using the old property and enum names .
The plan is for the next major IBM revision to switch to use the new names whilst still tolerating the old names .

It would be a good idea if Daffodil also tolerated the old names for interoperability with IBM DFDL .

Only needed for property and enums, not function names as the latter are not in IBM DFDL yet.

The list is:
- separatorPolicy and its enums
- textNumberExponentRep
- textBidiOrdering and textBidiShaped",['beginner'],2013-03-18 13:45:12+00:00,,2020-08-25 21:47:23+00:00,Open,13114010,DAFFODIL-592
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"DFDL-459 covers ""Trim"", the parsing aspect of Trim/Pad/Fill. This ticket is for the unparsing aspects.",[],2013-03-18 12:29:27+00:00,2016-09-02 19:01:29+00:00,2017-01-11 20:20:32+00:00,Closed,13114009,DAFFODIL-591
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Both of these are a little confusing. For example, 'sbt stag'e doesn't use DAFFODIL_CLASSPATH or JAVA_OPTS, and the daffodil.sh script only works when used in the tar/zip generated by daffodil-pack/pack. Need to figure out a way to make this less confusing, or at least add a README that clarifies the proper usage.",[],2013-03-17 00:16:11+00:00,2014-11-11 16:59:53+00:00,2014-11-11 17:00:01+00:00,Closed,13114008,DAFFODIL-590
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to be able to save an unparser so that one can reload it and not have to recompile it before running every time.

This should be done by serializing the parser out as an XML file. This enables more back-end implementation techniques than just our scala-based one.",[],2013-03-16 23:47:39+00:00,2015-03-11 14:06:21+00:00,2015-04-15 19:29:21+00:00,Closed,13114007,DAFFODIL-589
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to be able to save a parser so that one can reload it and not have to recompile it before running every time.

This should be done by serializing the parser out as an XML file. This enables more back-end implementation techniques than just our scala-based one.",[],2013-03-16 23:47:02+00:00,2014-11-05 15:56:08+00:00,2014-11-13 20:52:21+00:00,Closed,13114006,DAFFODIL-588
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"While creating a test where all namespace prefixes, terminators, element names, etc. were the same string, I got ""Invalid annotation found!"" errors when defining a namespace prefix other than ""dfdl"" for the dfdl namespace. I brought this up with Mike and this was his response.

Note from Mike:
""[The dfdl prefix] definitely should NOT be wired in.
Imagine a future dfdl v2.0. Users may want their schemas to use prefixes like dfdl1 and dfdl2 for clarity about when the dfdl v2.0 features are being used.
Or given different dfdl implementations, they may want to use prefixes to signify things that depend on what has been implemented in one implementation or another, e.g., dfdlDaf vs dfdlIBM for example. So as to make non-portability of the schema more obvious.""
---------

I briefly looked through the code and there are definitely places that hardcode this prefix. It's riddled throughout the error messages (e.g.""dfdl:checkConstraints may only be called on simple types."") which isn't too bad, but around line 143 of
daffodil-core/src/main/scala/edu/illinois/ncsa/daffodil/dsom/SchemaComponent.scala
/**
Used as factory for the XML Node with the right namespace and prefix etc.
*
Given ""element"" it creates <dfdl:element /> with the namespace definitions
based on this schema component's corresponding XSD construct.
*
Makes sure to inherit the scope so we have all the namespace bindings.
*/
def newDFDLAnnotationXML(label: String) = { scala.xml.Elem(""dfdl"", label, emptyXMLMetadata, xml.scope) }
I looked through briefly and I'm not entirely sure how often this actually gets used or if it's even still relevant, but this is the type of thing that would need to be changed.",['beginner'],2013-03-16 14:30:35+00:00,2020-08-05 17:46:34+00:00,2020-08-05 17:46:34+00:00,Closed,13114005,DAFFODIL-587
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test namespace_conflict_01.

In this test, there is an erroneous top level format annotation. It has prefix:
xs:format, not dfdl:format.

That prevents the Daffodil compiler from even constructing the DFDLFormat object. As a consequence, when the error is reported, it is given the file and line number of the existing enclosing schema component, which is the top level xs:schema element.

As a result, the file and line number are not pointing near the source of the error.

In the below, line 3 column 64 is the closing "">"" of the top xs:schema tag. 

(To fix: well one way is we need a schema component JunkComponent. It should retain file and line number like any schema component.)

Schema Definition Error: Invalid dfdl annotation found: format Schema context: SchemaDocument. Location line 3 column 64 in file:/home/mbeckerle/Documents/dataiti/git/daffodil/daffodil-test/target/eclipse/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_04.dfdl.xsd
2013-03-15 18:00:48:247  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2013-03-15 18:00:48:248  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Invalid dfdl annotation found: format Schema context: SchemaDocument. Location line 3 column 64 in file:/home/mbeckerle/Documents/dataiti/git/daffodil/daffodil-test/target/eclipse/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_04.dfdl.xsd]",[],2013-03-15 22:06:47+00:00,2013-05-15 15:28:07+00:00,2013-06-03 16:45:24+00:00,Closed,13114004,DAFFODIL-586
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I got a SDE, then a bug backtrace. 

The relevant code is the Assert.usage which insists that the 

2013-03-15 10:19:39:163  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2013-03-15 10:19:39:167  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 9; columnNumber: 16; cvc-complex-type.3.2.2: Attribute 'ibmSchExtn:docRoot' is not allowed to appear in element 'xsd:element'.) Schema context: file:/home/mbeckerle/Documents/dataiti/git/daffodil/daffodil-test/target/eclipse/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/ABC_IBM.xsd. Location in file:/home/mbeckerle/Documents/dataiti/git/daffodil/daffodil-test/target/eclipse/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/ABC_IBM.xsd]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please help us fix this by opening a bug report at:

  https://opensource.ncsa.illinois.edu/jira/browse/DFDL

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Usage error.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:69)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:60)
edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:103)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:69)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:60)
	at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:103)
	at edu.illinois.ncsa.daffodil.Main$.createProcessorFromSchemas(Main.scala:130)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:322)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:514)
	at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_ibm_abc_cli(TestNamespaces.scala:164)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.contrib.java.lang.system.ExpectedSystemExit$1.evaluate(ExpectedSystemExit.java:81)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)",[],2013-03-15 17:44:45+00:00,2013-03-15 22:19:46+00:00,2013-03-19 15:35:30+00:00,Closed,13114003,DAFFODIL-585
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This function relies on the implementation of default values (DFDL-115)

(This has been separated from ticket DFDL-247)",[],2013-03-14 15:54:15+00:00,2017-01-23 18:10:21+00:00,2018-09-13 14:13:24+00:00,Closed,13114002,DAFFODIL-584
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Note from Mike:

I thought this was only for an unsignedByte, but I see that the spec is silent on this. Certainly it makes no sense for text anything. But the issue of what integer subtypes it is allowed for is valid. I'll ask the DFDL Workgroup and see if the IBMers have an opinion.

(This has been separated from ticket DFDL-247)",[],2013-03-14 15:52:37+00:00,2016-09-14 21:57:50+00:00,2017-07-26 16:22:46+00:00,Closed,13114001,DAFFODIL-583
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,(This has been separated from ticket DFDL-247),[],2013-03-14 15:51:20+00:00,2016-09-02 19:02:32+00:00,2016-10-05 14:15:40+00:00,Closed,13114000,DAFFODIL-582
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note from Mike:
[valueLength] is not the length of the JDOM element's value. It is the length of the value region in the DFDL grammar, hence, the number 1,000,000 has a valueLength of 9 because the two commas count, even though in JDOM it will show up as 1000000. 

(This has been separated from ticket DFDL-247)",[],2013-03-14 15:50:23+00:00,2016-09-09 14:38:39+00:00,2016-10-05 14:15:22+00:00,Closed,13113999,DAFFODIL-581
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,(This has been separated from ticket DFDL-247),[],2013-03-14 15:49:15+00:00,2016-06-14 21:43:28+00:00,2017-01-11 21:46:45+00:00,Closed,13113998,DAFFODIL-580
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When testing performance, I created a PCAP infoset with thousands of packets in it. To avoid printing it all out, I made the PCAP data be in a hidden group, and had another element with an inputValueCalc expression reach into the PCAP packets to spot check a value in there.

I found that if you try to index farther than element 2263 it fails.

See testBinaryLongRunningForProfiling in daffodil-perf to reproduce. The schema it uses has 2263 wired into it for now.",[],2013-03-14 15:48:17+00:00,2013-05-15 19:28:43+00:00,2013-05-16 16:58:03+00:00,Closed,13113997,DAFFODIL-579
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Note from Mike:
contentLength is valid function when parsing. When parsing, contentLength requires us to measure how big the content region was. This is the combined length of the value region and the before padding and the after padding.

And with lengthKinds like delimited, we cannot know this number until after the parsing of the element finds the delimiter. 

(This has been separated from ticket DFDL-247)

Associated requirements:
 DFDL-23-127R
 DFDL-23-146R
 DFDL-23-142R
 DFDL-23-143R
 DFDL-23-144R",[],2013-03-14 15:47:54+00:00,2016-09-09 14:38:26+00:00,2017-01-23 22:14:32+00:00,Closed,13113996,DAFFODIL-578
Wish,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"Currently is a test attempts to use a file part together with either a text or byte part and exception is raised:

edu.illinois.ncsa.daffodil.exceptions.Abort: There can be only one documentPart of type file, and it must be the only documentPart.

It would be useful if tests could combine parts from these different types to create a single document.",[],2013-03-14 15:00:23+00:00,2018-09-07 15:33:19+00:00,2018-09-13 14:12:03+00:00,Closed,13113995,DAFFODIL-577
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I was running pcap tests with the CLI and I wanted to save the output to a file so I could copy it over to a TDML file. I added ""-o outfile"" to my command, not thinking about the fact that it came after the infile trailing argument. Depending on the file I was parsing I got one of the following errors:

org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; {color:red}Content is not allowed in prolog.{color}
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.loadXML(DaffodilXMLLoader.scala:435)
	at scala.xml.factory.XMLLoader$class.load(XMLLoader.scala:56)
........


org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; {color:red}Invalid byte 2 of 2-byte UTF-8 sequence.{color}
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
	at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.loadXML(DaffodilXMLLoader.scala:435)
	at scala.xml.factory.XMLLoader$class.load(XMLLoader.scala:56)


Would it be possible for the CLI to either acknowledge a flagless argument as an infile, so the arguments can be in any ordering, or to catch this kind of situation and alert the user that there cannot be arguments after the infile before trying to parse?",['beginner'],2013-03-14 12:23:40+00:00,2020-08-05 17:42:58+00:00,2020-08-05 17:42:58+00:00,Closed,13113994,DAFFODIL-576
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,This is a general ticket to keep track of any comments/suggestions for the CLI Interactive Debugging tool.,[],2013-03-13 14:06:47+00:00,2013-04-29 14:12:52+00:00,2013-04-29 19:33:09+00:00,Closed,13113993,DAFFODIL-575
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"If you specify a file that is not found (test file, schema file, etc.), you get the ""An unexpected exception occurred"" message. I'm assuming we want the code to actually handle this exception and provide the use with a simple message stating which file was not found, with no error trace.

My output:

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please help us fix this by opening a bug report at:

  https://opensource.ncsa.illinois.edu/jira/browse/DFDL

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


java.io.FileNotFoundException: daffodil-perf/dns.cap (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:97)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:328)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:514)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)


the command I used:

./daffodil-core/target/start parse -s daffodil-perf/src/test/resources/edu/illinois/ncsa/daffodil/pcap/pcap.dfdl.xsd daffodil-perf/dns.cap",[],2013-03-13 13:41:07+00:00,2013-04-17 13:37:18+00:00,2013-04-17 19:01:14+00:00,Closed,13113992,DAFFODIL-574
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"It should be up to the schema or EOF to determine what the bit Limit is, all of which is handled by daffodil.",[],2013-03-12 19:56:49+00:00,2013-05-21 18:01:49+00:00,2013-06-17 14:59:35+00:00,Closed,13113991,DAFFODIL-573
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Finish refactoring/updating LiteralNil code to have Static and Dynamic versions.,[],2013-03-12 19:18:30+00:00,2013-03-15 16:57:04+00:00,2013-03-18 19:27:23+00:00,Closed,13113990,DAFFODIL-572
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,test_long_chain_05 in TestNamespacesDebug.scala fails to run properly.  Appears to be due to allParentTerminatingMarkup not finding the Terminator property.,[],2013-03-12 18:58:33+00:00,2013-05-15 21:01:48+00:00,2013-06-04 14:36:55+00:00,Closed,13113989,DAFFODIL-571
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"To help with performance testing, the TDML runner needs to be able to specify a documentPart of type=""file"", for example, something like this:


{code:xml}
<tdml:document>
   <tdml:documentPart type=""file"">path/to/file/relative/to/resources/file.ext</tdml:documentPart>
</tdml:document>
{code}

Note that it is document part, so you should be able to combine other documentParts (i.e. more file parts, or byte/text parts)",[],2013-03-11 18:24:39+00:00,2013-03-11 22:24:27+00:00,2013-03-14 15:10:23+00:00,Closed,13113988,DAFFODIL-570
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"After building daffodil with sbt build, I ran sbt publish-local, which finished succesfully.  I then went into the daffodil-pack directory and attempted to run sbt pack and got the following stack trace:

$ sbt pack
[info] Loading project definition from C:\cygwin\home\jadams\dfdl\daffodil-pack\project
[info] Set current project to daffodil (in build file:/C:/cygwin/home/jadams/dfdl/daffodil-pack/)
java.lang.RuntimeException: Failed to pack file: C:\cygwin\home\jadams\dfdl\daffodil-pack\target\scala-2.9.2\pack\daffodil-0.7.0-SNAPSHOT.tar.bz2
        at scala.sys.package$.error(package.scala:27)
        at DaffodilBuild$$anonfun$packFiles$1.apply(build.scala:118)
        at DaffodilBuild$$anonfun$packFiles$1.apply(build.scala:86)
        at sbt.IO$.withTemporaryDirectory(IO.scala:281)
        at DaffodilBuild$.packFiles(build.scala:86)
        at DaffodilBuild$$anonfun$tarTaskSettings$1.apply(build.scala:20)
        at DaffodilBuild$$anonfun$tarTaskSettings$1.apply(build.scala:19)
        at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
        at sbt.Scoped$$anonfun$hf4$1.apply(Structure.scala:580)
        at scala.Function1$$anonfun$compose$1.apply(Function1.scala:49)
        at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
        at sbt.Scoped$Reduced$$anonfun$combine$1$$anonfun$apply$12.apply(Structure.scala:311)
        at sbt.$tilde$greater$$anonfun$$u2219$1.apply(TypeFunctions.scala:41)
        at sbt.std.Transform$$anon$5.work(System.scala:71)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:232)
        at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:18)
        at sbt.Execute.work(Execute.scala:238)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:232)
        at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:160)
        at sbt.CompletionService$$anon$2.call(CompletionService.scala:30)
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)
        at java.util.concurrent.FutureTask.run(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
        at java.lang.Thread.run(Unknown Source)
[error] (*:pack-tar) Failed to pack file: C:\cygwin\home\jadams\dfdl\daffodil-pack\target\scala-2.9.2\pack\daffodil-0.7.0-SNAPSHOT.tar.bz2
[error] Total time: 3 s, completed Mar 11, 2013 1:08:24 PM",[],2013-03-11 18:12:21+00:00,2013-09-04 19:56:25+00:00,2013-10-11 18:11:56+00:00,Closed,13113987,DAFFODIL-569
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"See http://oss.tresys.com/pipermail/daffodil-dev/2013-March/000400.html for the original discussion. 

Basically, if an explicit length is set on a complex element, and the sum of the children lengths is less than the complex length, the remaining data should be skipped. Currently, this does not happen and it continues parsing from where the child elements ended.",[],2013-03-11 16:57:23+00:00,2013-04-09 15:02:19+00:00,2013-04-19 19:19:04+00:00,Closed,13113986,DAFFODIL-568
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See also DFDL-238 which is end of parent for complex types. 

See also DFDL-566 which is a bug related to end-of-parent",[],2013-03-08 16:49:08+00:00,,2018-09-13 14:04:36+00:00,Open,13113985,DAFFODIL-567
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See testBinary (tdml test) and test_main_parse_unboundedBinary (scala CLI) in the following files:

# modified:   daffodil-core/src/test/scala-new/edu/illinois/ncsa/daffodil/MainTests.scala
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/facets/Facets.tdml
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/facets/testBinary.dfdl.xsd
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/facets/TestFacets.scala
# new file:   daffodil-core/src/test/resources/test/cli/unboundedBinary.dfdl.xsd",[],2013-03-08 16:38:50+00:00,2013-03-12 19:55:39+00:00,2013-03-13 18:28:43+00:00,Closed,13113984,DAFFODIL-566
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We recognize this option, but issue a not-yet-implemented SDE.",['ForInteroperabilityTest'],2013-03-07 04:29:12+00:00,2018-11-16 19:18:04+00:00,2021-05-20 20:01:20+00:00,Closed,13113983,DAFFODIL-565
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"CompiledExpressions - convertTypeString

When testing types using expressions the use of unsignedLong failed with a feature not yet implemented message.  This is due to the fact that certain return types (ulong is an example) are not implemented in XPath 1.0.

http://saxonica.com/documentation9.4-demo/html/xpath-api/jaxp-xpath/return-types.html

test_contentLength_0 is an example of this failure.

This need to be fixed and tests need to be created for this.",[],2013-03-06 15:00:38+00:00,2014-11-11 16:14:55+00:00,2014-12-03 22:19:26+00:00,Closed,13113982,DAFFODIL-564
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I have a base schema (with targetNamespace) that includes Schema A (no namespace). Schema A imports the namespace ""http://foo.com"" from Schema B, and defines the prefix ""foo"" for use with that namespace. 

In Schema B, I define two simpleTypes. Both have the ""xs:int"" restriction base; one is named ""string"" and the other is named ""stringy"". Schema A defines two elements: ""notAString"" and ""notAStringy"". They are of type ""foo:string"" and ""foo:stringy"", respectively. The base Schema defines ""root3"" and ""root4"". root3 is a sequence of notAString elements, and root4 is a sequence of notAStringy elements. 

tests:
namespace_ultra_uniqueness_03 (root3 as root)
namespace_ultra_uniqueness_04 (root4 as root)

The document in both tests is a non-numeric string and should fail.
However, the test that uses ""foo:string"" is passing. It seems to think ""foo:string"" is the same as ""xs:string"". Nowhere do I assign the prefix ""foo"" to ""http://www.w3.org/2001/XMLSchema"", so I'm not sure what's happening.

Tests are in the following files:

# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_11_nons.dfdl.xsd
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_11.dfdl.xsd
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_11.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
# modified:   daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespacesDebug.scala
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-03-04 15:38:13+00:00,2013-05-15 19:02:57+00:00,2013-05-28 17:40:24+00:00,Closed,13113981,DAFFODIL-563
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Major,"Attempting to import and use a predefined format schema causes the following error:

2013-03-01 15:07:43:265  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://www.ogf.org/dfdl/dfdl-1.0/examples/ from location file:/root/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/DFDLGeneralFormatDefinition.xsd.]
[info] - test_import_format_01 *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: Length of string must be exactly 1 character or be empty.() Schema context: element.e1. Location line 16 column 47 in file:/root/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/predefined_format.dfdl.xsd
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:488)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:375)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:327)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:199)
[info]   at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_import_format_01(TestNamespaces.scala:100)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)

I have created a couple of tests that attempt to use the format schema in daffodil-test/.../section06/namespaces/TestNamespaces.scala: test_import_format_01/02

They use the associated namespaces.tdml resources file and import DFDLGeneralFormatDefinition.xsd from daffodil-test/src/test/resources/.../section06/namespaces/",[],2013-03-01 20:14:03+00:00,2013-05-10 13:14:37+00:00,2013-05-10 13:14:41+00:00,Closed,13113980,DAFFODIL-562
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"It seems that the TDMLRunner Error should be the same sort of text that gets propagated through to the error message. However, you get an ""Invariant broken"" Abort message, though it does state ""invalid content type."" Since it is an abort, I'm opening a bug.

TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
TDMLRunner Error: cvc-complex-type.4: Attribute 'type' must appear on element 'tdml:documentPart'.
{color:red}[info] - test_lion_eater_ambiguity_01 *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. invalid content type.
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info] edu.illinois.ncsa.daffodil.tdml.DocumentPart.partContentType(TDMLRunner.scala:727)
[info] edu.illinois.ncsa.daffodil.tdml.DocumentPart.contentAsBits(TDMLRunner.scala:733)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info]   at edu.illinois.ncsa.daffodil.tdml.DocumentPart.partContentType(TDMLRunner.scala:727)
[info]   at edu.illinois.ncsa.daffodil.tdml.DocumentPart.contentAsBits(TDMLRunner.scala:733)
[info]   at edu.illinois.ncsa.daffodil.tdml.Document$$anonfun$31.apply(TDMLRunner.scala:692)
[info]   at edu.illinois.ncsa.daffodil.tdml.Document$$anonfun$31.apply(TDMLRunner.scala:692)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
{color}


I'm still working on the test so I probably won't have that pushed up, but this should be easily reproducible. If not, let me know and I'll get a test into the repo.",['beginnner'],2013-03-01 13:13:41+00:00,,2020-08-05 17:41:58+00:00,Open,13113979,DAFFODIL-561
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TDML runner only accepts one schema today. 

Our CLI allows the user to specify multiple schema files. The underlying API of course accepts multiple schema files.

So, the TDML runner should allow exercising this same capability without having to actually drive it from the CLI main.",[],2013-03-01 01:03:16+00:00,2014-10-09 06:25:29+00:00,2018-09-13 14:13:28+00:00,Closed,13113978,DAFFODIL-560
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The IBM test sequences_separated_14_04 leaves left over data. Our TDML runner fails the test because of this, but IBM's runner obviously accepts this.

We need a flag parameter to pass to the TDML runner to tell it not to fail on left-over-data. Then we can make this test work.",['ForInteroperabilityTest'],2013-02-28 16:21:50+00:00,2018-11-30 22:00:23+00:00,2021-05-20 20:01:45+00:00,Closed,13113977,DAFFODIL-559
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"IBM has attributes on elements like ibmDFDLext:something=""something"". We have to tolerate these.",[],2013-02-28 16:09:25+00:00,2013-03-20 14:49:45+00:00,2013-03-20 16:49:33+00:00,Closed,13113976,DAFFODIL-558
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"See page http://userguide.icu-project.org/locale#TOC-Examples section on ""Level 1 cannonicalization"" which we are not doing it seems. 

calendarLanguage=""en-US"" should be cannonicalized by ICU to ""en_US"", which it then should find it the list of available locales. 

This should fix IBM tests test_simple_type_properties_text_calendar_13_01 through _04, which are failing because they have ""en-US"".",[],2013-02-28 15:20:50+00:00,2013-04-01 12:55:09+00:00,2013-04-02 13:26:02+00:00,Closed,13113975,DAFFODIL-557
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The IBM tests test_length_delimited_12_01 and test_length_delimited_12_04 use date. They don't pass because for some reason the property textNumberRep is being required. 

This property should not be required for date/time/dateTime. Then I think these tests would pass.",[],2013-02-28 15:05:31+00:00,2013-04-01 12:54:49+00:00,2013-04-02 15:28:30+00:00,Closed,13113974,DAFFODIL-556
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Right now the code just calls Assert.notYetImplemented() for features like the fact that we don't support hexBinary type, ignoreCase='yes' and many other situations.

These should be changed to SDEs with a more appropriate standard message, as some of these features may remain unimplemented for quite a while.",[],2013-02-28 12:32:27+00:00,2013-02-28 16:32:38+00:00,2013-03-05 15:02:44+00:00,Closed,13113973,DAFFODIL-555
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a multi-file schema CLI test where a simpleType with a restriction is defined in one file, and an element of that simpleType that contains an assertion that uses checkConstraints is defined in another schema. That element is used in the base schema as part of a sequence. The data I provide to the test does not meet the Assertion. No data gets parsed and no error is provided to the user, just an empty dataset. This is the command I run:

echo ""unacceptable,hello"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_08.dfdl.xsd --root base2 -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_08.dfdl.xsd -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd


Since I was testing a combination of things here, I created a few tests to try and narrow down the issue:

In case it was an issue with spreading a pattern restriction/assertion across multiple schema files, I ran a CLI test against a pattern assertion that was contained in a single file:

echo ""unacceptable"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd --root bElem2

with the same result: <nothing></nothing>

I also created a conformance test (multifile_facets_05) that split the assertion across several files, and that test failed correctly with an Assertion failure message.

The test components are in the following files:
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_08.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_08.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-27 20:59:08+00:00,2013-03-16 23:21:36+00:00,2013-03-18 13:36:46+00:00,Closed,13113972,DAFFODIL-554
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I defined a comma separated sequence, and the global encoding in that schema
is ""US-ASCII"". This sequence consists of two elements, the first being a
binary string in utf-8, and the second being a binary string in utf-16be.
My test defines a document with the documentPart type set to ""byte"". I
specify the first element in utf-8, the delimiter in us-ascii, and the
second element in utf-16be. Currently I get this error:

{color:red}[info] - test_multi_encoding_02 *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. Runtime parsers should not throw exceptions: scala.MatchError: Some(DFDLCharReader at bitPos 0) (of class scala.Some)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info] edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:353)
[info] edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:346)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info]   at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:353)
[info]   at edu.illinois.ncsa.daffodil.processors.AltCompParser$$anonfun$parse$4.apply(Parser.scala:346)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at edu.illinois.ncsa.daffodil.processors.AltCompParser.parse(Parser.scala:346)
[info]   at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:132)
[info]   at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:319)
[info]   at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:317)
{color}

I created another test
(multi_encoding_4) that uses a sequence with lengthKind=""delimited"" and no
delimiters, with each element using a different encoding, as you mentioned
previously. This is the error I receive

{color:red}[info] - test_multi_encoding_04 *** FAILED ***
[info]   scala.MatchError: Some(DFDLCharReader at bitPos 0) (of class scala.Some)
[info]   at edu.illinois.ncsa.daffodil.processors.TextReader$class.getReader(Primitives.scala:2933)
[info]   at edu.illinois.ncsa.daffodil.processors.StringDelimitedEndOfData.getReader(Primitives.scala:576)
[info]   at edu.illinois.ncsa.daffodil.processors.StringDelimitedEndOfData$$anon$7$$anonfun$parse$8.apply(Primitives.scala:624)
[info]   at edu.illinois.ncsa.daffodil.processors.StringDelimitedEndOfData$$anon$7$$anonfun$parse$8.apply(Primitives.scala:591)
[info]   at edu.illinois.ncsa.daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:220)
[info]   at edu.illinois.ncsa.daffodil.processors.StringDelimitedEndOfData.withParseErrorThrowing(Primitives.scala:576)
[info]   at edu.illinois.ncsa.daffodil.processors.StringDelimitedEndOfData$$anon$7.parse(Primitives.scala:589)
[info]   at edu.illinois.ncsa.daffodil.processors.Parser.parse1(Parser.scala:132)
[info]   at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:319)
[info]   at edu.illinois.ncsa.daffodil.processors.SeqCompParser$$anonfun$parse$3.apply(Parser.scala:317)
{color}",[],2013-02-27 18:46:58+00:00,2013-05-17 14:45:26+00:00,2013-05-18 14:15:06+00:00,Closed,13113971,DAFFODIL-553
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Critical,This is in addition to the current schema resolution.,[],2013-02-27 18:13:02+00:00,2013-06-06 14:06:16+00:00,2013-06-06 14:06:43+00:00,Closed,13113970,DAFFODIL-552
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I found DFDL-219 for the implementation of variable width UTF-8 encoding. Is this going to be implemented for UTF-16 as well? currently when I try to set utf16Width to 16 in my schema, I get the following error:

Schema Definition Error: Property utf16Width='variable' not supported.

I can't find a ticket for this so I thought I would at least create one to bring attention to the issue.",[],2013-02-27 17:14:54+00:00,,2020-08-05 17:41:34+00:00,Open,13113969,DAFFODIL-551
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"on the commandline I include a Base Schema, Schema A, and Schema B. There's no import statement used in there, I just make sure the proper namespaces are defined and I can use objects from Schemas A and B in the Base Schema. But I also have Schema C, which I'm not including on the commandline, and it's being imported within Schema B.

I run the following command:
{{echo ""abcd,efgh,ijklm,ABCD"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_08.dfdl.xsd --root base2 -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_08.dfdl.xsd -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd}}

and this is the output:
2013-02-27 06:58:51:326  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2013-02-27 06:58:51:332  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Unable to import namespace http://c08.com from XML catalog(s) jar:file:/home/jchab/NGF/dfdl/daffodil-lib/target/scala-2.9.2/daffodil-lib_2.9.2-0.7.0-SNAPSHOT.jar!/daffodil-built-in-catalog.xml, ./xcatalog or schema location edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_08.dfdl.xsd. Searched these locations: 
 Schema context: import. Location in file:/home/jchab/NGF/dfdl/daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!   An unexpected exception occurred. This is a bug!   !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 Please help us fix this by opening a bug report at:

  https://opensource.ncsa.illinois.edu/jira/browse/DFDL

 Please include the following exception, the command you
 ran, and any input, schema, or tdml files used that led
 to this bug.


edu.illinois.ncsa.daffodil.exceptions.Abort: Usage error.
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:69)
edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:60)
edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:85)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:69)
	at edu.illinois.ncsa.daffodil.exceptions.Assert$.usage(Assert.scala:60)
	at edu.illinois.ncsa.daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:85)
	at edu.illinois.ncsa.daffodil.Main$.createProcessorFromSchemas(Main.scala:129)
	at edu.illinois.ncsa.daffodil.Main$.run(Main.scala:309)
	at edu.illinois.ncsa.daffodil.Main$.main(Main.scala:501)
	at edu.illinois.ncsa.daffodil.Main.main(Main.scala)




I've tried using a full path with my import, updating the classpath, etc. but still get the same error. These are the files I use:


A       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_08.dfdl.xsd
A       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_08.dfdl.xsd
A       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_08.dfdl.xsd
A       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_08.dfdl.xsd",[],2013-02-27 15:05:06+00:00,2013-03-15 19:15:01+00:00,2013-03-19 14:57:57+00:00,Closed,13113968,DAFFODIL-550
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I noticed that if you define a format with an error in a property (I.e.
calendarTimeZone=""notValid""), and you reference the format in an element
in another schema file, the Error traceback provides the element that uses
the format as the context, and the filename that contains the definition
of the element, not the definition of the incorrect format itself. 

Here is the Schema Definition Error (note that it's also not getting propagated
correctly to the 'red text' area of the output:

2013-02-26 13:03:29:997
edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Compilation
(DataProcessor) reports 1 compile errors/warnings.]
2013-02-26 13:03:29:997
edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Schema
Definition Error: Unknown timezone specified for dfdl:calendarTimeZone:
WrappedArray(5 o'clock somewhere) Schema context: element.date2. Location
in
file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu
/illinois/ncsa/daffodil/section06/namespaces/multi_B_06.dfdl.xsd]
[info] - test_combinations_02 *** FAILED ***
[info]   java.lang.Exception:
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRu
nner.scala:477)
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scal
a:372)
[info]   at
edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at
edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:1
98)
[info]   at
edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_combina
tions_02(TestNamespaces.scala:89)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:5
7)
[info]   at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImp
l.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod
.java:47)
[info]   ...

In the file specified we have the element declaration:


<xs:element name=""date2"" type=""xs:date"" dfdl:ref=""b06:dateTZtypo""
dfdl:calendarPattern=""MM-dd-yyyy"" dfdl:calendarPatternKind=""explicit""/>

But the offending formatting is in
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/names
paces/subfolder/multi_C_06_nons.dfdl.xsd:

   <dfdl:defineFormat name=""dateTZtypo"">
     <dfdl:format ref=""dateNoTZ"" calendarTimeZone=""5 o'clock somewhere""/>
   </dfdl:defineFormat>

It is returning a filename (though no line number), but
it's just the location of the element, not the formatting itself.",[],2013-02-26 21:21:16+00:00,2013-05-16 15:36:39+00:00,2013-05-17 15:13:38+00:00,Closed,13113967,DAFFODIL-549
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"In windows command prompt, the width is restricted to 80 characters. The current usage length is greater than 80, so it makes it very difficult to read on limited terminals. We must ensure that all usage information is restricted to less than 80 characters.",[],2013-02-26 14:28:58+00:00,2013-04-17 13:36:24+00:00,2013-04-19 15:04:52+00:00,Closed,13113966,DAFFODIL-548
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"When in windows, if an error occurs, it tries to print [daffodil] with the color red. This only works in linux. Easiest to just disable to the color. This requires a overriding a function in the scallop configuration.",[],2013-02-26 14:27:31+00:00,2013-04-01 12:53:17+00:00,2013-04-03 20:52:27+00:00,Closed,13113965,DAFFODIL-547
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Critical,"So far I have only verified that this is an issue when you have the following setup:

named root element -> sequence -> element with no name

In a test, if you specify the named root element as your root, it seems that the test is skipped. I tried debug mode but I still don't see any output for the test, and it isn't included in the test totals from the TDML runner. I first noticed this during multifile schema testing, because I was providing the element with a dfdl:ref and had gotten it confused with the ref property, thinking I didn't need to provide a name. I have since fixed the tests that was experiencing this issue, but if you need me to I can create another one and push it up for you to take a look.",[],2013-02-26 13:46:04+00:00,2013-04-26 16:16:17+00:00,2013-04-26 18:46:24+00:00,Closed,13113964,DAFFODIL-546
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I was trying to throw together a format definition without using one as a reference. I had a feeling it was incorrect, but thought I'd try running a test against it anyway. I get a few standard errors such as ""separator is not allowed to appear in element 'dfdl:defineFormat'"" because I incorrectly combined my definition tag with my format tag. However, I'm not sure if this is the cause of the rest of the errors, or if it has something to do with the way the schemas are set up. This is the error I see:


2013-02-25 09:46:10:967  edu.illinois.ncsa.daffodil.dsom.Include Info [Included schema from file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_05_nons.dfdl.xsd into namespace No_Namespace.]
2013-02-25 09:46:11:057  edu.illinois.ncsa.daffodil.dsom.Include Info [Included schema from file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_05_nons.dfdl.xsd into namespace No_Namespace.]
2013-02-25 09:46:11:205  edu.illinois.ncsa.daffodil.dsom.Include Info [Included schema from file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_05_nons.dfdl.xsd into namespace No_Namespace.]
Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 86; cvc-complex-type.3.2.2: Attribute 'separator' is not allowed to appear in element 'dfdl:defineFormat'.) Schema context: SchemaSet. Location in file:SchemaSet
Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 86; cvc-complex-type.3.2.2: Attribute 'initiator' is not allowed to appear in element 'dfdl:defineFormat'.) Schema context: SchemaSet. Location in file:SchemaSet
Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 8; columnNumber: 86; cvc-complex-type.3.2.2: Attribute 'terminator' is not allowed to appear in element 'dfdl:defineFormat'.) Schema context: SchemaSet. Location in file:SchemaSet
2013-02-25 09:46:12:595  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [schemaDoc::pipes@@formatAnnotation has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
Exception in OOLAG Value 'gram' while computing the name of an OOLAG Value.
2013-02-25 09:46:12:625  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [???@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
Exception in OOLAG Value 'gram' while computing the name of an OOLAG Value.
2013-02-25 09:46:12:629  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [???@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2::complexType::sequence@@Prod(sequenceContent)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2::complexType::sequence@@Prod(modelGroupSyntax)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2::complexType::sequence@@Prod(termContentBody)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(mainGrammar)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(complexContent)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(scalarComplexContent)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(scalarDefaultableContent)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(scalarDefaultablePhysical)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
2013-02-25 09:46:12:630  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.baseSeq2@@Prod(document)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)).]
{color:red}[info] - test_no_namespace_03 *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: should be no fall through to this case
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
[info] edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.impossibleCase(Assert.scala:100)
[info]   at edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:461)
[info]   at edu.illinois.ncsa.daffodil.dsom.DFDLDefineFormat$$anonfun$formatAnnotation_$1.apply(DFDLAnnotation.scala:458)
[info]   at edu.illinois.ncsa.daffodil.dsom.OOLAG$LV.lazyBody(OOLAG.scala:289)
[info]   at edu.illinois.ncsa.daffodil.dsom.OOLAG$OOLAGValue$$anonfun$1.apply(OOLAG.scala:193)
[info]   at edu.illinois.ncsa.daffodil.dsom.OOLAG$OOLAGHost$class.circularityDetector(OOLAG.scala:110)
[info]   at edu.illinois.ncsa.daffodil.dsom.DFDLAnnotation.circularityDetector(DFDLAnnotation.scala:58)
[info]   at edu.illinois.ncsa.daffodil.dsom.OOLAG$OOLAGValue.valueAsAny(OOLAG.scala:183)
{color}

The test (no_namespace_03) is in the following files:

# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_05_nons.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_05_nons.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_05_nons.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
# modified:   daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespacesDebug.scala
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-25 17:56:10+00:00,2013-09-11 15:27:25+00:00,2013-09-11 15:28:16+00:00,Closed,13113963,DAFFODIL-545
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I have 3 schemas, none of which have target namespaces. In Schema C I define an element ""vagueElem"" Schema B includes Schema C, and base Schema includes Schema B. Base Schema also includes Schema A, which defines its own element named ""valueElem"". This base schema defines a pipe-separated sequence of an element reference to ""vagueElem""

I get the following error when I attempt to use this sequence as a root:

{color:red}
[info] - test_no_namespace_02 *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invariant broken. should only be a SchemaComponent or a DFDLDefiningAnnotation
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info] edu.illinois.ncsa.daffodil.dsom.Schema$$anonfun$noneOrOne$1.apply(SchemaComponent.scala:1154)
[info] edu.illinois.ncsa.daffodil.dsom.Schema$$anonfun$noneOrOne$1.apply(SchemaComponent.scala:1150)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.invariantFailed(Assert.scala:122)
[info]   at edu.illinois.ncsa.daffodil.dsom.Schema$$anonfun$noneOrOne$1.apply(SchemaComponent.scala:1154)
[info]   at edu.illinois.ncsa.daffodil.dsom.Schema$$anonfun$noneOrOne$1.apply(SchemaComponent.scala:1150)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at scala.collection.TraversableLike$class.map(TraversableLike.scala:233)
[info]   at scala.collection.immutable.List.map(List.scala:76)
{color}

The test is no_namespace_02 and uses the following files:

# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_05_nons.dfdl.xsd
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_05_nons.dfdl.xsd
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_05_nons.dfdl.xsd
# new file:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_05_nons.dfdl.xsd
# modified:   daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
# modified:   daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespacesDebug.scala
# modified:   daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-25 17:13:35+00:00,2014-12-17 14:04:47+00:00,2015-01-20 17:56:47+00:00,Closed,13113962,DAFFODIL-544
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Daffodil should ignore attributes in namespaces that it doesn't know anything about. That is a standard and accepted way to add additional information to a schema.

- Daffodil should ignore attributes that it doesn't know about - allows for forwards compatibility
with new DFDL attributes
QUESTION:  Is it a SDE if DFDL contains ANY attribute that isn't recognized, or just a DFDL property
in the wrong place?
> daffodil.bat parse -s AddressDelimited.xsd address.txt
...
Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 6; col
umnNumber: 77; cvc-complex-type.3.2.2: Attribute 'ibmSchExtn:docRoot' is not allowed to appear
in element 'xsd:element'.) Schema context: SchemaSet. Location in file:SchemaSet",[],2013-02-25 15:09:48+00:00,2013-03-27 19:43:31+00:00,2013-05-29 12:28:18+00:00,Closed,13113961,DAFFODIL-543
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created test ""namespace_conflict_01"" that uses multiple schemas that all use the namespace prefix ""foo"". I get the following error and cannot figure out where it's coming from:

[info] TestNamespaces:
2013-02-22 11:12:46:970  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://a04.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_04_nons.dfdl.xsd.]
2013-02-22 11:12:47:100  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://b04.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_04_nons.dfdl.xsd.]
2013-02-22 11:12:47:251  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://c04.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_04_nons.dfdl.xsd.]
2013-02-22 11:12:47:878  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [schemaDoc@@annotationObjs has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: Invalid dfdl annotation found!
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)).]
2013-02-22 11:12:47:879  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [schemaDoc@@formatAnnotation has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: Invalid dfdl annotation found!
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)).]
2013-02-22 11:12:47:887  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.aSeq::complexType::sequence::element.ref.bSeq::element.bSeq::complexType::sequence::element.ref.cElem::element.cElem@@Prod(scalarDefaultable)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: Invalid dfdl annotation found!
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)).]
2013-02-22 11:12:47:887  edu.illinois.ncsa.daffodil.dsom.OOLAG$LV Error [element.aSeq::complexType::sequence::element.ref.bSeq::element.bSeq::complexType::sequence::element.ref.cElem::element.cElem@@Prod(document)@@gram has no value due to edu.illinois.ncsa.daffodil.exceptions.Abort: Invalid dfdl annotation found!
edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)).]
{color:red}[info] - test_namespace_conflict_01 *** FAILED ***
[info]   edu.illinois.ncsa.daffodil.exceptions.Abort: Invalid dfdl annotation found!
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info] edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
[info] edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
[info] edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.abort(Assert.scala:85)
[info]   at edu.illinois.ncsa.daffodil.exceptions.Assert$.impossible(Assert.scala:89)
[info]   at edu.illinois.ncsa.daffodil.dsom.SchemaDocument.annotationFactory(SchemaComponent.scala:1318)
[info]   at edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:444)
[info]   at edu.illinois.ncsa.daffodil.dsom.AnnotatedMixin$$anonfun$annotationObjs_$1$$anonfun$apply$5$$anonfun$12.apply(SchemaComponent.scala:442)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:233)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at scala.collection.TraversableLike$class.map(TraversableLike.scala:233)
{color}

The test is in the following files:

       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_04.dfdl.xsd
       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_04.dfdl.xsd
       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_04.dfdl.xsd
       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/multi_base_04.dfdl.xsd
       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
       daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-24 23:04:31+00:00,2013-03-15 21:58:14+00:00,2013-03-18 14:58:02+00:00,Closed,13113960,DAFFODIL-542
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Currently the TDML runner's comparison feature for errors uses the entire backtrace information. So if your test is looking for an error that contains ""lengthKind"", but your test filename is ""lengthKind.tdml"", it will match and the test will erroneously pass. As Mike mentioned in our e-mail chain, the TDML runner ""should remove all the file-name things, leaving only the actual error message content.""",[],2013-02-21 20:43:24+00:00,,2018-09-13 14:04:32+00:00,Open,13113959,DAFFODIL-541
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I have this very basic element definition:

<xs:element name=""elem01"" dfdl:lengthKind=""implicit"" dfdl:length=""5"" type=""xs:int""/>

When I specify this as the root of my test, I get the following error:

[info] - test_implicit_with_len *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: MaxLength was asked
for when isSimpleType(true) and isPrimitiveType(true) Schema context:
element.elem01. Location line 69 column 89 in
file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu
/illinois/ncsa/daffodil/section12/lengthKind/implicit.tdml
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRu
nner.scala:473)
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scal
a:372)
[info]   at
edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at
edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:1
98)
[info]   at
edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindImplicit.test
_implicit_with_len(TestLengthKindImplicit.scala:55)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:5
7)
[info]   at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImp
l.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod
.java:47)
[info]   ...
[info] - test_nested_seq_01

however, maxLength can only be specified for xs:string and xs:hexBinary, and when I provide values for min and maxLength, I get errors that express such:

[info] - test_implicit_with_len *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: MaxLength facet can
only be applied to string or hexBinary.() Schema context: element.elem01.
Location line 69 column 74 in
file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu
/illinois/ncsa/daffodil/section12/lengthKind/implicit.tdml
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRu
nner.scala:473)
[info]   at
edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scal
a:372)
[info]   at
edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at
edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:1
98)
[info]   at
edu.illinois.ncsa.daffodil.section12.lengthKind.TestLengthKindImplicit.test
_implicit_with_len(TestLengthKindImplicit.scala:55)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:5
7)
[info]   at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImp
l.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod
.java:47)

The test is implicit_with_len and it can be found in the following files:

M       daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section12/lengthKind/implicit.tdml
A       daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindImplicitDebug.scala
M       daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section12/lengthKind/TestLengthKindImplicit.scala",[],2013-02-21 20:17:25+00:00,2013-06-19 16:48:10+00:00,2013-06-19 18:53:29+00:00,Closed,13113958,DAFFODIL-540
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-02-21 19:36:04+00:00,2013-02-26 14:01:13+00:00,2013-03-05 18:18:14+00:00,Closed,13113957,DAFFODIL-539
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-02-21 18:46:02+00:00,2013-04-18 15:12:28+00:00,2013-04-18 15:24:20+00:00,Closed,13113956,DAFFODIL-538
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"{color:gray}2013-02-21 07:28:36:914  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://a03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_A_03.dfdl.xsd.]
Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 13; columnNumber: 81; cvc-complex-type.3.2.2: Attribute 'textNumberJustification' is not allowed to appear in element 'xs:element'.) Schema context: SchemaSet. Location in file:SchemaSet
2013-02-21 07:28:36:993  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://b03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_B_03.dfdl.xsd.]
2013-02-21 07:28:37:020  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://c03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_03.dfdl.xsd.]
2013-02-21 07:28:37:061  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://d03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_D_03.dfdl.xsd.]
2013-02-21 07:28:37:090  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://e03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_E_03.dfdl.xsd.]
2013-02-21 07:28:37:132  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://f03.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_F_03.dfdl.xsd.]
2013-02-21 07:28:37:196  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2013-02-21 07:28:37:197  edu.illinois.ncsa.daffodil.compiler.Compiler Error [Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 13; columnNumber: 81; cvc-complex-type.3.2.2: Attribute 'textNumberJustification' is not allowed to appear in element 'xs:element'.) Schema context: SchemaSet. Location in file:SchemaSet]{color}
{color:red}[info] - test_testing *** FAILED ***
[info]   java.lang.Exception: Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 13; columnNumber: 81; cvc-complex-type.3.2.2: Attribute 'textNumberJustification' is not allowed to appear in element 'xs:element'.) Schema context: SchemaSet. Location in file:SchemaSet
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:473)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_testing(TestNamespaces.scala:72)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47){color}

There seem to be a few issues with this error message, as you outline in your e-mail.

The test ""testing"" is in the following location:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-21 15:44:55+00:00,2013-03-08 18:43:44+00:00,2017-07-26 16:28:59+00:00,Closed,13113955,DAFFODIL-537
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-02-21 13:37:29+00:00,2013-02-26 14:00:39+00:00,2013-02-28 20:40:46+00:00,Closed,13113954,DAFFODIL-536
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When creating the multi-file schema tests, I was working through a failing test, filling in properties as the runner complained that they were missing. I got to a point where this was my error:

{color:gray}
2013-02-21 04:51:50:104  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Compilation (DataProcessor) reports 1 compile errors/warnings.]
2013-02-21 04:51:50:107  edu.illinois.ncsa.daffodil.compiler.ProcessorFactory Error [Schema Definition Error: Property ignoreCase is not defined.
Searched these locations: List(element.super_seq::complexType::sequence::element.ref.seq::element.seq::complexType::sequence::element.ref.inty::dfdl:element, element.super_seq::complexType::sequence::element.ref.seq::element.seq::complexType::sequence::element.ref.inty::element.inty::dfdl:element)
 Searched these default locations: List(). Schema context: element.inty. Location in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section06/namespaces/multi_C_02.dfdl.xsd]{color}
{color:red}[info] - test_double_nesting_01 *** FAILED ***
[info]   java.lang.Exception:
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:477)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_double_nesting_01(TestNamespaces.scala:67)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47){color}

Note that the error listed in gray ""Schema Definition Error: Property ignoreCase is not defined"" is not propagated through to the red error text, and instead an empty exception is displayed. I have only seen this issue with the ignoreCase property. See test double_nesting_01 in 
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section06/namespaces/TestNamespaces.scala",[],2013-02-21 12:58:42+00:00,2013-05-20 19:04:05+00:00,2013-05-20 19:04:09+00:00,Closed,13113953,DAFFODIL-535
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In IBM's DFDL product, to use the predefined reusable GeneralFormat, one imports a particular namespace and a particular schemaLocation.

We should make our implementation use the exact same paths and exact same namespaces so that users can move schemas easily, and the include/imports will be portable.",[],2013-02-20 20:06:23+00:00,2013-03-15 20:24:11+00:00,2013-03-18 18:04:17+00:00,Closed,13113952,DAFFODIL-534
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Currently, if you specify an empty infoset as the expected result (e.g. <tdml:infoset><tdml:dfdlInfoset/></tdml:infoset>), you get the following exception:

ois/ncsa/daffodil/section06/namespaces/multi_B_01.dfdl.xsd.]
[info] - test_multifile_choice_02b *** FAILED ***
[info]   java.lang.IndexOutOfBoundsException: 0
[info]   at scala.collection.LinearSeqOptimized$class.apply(LinearSeqOptimized.scala:51)
[info]   at scala.collection.immutable.List.apply(List.scala:76)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLInfoset.contents(TDMLRunner.scala:893)
[info]   at edu.illinois.ncsa.daffodil.tdml.Infoset.contents(TDMLRunner.scala:888)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.verifyParseInfoset(TDMLRunner.scala:408)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:494)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section06.namespaces.TestNamespaces.test_multifile_choice_02b(TestNamespaces.scala:59)

I think the TDML runner should just compare the proper result with the empty set and provide this to the user so they can adjust the expected infoset accordingly, instead of allowing them to think there is an issue with the parsing.",[],2013-02-20 19:00:49+00:00,,2018-09-13 14:03:53+00:00,Open,13113951,DAFFODIL-533
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,Make sure we have a demo ready for April 1st,[],2013-02-20 16:30:07+00:00,2013-04-11 12:38:17+00:00,2013-04-11 12:38:20+00:00,Closed,13113950,DAFFODIL-532
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-02-20 16:19:15+00:00,2013-02-26 14:01:29+00:00,2013-03-08 13:30:01+00:00,Closed,13113949,DAFFODIL-531
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"As you expected, a cyclical import was not caught and results in a loop of the following output:


2013-02-20 06:54:43:665  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://stepSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_step.dfdl.xsd.]
2013-02-20 06:54:43:701  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://baseSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd.]
2013-02-20 06:54:43:736  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://stepSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_step.dfdl.xsd.]
2013-02-20 06:54:43:766  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://baseSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd.]
2013-02-20 06:54:43:800  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://stepSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_step.dfdl.xsd.]
2013-02-20 06:54:43:828  edu.illinois.ncsa.daffodil.dsom.Import Info [Imported Schema Namespace: http://baseSchema.com from location file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/debug-classes/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd.]

etc....

The schemas are 
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_base.dfdl.xsd
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/cycle_step.dfdl.xsd

and the test (multifile_cyclical) is found in:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/namespaces/namespaces.tdml",[],2013-02-20 15:04:45+00:00,2015-02-06 15:14:03+00:00,2015-03-13 19:55:34+00:00,Closed,13113948,DAFFODIL-530
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"""Schema Definition Error: dfdl:testBit $data must be a an Integer that exists within the value-space of byte.""

to be clear for the sake of the bug:
""a an Integer"" should be ""an Integer""",[],2013-02-16 14:14:17+00:00,2013-02-19 22:49:55+00:00,2013-02-20 13:30:01+00:00,Closed,13113947,DAFFODIL-529
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This is a separate ticket for issues already discussed in DFDL-247 - function library:

the stringLiteralFromString function seems to only work for some entities. I think I might just be having issues with encoding or something similar, which is making the data parse as some generic character. For example, my document consists of the following bytes:

30 04 31 09 32 0a 33 0b 34

which is hex for the following:
0%EOT;1%HT;2%LF;3%VT;4

but it parses as:
<str>0���1 2 3���4</str>
<literal>0���1%HT;2%LF;3���4</literal>

it seems that something is just getting lost in the steps.

Taylor Wise added a comment - 11/Feb/13 6:48 AM
stringLiteralFromString I believe is just supposed to take a regular string, find any characters that resemble a DFDLCharEntity and replace them with that entity. With the exception that a space (u0020) is replaced with %SP;.
testBit_0, have these tests been pushed? It's likely that whatever $data is evaluating to isn't an Integer. I'll have to take a closer look at this test and talk with Mike about it.

Mike Beckerle added a comment - 11/Feb/13 11:45 AM
You said ""any character that resemble a DFDLCharEntity"" ?? To me this is ambiguous. Let's use examples:
Suppose the string argument is these three unicode character codes U+0000 U+0020 U+002D
then stringLiteralFromString should return a 10-character long string containing: ""%NUL;%SP;-""
(Hex 0x2D is a hyphen/minus-sign)

Jessie Chab added a comment - 13/Feb/13 12:15 PM
similar to the issue above, I'm having trouble with the containsEntity function. I've created a few tests that I would expect to return 'true', but do not. Please see containsEntity_2, 3, and 4 in the following files:
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section23/dfdl_functions/Functions.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressionsDebug.scala
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section23/dfdl_expressions/TestDFDLExpressions.scala",[],2013-02-16 13:53:44+00:00,2013-02-20 20:38:45+00:00,2013-02-20 20:39:02+00:00,Closed,13113946,DAFFODIL-528
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Please see test totalDigits05b
If you don't explicitly state a restriction base OR a type on the element, it seems to default to something, and causes a really strange error:
[info] - test_totalDigits05b *** FAILED ***
[info] java.util.NoSuchElementException: next on empty iterator
[info] at scala.collection.Iterator$$anon$3.next(Iterator.scala:27)
[info] at scala.collection.Iterator$$anon$3.next(Iterator.scala:25)
[info] at scala.collection.LinearSeqLike$$anon$1.next(LinearSeqLike.scala:56)
[info] at scala.collection.IterableLike$class.head(IterableLike.scala:90)
[info] at scala.xml.NodeSeq.head(NodeSeq.scala:43)
[info] at daffodil.dsom.SimpleTypeDefBase.restrictionBase(Types.scala:698)
[info] at daffodil.dsom.SimpleTypeDefBase.baseTypeQName(Types.scala:731)
[info] at daffodil.dsom.SimpleTypeDefBase.myPrimitiveType(Types.scala:702)
[info] at daffodil.dsom.SimpleTypeDefBase.myBaseType(Types.scala:734)
[info] at daffodil.dsom.SimpleTypeDefBase.myBaseTypeList(Types.scala:746)
if you add a type the test passes (see totalDigits05)

Taylor, I stumbled upon this while creating tests for facet validation. If it's not a ticket for you feel free to reassign.",[],2013-02-15 20:28:03+00:00,2013-02-19 22:49:07+00:00,2013-02-20 18:56:47+00:00,Closed,13113945,DAFFODIL-527
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"[info]   java.lang.Exception: Schema Definition Error: MinLength facet must be <= MaxLength faet.() Schema context: element.e6. Location line 3099 column 80 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/facets/Facets.tdml

""faet"" instead of facet.",[],2013-02-15 17:36:54+00:00,2013-02-19 22:49:28+00:00,2013-02-20 13:06:22+00:00,Closed,13113944,DAFFODIL-526
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"test minMaxInEx08 fails as expected, with the error ""MinExclusive(10) must be less than or equal to MaxInclusive(2)""

However, minMaxInEx08b is the exact same test, except minInclusive is used instead of minExclusive, and the test fails with the following:


[info] - test_minMaxInEx08b *** FAILED ***
[info]   java.lang.Exception: Did not find diagnostic message ""Schema Definition Error"" in any of the actual diagnostic messages: 
[info] Parse Error: Assertion failed. Assertion failed for dfdl:checkConstraints(.)
[info] Schema context: element.mImE_e6b Location line 4956 column 61 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/facets/Facets.tdml
[info] Data location was preceding byte 5
[info] UTF-8 text starting at byte 0 is: (3,4,5)
[info] Data (hex) starting at byte 0 is: (0x332C342C35)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:349)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:343)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:342)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:456)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:373)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section05.facets.TestFacets.test_minMaxInEx08b(TestFacets.scala:152)",[],2013-02-14 20:23:00+00:00,2013-02-19 22:08:59+00:00,2013-02-20 13:13:27+00:00,Closed,13113943,DAFFODIL-525
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I expect minMaxInEx10 to get an error similar to the error seen in checkMaxInclusive_Fail_MaxInt, except for the short datatype instead of int. I do get this error but in the following form, which does not correctly match the expected error in my test:
[info] - test_minMaxInEx10 *** FAILED ***
[info] daffodil.exceptions.Abort: Invariant broken. OOLAGException's like daffodil.dsom.OOLAG$ErrorAlreadyHandled: Schema Definition Error: maxInclusive facet value (33000) was found to be outside of Short range. Schema context: element.mImE_e8::simpleType.ex:mImE_st8::simpleType.mImE_st8. Location line 4727 column 36 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/daffodil/section05/facets/Facets.tdml are compiler stuff. This is runtime.
[info] daffodil.exceptions.Assert$.abort(Assert.scala:52)
[info] daffodil.exceptions.Assert$.invariantFailed(Assert.scala:89)
[info] daffodil.processors.DataProcessor$$anon$1.liftedTree1$1(Runtime.scala:102)
[info] daffodil.processors.DataProcessor$$anon$1.<init>(Runtime.scala:79)
[info] at daffodil.exceptions.Assert$.abort(Assert.scala:52)
[info] at daffodil.exceptions.Assert$.invariantFailed(Assert.scala:89)
[info] at daffodil.processors.DataProcessor$$anon$1.liftedTree1$1(Runtime.scala:102)
[info] at daffodil.processors.DataProcessor$$anon$1.<init>(Runtime.scala:79)
[info] at daffodil.processors.DataProcessor.parse(Runtime.scala:76)
[info] at daffodil.processors.DataProcessor.parse(Runtime.scala:72)
[info] at daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:409)
[info] at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:340)
[info] at daffodil.tdml.TestCase.run(TDMLRunner.scala:293)
[info] at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:165)

minMaxInEx10 in the following files:
daffodil-test/src/test/scala/edu/illinois/ncsa/daffodil/section05/facets/TestFacets.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/facets/Facets.tdml",[],2013-02-14 19:25:34+00:00,2013-03-29 23:49:00+00:00,2013-04-02 16:21:41+00:00,Closed,13113942,DAFFODIL-524
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I'm having trouble formulating min/max/in/exclusive values for xs:time. It seems to want some form of the timezone, and I've tried several - none of which work.
I keep getting errors that are a variation of the following:

[info] Schema Definition Error: Failed to parse (32400000) to Time (HH:mm:ssZZZZZ) Schema context: element.mImE_e14::simpleType.ex:mImE_st14. Location line 4992 column 22 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/daffodil/section05/facets/Facets.tdml
when I specify ""09:00:00""
[info] Schema Definition Error: Failed to parse (28800000) to Time (HH:mm:ssZZZZZ) Schema context: element.mImE_e14::simpleType.ex:mImE_st14. Location line 4992 column 22 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/daffodil/section05/facets/Facets.tdml
with ""09:00:00+01:00""
etc.
I'm not entirely sure what it's looking for or where it's getting the values in parentheses.

These tests are:
minMaxInExdateTime01
minMaxInExdateTime02
minMaxInExdateTime03
minMaxInExdateTime04
minMaxInExdateTime05
minMaxInExdateTime06",[],2013-02-14 19:21:58+00:00,2013-02-19 22:48:41+00:00,2013-02-20 13:25:50+00:00,Closed,13113941,DAFFODIL-523
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"This is a bug I created based on a comment I left on DFDL-387:

The following tests say they're failing with Leftover data, but I'm expecting an assertion failure, since at least one of the elements in each array is less/more than min/max, respectively.
minMaxInEx02
minMaxInEx04
minMaxInEx08
minMaxInEx14

The tests are in:
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/facets/TestFacetsDebug.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/facets/Facets.tdml",[],2013-02-14 18:09:04+00:00,2013-02-14 19:10:59+00:00,2013-02-14 20:27:18+00:00,Closed,13113940,DAFFODIL-522
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"DFDL-13-141R:

Property Name: calendarObserveDST Description: Enum Valid values are 'yes', 'no'. Whether the time zone given in dfdl:calendarTimeZone observes daylight savings time. Annotation: dfdl:element, dfdl:simpleType",[],2013-02-14 16:05:42+00:00,,2018-09-13 14:11:12+00:00,Open,13113939,DAFFODIL-521
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created three calendarLanguage tests, one that specifies German (de-1996), one that specifies Spanish (es-MX), and even one that just specifies English (en-GB). They all fail and throw empty exceptions. The tests are in:

daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala",[],2013-02-14 15:40:16+00:00,2013-03-12 18:28:06+00:00,2013-03-12 18:46:12+00:00,Closed,13113938,DAFFODIL-520
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"per req DFDL-13-144R:

Property Name: calendarCenturyStart Description: Non-negative Integer. Valid values 0 to 99. This property determines on parsing how two-digit years are interpreted. Specify the two digits that start a 100-year window that contains the current year. For example, if you specify 89, and the current year is 2006, all two-digit dates are interpreted as being in the range 1989 to 2088. A two-digit year less than 89 will be interpreted as 20nn and a two-digit year more than or equal to 89 will be treated as 19nn. Annotation: dfdl:element, dfdl:simpleType

currently we have tests dateCalendarCenturyStart and dateCalendarCenturyStart2 in:

daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala
daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml

that are dependent on the completion of this feature.",[],2013-02-14 15:22:15+00:00,,2018-09-13 14:11:11+00:00,Open,13113937,DAFFODIL-519
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"in test datePattern02, I specified a calendarPattern of ""dd MM yyyy, HH:mm:ss"" on an element of type xs:date.

I get the following error:


[info] - test_datePattern02 *** FAILED ***
[info]   java.lang.Exception:
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:477)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.test_datePattern02(TestSimpleTypes.scala:52)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)",[],2013-02-13 20:51:27+00:00,2013-03-12 18:36:31+00:00,2013-03-13 13:05:46+00:00,Closed,13113936,DAFFODIL-518
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Mentioned this in DFDL-376 and Mike confirmed that it is a bug.
If you use an unsupported construct (not supported in both Java 7 and ICU4J) in a regular expression, it should result in an SDE. However, you get something similar to the following:

[info] - test_regexCompatFail *** FAILED ***
[info] java.util.regex.PatternSyntaxException: Illegal/unsupported escape sequence near index 5
[info] (?s)\U0010ffff
[info] ^
...

See regexCompatFail",[],2013-02-13 19:29:13+00:00,,2020-08-05 17:30:55+00:00,Open,13113935,DAFFODIL-517
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I ran the following command a total of 15 times:

echo ""118*Ridgewood Circle*Rochester*NY"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section06/entities/charClassEntities.dfdl.xsd -s daffodil-test/src/test/resources/edu/illinois/ncsa/daffodil/section07/defineFormat/defineFormat.dfdl.xsd

6 of the 15 times I got the following:
<nothing></nothing>

The other 9 times I got the expected result:
<address xmlns=""No_Namespace"">
  <houseNumber>118</houseNumber>
  <street>Ridgewood Circle</street>
  <city>Rochester</city>
  <state>NY </state>
</address>

I haven't checked to see if this occurs before the update to clean up the results, so I don't know if it's related. The output looks great though when it's correct :)",[],2013-02-13 18:38:59+00:00,2013-03-25 19:20:16+00:00,2013-03-28 18:20:23+00:00,Closed,13113934,DAFFODIL-516
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, if you create this scenario, you get the following error:


[info] - test_epochFillIn2 *** FAILED ***
[info]   java.lang.Exception: Parse Error: Convert to Time (for xs:time): Cannot parse calendar from empty string
[info] Schema context: element.time23 Location line 2183 column 169 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu/illinois/ncsa/daffodil/section05/simple_types/SimpleTypes.tdml
[info] Data location was preceding byte 0
[info] UTF-8 text starting at byte 0 is: ()
[info] Data (hex) starting at byte 0 is: (0x)

However, if you create a calendar pattern of ""."" and your document is ""."", the result is epoch time. This should be the result for the empty string as well.


see tests:
epochFillIn2
dateEpochFillIn2
in: 
daffodil-test/src/test/scala-debug/edu/illinois/ncsa/daffodil/section05/simple_types/TestSimpleTypes2.scala",[],2013-02-13 14:16:35+00:00,2013-04-01 12:54:19+00:00,2013-04-02 15:57:06+00:00,Closed,13113933,DAFFODIL-515
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the updated Spec: If dfdl:representation is text, any characters in the pattern that are not in the ranges of ['a'..'z'] and ['A'..'Z'] will be treated as quoted text.

If you use a '&' in the format, you get the following error:

[info] - test_timeSymbols *** FAILED ***
[info]   org.xml.sax.SAXParseException: The entity name must immediately follow the '&' in the entity reference.
[info]   at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
[info]   at org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
[info]   at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.loadXML(DaffodilXMLLoader.scala:420)
[info]   at scala.xml.factory.XMLLoader$class.load(XMLLoader.scala:56)
[info]   at edu.illinois.ncsa.daffodil.xml.DaffodilXMLLoader.load(DaffodilXMLLoader.scala:405)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.<init>(TDMLRunner.scala:148)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.runner(TestSimpleTypes.scala:50)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.test_timeSymbols(TestSimpleTypes.scala:52)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)

I tried using quotes and a second '&' to escape the symbol, but could not figure out a way to enter a literal &. If this is the correct behavior there should probably be a change to the spec.",[],2013-02-13 13:53:43+00:00,2013-02-13 14:06:55+00:00,2013-02-13 14:06:59+00:00,Closed,13113932,DAFFODIL-514
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"memory utilization spikes to 3.7GB during execution of SBT on or about these tests:
[info] - test_UTF_16_01
[info] - test_encoding_11_02

Memory Usage remains at 3.7GB (96%) for duration of testing.
Once tests complete, memory remains at 96% for ~3 minutes following the test completion.",[],2013-02-12 23:02:16+00:00,2013-02-15 14:19:50+00:00,2013-03-07 20:13:36+00:00,Closed,13113931,DAFFODIL-513
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Currently, if you specify HH (military-style hour) and aa (am/pm marker), the specified hour is ignored and automatically defaults to 00 (midnight) if AM is specified, and 12 (noon) if PM is specified.

Ideally the existence of both HH and aa would be caught and a Schema Definition Error would be given.

This is likely out of our control, but I'm creating a ticket to make note of the seemingly odd behavior.",[],2013-02-12 20:52:23+00:00,,2018-09-13 14:04:40+00:00,Open,13113930,DAFFODIL-512
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"it looks like 21 digits is the cut-off for the number of digits you can have in the specification for fractional seconds. Any format with more than 21 digits for fractional seconds gets the following error:

[info] - test_millisecondAccuracy4 *** FAILED ***
[info]   java.lang.Exception: Parse Error: Convert to Time (for xs:time): Failed to parse '3:30:38.0023452768910087634837' at character -1 .
[info] Schema context: element.time15 Location line 2174 column 200 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu.illinois.ncsa.daffodil/section05/simple_types/SimpleTypes.tdml

I know this isn't that big of a deal, but 21 digits seems somewhat arbitrary, and I was also wondering if we should include this in the spec somewhere.

See tests millisecondAccuracy3 and millisecondAccuracy4 
in 
daffodil-test/src/test/resources/edu.illinois.ncsa.daffodil/section05/simple_types/SimpleTypes.tdml


Add / document in the Daffodil Wiki",[],2013-02-12 19:31:16+00:00,2013-05-22 12:07:58+00:00,2013-05-22 15:49:58+00:00,Closed,13113929,DAFFODIL-511
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Any test that I create that uses the dfdl:calendarTimeZone property results in the following error:

[info] - test_timeCalendarTimeZone2 *** FAILED ***
[info]   java.lang.Exception:
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:479)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.test_timeCalendarTimeZone2(TestSimpleTypes.scala:53)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)

I seem to be getting these blank exceptions a lot lately when working with xs:time. see tests timeCalendarTimeZone and timeCalendarTimeZone2.",[],2013-02-12 17:50:07+00:00,2013-04-01 12:55:24+00:00,2013-04-01 16:40:38+00:00,Closed,13113928,DAFFODIL-510
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I've been basing my timezone tests off of the working copy of the spec (gwdrp-dfdl-v1.0.3-r010.04.01.changes-marked.pdf), and have had problems with the following formats so far:

v - Time Zone: generic non-location - PT, Pacific Time

Error seen:
[info] - test_timeZoneFormats3 *** FAILED ***
[info]   java.lang.Exception:
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:479)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.test_timeZoneFormats3(TestSimpleTypes.scala:92)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)

zzz - Time Zone: specific non-location - PDT, Pacific Daylight Time


[info] - test_timeZoneFormats2 *** FAILED ***
[info]   java.lang.Exception: Parse Error: Convert to Time (for xs:time): Failed to parse '08:43.Eastern Standard Time' at character 6 .
[info] Schema context: element.time04 Location line 2158 column 178 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/edu.illinois.ncsa.daffodil/section05/simple_types/SimpleTypes.tdml
[info] Data location was preceding byte 27
[info] UTF-8 text starting at byte 24 is: (ime)
[info] Data (hex) starting at byte 24 is: (0x696D65)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:486)
[info]   at edu.illinois.ncsa.daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:372)
[info]   at edu.illinois.ncsa.daffodil.tdml.TestCase.run(TDMLRunner.scala:326)
[info]   at edu.illinois.ncsa.daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:198)
[info]   at edu.illinois.ncsa.daffodil.section05.simple_types.TestSimpleTypes.test_timeZoneFormats2(TestSimpleTypes.scala:91)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)

tests are 
timeZoneFormats2
timeZoneFormats3
timeZoneFormats4
in
daffodil-test/src/test/resources/edu.illinois.ncsa.daffodil/section05/simple_types/SimpleTypes.tdml
daffodil-test/src/test/scala-debug/edu.illinois.ncsa.daffodil/section05/simple_types/TestSimpleTypes2.scala",[],2013-02-12 16:42:03+00:00,2013-04-01 12:55:38+00:00,2013-04-01 15:20:39+00:00,Closed,13113927,DAFFODIL-509
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Minor,won't this divide by 0? Isn't modulus a division?,[],2013-02-11 18:29:05+00:00,2013-05-21 18:04:02+00:00,2013-05-31 15:32:14+00:00,Closed,13113926,DAFFODIL-508
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-02-11 16:25:16+00:00,2013-02-19 20:24:00+00:00,2013-03-18 18:57:55+00:00,Closed,13113925,DAFFODIL-507
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"(I'm creating this bug issue, because I am choosing to NOT fix this as part of the initial integration of multi-file schema stuff into spin 7).

Properties that contain QNames (any expression, a few others) are not properly resolved. A QName like ""foo:bar"" the interpretation of ""foo"" as a prefix must be done using the context of the xml object where that property physically resided.

In our code base, properties are retrieved using getProperty(..) which does not return any information about where the property was found; hence, if the value contains a QName, it can't be resolved properly. 

There is a replacement now called findProperty which returns an object containing both the value and a handle on the object which contained the property binding. This allows proper QName resolution if needed, and also enables better diagnostics because we can point at file and line number where the annotation physically was written.

This bug is to convert some calls to getProperty or getPropertyOption into findProperty and findPropertyOption so as to support proper QName resolution.

Note that the expression compiler needs to be fed this information, as that is what deals with qnames embedded in expressions e.g., ./foo:bar/baz[2].",[],2013-02-08 20:46:34+00:00,2013-05-03 18:21:58+00:00,2013-05-10 15:48:00+00:00,Closed,13113924,DAFFODIL-506
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"I stumbled upon this bug when working on DFDL-368.  Instead of having:

    <tdml:document>
      <tdml:documentPart type=""byte"">00000033</tdml:documentPart>
      <tdml:documentPart type=""text""><![CDATA[000118Ridgewood Circle    Rochester           NY123]]></tdml:documentPart>
    </tdml:document>

I forgot to include the ""byte"" line and was getting a java.lang.OutOfMemory Exception.  A test case has been added to daffodil-test/src/test/scala-debug/daffodil/section12/lengthKind/TestLengthKindExplicitDebug.scala as part of commit 63ec5eec94a077b32f5d477554f5dcf65d1706c4",[],2013-02-08 18:56:30+00:00,2013-03-20 18:44:40+00:00,2013-03-28 15:02:21+00:00,Closed,13113923,DAFFODIL-505
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"command:

echo ""12"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/daffodil/section06/entities/charClassEntities.dfdl.xsd -r unknown

Here's my exception:

daffodil.exceptions.Abort: Usage error.
daffodil.exceptions.Assert$.abort(Assert.scala:52)
daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:36)
daffodil.exceptions.Assert$.usage(Assert.scala:27)
daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:53)
	at daffodil.exceptions.Assert$.abort(Assert.scala:52)
	at daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:36)
	at daffodil.exceptions.Assert$.usage(Assert.scala:27)
	at daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:53)
	at daffodil.Main$.createProcessorFromSchemas(Main.scala:92)
	at daffodil.Main$.run(Main.scala:271)
	at daffodil.Main$.main(Main.scala:462)
	at daffodil.Main.main(Main.scala)",[],2013-02-08 13:19:34+00:00,2013-04-16 20:08:44+00:00,2013-04-17 17:22:26+00:00,Closed,13113922,DAFFODIL-504
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Daffodil looks on the classpath, or using an XML Catalog to find other schema files being included/imported. 

When a schemaLocation is provided, it should also look in the same directory along side the file doing the include/import. 

This should work recursively, i.e., if you import a namespace, and that file is found by way of the XML Catalog, then files it includes/imports can be found adjacent to where the file was found.",[],2013-02-08 04:45:29+00:00,2013-05-15 15:27:36+00:00,2013-05-28 14:46:30+00:00,Closed,13113921,DAFFODIL-503
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the Spec, the default calendar pattern for dateTime is the following:
yyyy-MM-dd'T'HH:mm:ss
However, based on my testing, it seems that the default is
yyyy-MM-dd'T'HH:mm:ssZZZ (with timezone)",[],2013-02-07 16:58:37+00:00,2013-02-08 17:01:39+00:00,2013-02-08 17:49:49+00:00,Closed,13113920,DAFFODIL-502
New Feature,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"According to Section 16 of the DFDL spec for occursCountKind:

���stopValue��� means look for a logical stop value which signifies the
end of the occurrences. The stop value is specified with the
occursStopValue property, and it is a schema definition error if that property is absent when 'stopValue' is used.

Currently, there is no error when occurs occursCountKind='stopValue' and the occursStopValue property is missing.",[],2013-02-06 20:10:33+00:00,,2018-09-13 14:04:03+00:00,Open,13113919,DAFFODIL-501
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"It'd be nice to have a verbose mode when executing tests. I noticed that any errors that are encountered during a test (even expected errors) are output to the screen, just like when you run the tests with sbt. Maybe we could have execution verbose mode display these errors, while non-verbose mode only shows [Pass/Fail] and the test name.",[],2013-02-05 19:46:31+00:00,2013-08-29 16:37:13+00:00,2013-09-10 20:21:34+00:00,Closed,13113918,DAFFODIL-500
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"[info] Packaging C:\Users\aseyler\Documents\DFDL-git\dfdl\daffodil-lib\target\sc
ala-2.9.2\daffodil-lib_2.9.2-0.6.0.jar ...
[info] Done packaging.
[info] Compiling 51 Scala sources to C:\Users\aseyler\Documents\DFDL-git\dfdl\da
ffodil-core\target\scala-2.9.2\classes...
[info] Compiling 9 Scala sources to C:\Users\aseyler\Documents\DFDL-git\dfdl\daf
fodil-lib\target\scala-2.9.2\test-classes...


[info] - testDivZeroInside
[info] TestXMLCatalogAndValidate:
[info] - test1 *** FAILED ***
[info]   java.io.FileNotFoundException: C:\tmp\daffodil.util.TestXMLCatalogAndVa
lidate_a\sch.xsd (The system cannot find the path specified)
[info]   at java.io.FileOutputStream.open(Native Method)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileWriter.<init>(Unknown Source)
[info]   at daffodil.util.TestXMLCatalogAndValidate.test1(TestXMLCatalogAndValid
ate.scala:91)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[info]   at java.lang.reflect.Method.invoke(Unknown Source)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framewor
kMethod.java:47)
[info]   ...
[info] - test2 *** FAILED ***
[info]   java.io.FileNotFoundException: C:\tmp\daffodil.util.TestXMLCatalogAndVa
lidate_a\sch1.xsd (The system cannot find the path specified)
[info]   at java.io.FileOutputStream.open(Native Method)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileWriter.<init>(Unknown Source)
[info]   at daffodil.util.TestXMLCatalogAndValidate.test2(TestXMLCatalogAndValid
ate.scala:173)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[info]   at java.lang.reflect.Method.invoke(Unknown Source)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framewor
kMethod.java:47)
[info]   ...
[info] - test3 *** FAILED ***
[info]   java.io.FileNotFoundException: C:\tmp\daffodil.util.TestXMLCatalogAndVa
lidate_b\data.xml (The system cannot find the path specified)
[info]   at java.io.FileOutputStream.open(Native Method)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileWriter.<init>(Unknown Source)
[info]   at daffodil.util.TestXMLCatalogAndValidate.test3(TestXMLCatalogAndValid
ate.scala:234)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[info]   at java.lang.reflect.Method.invoke(Unknown Source)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framewor
kMethod.java:47)
[info]   ...
[info] - test4 *** FAILED ***
[info]   java.io.FileNotFoundException: C:\tmp\daffodil.util.TestXMLCatalogAndVa
lidate_b\data.xml (The system cannot find the path specified)
[info]   at java.io.FileOutputStream.open(Native Method)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileOutputStream.<init>(Unknown Source)
[info]   at java.io.FileWriter.<init>(Unknown Source)
[info]   at daffodil.util.TestXMLCatalogAndValidate.test4(TestXMLCatalogAndValid
ate.scala:267)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
[info]   at java.lang.reflect.Method.invoke(Unknown Source)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(Framewor
kMethod.java:47)
[info]   ...
[info] TestSerializationAndLazy:
[info] - testSerializeBeforeLazyEval
[info] TestGeneratedProperties:
[info] - testPropsToString
[info] - testProps1
[info] TestExceptions:
[info] - testAssert
[info] TestLogger:
[info] - test1
[error] Failed: : Total 26, Failed 4, Errors 0, Passed 22, Skipped 0
[error] Failed tests:
[error]         daffodil.util.TestXMLCatalogAndValidate",[],2013-02-04 22:32:47+00:00,2013-02-08 22:55:47+00:00,2013-02-13 17:55:39+00:00,Closed,13113917,DAFFODIL-499
Wish,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Minor,,['beginner'],2013-02-04 21:50:55+00:00,2019-08-27 13:34:29+00:00,2021-05-20 20:01:28+00:00,Closed,13113916,DAFFODIL-498
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I created a test that uses inputValueCalc to set the value to '{' by using '{{', which, according to DFDL-6-078R should work and not be treated as an expression.

However, I get the following error:

Error: Value '{{' is not facet-valid with respect to pattern '(\{[^\{].*\})|(\{\})' for type 'DFDLExpression'

The test is expressionRules03 in 
daffodil-test/src/test/resources/daffodil/section23/dfdl_expressions/expressions.tdml

I currently have the element commented out because it seems to break the whole schema.

I looked to see if this is just something that has not yet been implemented, but didn't see an existing ticket. Feel free to close as duplicate if I just missed it.",[],2013-02-04 19:29:22+00:00,2013-05-23 10:50:29+00:00,2013-05-29 11:42:23+00:00,Closed,13113915,DAFFODIL-497
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to DFDL-CLI-013 - If loading one or more schema files, If the root element is not specified, the first element in the first defined schema file shall be used.

--------------------------------------------------------
Command 1: The input provided is expecting the first element of the second schema. According to this requirement, the data will be parsed by the first element of the first specified schema, so we expect a failure.

~/NGF/dfdl (master) echo ""118*Ridgewood Circle*Rochester*NY"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/daffodil/section06/entities/charClassEntities.dfdl.xsd daffodil-test/src/test/resources/daffodil/section07/defineFormat/defineFormat.dfdl.xsd

<nothing></nothing>
--------------------------------------------------------
Command 2: Same command but schemas are switched. The input provided is expecting the first element of the FIRST schema. According to this requirement, the data will be parsed by this element, so we expect a correct parse.

~/NGF/dfdl (master) echo ""118*Ridgewood Circle*Rochester*NY"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/daffodil/section07/defineFormat/defineFormat.dfdl.xsd daffodil-test/src/test/resources/daffodil/section06/entities/charClassEntities.dfdl.xsd

<nothing></nothing>
--------------------------------------------------------
Command 3: This time I only specify the correct schema, but still no root. So it will pick the first element of this schema and parse, which works.

~/NGF/dfdl (master) echo ""118*Ridgewood Circle*Rochester*NY"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/daffodil/section07/defineFormat/defineFormat.dfdl.xsd

<address dafint:context=""fed4c9ec-12c7-4f49-bc9f-34973d91f39f"" xmlns:dafint=""urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"" xmlns=""No_Namespace""><houseNumber dafint:context=""273e1449-0243-4451-a6fb-78f8808534a1"">118</houseNumber><street dafint:context=""9e242cab-444f-4cd7-97a1-d8dde2342492"">Ridgewood Circle</street><city dafint:context=""f5625c94-e1bf-4c28-982c-c70fcd313f4b"">Rochester</city><state dafint:context=""025de920-3ea6-4f02-83c4-59a1c16764d0"">NY
</state></address>
--------------------------------------------------------

It seems that command 2 is incorrectly failing, or the requirement is misleading.",[],2013-02-04 14:22:20+00:00,2013-02-04 20:03:20+00:00,2013-02-04 20:03:24+00:00,Closed,13113914,DAFFODIL-496
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"Currently, listing tests outputs the name and description of each test. This might be more helpful if regular listing mode listed the test names, and verbose mode listed the names, descriptions, schemas, and root elements for each test.",[],2013-01-31 21:11:23+00:00,2013-02-05 18:51:20+00:00,2013-02-05 19:47:17+00:00,Closed,13113913,DAFFODIL-495
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Currently, the resulting infoset when running the CLI to parse includes a unique context:

<tns:hcp dafint:context=""f883e54d-8894-49a6-9204-68682fe42124"" xmlns:dafint=""urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:int"" xmlns:tns=""http://www.example.org/example1/"">12</tns:hcp>

This makes validating results rather cumbersome.

There should at least be an option to run the test with 'clean' output that can easily be saved as an expected 'golden' infoset.",[],2013-01-31 21:09:46+00:00,2017-04-06 14:46:17+00:00,2018-09-13 14:13:27+00:00,Closed,13113912,DAFFODIL-494
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"User should be able to use regular expressions to specify tests to run on the commandline: e.g. entities_* will run entities_1, entities_2, etc.",[],2013-01-31 21:05:36+00:00,2013-02-01 13:08:05+00:00,2013-02-01 13:40:51+00:00,Closed,13113911,DAFFODIL-493
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When running the parse command, if you specify a root element that is not found within the file, an exception is printed to the commandline:
~/NGF/dfdl (master) echo ""12"" | ./daffodil-core/target/start parse -s daffodil-test/src/test/resources/daffodil/section06/entities/charClassEntities.dfdl.xsd -r unknown
2013-01-31 06:23:38:512 daffodil.compiler.Compiler Error [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2013-01-31 06:23:38:516 daffodil.compiler.Compiler Error [Schema Definition Error: No root element found for unknown in any available namespace Schema context: SchemaSet. Location in file:SchemaSet]
Exception in thread ""main"" daffodil.exceptions.Abort: Usage error.
daffodil.exceptions.Assert$.abort(Assert.scala:52)
daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:36)
daffodil.exceptions.Assert$.usage(Assert.scala:27)
daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:53)
at daffodil.exceptions.Assert$.abort(Assert.scala:52)
at daffodil.exceptions.Assert$.usageErrorUnless(Assert.scala:36)
at daffodil.exceptions.Assert$.usage(Assert.scala:27)
at daffodil.compiler.ProcessorFactory.onPath(Compiler.scala:53)
at daffodil.Main$.createProcessorFromSchemas(Main.scala:92)
at daffodil.Main$.main(Main.scala:271)
at daffodil.Main.main(Main.scala)

It might be better for this exception to be handled and presented to the user in a way that displays the issue more clearly. It is possible that there are other errors like this, and I will add to the ticket if I come across them.

main CLI ticket: DFDL-409",[],2013-01-31 15:22:55+00:00,2013-02-05 18:57:31+00:00,2013-02-08 13:35:06+00:00,Closed,13113910,DAFFODIL-492
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,main CLI ticket DFDL-409,[],2013-01-31 15:01:07+00:00,2013-02-14 19:13:18+00:00,2013-02-14 20:36:05+00:00,Closed,13113909,DAFFODIL-491
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"It seems that the parser is lax when it comes to parsing against a format. For example, if you specify EEEE for the day of the week, the parser is expecting a full week-day name (eg. ""Monday""). However, if the short form is found (eg. ""Mon"", represented by EEE), it is parsed without error. If this is the behavior we want for the parser (assuming the smart parsing is actually smart and without error), the spec/requirements likely need to be updated in this area, particularly DFDL-13-153R, which states ""The count of pattern letters determines the format.""",[],2013-01-29 16:21:36+00:00,2017-01-23 18:05:53+00:00,2017-01-23 18:05:53+00:00,Closed,13113908,DAFFODIL-490
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"See test_timeFractionalSeconds01 in daffodil-test/src/test/resources/daffodil/section05/simple_types/SimpleTypes.tdml

(commit 7141bb7576c35d2368e6f09510b9ed97309429b9)",[],2013-01-29 15:27:52+00:00,2013-04-17 13:33:36+00:00,2013-04-17 18:59:11+00:00,Closed,13113907,DAFFODIL-489
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I've noticed that if you use 'YYYY' instead of 'yyyy', the year is parsed as one less than the specified year, and the other values are not parsed correctly.

Response from Steve:
Regarding the odd output of YYYY: I'm not exactly sure why this doesn't work, but I'm not surprised. From what I can tell, YYYY is the year part of the ISO Week Date. This uses a modified gregorian calendar, so I'm not surprised you're getting odd results. However, I've tried creating a pattern that uses the ISO Week Date formatting symbols (""YYYY-'W'ww-e"") and try to parse the examples from the wiki page. I get dates similar to the examples, but they are usually off by a few days. So I'm not sure what's wrong. I don't think this is a blocker for Spin 7, so please create a new bug for the YYYY issue, and we'll fix it as we find time.

See test datePattern01b in daffodil-test/src/test/resources/daffodil/section05/simple_types/SimpleTypes.tdml",[],2013-01-29 14:17:44+00:00,,2021-01-29 21:11:14+00:00,Open,13113906,DAFFODIL-488
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"IBM created these wikipedia pages, and I have a blog that discusses DFDL which is stale/old now. Update these.

Doing this as part of the run-up to April's big deliverable.",[],2013-01-25 20:22:08+00:00,2013-03-18 22:47:25+00:00,2013-03-28 14:52:09+00:00,Closed,13113905,DAFFODIL-487
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,Some of the material on this site is obsolete. And there is no mention of the Daffodil project.,[],2013-01-25 20:20:29+00:00,2013-03-21 13:16:14+00:00,2013-04-22 18:14:33+00:00,Closed,13113904,DAFFODIL-486
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,A java-callable layer that is attractive for a Java programmer doesn't fall-right-out of a scala API. The right java-layer API should be created and made to call the underlying scala stuff so that users  don't have to figure this out.,[],2013-01-25 20:00:52+00:00,2013-05-30 18:25:32+00:00,2013-08-29 19:05:16+00:00,Closed,13113903,DAFFODIL-485
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,There should be a scala and a java-callable API. The classes and functions making up this API should have very good documentation generated from the structured comments in the source code files.,[],2013-01-25 19:57:08+00:00,2015-02-05 14:23:19+00:00,2015-02-05 14:23:19+00:00,Closed,13113902,DAFFODIL-484
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We can run the regular xerces validator against the XML-representation of our infoset. This will be slow, but effective.",[],2013-01-25 14:49:17+00:00,2013-07-12 15:28:22+00:00,2013-07-12 15:28:43+00:00,Closed,13113901,DAFFODIL-483
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"I also did an experiment upgrading from Scala 2.9.2 to 2.10.0-M3, with no success. Lots of spurious compilation problems, and we're not alone having them based on forum postings.

So this upgrade has to wait for a more stable version.

The process is pretty simple:

Upgrading from sbt is easy: just change the scala version in the build.sbt file.
Then sbt clean update-classifiers. It is probably worth it to blow away the ivy cache (~/.ivy2). It takes quite a bit of time to download all the libraries over the web. Perhaps 15 minutes on my comcast 1.5Mbit/sec service.

Upgrading eclipse is also easy. New update site, and the usual thing.",[],2013-01-24 01:50:39+00:00,2013-05-21 18:27:33+00:00,2013-05-21 18:27:44+00:00,Closed,13113900,DAFFODIL-482
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The annotations on an element reference have to be combined with those from the global element declaration it references, and those have to be combined with the annotations on the type of the element.

Similarly for simpleType definitions and their bases, group references and their referenced groups, etc.

The rules for this were clarified in Errata v11. Items 2.108, 2.109, 3.19, 3.20, and 3.21, and also 3.23, 3.24 and 3.25.",[],2013-01-23 21:23:45+00:00,2017-01-23 18:00:34+00:00,2018-09-13 14:13:25+00:00,Closed,13113899,DAFFODIL-481
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Java7 is out now for a long time. It is supposedly much faster than Java6. Eclipse scala IDE supports it. scala 2.9.1 and beyond support it. 

Someone should change-out their java install to a java7 install, and see what happens. 

it makes sense to do this in spin 9 timeframe, because users of Daffodil starting in April, may want/prefer Java7 if only for all the security fixes.",[],2013-01-23 20:41:56+00:00,2013-04-01 16:08:38+00:00,2017-04-06 15:12:48+00:00,Closed,13113898,DAFFODIL-480
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,This will allow anyone using sbt or maven to easily include the daffodil libraries and pull in all dependencies.,[],2013-01-23 18:50:20+00:00,2013-02-12 14:18:39+00:00,2013-05-29 21:30:28+00:00,Closed,13113897,DAFFODIL-479
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"According to requirements DFDL-7-033R and DFDL-7-034R, if multiple formats share the same name, it should result in a schema definition error. See test nameCollision in:

daffodil-test/src/test/resources/daffodil/section07/defineFormat/defineFormat.tdml
daffodil-test/src/test/scala-debug/daffodil/section07/defineFormat/defineFormatTestsDebug.scala
daffodil-test/src/test/scala/daffodil/section07/defineFormat/defineFormatTests.scala

There is currently no error.",['beginner'],2013-01-22 15:22:31+00:00,,2020-08-05 17:27:28+00:00,Reopened,13113896,DAFFODIL-478
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Needs support for windows and unix, and should contain all libraries/dependencies.",[],2013-01-22 14:32:42+00:00,2013-02-08 16:28:10+00:00,2013-02-21 21:37:20+00:00,Closed,13113895,DAFFODIL-477
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"A sequence that contains a choice of multiple elements is not being parsed correctly. Parsing stops after the first element. See test choiceWithSequence in files:


daffodil-test/src/test/resources/daffodil/section15/choice_groups/choice.tdml
daffodil-test/src/test/scala-debug/daffodil/section15/choice_groups/TestChoiceDebug.scala
daffodil-test/src/test/scala/daffodil/section15/choice_groups/TestChoice.scala",[],2013-01-22 14:30:54+00:00,2013-01-23 14:22:51+00:00,2013-01-23 14:24:08+00:00,Closed,13113894,DAFFODIL-476
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I created a test where the specified value of a variable does not match its specified type. The specified type is xs:int, and the variable is set to a string. I get the following error (""BEEEP"" is my string):


[info] Schema Definition Error: Cannot convert BEEEP to Long. Error java.lang.NumberFormatException: For input string: ""BEEEP"". Schema context: element.r3::complexType::sequence::element.one. Location line 375 column 121 in file:/home/jchab/NGF/dfdl/daffodil-test/target/scala-2.9.2/test-classes/daffodil/section07/variables/variables.tdml
[info]   at daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:316)
[info]   at daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:310)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:309)
[info]   at daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:425)
[info]   at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:340)
[info]   at daffodil.tdml.TestCase.run(TDMLRunner.scala:293)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:165)
[info]   at daffodil.section07.variables.TestVariables.test_setVarTypeMismatch(TestVariables.scala:29)

I'm not sure why it's saying it's trying to convert to a Long, as there are no longs defined anywhere in the schema.

Test is setVarTypeMismatch in the following files:

daffodil-test/src/test/resources/daffodil/section07/variables/variables.tdml
daffodil-test/src/test/scala-debug/daffodil/section07/variables/TestVariablesDebug.scala
daffodil-test/src/test/scala/daffodil/section07/variables/TestVariables.scala",[],2013-01-17 15:03:00+00:00,2013-09-04 12:05:13+00:00,2013-09-04 12:14:10+00:00,Closed,13113893,DAFFODIL-475
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"When running a test that checks requirement DFDL-7-056R (It is a schema definition error if dfdl:test is the empty string) I get a variant of the following error on nearly all of my existing tests:

[info] - test_assertExpressionRefFail *** FAILED ***
[info]   java.lang.Exception: Did not find diagnostic message ""Assertion"" in any of the actual diagnostic messages: 
[info] Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 74; columnNumber: 66; cvc-pattern-valid: Value '' is not facet-valid with respect to pattern '(\{[^\{].*\})|(\{\})' for type 'DFDLExpression'.) Schema context: SchemaSet. 
[info] Schema Definition Error: Error loading schema(org.xml.sax.SAXParseException; lineNumber: 74; columnNumber: 66; cvc-attribute.3: The value '' of attribute 'test' on element 'dfdl:assert' is not valid with respect to its type, 'DFDLExpression'.) Schema context: SchemaSet.
[info]   at daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:316)
[info]   at daffodil.tdml.TestCase$$anonfun$verifyAllDiagnosticsFound$2.apply(TDMLRunner.scala:310)
[info]   at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
[info]   at scala.collection.immutable.List.foreach(List.scala:76)
[info]   at daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:309)
[info]   at daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:425)
[info]   at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:340)
[info]   at daffodil.tdml.TestCase.run(TDMLRunner.scala:293)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:165)
[info]   at daffodil.section07.assertions.TestAssertions.test_assertExpressionRefFail(TestAssertions.scala:47)


this is the error I get on the test that is expecting a Schema Definition Error:

[info] - test_assertExpressionEmpty *** FAILED ***
[info]   java.util.NoSuchElementException: None.get
[info]   at scala.None$.get(Option.scala:274)
[info]   at scala.None$.get(Option.scala:272)
[info]   at daffodil.dsom.DFDLAssertionBase.testTxt(DFDLAnnotation.scala:586)
[info]   at daffodil.processors.AssertBooleanPrimBase.<init>(Primitives.scala:2629)
[info]   at daffodil.processors.AssertBooleanPrim.<init>(Primitives.scala:2631)
[info]   at daffodil.dsom.DFDLAssert$$anonfun$gram_$1.apply(DFDLAnnotation.scala:611)
[info]   at daffodil.dsom.DFDLAssert$$anonfun$gram_$1.apply(DFDLAnnotation.scala:609)
[info]   at daffodil.dsom.OOLAG$LV.lazyBody(OOLAG.scala:250)
[info]   at daffodil.dsom.OOLAG$OOLAGValue$$anonfun$1.apply(OOLAG.scala:154)
[info]   at daffodil.dsom.OOLAG$OOLAGHost$class.circularityDetector(OOLAG.scala:70)

Currently, TDML validation is turned off but this is still an issue. I've commented out this section of the schema so the existing tests still pass.
The test is assertExpressionEmpty in 
daffodil-test/src/test/resources/daffodil/section07/assertions/assert.tdml",[],2013-01-16 19:12:38+00:00,,2018-09-13 14:04:19+00:00,Open,13113892,DAFFODIL-474
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"I created a test that is looking for a schema definition error but I don't believe it should be getting one. I ran the test expecting a message of the following type:

Expected error. Didn't get one. Actual result was [result]

However I got the following:

[info] - test_repPropMissing3 *** FAILED ***
[info]   java.lang.Exception: No diagnostic objects found.
[info]   at daffodil.tdml.TestCase.verifyAllDiagnosticsFound(TDMLRunner.scala:302)
[info]   at daffodil.tdml.ParserTestCase.runParseExpectErrors(TDMLRunner.scala:425)
[info]   at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:340)
[info]   at daffodil.tdml.TestCase.run(TDMLRunner.scala:293)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:165)
[info]   at daffodil.section10.representation_properties.TestRepProps.test_repPropMissing3(TestRepProps.scala:22)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)

when I remove expected error and provide an expected infoset, I get the following error:

[info] - test_repPropMissing3 *** FAILED ***
[info]   java.lang.Exception:
[info]   at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:446)
[info]   at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:339)
[info]   at daffodil.tdml.TestCase.run(TDMLRunner.scala:293)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:165)
[info]   at daffodil.section10.representation_properties.TestRepProps.test_repPropMissing3(TestRepProps.scala:22)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
[info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[info]   at java.lang.reflect.Method.invoke(Method.java:601)
[info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)


The test is repPropMissing3. I left in the expected infoset commented out; it is currently expecting an error. Feel free to try out both scenarios. The test is in the following files:


daffodil-test/src/test/resources/daffodil/section10/representation_properties/RepProps.tdml
daffodil-test/src/test/scala-debug/daffodil/section10/representation_properties/TestRepPropsDebug.scala
daffodil-test/src/test/scala/daffodil/section10/representation_properties/TestRepProps.scala",[],2013-01-14 19:23:18+00:00,2013-01-16 18:59:02+00:00,2013-01-17 13:31:47+00:00,Closed,13113891,DAFFODIL-473
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Current OOLAG/Lazy val stuff handles creation of objects that either have values, error/warnings, or both, and eliminates the need to carefully organize things into compute passes.

But, one important aspect is too fragile, and leads to very subtle bugs that are hard to isolate and fix, which is that every object that accumulates diagnostic messages must implement a special value named diagnosticChildren, which is a list of the other objects that contribute to the correctness of this one. If you omit an object, then debug messages are not ""rolled up"" to the top of the compilation. They are lost. 

This ticket is about making most aspects of maintaining this list fully automatic by making all the LV objects that have values (not the unused/unevaluated ones) be traversed, and any that are of a type that accumulates diagnostics (a DiagnosticsProviding trait mixed in), are automatically included in the diagnostic children of the object that calculates that LV. 

This would eliminate the troublesome/fragile issue and make maintaining the code easier.",[],2013-01-10 22:15:35+00:00,2013-03-08 18:35:14+00:00,2013-04-17 19:30:46+00:00,Closed,13113890,DAFFODIL-472
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"According to Mike:

There are other properties though, where they are not lists of whitespace
separated values, it's just one value. Example: escapeBlockStart. This
could be something like '[BEGIN]', or XML's famous '<![CDATA[' . If it
wanted to have whitespace between the brackets and the word you can't do
'[ BEGIN ]' according to the rules. You have to do '[%SP;BEGIN%SP;]'. I
believe if you write '[ BEGIN ]' it should SDE because an individual
string literal has non-entity whitespaces.

I created a test that represents this and it parses with no error.

See test whitespace_01 in the following files:

daffodil-test/src/test/resources/daffodil/section06/entities/Entities.tdml
daffodil-test/src/test/scala-debug/daffodil/section06/entities/TestEntities_01.scala
daffodil-test/src/test/scala/daffodil/section06/entities/TestEntities.scala",[],2013-01-10 21:08:46+00:00,2013-10-10 16:27:21+00:00,2013-10-10 16:27:33+00:00,Closed,13113889,DAFFODIL-471
Bug,[],gmcdonald,Gavin McDonald,jadams_tresys,Josh Adams,Minor,"In daffodil-test/src/test/scala-debug/daffodil/section13/nillable/TestNillableDebug.scala, test_empty_infoset causes Daffodil to crash, giving this stack trace:

UTF-8 text starting at byte 0 is: (catblablahblah)
Data (hex) starting at byte 0 is: (0x636174626C61626C6168626C6168)
[info] - test_empty_infoset *** FAILED ***
[info]   java.lang.IndexOutOfBoundsException: 0
[info]   at scala.collection.LinearSeqOptimized$class.apply(LinearSeqOptimized.scala:51)
[info]   at scala.collection.immutable.List.apply(List.scala:76)
[info]   at daffodil.tdml.DFDLInfoset.contents(TDMLRunner.scala:825)
[info]   at daffodil.tdml.Infoset.contents(TDMLRunner.scala:820)
[info]   at daffodil.tdml.ParserTestCase.verifyParseInfoset(TDMLRunner.scala:338)
[info]   at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:426)
[info]   at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:300)
[info]   at daffodil.tdml.TestCase.run(TDMLRunner.scala:254)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTestNoTDMLValidation(TDMLRunner.scala:134)
[info]   at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:114)",[],2013-01-10 20:45:43+00:00,2013-05-24 13:39:11+00:00,2013-05-31 22:02:46+00:00,Closed,13113888,DAFFODIL-470
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"The following example should cause the TDML Runner to fail/error for this test.

Example:

  <tdml:parserTestCase name=""abc"" root=""doc""
    model=""model"" description=""desc"">

    <tdml:document>
      <tdml:documentPart type=""text""><![CDATA[]]></tdml:documentPart>
    </tdml:document>

    <tdml:infoset>
      <tdml:dfdlInfoset>
      </tdml:dfdlInfoset>
    </tdml:infoset>
  </tdml:parserTestCase>",[],2013-01-10 19:28:41+00:00,2013-05-22 16:44:34+00:00,2013-06-17 14:59:41+00:00,Closed,13113887,DAFFODIL-469
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2013-01-09 20:10:33+00:00,2013-03-22 15:21:52+00:00,2016-06-15 17:58:10+00:00,Closed,13113886,DAFFODIL-468
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-01-09 20:09:09+00:00,2013-03-18 13:35:18+00:00,2013-03-21 14:51:21+00:00,Closed,13113885,DAFFODIL-467
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,Possibly wireshark/pcap,[],2013-01-09 19:29:36+00:00,2013-03-19 14:38:00+00:00,2013-03-19 17:03:10+00:00,Closed,13113884,DAFFODIL-466
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2013-01-09 19:28:31+00:00,2013-03-19 14:39:42+00:00,2013-03-19 17:01:14+00:00,Closed,13113883,DAFFODIL-465
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2013-01-09 19:27:49+00:00,2013-03-22 15:22:00+00:00,2016-06-15 17:56:32+00:00,Closed,13113882,DAFFODIL-464
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-01-09 19:26:45+00:00,2013-05-29 16:28:07+00:00,2013-05-29 20:56:41+00:00,Closed,13113881,DAFFODIL-463
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-01-09 19:17:46+00:00,2017-01-13 20:04:05+00:00,2017-08-01 14:18:09+00:00,Closed,13113880,DAFFODIL-462
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2013-01-09 19:17:24+00:00,2017-01-13 20:04:44+00:00,2017-08-01 14:18:10+00:00,Closed,13113879,DAFFODIL-461
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to Mike, using lengthUnits=""bits"" to represent a float should result in a Schema Definition Error. However, the data gets parsed without issue.
See test LengthProp_floatBits in the following files:

daffodil-test/src/test/resources/daffodil/section12/length_properties/Leng
thProperties.tdml
daffodil-test/src/test/scala-debug/daffodil/section12/length_properties/Te
stLengthPropertiesDebug.scala
daffodil-test/src/test/scala/daffodil/section12/length_properties/TestLeng
thProperties.scala",[],2013-01-09 17:23:01+00:00,2017-04-06 14:52:42+00:00,2017-04-06 14:52:42+00:00,Closed,13113878,DAFFODIL-460
Sub-task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Implement Pad/Fill (Trimming of padding)

Perform entity replacement on Pad/Fill String Literals.  This was saved until later as we are not using Pad/Fill at the moment.

DFDL-13-042R: Text String Pad Character
-020R: textTrimKind
-041R: textStringJustification
-046R: textNumberJustification
-047R: textNumberPadCharacter
-131R: textBooleanJustification
-132R: textBooleanPadCharacter
-165R: textCalendarJustification
-166R: textCalendarPadCharacter

Also: DFDL-7-089R (padding is trimmed before escape scheme is applied.)

Also: This came from an errata to the spec:

If dfdl:nilKind is ���literalValue��� then nilValue specifies a white space
separated list of DFDL literal strings that are the possible
representation values for nil. On parsing the element value is nil if
the trimmed data matches one of the literal strings in the list.",[],2013-01-04 17:53:17+00:00,2013-01-04 17:57:40+00:00,2013-01-04 17:58:46+00:00,Closed,13113877,DAFFODIL-459
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"The two features use virtually the same algorithm, and it's a relatively hairy one at that. Need to combine them, possible into model group.",[],2013-01-04 13:30:38+00:00,2013-08-16 11:44:46+00:00,2013-09-16 17:41:15+00:00,Closed,13113876,DAFFODIL-458
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The information one gets when running a test using Debugger.withDebugger is much too hard to understand, and even then lacks sufficient detail to really see what is happening. 

First, this is not a debugger, it's a trace facility, so we should call it Debugger.withTrace at least.

We need to improve this by adding in the ability to watch delimiter scanning actions as they succeed and fail as part of what the debugger/trace displays.

We also need indentation or some other means to determine nesting level. (Putting a level/depth number along the left edge may be enough.)

We also need ways to get finer granularity control rather than running it over the entire execution of the parser. This could be done by putting daf:trace properties of some sort on the parts of the schema of interest, or by supplying paths to schema components of interest for tracing. The trace facility would then turn on when that component was entered, and off when it was exited.

There are other options as well: turn on/off one of text or hex dumps. If data is all text, you probably never want to see the hex, and binary data, you may not want to bother with the text.",[],2013-01-04 03:07:43+00:00,2013-03-20 19:15:29+00:00,2013-06-17 14:59:13+00:00,Closed,13113875,DAFFODIL-457
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"ignoreCase property ripples through many aspects of text scanning for delimiters, matching static text, etc.",[],2013-01-04 02:53:17+00:00,2013-03-15 22:46:19+00:00,2013-03-18 18:46:05+00:00,Closed,13113874,DAFFODIL-456
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,"Parsers that scan for delimiters to determine the length of an element do so using a complex regular expression that embodies all the logic about matching the longest delimiter pattern.

Right now, this information is then discarded, and a subsequent step of the parser in the StaticText primitive picks up after the length determined above, and matches just the delimiter, all over again.

Besides being slow (might or might not be noticable in real formats), it will be confusing behavior if a user is trying to figure out what is going on in the parser, as it will appear to be doing things over again that it already did.

Watching this in any sort of detailed debugger/trace will be confusing to users.

So,... primitives that scan for delimiters should save both the element (into the infoset), and the text of the delimiter match in a special slot of the PState. Primitives like StaticText should look for this saved delimiter, and if it is present then their work is done, they should just advance past the delimiter. If it is not present they should do what they do now.",[],2013-01-04 02:39:37+00:00,2014-05-12 12:39:39+00:00,2014-05-23 14:00:08+00:00,Closed,13113873,DAFFODIL-455
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Expressions in DFDL are not just XPath expressions. The meaning of expressions is in some ways different.

In XPath it is legal to write a/b/nonsense where nonsense does not match any element name in the schema. In DFDL this should be a Schema Definition Error.

In XPath it is legal to write expressions that are queries which return many nodes.
In DFDL expressions must return exactly one thing - a simple type instance, or a single Node.

Implementing this, but still using our existing XPath implementation requires that we preprocess the expressions, wrapping every sub-expression with a function call that checks that only one value is produced. 

Similar to fn:exactly-one in xpath, but causes a schema definition error if zero or more than one node are returned. We will want to use a daffodil-specific extension function daf:one(...) (or some other name) which has this behavior. 

At the same time we need to check that paths are meaningful. I.e., if a path says a/b/c, that inside element a it is possible to have a b, and inside b it is possible to have a c. At the same time one should check that the types of expressions are correct (the a/b/c checking is effectively type checking.. of complex types).",[],2013-01-04 02:31:00+00:00,2014-11-11 14:43:14+00:00,2014-12-02 19:18:26+00:00,Closed,13113872,DAFFODIL-454
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Our path expressions are very error prone to write. Each path step is a reference to an element name, that is, a QName. You must get the prefix right (or use xmlns=""..."" for default namespace).

Leaving a prefix off or misspelling a node name results in an inscrutible error when you get a legal result which is an empty node list back for an expression instead of getting a ""no such element"" error.

We need to get a no-such-element error.",[],2013-01-04 02:22:03+00:00,2013-05-15 21:40:12+00:00,2013-05-28 21:28:58+00:00,Closed,13113871,DAFFODIL-453
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Property textNumberPattern, and many others in section 13.6 of the DFDL Spec (v1.0) need to be implemented.

The complete list is: 

textNumberPattern
textNumberCheckPolicy
textNumberRoundingMode
textNumberRounding
textNumberRoundingIncrement
textStandardGroupingSeparator
textStandardDecimalSeparator
textStandardZeroRep
textStandardBase (behaves as '10')

See also the JIRA issue DFDL-191 for enhancing floating point with its advanced properties for text.",[],2013-01-04 02:17:56+00:00,2013-08-14 16:25:53+00:00,2014-03-19 13:00:15+00:00,Closed,13113870,DAFFODIL-452
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Taylor: Do you know if the padChar is allowed to be the same as an escapeChar?

Mike: bad idea. I think we added an errata just a week or so ago that says it is an SDE if any of the things are not distinct. E.g., the terminator cannot be the same as the pad character either, nor any other delimiter, nor the textStandardGroupingSeparator nor ....\

Mike: delimiters can be shared prefixes of each other, and an enclosing group could have the same delimiters as something it encloses (e.g., enclosing gorup has comma separator, enclosed inner group does also) We do need an explicit check for the distinctness of these things. So jessie's test should throw an SDE.
So... that test should result in an SDE. We'll need to create a ticket/bug to add that.

Conversation above first referenced in DFDL-259 (Implement Trim/Pad/Fill)",[],2013-01-02 19:31:01+00:00,,2019-07-22 17:35:12+00:00,Reopened,13113869,DAFFODIL-451
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Several tests appear to now run after this push and others.  Using this ticket as a placeholder to contain names/locations for the test team.,[],2013-01-02 16:44:50+00:00,2013-04-10 11:21:56+00:00,2013-04-10 16:54:02+00:00,Closed,13113868,DAFFODIL-450
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The API currently requires setting of externally bound variables on the Compiler instance. That's much too early.

The external variables aren't needed until one is about to execute the processor on data; hence, this setExternalVariable call should also be available on the DataProcessor class. 

This would allow the external variable to be different for each invocation of the parser on different data.

E.g., if an external variable setting controls byte order, then one could set the byte order to big or little endian just before invoking the parser. 

The point is to put this API both on the Compiler, and on the DataProcessor so that if early binding of a variable is available it can be used, and this will result in compilation of the schema into a more efficient version. The best example of this is character set encoding. If we know that at Compile time, then entirely different, and more efficient, primitives can be chosen for many encodings (fixed width encodings to be specific.). If we do not know the encoding at schema compilation time, then primitives must be selected by DFDL compilation which can accommodate any character encoding, including those with variable width.",[],2012-12-31 20:45:38+00:00,2013-09-06 16:50:42+00:00,2013-09-16 17:43:04+00:00,Closed,13113867,DAFFODIL-449
New Feature,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,See nonNegativeInteger_bin test in daffodil-test\src\test\scala-debug\daffodil\section05\simple_types\TestSimpleTypes2.scala and commit f1a7463 in master.,[],2012-12-31 16:08:30+00:00,2013-07-09 14:33:57+00:00,2013-07-11 20:57:34+00:00,Closed,13113866,DAFFODIL-448
New Feature,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,See nonNegativeInteger_text test in daffodil-test\src\test\scala-debug\daffodil\section05\simple_types\TestSimpleTypes2.scala and commit f1a7463 in master.,[],2012-12-31 16:07:24+00:00,2013-06-25 18:47:00+00:00,2013-07-11 19:18:27+00:00,Closed,13113865,DAFFODIL-447
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When TDMLRunner compares error message fragments specified in a test to the actual messages it should do so case insensitively, so that grammatical phrasing, and whether a word is first in a sentence and so capitalized does not matter.",[],2012-12-27 20:22:41+00:00,2013-02-08 23:02:17+00:00,2013-02-15 15:53:41+00:00,Closed,13113864,DAFFODIL-446
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Instead of two separate primitives for StartElement and EndElement, we should lay down a combinator Element.

This has a minor performance, but mostly a code refactoring and debugging advantage because all the handling of elements will be in one class instead of spread over two classes with two separate parsers.",[],2012-12-27 18:51:41+00:00,2015-03-06 15:12:46+00:00,2017-07-26 16:23:33+00:00,Closed,13113863,DAFFODIL-445
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"An infix separator currently lays down this parser:

            <alt>
              <seq>
                <ArrayPosGreaterThan />
                <Sep>, ddd List(, ddd, ; ddd, ddd)</Sep>
              </seq>
              <seq>
                <GroupPosGreaterThan />
                <Sep>, ddd List(, ddd, ; ddd, ddd)</Sep>
              </seq>
              <Nada />
            </alt>

This should be replaced by a primitive InfixSepPrim which prints out as

            <InfixSep>, ddd List(, ddd, ; ddd, ddd)</InfixSep>

And which implements the same logic but within the primitive. There's no 
performance advantage (and some disadvantage) to elaborating the infix sep logic
in the grammar.",[],2012-12-27 18:48:43+00:00,2013-07-30 17:54:54+00:00,2013-08-01 14:49:57+00:00,Closed,13113862,DAFFODIL-444
Improvement,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, encoding_property_expression, in daffodil-test\src\test\scala-debug\daffodil\section11\content_framing_properties\TestContentFramingPropertiesDebug.scala.  See commit c56b004 in master.",[],2012-12-26 16:24:16+00:00,2013-02-08 04:23:08+00:00,2013-02-14 19:56:49+00:00,Closed,13113861,DAFFODIL-443
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"This really depends on what is meant by ""required"". If the schema requires it in order to be valid, there is a bug. However, if it is required for an element to reference it, this is fulfilled. Please see test escapeSchemeFail2 in the following files:


test/resources/daffodil/section07/escapeScheme/escapeScheme.tdml
test/scala-debug/daffodil/section07/escapeScheme/TestEscapeSchemeDebug.scala
test/scala/daffodil/section07/escapeScheme/TestEscapeScheme.scala",[],2012-12-21 19:58:56+00:00,2012-12-31 21:18:00+00:00,2013-01-02 17:13:33+00:00,Closed,13113860,DAFFODIL-442
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"For example, if you have an element like this:

<element name=""foo"" occursCountKind=""parsed"">

because there is no minOccurs or maxOccurs, occursCountKind=""parse"" is ignored.

We should provide warning messages for things like this.",[],2012-12-20 14:08:13+00:00,,2018-09-13 14:04:00+00:00,Open,13113859,DAFFODIL-441
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Use of entities syntax like so: %NOTVALID; or %#NOTANUMBER; or %#xNOTAHEXNUMBER; should cause an SDE, not just be ignored.",[],2012-12-19 23:24:58+00:00,2013-06-04 12:10:20+00:00,2013-06-17 15:01:00+00:00,Closed,13113858,DAFFODIL-440
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Blocker,,[],2012-12-18 20:08:11+00:00,2013-04-09 21:57:10+00:00,2018-09-13 14:13:20+00:00,Closed,13113857,DAFFODIL-439
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to requirement DFDL-14-042R:
hiddenGroupRef
 - Qname or empty String
...
 - If the value is the empty string then there is no hidden group.

I created a test where dfdl:hiddenGroupRef="""", and all tests complain with the following error:

[info]   org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '' is not a valid value for 'QName'.

Even when I remove the test that uses this schema from the list of tests to run, the other tests fail. Because of this, I have not pushed the test to master, as it would break other tests. I can push the test up commented-out if needed.",[],2012-12-17 16:54:10+00:00,2013-01-02 20:52:19+00:00,2013-01-02 20:52:32+00:00,Closed,13113856,DAFFODIL-438
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Split this off of DFDL-364 so that can be about bits for the binary integer types only.,[],2012-12-13 06:20:21+00:00,2017-01-13 22:04:47+00:00,2017-08-01 20:54:15+00:00,Closed,13113855,DAFFODIL-437
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,See this discussion for details:http://www.ogf.org/pipermail/dfdl-wg/2012-December/002204.html,[],2012-12-12 16:58:06+00:00,2013-01-07 20:27:19+00:00,2013-01-29 19:53:29+00:00,Closed,13113854,DAFFODIL-436
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you write <xs:appinfo source=""..."">...

Then unless the source attribute is EXACTLY the right one, whatever is inside it will simply be ignored. 

We need to warn if the source attribute is NOT what we expect and will be ignoring it.

Otherwise very wierd errors where say, a discriminator is simply not seen or processed can silently occur just because you have a typo in the source attribute of the appinfo.

This is a HUGE time waster.",[],2012-12-11 19:57:59+00:00,2013-05-16 15:37:27+00:00,2013-05-16 17:31:41+00:00,Closed,13113853,DAFFODIL-435
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"If you use the body form of an assert or discriminator the { } surrounding the expression must be the VERY FIRST characters, and VERY LAST characters.

Otherwise you get an unscrutible error about it being impossible to convert a string to a boolean.

This is too fussy and fragile. 

First, if you do blow it on the syntax of the expression one should get a useful Schema Definition Error.

Second, we should be a little more tolerant i.e., any whitespace before the { and any after the } should be trimmed away. Otherwise you have no choice but to put in CDATA to prevent line wrapping from perhaps inserting whitespace that breaks things.

I.e., This doesn't work due to whitespace before the { and after the }:

 <dfdl:discriminator>
  { if (../ex:presenceBit = 0) then false()
    else if
    (dfdl:occursIndex() = 1) then true()
    else if
    (..[dfdl:occursIndex()-1]/ex:repeatBit = 0) then false()
    else true() }
 </dfdl:discriminator>

You must use <![CDATA[ ... ]]> to prevent line wrapping from breaking this.",[],2012-12-11 19:55:30+00:00,2013-05-15 18:55:18+00:00,2013-06-17 19:25:35+00:00,Closed,13113852,DAFFODIL-434
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Threw to top level when I made an error in an expression.

It should wrap this as a diagnostic object, and of course give me the context of the object in the schema whose expression contains the error.

java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Boolean
	
Note that the error was that I wrote ""{ if (../tns:x eq 0) then true else false }"" -- see the error. There's no true or false in Xpath. You have to write true() and false().",[],2012-12-11 18:56:03+00:00,2013-05-15 19:56:26+00:00,2013-05-16 16:49:15+00:00,Closed,13113851,DAFFODIL-433
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"The check for leftover data seems to be done after the comparison takes place between the parsed data and the expected data. For example, I created a test with more than 64 bits to represent a double value. I had an arbitrary value in the expected value (leftover from copying a test), and when I ran the test I got an error that the values did not match, rather than a complaint about leftover data. Should it do this check before comparing values?",[],2012-12-07 19:29:54+00:00,,2018-09-13 14:04:42+00:00,Open,13113850,DAFFODIL-432
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"This JIRA ticket is a placeholder for issues where we identify something we really should improve, but it's not technically speaking incorrect. Rather it is, just less clear, less maintainable, needs comments, needs name changes to identifiers or method names, etc.

This lets us follow our standard workflow, which requires a JIRA ticket as step one in all changes.",[],2012-12-06 13:55:04+00:00,2013-01-09 19:09:04+00:00,2013-01-09 19:09:09+00:00,Closed,13113849,DAFFODIL-431
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,This isn't the implementation of Trim/Pad/Fill but contains the test code to get the parser statements correct to implement it in DFDL.,[],2012-12-05 20:21:37+00:00,2012-12-17 14:47:35+00:00,2012-12-17 14:47:39+00:00,Closed,13113848,DAFFODIL-430
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Many formats use NUL as a terminator, separator, or indicator of some kinds. Other times it must actually appear in data values. 

However, if this character (and many other illegal XML 1.0 characters) are attempted to be inserted into our JDOM tree, an error occurs. 

All XML Illegal characters need to be remapped to legal characters. The Unicode Private Usage Area (PUA) can be used for this.

The specific design is in this Daffodil wiki page: 

http://opensource.ncsa.illinois.edu/confluence/display/DFDL/Daffodil+and+the+DFDL+Infoset",[],2012-12-05 03:27:11+00:00,2012-12-27 20:35:25+00:00,2012-12-27 20:35:44+00:00,Closed,13113847,DAFFODIL-429
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"See test escape_entry4-26 in:
daffodil-test/src/test/scala-debug/daffodil/section31/escape_characters/TestEscapes.scala
daffodil-test/src/test/resources/daffodil/section31/escape_characters/Escapes.tdml

Actual result != expected result, and I'm not entirely sure what's happening.",[],2012-12-04 19:37:41+00:00,2012-12-14 15:16:26+00:00,2012-12-14 16:45:34+00:00,Closed,13113846,DAFFODIL-428
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"ComplexWithBinaryChild test in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindPatternDebug.scala should fail.  It violates the requirement that an element of complex type must have
simple child elements with representation 'text'.  Please see commit 304291c in master.",[],2012-12-04 18:17:24+00:00,2013-05-06 17:31:28+00:00,2013-05-08 14:03:41+00:00,Closed,13113845,DAFFODIL-427
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Tests, AK000 and AK001, in daffodil-core\src\test\scala-debug\daffodil\TresysTests2.scala fail.  Error message is: Schema Definition Error: Size of binary data 'unsignedByte' cannot be determined implicitly.  Please see commit 293ecaf in master.",[],2012-12-03 18:20:52+00:00,2012-12-17 14:51:44+00:00,2012-12-17 22:55:23+00:00,Closed,13113844,DAFFODIL-426
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,PDFs were made wrong. Somehow they're not searchable.,[],2012-11-30 13:46:39+00:00,2012-11-30 13:51:32+00:00,2012-11-30 13:51:36+00:00,Closed,13113843,DAFFODIL-425
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-11-30 13:45:26+00:00,2012-11-30 13:51:00+00:00,2012-11-30 13:51:06+00:00,Closed,13113842,DAFFODIL-424
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Anywhere that we use a * or + in a regex, we need to replace it by {0,N} or {1, N} where N is a tunable constant taken from daffodil.compiler.Compiler object (where all the other tunable constants live).

This is to eliminate the issue that regex's can be exploited to crash/disable software by making them either too slow, or blowing up some buffer capacity.

Where a + or * will match characters that are part of a delimiter there should be a constant for maximum delimiter size. Where a + or * will match simple type content, there should be a maximum simple element size. (These are all measured in characters I believe.). Where a + or * will match complexContent size, there should be a different maximum complex content size.",[],2012-11-28 15:52:48+00:00,,2018-09-13 14:04:04+00:00,Open,13113841,DAFFODIL-423
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-11-27 18:14:11+00:00,2013-07-09 18:50:22+00:00,2013-07-12 17:42:39+00:00,Closed,13113840,DAFFODIL-422
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-11-27 18:13:32+00:00,2013-06-27 14:24:54+00:00,2013-07-17 15:04:36+00:00,Closed,13113839,DAFFODIL-421
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"As we complete features of DFDL, more of the IBM-contributed tests will start working. This task is to periodically (as of each spin), move over the ones that start working.

(new version of this task should be created for each spin where we hope to have more tests start working.)",[],2012-11-27 18:09:27+00:00,2012-11-27 18:10:33+00:00,2012-11-28 20:45:48+00:00,Closed,13113838,DAFFODIL-420
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,See test_BadErrorMsgWhenRequiredFieldIsMissingAndSeparatorIsPrefixOfTerminator which causes this diagnostic to be issued.,[],2012-11-26 18:07:14+00:00,2013-09-20 13:15:27+00:00,2013-10-02 21:08:18+00:00,Closed,13113837,DAFFODIL-419
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"TDML Runner has a feature <documentPart type=""bits""> where you can put individual 1's and 0's as bits.

It is broken.

If the number of bits is not a multiple of 8, then it needs to add additional bits on the right (as if written as added zeros on the end of the string.

So <document><documentPart type=""bits""/>1</documentPart></document> represents 1 bit, but as a hex byte that bit is 0x80, not 0x01.


The number of available bits however, as is used when checking if there is left-over data after a test, must be maintained accurately (i.e., does not include any bits added on. So if a test consumes only a single bit, but the data is defined as above, then the test will have consumed all the data.

If however, the data was

So <document><documentPart type=""bits""/>11</documentPart></document> then there are two bits, and if the test consumes only 1, then 1 bit is left-over data and that is an error.",[],2012-11-21 23:02:38+00:00,2012-11-27 01:46:35+00:00,2012-11-30 17:10:06+00:00,Closed,13113836,DAFFODIL-418
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"see test_property_scoping_03

The addition of bits numbers included some new checking. This checking now makes this test fail (It should have been failing all along, but was passing spuriously.)",[],2012-11-21 21:40:29+00:00,2013-02-08 22:54:04+00:00,2013-02-12 14:23:26+00:00,Closed,13113835,DAFFODIL-417
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,See test test_E1 in TestDelimiterProperties.scala and DelimiterProperties.tdml,[],2012-11-21 13:38:32+00:00,2012-11-25 16:26:10+00:00,2012-11-26 19:39:53+00:00,Closed,13113834,DAFFODIL-416
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Right now first thing that the Daffodil front end does is feed the DFDL schema to Xerces for validation against the Schema for DFDL Schemas, which also includes the schema for DFDL annotations. 

This does not accumulate validation errors. It throws an exception, which is caught and turned into a single diagnostic.

It would be better if multiple such schema validation errors could be gathered and reported rather than just one.

(This bug rated 'minor' because tooling such as Eclipse helps find and isolate multiple such schema authoring issues at once, so that ameliorates the problem.)

Details on how to fix: From email thread between Mike Beckerle and Jonathan Cranford in discussion on this topic:


Mike,

Sorry, I'm still catching up on email from before my move west.

Have you tried setting an ErrorHandler?

Here's some code snipped from XML Calabash that demonstrates the API:

             Schema schema = factory.newSchema(new SAXSource(is));
             Validator validator = schema.newValidator();
            validator.setErrorHandler(new XSDErrorHandler());

Norm Walsh added the ability to XML Calabash just recently (well, early this year) to report more than one schema validation error.  See the commit difference in his ValidateWithXSD class.

Let me know if that helps,

-Jonathan",[],2012-11-19 17:58:58+00:00,2013-02-08 23:01:26+00:00,2013-02-12 15:45:41+00:00,Closed,13113833,DAFFODIL-415
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Currently we SDE if representation=""text"" and lengthKind=""implicit"". This is not correct for xs:string types (or simpleTypes derived from it.) because there is the maxLength facet. (There's a length facet, which seems to be equivalent to maxLength = minLength = length, so just asking for maxLength facet is right.)

This doesn't apply to any types other than xs:string, because only xs:string can carry the length/maxLength facet. E.g., you can't use this to indicate the length of the text underlying an integer because xs:int type can't have the maxLength facet.",[],2012-11-17 01:49:52+00:00,2013-02-07 13:27:55+00:00,2013-02-08 13:19:06+00:00,Closed,13113832,DAFFODIL-414
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This issue anticipates a recent DFDL workgroup clarification on how discriminators/asserts of testKind pattern work.

This should be confirmed as an official errata or in the next draft of the DFDL spec before implementing this. 

It is mentioned here because potentially the grammar has to change to accomodate it. I.e., the up front framing content must NOT be parsed before considering the statement annotations. 

The point: the regex pattern match goes against the whole element representation, not against just the content region of it. Or in case of a sequence/choice, against the whole construct (starting from the start of the Left Framing).",[],2012-11-16 22:24:12+00:00,2013-02-25 16:36:20+00:00,2013-02-27 20:12:32+00:00,Closed,13113831,DAFFODIL-413
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"When an assert/discriminator is of testKind pattern the pattern test passes if the regex matches a prefix of the data stream at the start of the element 

This match attempt is not bounded by the length of the element.

It's entirely possible for a very bad regex pattern to cause massive scanning of the data stream before returning a match or a failure.

Our runtime should emit warnings if this is happening i.e., an attempt to match a regex that consumes more than N characters should emit a warning, then every N more characters, etc.

A tunable limit should be created for this regex lookahead/match so that we can force a failure here. The Daffodil API should provide a way to set this tunable limit.",[],2012-11-16 22:19:24+00:00,,2020-11-24 21:24:14+00:00,Open,13113830,DAFFODIL-412
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"if the value is nil, then checkConstraints should not check facets as they won't hold (e.g., a pattern is about a string value, there's no value at all if it's nil)",[],2012-11-16 18:37:27+00:00,2012-11-16 19:21:09+00:00,2012-11-21 18:14:06+00:00,Closed,13113829,DAFFODIL-411
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"expressions.tdml exists in daffodil-core.

An extended more elaborate one is in daffodil-test. But I think there are a number of duplicate tests.

If these tests are truly duplicates, then it's just legacy that they are in both places. they should be dropped from daffodil-core, and expressions.tdml removed from daffodil-core.

Alternatively, very basic tests that count as ""expressions unit tests"" can stay, but duplicates should then be removed from daffodil-test's expressions.tdml so that we don't have a regression causing two identical tests to fail in two places.",[],2012-11-16 13:27:34+00:00,2012-11-20 18:00:38+00:00,2012-11-20 18:01:40+00:00,Closed,13113828,DAFFODIL-410
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"We need to revive the command line ability to run daffodil (which is an application of the Daffodil APIs), and provide for sbt to build the jars necessary for this to be a binary distributable. 

It needs to have the options to specify a schema, or places to find schemas, the root element, and then take either a data file, or a list of data files.",[],2012-11-15 19:18:31+00:00,2013-01-22 17:30:45+00:00,2013-02-16 15:16:19+00:00,Closed,13113827,DAFFODIL-409
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,NumSeq_01 in daffodil-test\src\test\scala\daffodil\section12\lengthKind\TestLengthKindDelimited.scala is the test for a sequence with a newline terminator.  nested_NumSeq_01 in the corresponding debug folder is the test for a nesting of these sequences separated by a newline.  Please see commit ee51032 in master.,[],2012-11-14 20:01:16+00:00,2012-11-14 22:30:20+00:00,2012-11-16 23:51:28+00:00,Closed,13113826,DAFFODIL-408
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Even if a TDML file has setup a default namespace to be the same as the target namespace, an expression in the schema still has to use prefix-qualified names for referring to every element.

E.g., ../ex:foo/ex:bar

when ../foo/bar should work if the default namespace is the same as for the ex prefix.

To test this, take any test, e.g., test_repeatFlags3, and change the discriminator expression to remove the ex: prefixes. Add a xmlns=""http://example.com"" at the top of the TDML file. 

Voila, it fails. Annoyingly and silently, because ../foo when there is no default namespace looks for peer element foo but doesn't look in the right namespace, so returns ""empty node list"", which is legal, but useless.",[],2012-11-14 16:23:23+00:00,2013-05-03 18:10:25+00:00,2013-05-14 16:07:46+00:00,Closed,13113825,DAFFODIL-407
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Many chunks of code in non test directories rely on junit, for example, there are tests in Compiler.scala which should be in the test directory. Additionally, the TDMLRunner should be separated, possibly into it's own package that tests depend on but actual daffodil code does not.",[],2012-11-14 14:13:28+00:00,2014-09-11 15:15:15+00:00,2014-10-07 17:58:05+00:00,Closed,13113824,DAFFODIL-406
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-11-12 18:23:26+00:00,2012-11-13 18:17:51+00:00,2013-01-08 23:05:15+00:00,Closed,13113823,DAFFODIL-405
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-11-12 18:23:13+00:00,2012-11-13 18:17:27+00:00,2013-01-08 23:05:10+00:00,Closed,13113822,DAFFODIL-404
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-11-12 18:23:01+00:00,2012-11-13 16:00:17+00:00,2013-01-08 23:05:06+00:00,Closed,13113821,DAFFODIL-403
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-11-12 18:22:43+00:00,2012-11-13 16:54:53+00:00,2012-11-13 16:55:02+00:00,Closed,13113820,DAFFODIL-402
Wish,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need an extension to DFDL to allow schema authors to declare they would like a element child to instead appear in an XML-conversion of the DFDL infoset as an XML attribute.

So instead of <foo><bar>1</bar><baz>2</baz></foo>, you can get the more human friendly <foo bar=""1"" baz=""2""/> as the XML-conversion.

The property cannot be in the DFDL property namespace; hence daffodil: prefix, not dfdl: prefix:

Possible names: daffodil:asXMLAttribute=""true"" or daffodil:XMLConversion=""asAttribute""",[],2012-11-09 18:38:02+00:00,2020-12-16 20:15:58+00:00,2020-12-16 20:15:58+00:00,Closed,13113819,DAFFODIL-401
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I created two tests that expect a Unique Particle Attribution error, but no error is produced.

tests are in commit 5208de09",[],2012-11-08 16:05:53+00:00,2013-10-04 20:33:56+00:00,2013-10-04 20:34:01+00:00,Closed,13113818,DAFFODIL-400
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, varAsSeparator, in daffodil-test\src\test\scala-debug\daffodil\section07\variables\TestVariablesDebug.scala and commit dff602 in master.  Error message is a not yet implemented exception.",[],2012-11-08 16:05:16+00:00,2013-05-14 19:04:56+00:00,2013-05-14 19:05:07+00:00,Closed,13113817,DAFFODIL-399
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, setVarSimpleType, in daffodil-test\src\test\scala-debug\daffodil\section07\variables\TestVariablesDebug.scala and commit dff6602 in master.  Error message is an Invariant broken exception.",[],2012-11-08 16:00:13+00:00,2012-11-16 19:22:53+00:00,2012-11-26 17:06:01+00:00,Closed,13113816,DAFFODIL-398
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"I created a schema that provides both a test expression and test pattern for the discriminator. As per DFDL-7-69R, this should cause a Schema definition error. However, when running the test I get the following error:


[info] - test_discriminators_discrimInvalidSchema *** FAILED ***
[info]   daffodil.exceptions.Abort: Invariant broken. unexpected case.
[info] daffodil.exceptions.Assert$.abort(Assert.scala:53)
[info] daffodil.exceptions.Assert$.invariantFailed(Assert.scala:90)
[info] daffodil.dsom.DFDLAssertionBase.testTxt(DFDLAnnotation.scala:552)
[info] daffodil.processors.AssertPatternBase.<init>(Primitives.scala:2419)
[info]   at daffodil.exceptions.Assert$.abort(Assert.scala:53)
[info]   at daffodil.exceptions.Assert$.invariantFailed(Assert.scala:90)
[info]   at daffodil.dsom.DFDLAssertionBase.testTxt(DFDLAnnotation.scala:552)
[info]   at daffodil.processors.AssertPatternBase.<init>(Primitives.scala:2419)
[info]   at daffodil.processors.DiscriminatorPatternPrim.<init>(Primitives.scala:2487)
[info]   at daffodil.dsom.DFDLDiscriminator.gram(DFDLAnnotation.scala:576)
[info]   at daffodil.dsom.DFDLDiscriminator.gram(DFDLAnnotation.scala:572)
[info]   at daffodil.dsom.DFDLStatement.diagnosticChildren(DFDLAnnotation.scala:413)
[info]   at daffodil.dsom.DiagnosticsProviding$class.isError(ProvidesDiagnostics.scala:150)
[info]   at daffodil.dsom.DFDLAnnotation.isError(DFDLAnnotation.scala:20)
[info]   ...

The test is currently in:
daffodil-test/src/test/scala-debug/daffodil/section07/discriminators/TestDiscriminatorsDebug.scala

(test_discriminators_discrimInvalidSchema)",[],2012-11-07 18:29:11+00:00,2012-11-15 20:06:34+00:00,2012-11-16 13:37:00+00:00,Closed,13113815,DAFFODIL-397
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"The following were issues that I found when working on DFDL-338.

1) Assert on group reference and element reference are not functional.  See assertOnGroupRef and assertOnElemRef in daffodil-test\src\test\scala-debug\daffodil\section07\assertions\TestAssertions2.scala.
2)Shouldn't these tests, discrimPatternPass2, discrimPatternFail2, discrimPatternFail3, discrimPatternFail4, discrimPatternFail5, and discrimPatternFail6, in daffodil-test\src\test\scala\daffodil\section07\discriminators\TestDiscriminators.scala generate a schema definition error?  It seems they violate the statement in the DFDL specification, 'Any one annotation point can contain only a single dfd:discriminator or one or more dfdl:asserts, but not both. It is a schema definition error otherwise.'
3) choiceBranchDiscrimFail in daffodil-test\src\test\scala-debug\daffodil\section07\discriminators\TestDiscriminatorsDebug.scala should generate a parser error.  According to the spec, if the discriminator is successful then the component is known to exist and any subsequent errors will not cause backtracking at points of uncertainty.

Please see commits 4ac15b9 and ac91002 in master",[],2012-11-06 18:16:43+00:00,2012-11-16 22:47:21+00:00,2012-11-21 18:06:58+00:00,Closed,13113814,DAFFODIL-396
Bug,[],gmcdonald,Gavin McDonald,daffodil-ssustrich,Shawn Sustrich,Major,"Description:
System seems to be using the terminator as both terminator and initiator. Doc_07 in nillable.tdml uses an [ for an initiator and a ] as a terminator amongst other nill parameters. However when running test test_nillable1 in TestNillableDebug.scala with logging set to debug the system will report that it can't find init(])  If you change the terminator to something else like T and rerun the test the system will say can not find init(T). Taylor instructed me on how to set logging levels so we could verify that this is an actual issue and not an issue with the printout from daffodill.Debuger 

Steps to reproduce:
1) Turn on debug level logging
2) Run test test_nillable1
3) Verify that system uses the terminator as the initiator
4) Change the terminator and re run
5) Verify that the system is using the new terminator as the initiator

Problem:
It may be something as simple as a copy and paste issue or a variable simply being given the wrong value but it seems fairly clear that the system is using the value of the terminator as the value to use for the initiator as well.",[],2012-11-01 09:10:18+00:00,2013-01-30 19:34:06+00:00,2013-01-31 21:27:25+00:00,Closed,13113813,DAFFODIL-395
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Note: I've removed a portion of this description because it was separated into a new ticket (DFDL-412)

asserts/discriminators with testKind='pattern' the pattern must match a prefix of the current textual data stream.
This match attempt is done before the element is parsed.

(Our combinator which evaluates elements with their associated DFDL statement annotations - asserts, setVariable, etc. - this must be changed to evaluate asserts/discriminators with testKind='pattern' first.)",[],2012-10-30 14:51:17+00:00,2012-11-16 22:16:42+00:00,2012-11-27 19:37:56+00:00,Closed,13113812,DAFFODIL-394
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The DFDL Spec current disallows DFDL statement annotations (assert, discriminator, setVariable, newVariableInstance) to appear on global element declarations and on simpleTypes.

However, the DFDL Workgroup has agreed this is an oversight and needs to be corrected. A future draft of the specification will correct this, and an errata to the existing spec is forthcoming.

This features is needed to support important data formats in a reasonable way that avoids repetition of regular expressions all over the schema.",[],2012-10-30 14:19:44+00:00,2012-11-16 19:23:20+00:00,2012-11-20 18:37:53+00:00,Closed,13113811,DAFFODIL-393
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This function is needed to implement important formats that need regular expression-based guidance of the parser.

This feature depends on implementation of the XSD pattern facet (DFDL-383) which is the most critically needed feature, but eventually must force checking of all facet constraints that DFDL supports.",[],2012-10-30 14:11:44+00:00,2012-11-05 19:53:55+00:00,2012-11-16 18:37:17+00:00,Closed,13113810,DAFFODIL-392
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When the entire test suite is run, if dfdlPosition1 is set to run, scalarElements fails. However, if dfdlPosition1 is commented out, scalarElements passes as expected. When the Facets and Expressions tests are run independently, all of the tests pass. I've attached debugging output for scalarElements for both scenarios (test failing when all tests are run versus test passing when run independently).

I pushed up the expressions tests, but left dfdlPosition1 commented out so the test harness does not break.",[],2012-10-29 14:30:59+00:00,2012-12-17 14:37:46+00:00,2012-12-18 15:03:37+00:00,Closed,13113809,DAFFODIL-391
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,See test test_optionalWithSeparators,[],2012-10-26 01:41:30+00:00,2012-11-16 19:22:25+00:00,2012-12-10 14:56:50+00:00,Closed,13113808,DAFFODIL-390
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"<xs:group ref=""notThere""/>

You get an invariant failure.

Turn on LoggingDefaults.setLoggingLevel(LogLevel.Compile)

and you can see the SDE being reported, but it's not being gathered back to the set of diagnostics that are reported.

The compilation fails, but since the list of diagnostic objects is empty you get the invariant failure instead of the SDE you want.",[],2012-10-25 20:32:31+00:00,2012-11-15 18:07:09+00:00,2012-11-15 21:29:30+00:00,Closed,13113807,DAFFODIL-389
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Unions are used to combine simple types in a way that creates alternatives E.g., a number that is between 1 and 10 OR between 20 and 50. 

Unions are very restricted in DFDL, but they provide an enhancement to validation.",[],2012-10-24 20:27:51+00:00,2017-03-07 21:45:27+00:00,2017-03-07 21:45:27+00:00,Closed,13113806,DAFFODIL-388
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When a simple type is created by deriving from another simple type, any facet checks specified on the base are inherited by the derived child and combined with locally specified ones as additional restrictions. These are narrowings unless unions of types are used. (which is a separate implementation issue)",[],2012-10-24 20:26:18+00:00,2013-02-07 13:26:47+00:00,2013-02-15 20:30:03+00:00,Closed,13113805,DAFFODIL-387
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-10-24 20:24:25+00:00,2013-02-11 12:58:41+00:00,2013-02-15 16:03:51+00:00,Closed,13113804,DAFFODIL-386
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-10-24 20:23:38+00:00,2013-01-25 13:21:47+00:00,2013-01-25 15:01:46+00:00,Closed,13113803,DAFFODIL-385
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-10-24 20:23:04+00:00,2013-02-11 12:58:00+00:00,2013-02-15 17:23:01+00:00,Closed,13113802,DAFFODIL-384
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-10-24 20:22:28+00:00,2012-11-14 18:14:02+00:00,2012-11-15 19:34:07+00:00,Closed,13113801,DAFFODIL-383
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"I implemented LiteralValue Nils for LengthKinds: Delimited, Pattern, and Explicit.  Explicit only works for LengthUnits.Bytes and LengthUnits.Characters at the moment.  All others should error with ""Not Yet Implemented"".

LengthKind.Implicit is not allowed for representation='text', unless it is a complex type. So this will eventually throw an SDE (Schema Definition Error).  However, LiteralValue nil is generally unimplemented for LengthKind.Implicit right now.

LiteralValue Nils are not valid unless it's representation='text'.  Representation='binary' for LiteralValue nils will now throw an SDE.

The affected tests are located in daffodil-test/src/test/scala/daffodil/section13/nillable/TestNillable.scala.

Tests: test_binary_01, test_entity_fail_05, test_entity_fail_06.

These tests were commented out from the 'live' section and moved to the 'debug' section pending alteration.

Commits: 1519d3, a934f3, 602a78",[],2012-10-24 19:43:13+00:00,2013-08-05 17:09:35+00:00,2013-08-06 22:02:22+00:00,Closed,13113800,DAFFODIL-382
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"See test assertPatternLiteralTextMatch. 

Basic regular expressions like XYZZY which shoudl match exactly and only that, are off by one at the beginning so failing to match.",[],2012-10-24 18:44:34+00:00,2012-10-24 18:59:00+00:00,2012-10-29 17:55:13+00:00,Closed,13113799,DAFFODIL-381
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"<dfdl:assert testKind=""pattern"">ABC</dfdl:assert>

won't compile because ABC doesn't match the syntax of an ""expression"" in our expression language.

However, in this case it's supposed to accept a pattern there.

DFDL-7-040R : DFDL asserts can be placed on
DFDL-7-041R : These dfdl:asserts contain a t
DFDL-7-042R : The dfdl:assert is said to be
DFDL-7-043R : An unsuccessful dfdl:assert ca
DFDL-7-044R : The dfdl:testKind attribute sp
DFDL-7-045R : The expression or pattern can
DFDL-7-046R : 7-046R - It is a schema defini
DFDL-7-047R : 7-047R - It is a schema defini
DFDL-7-048R : A dfdl:assert can be an annota
DFDL-7-049R : �����������an xs:element reference,
DFDL-7-050R : �����������an xs:group reference,
DFDL-7-051R : �����������an xs:sequence
DFDL-7-052R : �����������an xs:choice.
DFDL-7-053R : More than one dfdl:assert may",[],2012-10-24 15:14:51+00:00,2012-10-24 16:46:49+00:00,2013-05-29 11:56:40+00:00,Closed,13113798,DAFFODIL-380
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Some formats require character encodings that use non-byte-aligned representations. E.g., 7-bit ascii codes that are not each in an octet, but are packed back to back 7 bits each, so that 56 bits stores 8 characters.

Some use USASCII, others, like GSM_338 are more international friendly.

There are not many encodings like this, but they are important in that they are commonly used.

In DFDL v1.0, these must be represented as different encoding names. E.g., this is not USASCII character encoding with some other properties to indicate how the codepoints are packed, it is 'USASCII-packed' or some other variant name.

We need to recognize a variant name and implement 7-bit packed USASCII.",[],2012-10-24 15:02:26+00:00,2012-12-17 14:27:12+00:00,2012-12-17 14:27:37+00:00,Closed,13113797,DAFFODIL-379
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Our debugger trace output currently outputs data in text and hex, but assumes utf-8 for the text.

This needs to be improved to use the currently-specified encoding, and to handle decode errors.

E.g., suppose you have !!crud!! where crud is not c.r.u.d, but some bytes that won't properly decode as characters. This wants to present in the debugger as

!!????!!

where ? is the unicode replacement character.

I believe newlines and other ""moving whitespace"" like tabs should also be replaced by a substitution character that says what they are. (Box character with a codepoint written inside it)",[],2012-10-24 14:12:26+00:00,,2018-09-13 14:04:33+00:00,Reopened,13113796,DAFFODIL-378
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"According to the spec, with an escapeCharacter of ""/"" and an escapeEscapeCharacter of ""%"" when parsing ""..%%/.."", the result should be ""..%/.."", where the ""/"" is escaped by the second ""%"", thus removing the second ""%"", and the first ""%"" should not be removed because it is not followed directly by ""/"".

or more generally stated: On parsing, the dfdl:escapeEscapeCharacter is removed from the data unless the dfdl:escapeEscapeCharacter does not precede the dfdl:escapeCharacter.

However, the actual result is ""../.."", where both escapeEscapeCharacters are removed.",[],2012-10-24 13:32:49+00:00,2012-12-14 15:15:48+00:00,2012-12-14 16:51:13+00:00,Closed,13113795,DAFFODIL-377
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"When creating tests for Escape Scheme Use Cases (DFDL-301) I came across the following issue:

<dfdl:defineEscapeScheme name=""table1"">
      <dfdl:escapeScheme escapeCharacter='/' escapeKind=""escapeCharacter"" escapeEscapeCharacter=""/"" extraEscapedCharacters=""?"" />
</dfdl:defineEscapeScheme>

<tdml:document><tdml:documentPart type=""text"">....//....</tdml:documentPart></tdml:document>

According to the table, I should expect the following output:

<tdml:dfdlInfoset>
     <element1>..../....</element1>
</tdml:dfdlInfoset>

Where the escapeEscapeCharacter prevents the escapeCharacter from being removed.

However, this is the actual result:

Actual <element1 xmlns:ex=""http://example.com"">........</element1>

I've created more tests that test this same principle and none are providing the expected result",[],2012-10-23 18:31:50+00:00,2012-12-14 15:15:13+00:00,2012-12-14 16:53:32+00:00,Closed,13113794,DAFFODIL-376
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When a complex type has lengthKind='pattern', there are restrictions on what is inside that complex type. It must be scannable as in ""all text"" and have the same encoding used throughout.

It is a schema def. error otherwise. We need to do this complex check across the scope of the complex type.",[],2012-10-22 13:20:00+00:00,,2018-09-13 14:04:41+00:00,Open,13113793,DAFFODIL-375
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"nils are represented by an xsi:nil=""true"" attribute.

To make comparison results cleaner, we strip all attributes since DFDL doesn't use attributes... except for xsi:nil. Which we need to preserve.

Similarly, if we start embellishing the infoset with xsi:type we'll need to preserve that also.",[],2012-10-20 01:29:14+00:00,2012-10-23 18:50:14+00:00,2012-10-24 20:47:32+00:00,Closed,13113792,DAFFODIL-374
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Need to ensure nothing is using the low level byte channel,[],2012-10-18 23:11:53+00:00,2012-11-29 00:39:45+00:00,2012-12-07 20:39:57+00:00,Closed,13113791,DAFFODIL-373
Improvement,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-10-18 23:10:51+00:00,2015-05-14 14:04:12+00:00,2015-06-23 14:13:46+00:00,Closed,13113790,DAFFODIL-372
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 23:10:15+00:00,2012-10-24 14:29:08+00:00,2012-10-25 19:59:05+00:00,Closed,13113789,DAFFODIL-371
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"A warning should be issued if a complex type has lengthKind='delimited' and contained children elements use lengthKind=""pattern"", since those children will NOT be contained by finding the delimiter of the enclosing complex type.",[],2012-10-18 23:09:26+00:00,2020-08-05 17:25:34+00:00,2020-08-05 17:25:35+00:00,Closed,13113788,DAFFODIL-370
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,"Tests which illustrate how a grammar can be ambiguous, and that this ambiguity can be undetectable. I.e., the test would fail if Daffodil decided that the grammar was ambiguous.

(We are not supposed to check for this situation because it is not portable to do so since it is assumed that many DFDL implementations will NOT be sophisticated enough to even attempt this.... and it actually may be undecidable, not sure,.. and if you use runtime expressions for delimiters, you can't tell until run time anyway, and if those are changing at find granularity - e.g., every record has its own terminator specified,... then you'd be checking while parsing every record which is a bad idea.)

The right thing to do is to NOT check for these ambiguities. It should just make a best effort at runtime, and if the parse is not successful that's ok.",[],2012-10-18 23:08:26+00:00,2017-04-06 19:35:44+00:00,2017-04-06 19:35:44+00:00,Closed,13113787,DAFFODIL-369
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 23:07:56+00:00,2013-02-08 02:04:00+00:00,2013-02-08 19:44:30+00:00,Closed,13113786,DAFFODIL-368
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Requires discussion with DFDLWG,[],2012-10-18 23:07:38+00:00,2013-01-25 18:57:36+00:00,2013-02-15 15:36:54+00:00,Closed,13113785,DAFFODIL-367
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 23:06:55+00:00,2017-01-23 17:53:00+00:00,2018-09-13 14:13:27+00:00,Closed,13113784,DAFFODIL-366
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Implement a small collection of realistic binary format tests that illustrate presence and repeat bit control using expressions, and other key features of important binary data formats.",[],2012-10-18 20:02:06+00:00,2012-11-27 01:48:40+00:00,2012-12-03 14:51:43+00:00,Closed,13113783,DAFFODIL-365
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"for the unsigned integer types up to unsignedLong, and for boolean, we need to be able to specify length units of bits.",[],2012-10-18 20:00:14+00:00,2012-12-13 06:22:58+00:00,2012-12-13 23:01:22+00:00,Closed,13113782,DAFFODIL-364
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Need this function in order to implement variable-occurance arrays that have ""continuation"" flags in preceding elements.

DFDL-23-124R
DFDL-23-134R
DFDL-12-039R",[],2012-10-18 19:59:26+00:00,2012-11-13 22:45:10+00:00,2012-11-15 20:49:01+00:00,Closed,13113781,DAFFODIL-363
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL-09-016R
DFDL-12-001R to 003R

This includes leadingSkip, trailingSkip, alignment, alignmentUnits of bytes and bits.",[],2012-10-18 19:58:09+00:00,2013-05-07 20:16:47+00:00,2013-05-07 20:17:21+00:00,Closed,13113780,DAFFODIL-362
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 18:13:27+00:00,2016-09-14 21:51:22+00:00,2017-08-01 14:19:02+00:00,Closed,13113779,DAFFODIL-361
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 18:12:38+00:00,2013-03-18 13:35:08+00:00,2013-05-28 21:37:03+00:00,Closed,13113778,DAFFODIL-360
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-10-18 18:12:20+00:00,2013-04-09 21:39:06+00:00,2013-05-28 21:37:47+00:00,Closed,13113777,DAFFODIL-359
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Blocker,"It should be possible to input values from a binary stream.  Verify this and produce some basic bit extraction routines to parse binary data.

DFDL-12-030R
DFDL-12-161R
DFDL-12-039R
DFDL-12-040R
DFDL-12-076R
DFDL-12-126R
DFDL-12-129R
DFDL-12-143R
DFDL-13-134R",[],2012-10-18 15:17:53+00:00,2012-12-13 06:24:03+00:00,2012-12-14 15:42:09+00:00,Closed,13113776,DAFFODIL-358
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Needed to express redundant format constraints. 

Recoverable errors are effectively warnings to users.",['beginner'],2012-10-18 14:07:43+00:00,2020-06-23 13:13:14+00:00,2020-06-26 19:29:01+00:00,Closed,13113775,DAFFODIL-357
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Debugger doesn't display anything specific to make it easy to spot when things are iterating to the next iteration of a repeating structure, you just have to infer from when you see the body of the repetition happening again. This is tedious to figure out from all the debug output.",[],2012-10-18 13:33:26+00:00,2012-10-23 15:59:16+00:00,2013-01-10 15:29:05+00:00,Closed,13113774,DAFFODIL-356
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If a TDML test fails and shows comparison of expected and actual data, the messages are cluttered with xmlns=... declarations which make it impossible to easily find the differences without the tedium of cutting/pasting into a text editor and deleting these things. 

The runner/comparison stuff should just take these out.",[],2012-10-18 13:31:16+00:00,2012-10-23 15:58:56+00:00,2013-01-02 21:07:53+00:00,Closed,13113773,DAFFODIL-355
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to be able to easily say ""what are all the runtime-reportable SDEs"" as distinct from the SDEs generally. 

To do this we need a runtimeSDE call that works at runtime, and DOESN'T work at compile time, and vice versa the regular compile time call should not work at runtime. (Or should make noise so we change it.)",[],2012-10-16 21:13:03+00:00,2013-03-29 23:50:02+00:00,2013-06-07 15:11:38+00:00,Closed,13113772,DAFFODIL-354
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,"The tests are in daffodil-test\src\test\scala-debug\daffodil\section13\nillable\TestNillableDebug.scala.  The test, litNil5, passes but lintNil6 with the missing value fails.",[],2012-10-15 21:09:20+00:00,2012-10-19 16:34:28+00:00,2012-10-19 16:34:35+00:00,Closed,13113771,DAFFODIL-353
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"A test for nil, litNil4, in daffodil-test\src\test\scala-debug\daffodil\section13\nillable\TestNillableDebug.scala fails when dfdl:nilKind is ���literalValue���, dfdl:nilValue is ���%ES;���, the type is complex, and the ComplexContent region of the data stream matches the empty representation.  Please see commit 6830257 in master.",[],2012-10-15 19:23:39+00:00,2013-01-10 20:33:34+00:00,2013-01-10 21:53:20+00:00,Closed,13113770,DAFFODIL-352
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"(I put this in s5 because it will likely get fixed as part of DFDL-343 which is a blocking issue)

Printed rep of parsers is unintelligible. Change to an XML representation.

Also provide a way to print out with depth limit so that you don't have to print out the whole parser every time, you can print out the top level and have deeper parts elided as '...'

This is badly needed for debugging.

Example printed rep: 
<seq xmlns=""daffodil"">
	<StartElement name=""nested_seq"" />
	<seq>
		<StartChildren />
		<StartSequence />
		<StartArray />
		<RepUnbounded>
			<seq>
				<StartElement name=""seq_03"" />
				<Init>%WSP*;</Init>
				<StartChildren />
				<StartSequence />
				<StartArray />
				<RepUnbounded>
					<seq>
						<StartElement name=""seq_02"" />
						<Init>?</Init>
						<StartChildren />
						<StartSequence />
						<alt>
							<seq>
								<StartElement name=""seq_01"" />
								<seq>
									<StartChildren />
									<StartSequence />
									<StartElement name=""data_02"" />
									<StringPatternMatched />
									<EndElement name=""data_02"" />
									<StartElement name=""data_01"" />
									<StringPatternMatched />
									<EndElement name=""data_01"" />
									<EndSequence />
									<EndChildren />
								</seq>
								<EndElement name=""seq_01"" />
							</seq>
							<seq>
								<StartElement name=""data_01"" />
								<StringPatternMatched />
								<EndElement name=""data_01"" />
							</seq>
						</alt>
						<EndSequence />
						<EndChildren />
						<EndElement name=""seq_02"" />
					</seq>
				</RepUnbounded>
				<EndArray />
				<EndSequence />
				<EndChildren />
				<EndElement name=""seq_03"" />
			</seq>
		</RepUnbounded>
		<EndArray />
		<EndSequence />
		<EndChildren />
		<Term>$</Term>
	</seq>
	<EndElement name=""nested_seq"" />
</seq>",[],2012-10-11 17:29:35+00:00,2012-10-12 15:42:22+00:00,2012-10-24 20:02:15+00:00,Closed,13113769,DAFFODIL-351
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Minor,"Currently, if the parser is given UTF-16 data to decode, and the encoding provided is UTF-8, the parser will attempt to parse the data, resulting in a junk interpretation of the document. Instead of this, the parser should return a more meaningful error, stating it failed to decode the document.",[],2012-10-11 15:58:13+00:00,2020-08-05 17:19:13+00:00,2020-08-05 17:19:13+00:00,Closed,13113768,DAFFODIL-350
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Run this test: nested_seq, but turn on Debugger.withDebugger so you can see the trace information.

The array position advances faster than the byte position, meaning we're getting more array elements than bytes. Can't happen in textual data.  

So that means somebody is advancing array position when it shouldn't be advanced so that it is increasing too fast.

Right now this bug doesn't seem to be bothering anything, but there will be functions in the expression language which expose this value, and also it's very misleading in the trace information.",[],2012-10-11 15:40:42+00:00,2012-10-23 15:57:57+00:00,2012-10-30 17:11:27+00:00,Closed,13113767,DAFFODIL-349
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,"The test in question is 'nested_seq"" in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindImplicit.scala.  Please see commit 4bd2faf in master.",[],2012-10-10 21:35:44+00:00,2012-10-11 16:14:12+00:00,2012-10-24 20:45:09+00:00,Closed,13113766,DAFFODIL-348
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"TDML files are ordinary xml files, so you should be able to use default namespace prefixes to avoid the need to type prefixes. You should be able to do this in the usual ways.

Suppose however, you try to have the tdml namespace be the default at the top level of the schema, then inside the <tdml:defineSchema name=""foo"" xmlns=""...""> you try to have the default namespace be that of xsd. 

It doesn't work. It complains that an element inside the define schema has TWO xmlns attributes.

This has something to do with the way the TDML runner assembles an actual DFDL schema from the bits and pieces provided in the TDML file.

This problem is easily worked around. Move the xmlns to a more inner element, or just use prefixes. But the TDML runner is not correctly processing XML here.",[],2012-10-10 20:06:09+00:00,2015-01-16 14:17:53+00:00,2015-01-20 19:58:07+00:00,Closed,13113765,DAFFODIL-347
Bug,[],gmcdonald,Gavin McDonald,daffodil-ssustrich,Shawn Sustrich,Critical,"Test package: daffodil.section23.dfdl_expressions
Test Case: test_expression_bad_path_to_variable()

Description: While testing expressions in a schema I got a exception stating  ""daffodil.exceptions.Abort: Must use inside of withParseErrorThrowing construct""
 
This message is displayed when I have a malformed path in the pression that should cause an error. Regardless of the presence of the <errors></error></errors> block the test fails. This test case also caused https://opensource.ncsa.illinois.edu/jira/browse/DFDL-345

The inability to test error handeling in expressions limits what errors can be discovered in the code.",[],2012-10-10 17:20:10+00:00,2013-08-19 12:43:16+00:00,2013-08-19 14:29:02+00:00,Closed,13113764,DAFFODIL-346
Bug,[],gmcdonald,Gavin McDonald,daffodil-ssustrich,Shawn Sustrich,Major,"While testing expressions in a schema I got a exception stating  ""daffodil.exceptions.Abort: Must use inside of withParseErrorThrowing construct""

From a black box testing stand point this message doesn't provide much information to go on. 

The message was the same whether or not I had an <errors></error></errors> block in the tdml test or not provided the schema was malformed do to an error in an expression in the schema.",[],2012-10-10 17:01:53+00:00,2012-10-19 18:25:01+00:00,2012-10-22 20:22:44+00:00,Closed,13113763,DAFFODIL-345
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Review the DFDLReader branch present in the ncsa repo.

Contains changes to increase performance and address the mixed data issues.",[],2012-10-10 15:15:12+00:00,2012-10-11 17:30:11+00:00,2012-10-11 18:43:18+00:00,Closed,13113762,DAFFODIL-344
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Outer discriminators, in this case via the initiatedContent feature and an initiator, are causing inner alternatives to be decided - that is, the discriminator is being seen by inner scopes and isn't isolated to deciding just the single point of uncertainty that it is supposed to be associated with. 

See discriminatorNesting2 test.",[],2012-10-10 15:11:38+00:00,2012-10-12 18:48:51+00:00,2012-10-23 17:35:55+00:00,Closed,13113761,DAFFODIL-343
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,see property_scoping_03 test in daffodil-test,[],2012-10-10 13:43:09+00:00,2012-10-10 13:47:08+00:00,2012-10-10 13:47:19+00:00,Closed,13113760,DAFFODIL-342
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Refactored variables tasks into more relevant chunks with different priorities.,[],2012-10-10 13:15:35+00:00,2020-04-29 18:28:56+00:00,2020-06-26 17:02:15+00:00,Closed,13113759,DAFFODIL-341
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Critical,External variables feature: ability to set initial values for variables from outside of the DFDL processor.,[],2012-10-10 13:14:10+00:00,2013-08-20 15:33:41+00:00,2013-08-26 18:50:44+00:00,Closed,13113758,DAFFODIL-340
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"In some formats fields are delimited using lengthKind=""pattern"" with an initiator of ""/"", and a pattern length that means ""anything up to but excluding the next /"".

These same formats use ""-"" as a nil value.

The implementation of LiteralNil currently seems to assume delimited length, and scans until end of data. (Should be renamed LiteralNilDelimitedOrEndOfData). 

A LiteralNilPattern primitive needs to be created which works more like StringPatternMatched. This primitive needs to be used when the lengthKind=""pattern"".",[],2012-10-09 18:34:06+00:00,2012-10-29 13:50:53+00:00,2012-11-16 22:59:08+00:00,Closed,13113757,DAFFODIL-339
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"testKind=""pattern"" functionality. This is needed by some important textual formats that are near-term goals.",[],2012-10-05 00:11:45+00:00,2012-10-22 19:21:20+00:00,2012-11-06 21:42:25+00:00,Closed,13113756,DAFFODIL-338
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"We have a bunch of getting started/build/eclipse setup etc. pages on our Wiki, plus some files in the code base containing instructions on how to get setup.

These are in various stages of disarray, i.e., some make assumptions they should not make, others are just unclear or incomplete.

We need exactly one place which describes how to setup to work on the project. It should assume *nothing*, i.e., you don't have git, java, scala, nothing.

It should have sub-pages/sections for particulars of:
* windows vs. linux vs mac - there's a specific issue associated with unicode setup for windows at least right now
* eclipse vs Intellij",[],2012-10-04 23:20:31+00:00,2014-08-05 17:47:15+00:00,2014-08-05 18:11:21+00:00,Closed,13113755,DAFFODIL-337
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Discussed with Mike the fact that there's some functionality within the DFDL code base that should be refactored:

DFDLDelimParser needs to have the regular expression generating aspect refactored out of it so that we don't have to perform this operation every time parse is called.

Separate StringDelimitedEndOfData into a Static and Dynamic versions so that we can reduce the expense of generating the regular expressions for the delimiters every time this primitive is called.  A Static version should only have to generate the regular expressions once whereas the Dynamic version will have to generate it every time.",[],2012-10-04 18:03:54+00:00,2013-03-12 19:23:06+00:00,2013-03-18 15:23:50+00:00,Closed,13113754,DAFFODIL-336
New Feature,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"The test, varInstance, in daffodil-test\src\test\scala-debug\daffodil\section07\variables\TestVariablesDebug.scala fails with error message:

java.lang.Exception: Comparison failed.
Expected <a xmlns:tdml=""http://www.ibm.com/xmlns/dfdl/testData"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:ct=""http://w3.ibm.com/xmlns/dfdl/ctInfoset"" xmlns:ex=""http://example.com"" xmlns=""http://www.example.org/example1/""><b>7</b></a>
Actual <a xmlns=""http://example.com""><b>6</b></a>",[],2012-10-04 16:06:06+00:00,2018-10-23 16:51:57+00:00,2018-10-23 16:51:57+00:00,Closed,13113753,DAFFODIL-335
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,"Implement parser code that can handle any arbitrary alignment, arbitrary length bit pattern in either Big Endian or Little Endian format and return a BigInt for later trimming and sign-extending by a higher-level Primitives routine.

DFDL-12-150R
DFDL-12-151R
DFDL-12-152R
DFDL-12-153R
DFDL-12-154R
DFDL-12-155R","['BigEndian', 'BigInt', 'BitString', 'Endianness', 'LittleEndian', 'Signed']",2012-10-04 12:31:02+00:00,2012-11-27 02:14:53+00:00,2013-05-06 19:53:41+00:00,Closed,13113752,DAFFODIL-334
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"daffodil-test/src/test/scala/daffodil/section12/delimiter_properties/TestDelimiterProperties.scala

test: test_DelimProp_05

Would fail when using JRE 1.6 in Eclipse.  Changing to use JRE 1.7 fixes the issue but as a workaround we need to 'modify' the affected primitives to return a better value.",[],2012-10-03 22:42:04+00:00,2012-10-04 17:39:18+00:00,2012-10-23 14:07:14+00:00,Closed,13113751,DAFFODIL-333
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"test_codingErrorAction

See src/test/resources/test-suite/tresys-contributed/mixed-binary-text.tdml

Look for test codingErrorAction.

The test is a bit wierd. Using the WRONG CodingErrorAction.IGNORE policy, we are getting the correct behavior. 

Which means something is up. Not sure what. See comments in the test tdml.",[],2012-10-03 21:34:28+00:00,2012-10-12 19:02:39+00:00,2012-10-26 17:28:44+00:00,Closed,13113750,DAFFODIL-332
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"The tests are in daffodil-test\src\test\scala-debug\daffodil\section07\variables\TestVariablesDebug.scala.  The tests, setVar1, doubleSetErr, and setAfterReadErr, pass when using the embedded schema but the same tests, setVar1_d, doubleSetErr_d, and setAfterReadErr_d, fail when the schema is not embedded.  The error message for all 3 tests is:

daffodil.exceptions.NotYetImplementedException: Not yet implemented.
{http://www.ogf.org/dfdl/dfdl-1.0/XMLSchemaSubset}int
daffodil.exceptions.Assert$.notYetImplemented(Assert.scala:45)
daffodil.dsom.ExpressionCompiler.convertTypeString(CompiledExpression.scala:193)
daffodil.processors.VariableFactory$.create(VariableMap.scala:118)
daffodil.dsom.DFDLDefineVariable.newVariableInstance(DFDLAnnotation.scala:642)

Please see commit in 73d55d9 in master.",[],2012-10-03 21:21:25+00:00,2013-09-18 18:46:15+00:00,2013-09-18 18:46:35+00:00,Closed,13113749,DAFFODIL-331
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"Found that there is a storage/memory issue within DFDLReader causing it to duplicate data unnecessarily.  This directly impacts the AB tests.

The task is to add the ""current"" CharReader to the state and keep track of its own character position when in text mode.  When in binary mode, the CharReader should be discarded from the state (a copy of it still remains in the HashMap of DFDLReader).",[],2012-10-03 20:48:41+00:00,2012-10-15 13:37:55+00:00,2017-07-26 16:27:05+00:00,Closed,13113748,DAFFODIL-330
Improvement,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"The test, HexCodePoint, in daffodil-test\src\test\scala-debug\daffodil\section06\entities\TestEntities_01.scala fails with following error:

java.lang.Exception: Left over data: Location is byte 2
UTF-8 text starting at byte 0 is: (%#xc2a9)
Data (hex) starting at byte 0 is: (0x25237863326139)
	at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:388)

Please see commit c4c5e63 in master.",[],2012-10-02 21:35:13+00:00,2012-10-04 13:35:13+00:00,2012-12-26 21:48:48+00:00,Closed,13113747,DAFFODIL-329
Bug,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"after git pull, I ran the tests in SBT and eclipse and both show three failures.

build bot result:

Time Revision Result Builder Build # Info 
Oct 02 15:00 f73b8cb83fe0... success ngf-daffodil-rhel6-buildbot #174 Build successful 

SBT results:
[info] - test_assertions_assertGuidesChoice
[error] Failed: : Total 224, Failed 3, Errors 0, Passed 221, Skipped 0
[error] Failed tests:
[error]         daffodil.section12.delimiter_properties.TestDelimiterProperties


eclipse result:
java.lang.Exception: Comparison failed.
Expected <DP_03 xmlns:tdml=""http://www.ibm.com/xmlns/dfdl/testData"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:ct=""http://w3.ibm.com/xmlns/dfdl/ctInfoset"" xmlns:ex=""http://example.com"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><s1>0.003</s1><s1>-2.75</s1><s1>3.99</s1></DP_03>
Actual <DP_03 xmlns:ex=""http://example.com""><s1>0.0030</s1><s1>-2.75</s1><s1>3.99</s1></DP_03>
Differences were (path, expected, actual):
 (DP_03/s1[1],'0.003','0.0030')
	at daffodil.tdml.ParserTestCase.verifyParseInfoset(TDMLRunner.scala:321)
	at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:391)
	at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:286)
	at daffodil.tdml.TestCase.run(TDMLRunner.scala:242)
	at daffodil.tdml.DFDLTestSuite.runOneTestNoTDMLValidation(TDMLRunner.scala:124)
	at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:104)
	at daffodil.section12.delimiter_properties.TestDelimiterProperties.test_DelimProp_05(TestDelimiterProperties.scala:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

three employees got 3 different results:
Taylor Wise see failure in Eclipse but not SBT.
Paul Chu shows both pass (Eclipse and SBT)
Shawn Sustrich shows SBT fails however Eclipse passes.",[],2012-10-02 20:55:49+00:00,2012-10-04 17:49:02+00:00,2012-11-26 15:32:13+00:00,Closed,13113746,DAFFODIL-328
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Nested Group References do not work because nested sequences do not work.  The delimiters are not being laid down correctly in these instances.,[],2012-10-02 11:50:12+00:00,2013-02-08 02:53:01+00:00,2013-02-13 21:03:34+00:00,Closed,13113745,DAFFODIL-327
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Serious bug:

If you have a <dfdl:format ref=""abc:foobar"".../> and foobar is not found, then there should be a LOUD error message.

It appears to just fail silently, and then you get an error that some property (that foobar would have provided) is not found.",[],2012-10-01 21:28:32+00:00,2012-10-29 13:26:39+00:00,2013-06-03 16:43:46+00:00,Closed,13113744,DAFFODIL-326
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,Placing a sequence within a sequence containing elements causes a separator to go missing between the last element and the following sequence.,[],2012-09-28 18:14:21+00:00,2012-10-20 23:45:43+00:00,2012-10-29 16:01:31+00:00,Closed,13113743,DAFFODIL-325
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,Tutorials were updated recently. We should convert their content into test cases for purposes of making sure the daffodil implementation works with them.,[],2012-09-28 13:49:22+00:00,2012-12-20 18:17:06+00:00,2012-12-20 18:17:13+00:00,Closed,13113742,DAFFODIL-324
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"Currently, an SDE is always thrown when occursCountKind='fixed', maxOccurs='unbounded' and separatorSuppression is never. Separator suppression should be ignored in that case, and always thrown an SDE.",[],2012-09-27 19:13:42+00:00,2012-09-27 19:56:30+00:00,2012-10-01 21:32:26+00:00,Closed,13113741,DAFFODIL-323
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,There's currently no easy installer for windows/mac for SBT < 0.12.0. There are also some new features (like test-quick) that might be useful.,[],2012-09-27 15:57:08+00:00,2013-01-04 14:04:49+00:00,2013-01-10 21:50:36+00:00,Closed,13113740,DAFFODIL-322
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see commit 4e1d189 in master.
The error message from running optionalElem test:
java.lang.Exception: Left over data: Location is byte 5
UTF-8 text starting at byte 0 is: (127.9,abcde,109)
Data (hex) starting at byte 0 is: (0x3132372E392C61626364652C313039)
	at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:386)",[],2012-09-27 15:12:25+00:00,2012-09-27 16:04:20+00:00,2012-09-27 16:04:20+00:00,Closed,13113739,DAFFODIL-321
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Initiator is not being laid down in the grammar when an elementRef has an initiator on it.  If you replace the elementRef with an element containing an initiator it works fine.  Appears to be an issue in elementRef.,[],2012-09-25 19:04:02+00:00,2012-10-30 22:11:50+00:00,2012-12-03 15:19:59+00:00,Closed,13113738,DAFFODIL-320
Bug,[],gmcdonald,Gavin McDonald,daffodil-ssustrich,Shawn Sustrich,Minor,"Problem:
While testing edge cases and alternate flows the system exhibited inconsistent behavior in the way it handled white space characters while parsing what otherwise would be valid unsigned integers.


Details:
The following value ""999"" is valid and used for the control for the error tests

Attempting to parse  ""999 "" generates:
[Parse Error: Convert to Unsigned Int (for xs:unsignedInt): Unable to parse '999 ' (using up all characters). 

Attempting to parse "" 999"" and ""9 99"" 
Expected error. Didn't get one. Actual result was <uI_03 xmlns=""http://example.com"">999</uI_03>


Conclusion:
I'm not entirely sure which behavior is the proper behavior. Whether or not the system should trim white space but I do think the behavior should be consistent.


Applicable Test Cases:
 Section05
  test_whiteSpaceAfterValidValue
  test_whiteSpaceBeforeValidValue	
  test_whiteSpaceDuringValidValue",[],2012-09-25 17:18:14+00:00,2013-09-24 15:43:07+00:00,2013-09-25 15:58:55+00:00,Closed,13113737,DAFFODIL-319
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,"separatorPosition=""prefix"" fails to lay down a separator in any position within the grammar!

Created a test in daffodil-test/src/test/scala-debug/daffodil/section05/dfdl_xsdl_subset/TestDFDLSubset.scala.  It's called ""test_prefix"".  The original groupRef test was copied and modified to attempt to just parse each ""Item"" as a string delimited by ""||"".",[],2012-09-25 16:36:59+00:00,2012-10-23 17:01:43+00:00,2012-11-06 22:35:22+00:00,Closed,13113736,DAFFODIL-318
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The TDML schema doesn't seem to restrict what elements can be found inside a tdml:defineSchema element. As a result XML content assist doesn't help you with those. 

Exactly 8 things can be inside it: dfdl:format, dfdl:defineVariable, dfdl:defineEscapeScheme and dfdl:defineFormat, plus xs:element, xs:complexType, xs:group, and xs:simpleType.

Putting a choice of those as the content model would improve the XML support in the IDE for TDML files.",[],2012-09-24 17:33:09+00:00,2012-11-15 20:15:56+00:00,2012-11-15 20:16:02+00:00,Closed,13113735,DAFFODIL-317
Improvement,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,"Test, NumSeq_09, in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindDelimitedDebug.scala failed with following error message:
java.lang.Exception: Comparison failed.
Expected <NS_08 xmlns:tdml=""http://www.ibm.com/xmlns/dfdl/testData"" xmlns:dfdl=""http://www.ogf.org/dfdl/dfdl-1.0/"" xmlns:ct=""http://w3.ibm.com/xmlns/dfdl/ctInfoset"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><num>123</num><num>2789</num><num>30</num><num>408</num><num>5228</num></NS_08>
Actual <NS_08 xmlns=""http://example.com""><num>123</num><num>2789</num><num>30</num><num>408</num><num>52283</num><num>22</num><num>66210</num></NS_08>",[],2012-09-23 19:05:56+00:00,2013-01-04 13:27:03+00:00,2013-01-17 16:01:42+00:00,Closed,13113734,DAFFODIL-316
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"dfdl:separatorPolicy is defined in the DFDL Spec, dated January 31,2011, but is not defined in the DFDL Spec, dated August 14, 2012.  Instead, dfdl:separatorSuppressionPolicy is defined in the DFDL Spec, dated August 14, 2012.
The error message when test, lengthKindDelimited_04, in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindDelimitedDebug.scala is run:
2012-09-22 16:15:04  daffodil.compiler.Compiler Error [Schema Definition Error: Property separatorPolicy is not defined. Context was: Sequence.]

The error message when test, lengthKindDelimited_03, in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindDelimitedDebug.scala is run:
2012-09-22 16:26:56  daffodil.compiler.Compiler Error [Schema Definition Error: separatorSuppressionPolicy='Always' not allowed with occursCountKind='Implicit'.() Context was: LocalElementDecl.s]

Please see commit 33196ed in master.",[],2012-09-22 20:37:44+00:00,2013-03-29 23:49:35+00:00,2013-04-03 21:00:41+00:00,Closed,13113733,DAFFODIL-315
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"According to the spec, if a simple element has dfdl:representation=���text��� and dfdl:lengthUnits=���bytes���, then when parsing, as many characters as possible are extracted from the bytes of the simple content region and any left over bytes are skipped.  LengthProp_06 test fails in daffodil-test\src\test\scala-debug\daffodil\section12\length_properties\TestLengthPropertiesDebug.scala.  Please see commit cab3a5d in master.",[],2012-09-22 18:06:02+00:00,,2020-08-05 17:17:26+00:00,Open,13113732,DAFFODIL-314
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Regarding the test, ocke_rel, for occursCountKind=���expression��� in daffodil-test\src\test\scala-debug\daffodil\section23\dfdl_expressions\TestDFDLExpressionsDebug.scala:

Mike Beckerle's comments: 

Oh wow. This test fails because it has dfdl:occursCount="" {...} ""

Note the white spaces before { and after }.

If you take those out so it is dfdl:occursCount=""{...}""  then the test passes.

So, there is a bug here that there is no reasonable diagnostic at all. 

Technically, if { is not the very first character of the property value, then you gave it a string as the value, not an expression. 

I suggest the issue should be fixed in CompiledExpression, which should do a better job helping find this kind of error.",['reverify'],2012-09-21 16:24:43+00:00,2021-02-18 17:07:02+00:00,2021-02-18 17:07:03+00:00,Closed,13113731,DAFFODIL-313
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Even though 75 seconds is a great improvement, this is still too long.  We need to determine what is taking up the time.",[],2012-09-21 14:57:06+00:00,2013-03-14 15:53:28+00:00,2013-03-28 15:13:02+00:00,Closed,13113730,DAFFODIL-312
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Our TDML test files are XML 1.0 documents, so cannot have certain characters in them.

Those characters are sometimes needed in data, particularly if we pick up a file of textual data and try to embed it into a TDML self-contained test file. This test data may not obey XML 1.0 constraints. E.g., XML 1.0 does not allow character U+001b at all. 

We could enhance the TDML runner to preprocess the <document> element of a TDML test, replacing DFDL-style character entities like %#x1b; with the corresponding character.

This would let tests be converted from separate files to self-contained TDML more easily.",[],2012-09-20 21:48:04+00:00,2012-09-28 18:27:17+00:00,2012-10-02 21:36:05+00:00,Closed,13113729,DAFFODIL-311
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,There are some tests that are duplicates in daffodil-core and daffodil-test. We need to remove the duplicates from daffodil-core.,[],2012-09-20 17:53:21+00:00,2012-09-20 21:29:29+00:00,2012-09-20 21:33:23+00:00,Closed,13113728,DAFFODIL-310
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, LengthPatternIllegalBits_02, in daffodil-test\src\test\scala-debug\daffodil\section12\lengthKind\TestLengthKindPatternDebug.scala and commit 5e47176 in master.",[],2012-09-20 16:03:57+00:00,2015-01-12 21:54:02+00:00,2015-02-10 19:38:21+00:00,Closed,13113727,DAFFODIL-309
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"""Both alternatives failed""
""Parse failed""

are messages you sometimes get on a test failure.

These are completely inadequate. In many cases the information is in the exception object, just it is not being displayed.",[],2012-09-20 15:26:58+00:00,2013-03-15 20:53:39+00:00,2017-07-26 16:30:53+00:00,Closed,13113726,DAFFODIL-308
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Minor,As long as binary input occurs on an octet boundary it should be possible to input values from a binary stream.  Verify this and produce some basic bit extraction routines to parse binary data.,[],2012-09-20 14:19:49+00:00,2012-10-18 15:13:41+00:00,2017-07-26 16:27:05+00:00,Closed,13113725,DAFFODIL-307
Bug,[],gmcdonald,Gavin McDonald,daffodil-jchab,Jessie Chab,Major,"In a schema I set occursCountKind to ""fixed"" and had differing values for minOccurs and maxOccurs. The document was parsed based on the value of maxOccurs, and there was no schema definition error.

According to the spec:

""When dfdl:occursCountKind='fixed', then the xs:maxOccurs value is the fixed number of occurrences of the array elements. It is a schema definition error if xs:minOccurs is not equal to xs:maxOccurs.""",[],2012-09-20 13:40:06+00:00,2012-09-27 19:55:36+00:00,2012-09-28 19:10:18+00:00,Closed,13113724,DAFFODIL-306
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, lke3_rel, in daffodil-test\src\test\scala-debug\daffodil\section23\dfdl_expressions\TestDFDLExpressionsDebug.scala and commit 3ddebca in master.",[],2012-09-19 18:00:02+00:00,2013-03-19 16:50:54+00:00,2013-03-19 16:53:18+00:00,Closed,13113723,DAFFODIL-305
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see test, initiatedContent6, in daffodil-test\src\test\scala-debug\daffodil\section15\choice_groups\TestChoiceGroupInitiatedContentDebug.scala and commit 0fe27d2 in master.",[],2012-09-19 15:31:15+00:00,2012-09-28 00:38:42+00:00,2012-10-01 18:04:41+00:00,Closed,13113722,DAFFODIL-304
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"A schema definition error should be generated for test, initiatedContent5, in daffodil-test\src\test\scala-debug\daffodil\section15\choice_groups\TestChoiceGroupInitiatedContentDebug.scala.  Please see commit d18e120 in master.",[],2012-09-19 13:50:36+00:00,2012-09-28 00:38:28+00:00,2012-10-01 18:33:23+00:00,Closed,13113721,DAFFODIL-303
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Because the value of an expression used in an inputValueCalc element isn't needed until runtime, the implementation does not currently even examine the expression until runtime. However, this misses an opportunity to capture and give things like ""unknown variable name"" errors as Schema Definition Errors at compile time.

So, the IVC code paths need to compile the expression before parsing begins.

In addition, I noticed that the code used to determine if an expression is constant just assumes that any error at all means the expression is not constant. The way it works is this. We know an expression is constant if it doesn't need any context-node (that's the infoset) to resolve paths into the data, and if it doesn't need any variables to be bound. The way the test works is it actually attempts to evaluate the expression in a context where there is no context node, and the variable map is empty so that any variable will be unbound. If this evaluation fails (throws an expression evaluation exception), it is then assumed the expression is non-constant. If we get a value back, then that value is the constant value.

The problem: a syntax error, or illegal namespace prefix, or various other expression problems will cause an expression exception, so that what is clearly a compile-time error in the schema will simply be deemed to be 'non-constant'.

We need to separate out exceptions that are due to the context node, and due to the use of an unbound variable, and those indicate non-constant. Other exceptions indicate actually problems with the expression.",[],2012-09-13 13:17:09+00:00,2012-09-13 17:39:02+00:00,2012-10-01 15:33:49+00:00,Closed,13113720,DAFFODIL-302
Task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,Tests are needed that reflect Appendix A of the DFDL spec.,[],2012-09-11 17:48:02+00:00,2012-12-04 23:42:46+00:00,2012-12-04 23:43:58+00:00,Closed,13113719,DAFFODIL-301
Improvement,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see tests, delimiter_12_01 and delimiter_12_02, in the IBMTestsThatThrow class in the daffodil-core project.",[],2012-09-10 19:19:57+00:00,2012-10-18 16:07:43+00:00,2012-11-20 21:16:36+00:00,Closed,13113718,DAFFODIL-300
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,Please see commit 63397bf in master.,[],2012-09-08 19:04:04+00:00,2013-10-08 13:42:43+00:00,2013-10-08 18:09:08+00:00,Closed,13113717,DAFFODIL-299
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-aseyler,Andrew Seyler,Major,"See test_AB006() in 
daffodil-core/src/test/scala-debug/daffodil/TresysTest2.scala



org.jdom.IllegalDataException: The data ""4Vx"" is not legal for a JDOM character content: 0x12 is not a legal XML character.
	at org.jdom.Text.setText(Text.java:188)
	at org.jdom.Text.<init>(Text.java:99)
	at daffodil.processors.StringDelimitedEndOfData$$anon$15$$anonfun$parse$11$$anonfun$apply$16.apply(Primitives.scala:420)
	at daffodil.processors.StringDelimitedEndOfData$$anon$15$$anonfun$parse$11$$anonfun$apply$16.apply(Primitives.scala:386)
	at daffodil.util.Logging$class.withLoggingLevel(Logger.scala:184)
	at daffodil.processors.Parser.withLoggingLevel(Parser.scala:90)
	at daffodil.processors.StringDelimitedEndOfData$$anon$15$$anonfun$parse$11.apply(Primitives.scala:386)
	at daffodil.processors.StringDelimitedEndOfData$$anon$15$$anonfun$parse$11.apply(Primitives.scala:386)
	at daffodil.processors.WithParseErrorThrowing$class.withParseErrorThrowing(Parser.scala:187)
	at daffodil.processors.StringDelimitedEndOfData.withParseErrorThrowing(Primitives.scala:372)
	at daffodil.processors.StringDelimitedEndOfData$$anon$15.parse(Primitives.scala:385)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.RepExactlyNPrim$$anon$1$$anonfun$parseAllRepeats$1.apply$mcVI$sp(RepParsers.scala:64)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:81)
	at daffodil.processors.RepExactlyNPrim$$anon$1.parseAllRepeats(RepParsers.scala:62)
	at daffodil.processors.RepPrim$RepParser.parse(RepParsers.scala:46)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.RepExactlyNPrim$$anon$1$$anonfun$parseAllRepeats$1.apply$mcVI$sp(RepParsers.scala:64)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:81)
	at daffodil.processors.RepExactlyNPrim$$anon$1.parseAllRepeats(RepParsers.scala:62)
	at daffodil.processors.RepPrim$RepParser.parse(RepParsers.scala:46)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:245)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.SeqCompParser.parse(Parser.scala:243)
	at daffodil.processors.Parser.parse1(Parser.scala:104)
	at daffodil.processors.DataProcessor$$anon$1.liftedTree1$1(Runtime.scala:69)
	at daffodil.processors.DataProcessor$$anon$1.<init>(Runtime.scala:68)
	at daffodil.processors.DataProcessor.parse(Runtime.scala:65)
	at daffodil.processors.DataProcessor.parse(Runtime.scala:61)
	at daffodil.tdml.ParserTestCase.runParseExpectSuccess(TDMLRunner.scala:368)
	at daffodil.tdml.ParserTestCase.runProcessor(TDMLRunner.scala:283)
	at daffodil.tdml.TestCase.run(TDMLRunner.scala:239)
	at daffodil.tdml.DFDLTestSuite.runOneTestNoTDMLValidation(TDMLRunner.scala:121)
	at daffodil.tdml.DFDLTestSuite.runOneTest(TDMLRunner.scala:101)
	at daffodil.TresysTests2.test_AB006(TresysTests2.scala:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)",[],2012-09-06 18:56:55+00:00,2012-09-21 15:09:42+00:00,2012-10-01 20:07:28+00:00,Closed,13113716,DAFFODIL-298
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,Please see DelimProp_06 test in daffodil-test\src\test\scala-debug\daffodil\section12\delimiter_properties\TestDelimiterProperties.scala,[],2012-09-04 18:44:25+00:00,2012-09-21 16:09:17+00:00,2012-10-01 20:05:22+00:00,Closed,13113715,DAFFODIL-297
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,See Long3 and Long4 tests - commit 7baaf76 in master.,[],2012-08-28 18:48:11+00:00,2012-09-14 16:53:36+00:00,2012-09-18 16:23:56+00:00,Closed,13113714,DAFFODIL-296
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,"Please see tests, byte_entities_6_06 and byte_entities_6_07, in daffodil-test/src/test/scala-debug/TestEntities_01.scala",[],2012-08-22 18:27:24+00:00,2013-06-03 18:54:35+00:00,2013-06-05 19:04:12+00:00,Closed,13113713,DAFFODIL-295
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"when an element value is computed by inputValueCalc, and the element type is numeric, and finite/limited, then a range check is needed. 

Currently no range check is done.

Failure (i.e., we don't get a diagnostic from a range check) is illustrated in test
test_computedByteOverflow",[],2012-08-21 17:57:36+00:00,2013-05-17 13:33:39+00:00,2013-05-23 17:13:10+00:00,Closed,13113712,DAFFODIL-294
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I can no longer wonder into the source code for the libraries we use, nor set breakpoints in them. 

The libraries are there, just not the source code for them. 

This has major productivity impact.",[],2012-08-20 18:21:28+00:00,2012-08-21 13:24:14+00:00,2012-08-21 13:24:21+00:00,Closed,13113711,DAFFODIL-293
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I can see Paul's commit/push messages. I see all JIRA and Wiki/confluence notifications. But I don't see anyone else's commit/push messages in my email nor my own, and I have done several.

I've updated my watches on fisheye as best I know how, but I'm still not seeing these notices.",[],2012-08-17 22:48:30+00:00,2012-08-17 22:51:16+00:00,2012-08-17 22:51:22+00:00,Closed,13113710,DAFFODIL-292
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"When running TDML files, the line numbers in the TDML file are what you want, but the schema itself is scraped off the TDML, enhanced with surrounding boilerplate, then fed to the compiler front end, which runs validation of the DFDL schema. The line numbers are therefore, quite useless.

To fix this we need to figure out (and hijack) the mechanism by which the validator determines the line numbers.

We're going to need the same tricks for our own processing of the DFDL schemas post validation.",[],2012-08-17 21:26:35+00:00,2015-01-07 16:01:30+00:00,2015-01-13 18:25:53+00:00,Closed,13113709,DAFFODIL-291
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,See commit b2a6027 in master.  See LengthProp_01 test.,[],2012-08-17 14:33:34+00:00,2012-09-21 15:40:54+00:00,2012-10-01 20:12:29+00:00,Closed,13113708,DAFFODIL-290
Improvement,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Minor,Update the wiki on how to build Daffodil with the note for how to run SBT on Intellij.,['Documentation'],2012-08-17 13:48:17+00:00,2012-08-17 16:30:37+00:00,2012-10-02 14:45:05+00:00,Closed,13113707,DAFFODIL-289
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The TDML runner should validate the expected infoset against the DFDL schema (using it just as an XML schema). 

The above should happen before the test is even run.

Similarly, the TDML runner should validate the actual infoset against the DFDL schema, using it as an XML schema. 

This should happen before the actual and expected infosets are compared.",['beginner'],2012-08-15 01:53:09+00:00,,2018-09-13 14:04:34+00:00,Open,13113706,DAFFODIL-288
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The build system really should run the property code generator module, and insert the resulting file into the daffodil-lib module. 

(Right now we run this generator by hand, and we check-in the resulting source code that is manually cut/pasted into the daffodil-lib module.)",[],2012-08-15 01:39:59+00:00,2012-08-17 16:34:07+00:00,2017-04-06 15:12:48+00:00,Closed,13113705,DAFFODIL-287
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The wiki page 'Building Daffodil' has a section on Eclipse XML Setup.

It is obsolete (pre our sbt conversion and attendant name changes).

Furthermore, the eclipse catalog file (eclipse-xml-catalog.xml) is not up to date with current contents and paths.

The rest of the eclipse settings are likely stale also and need to be refreshed.",[],2012-08-15 01:34:11+00:00,2014-08-05 18:11:52+00:00,2014-08-05 18:12:02+00:00,Closed,13113704,DAFFODIL-286
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Blocker,"daffodil.compiler.Compiler Error [Schema Definition Error: Property byteOrder is not defined. Context was: GlobalElementDecl.c3]

See daffodil-test\src\test\scala-debug\daffodil\section08\property_scoping\TestPropertyScoping.scala",[],2012-08-09 18:33:25+00:00,2012-10-23 20:41:25+00:00,2012-11-06 22:42:39+00:00,Closed,13113703,DAFFODIL-285
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Implementation ideas: just add a dfdl:__hidden__=""true"" attribute to the nodes that come from a hidden group ref. TDML runner can strip them off before comparing actual to expected.

(This does not meet all the requirements for the infoset of DFDL, because the hidden elements will take up positions in the infoset during processing thereby making Xpath expression in the DFDL work differently than if the nodes were behaving as hidden all along.)",[],2012-08-08 13:56:35+00:00,,2020-08-05 17:35:27+00:00,Open,13113702,DAFFODIL-284
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Absolute paths must be implemented and unit tested.,[],2012-08-08 13:31:54+00:00,2012-08-24 18:17:42+00:00,2012-08-27 19:18:29+00:00,Closed,13113701,DAFFODIL-283
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Ability to watch parsing interactively step by step.

1) no extraneous details from Debug messages (unless you explicitly want them)
2) visibility to backtracking
3) uses ""end user"" terminology, not internal terminology (e.g., NilValue, not ""StaticText"")
4) allow user to enter XPath expressions and evaluate them on current infoset.",[],2012-08-08 13:29:53+00:00,2012-10-18 15:05:42+00:00,2017-07-26 16:27:05+00:00,Closed,13113700,DAFFODIL-282
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Possible issue with element references and global elements. Unit testing coverage needs to be improved. 

Note: may be related to NYI in group references/global groups. Unclear.",[],2012-08-08 13:27:14+00:00,2012-08-17 23:33:05+00:00,2012-08-22 21:02:41+00:00,Closed,13113699,DAFFODIL-281
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The path can be wrong, but """" is still returned successfully.",[],2012-08-08 13:24:38+00:00,2012-08-21 16:48:29+00:00,2012-08-28 13:57:12+00:00,Closed,13113698,DAFFODIL-280
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Schema had text length 4 digits for type xs:byte. Data was 2007. Numeric overflow error was silent.,[],2012-08-08 13:23:12+00:00,2012-08-24 19:31:38+00:00,2012-08-28 18:40:51+00:00,Closed,13113697,DAFFODIL-279
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Error management causes failures that should propagate to top level and be visible to instead be swallowed up and masked.

SDEs sometimes do not become part of diagnostics (invariant failure in TDML runner that isError is true, but there were no diagnostics - one of these was enclosing sequence problem (None.get - throws and that was being masked. Another error was NYI from group reference was being masked.)",[],2012-08-08 13:21:24+00:00,2012-08-17 08:59:26+00:00,2012-08-24 17:51:35+00:00,Closed,13113696,DAFFODIL-278
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Before comparing expected and actual, the TDML runner should tell you if there is data left over (and what it is).",[],2012-08-08 13:15:53+00:00,2012-09-14 13:14:16+00:00,2012-09-27 17:30:35+00:00,Closed,13113695,DAFFODIL-277
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"GroupRef has no grammar mixin implementation (just a NotYetImplemented() call)

Needs to be implemented.",[],2012-08-07 18:07:27+00:00,2012-10-02 11:51:29+00:00,2012-11-06 22:45:56+00:00,Closed,13113694,DAFFODIL-276
Bug,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"For example:

{code:xml}
<sequence>
    <element ref=""foo"" />
</sequence>

<element name=""foo""/>
{code}",[],2012-08-07 17:02:45+00:00,2012-08-15 18:14:46+00:00,2012-08-17 20:53:02+00:00,Closed,13113693,DAFFODIL-275
Improvement,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Execution of AB006 tests yields slow processing of AB.in file.,[],2012-08-07 14:00:27+00:00,2012-09-14 20:02:26+00:00,2012-09-27 20:12:34+00:00,Closed,13113692,DAFFODIL-274
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,See title.,[],2012-08-07 13:40:09+00:00,2012-08-24 20:53:30+00:00,2012-08-30 15:10:16+00:00,Closed,13113691,DAFFODIL-273
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,Please see DelimProp_06 test in daffodil-conformance-test/srcDebug/daffodil/section12/delimiter_properties/TestDelimiterProperties.scala.,[],2012-08-03 20:02:06+00:00,2012-08-31 20:19:24+00:00,2012-09-04 18:46:25+00:00,Closed,13113690,DAFFODIL-272
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,Please see DelimProp_05 test in daffodil-conformance-test/srcDebug/daffodil/section12/delimiter_properties/TestDelimiterProperties.scala.,[],2012-08-03 19:59:07+00:00,2012-08-22 13:51:52+00:00,2012-08-22 13:52:16+00:00,Closed,13113689,DAFFODIL-271
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,Please see DelimProp_03 test in daffodil-conformance-test/srcDebug/daffodil/section12/delimiter_properties/TestDelimiterProperties.scala.,[],2012-08-03 19:53:56+00:00,2012-09-14 14:40:57+00:00,2012-09-18 16:59:45+00:00,Closed,13113688,DAFFODIL-270
Task,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,"���	When you try to put data beyond the terminator, what happens?
���	Need test for every terminator (use three terminators)
���	Using terminator out of sequence
���	Negative: Test for integer where we use a float for input to see what happens (integer test?)
���	Integer type:  Need leading and trailing zero inputs to test (i.e., 05 should have result as 5; .00500 should have result as .005)
���	Need other multiple delimiters tests
���	White space as delimiters (white space, new lines, empty string, etc.) separators and terminators
���	Can we escape the delimiters?  (escape character - %%; escape scheme)
���	Need to test multiple terminators in the input.
���	Needed to test separators and terminators where one of the separator or terminator is a prefix.  
���	Negative: Test just a delimiter (no data); Check to see if the system will say that it's missing an element.",[],2012-08-01 14:42:04+00:00,2012-08-10 19:08:18+00:00,2012-08-10 19:09:27+00:00,Closed,13113687,DAFFODIL-269
Sub-task,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Main.scala appears to be passing the input filename as data to the Parser.  Or at the very least, the parser is interpreting the file name as data.  If you enable LogLevel.Debug for fillCharBufferMixedData, you'll see that the charbuffer represented by BEG_data_END actually contains ""./test/testName.in"" instead of the expected data values.",[],2012-07-31 19:07:52+00:00,2012-07-31 20:09:26+00:00,2012-09-04 13:41:29+00:00,Closed,13113686,DAFFODIL-268
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Test cases created by Paul failed.  TestClassEntities tests for LineSeparator and NextLine fail.,[],2012-07-31 12:14:09+00:00,2012-07-31 12:18:59+00:00,2012-10-29 19:00:26+00:00,Closed,13113685,DAFFODIL-267
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"I can't seem to get the batch to work just from within one module. I am normally working only in core, and want to rebuild and test only that. If I try to run ant from the core directory it fails with compilation errors. If I got to the daffodil directory then ant works fine and there are no such compilation errors.

Until eclipse is fixed and runs all unit tests in a tree, (or maybe if we switch to junit4 this will just work?...) the batch has to be run frequently, so running just one module will really help.",[],2012-07-27 20:21:13+00:00,2012-08-15 12:22:54+00:00,2012-08-15 12:23:00+00:00,Closed,13113684,DAFFODIL-266
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Should use sbt or something to recompile incrementally, and only recompile everything from scratch if 'clean' is requested.

Right now it behaves like everything must be recompiled each time.",[],2012-07-27 20:17:54+00:00,2012-08-15 12:19:48+00:00,2012-08-15 12:19:58+00:00,Closed,13113683,DAFFODIL-265
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Parent of several sub-tasks,[],2012-07-27 20:15:26+00:00,2012-08-17 22:45:45+00:00,2012-08-17 22:45:45+00:00,Closed,13113682,DAFFODIL-264
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,See commit 2e6dd20 in newBackEnd.,[],2012-07-27 16:30:10+00:00,2012-08-03 18:04:30+00:00,2012-08-15 15:06:49+00:00,Closed,13113681,DAFFODIL-263
New Feature,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Complete replacement for those String Literals who can have expressions.  This will have to be done in the DynamicText Parser and the like as expressions need to be evaluated from within a Parser before entity replacement can take place.  Where whitespace separated lists are concerned, entity replacement must take place after the split.

Text Numbers
Text Bools
outputNewLine",[],2012-07-26 18:11:34+00:00,2013-01-24 19:19:17+00:00,2013-01-31 21:24:45+00:00,Closed,13113680,DAFFODIL-262
New Feature,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Perform entity replacement on extraEscapedCharacters.  This apparently only applies to unparsing and hasn't been implemented yet.,[],2012-07-26 12:34:22+00:00,2017-06-01 23:00:59+00:00,2017-06-01 23:01:04+00:00,Closed,13113679,DAFFODIL-261
New Feature,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,Perform entity replacement on Literal Character nilValue.,[],2012-07-26 12:31:17+00:00,2016-04-11 18:48:42+00:00,2017-02-06 18:08:48+00:00,Closed,13113678,DAFFODIL-260
New Feature,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Implement Pad/Fill (Trimming of padding)

Perform entity replacement on Pad/Fill String Literals.  This was saved until later as we are not using Pad/Fill at the moment.

DFDL-13-042R: Text String Pad Character
-020R: textTrimKind
-041R: textStringJustification
-046R: textNumberJustification
-047R: textNumberPadCharacter
-131R: textBooleanJustification
-132R: textBooleanPadCharacter
-165R: textCalendarJustification
-166R: textCalendarPadCharacter

Also: DFDL-7-089R (padding is trimmed before escape scheme is applied.)

Also: This came from an errata to the spec:

If dfdl:nilKind is ���literalValue��� then nilValue specifies a white space
separated list of DFDL literal strings that are the possible
representation values for nil. On parsing the element value is nil if
the trimmed data matches one of the literal strings in the list.",[],2012-07-26 12:29:16+00:00,2013-03-18 12:32:04+00:00,2013-03-18 12:32:04+00:00,Closed,13113677,DAFFODIL-259
New Feature,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Minor,Implement raw byte entities.,[],2012-07-26 12:28:02+00:00,,2020-10-21 19:34:58+00:00,Open,13113676,DAFFODIL-258
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The TDML runner is not specifying the encoding to be used for <document-part type=""text"">. 

It must insist on utf-8 as the encoding otherwise tests that contain utf-8 characters beyond the ascii subset will not work properly.",[],2012-07-25 19:22:55+00:00,2012-07-25 19:27:11+00:00,2012-07-25 21:10:08+00:00,Closed,13113675,DAFFODIL-257
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Changing all the matching to handle ignoreCase property requires a fairly comprehensive sweep. The DFDL spec has this list of properties affected by ignoreCase (but the spec might be missing a few):

initiator, terminator, separator, nilValue, textStandardExponentRep, textStandardInfinityRep, textStandardNaNRep, textStandardZeroRep, textBooleanTrue, textBooleanFalse,",[],2012-07-24 20:06:34+00:00,2017-04-05 11:33:21+00:00,2017-08-01 20:24:09+00:00,Closed,13113674,DAFFODIL-256
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,This issue was created as a result of issue DFDL-221.  It is possible for a user to incorrectly apply the DFDL properties to the DFDL annotation elements using the short form syntax.,[],2012-07-20 21:16:46+00:00,2012-10-20 01:26:03+00:00,2012-11-08 18:56:34+00:00,Closed,13113673,DAFFODIL-255
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,"Attached test failed.  Error message:
2012-07-20 12:47:40  daffodil.dsom.GlobalElementDecl Info [Compiling global element ""simple"" as a document element.]
2012-07-20 12:47:40  daffodil.dsom.Compiler Info [Compilation (ProcessorFactory) produced 1 errors/warnings.]
2012-07-20 12:47:40  daffodil.dsom.Compiler Error [ERROR (Catch):java.util.NoSuchElementException: None.get. Context at catch was: stringPatternMatched]",[],2012-07-20 16:54:21+00:00,2012-09-19 20:42:21+00:00,2012-09-20 16:05:25+00:00,Closed,13113672,DAFFODIL-254
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,Got a java.lang.Exception error and a Schema Definition Error when I ran the attached test.,[],2012-07-20 16:07:59+00:00,2012-09-19 21:52:07+00:00,2012-09-20 16:07:00+00:00,Closed,13113671,DAFFODIL-253
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"choices have the initiatedContent feature, which depends on initiators, and which implements a sort of implied branch discriminator based on matching the initiator.",[],2012-07-19 14:54:33+00:00,2012-09-28 00:37:57+00:00,2012-11-06 22:45:11+00:00,Closed,13113670,DAFFODIL-252
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Choice was initially implemented with restrictions that require each branch to be an element, and further, a scalar element. 

In general, a choice branch can be a sequence, another choice, or an element which may or may not be 'array'.",[],2012-07-19 14:51:51+00:00,2013-01-07 20:28:15+00:00,2013-06-03 17:43:23+00:00,Closed,13113669,DAFFODIL-251
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"choices can have initiators and terminators. This could be implemented by a ""macro like"" technique of inserting a sequence around each choice that has initiators and terminators, and moving the properties around.",[],2012-07-19 14:48:36+00:00,2013-01-07 20:27:47+00:00,2013-01-18 21:32:02+00:00,Closed,13113668,DAFFODIL-250
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"choices take some DFDL properties to control their length, which can be filled out to a specified length, or to the length of the longest alternative.",[],2012-07-19 14:46:59+00:00,2013-04-10 00:02:41+00:00,2013-04-10 17:32:19+00:00,Closed,13113667,DAFFODIL-249
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL-6-021R:setVariable - Sets the value o
DFDL-7-121R:The dfdl:setVariable annotatio
DFDL-21-024R:Variables - dfdl:defineVariabl",[],2012-07-17 19:47:42+00:00,2012-10-10 13:21:05+00:00,2012-11-08 16:06:05+00:00,Closed,13113666,DAFFODIL-248
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Implementation of all dfdl:functions.,[],2012-07-17 19:46:58+00:00,2013-03-18 13:56:54+00:00,2013-03-18 14:33:01+00:00,Closed,13113665,DAFFODIL-247
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This is the complete set of DFDL requirements for Discriminators.

DFDL-2-026R (NEED TEST):DFDL discriminator or assert used to discriminate
DFDL-6-011R:discriminator - Defines a test
DFDL-7-060R:If the discriminator is succes
DFDL-7-061R:If a discriminator is unsucces
DFDL-7-069R:A dfdl:discriminator can be an
DFDL-7-069R2:A dfdl:discriminator can be an
DFDL-21-022R:Discriminators annotations",[],2012-07-17 19:46:26+00:00,2012-09-14 13:11:14+00:00,2012-11-08 19:25:35+00:00,Closed,13113664,DAFFODIL-246
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-07-17 19:45:28+00:00,2014-03-19 13:03:26+00:00,2014-03-19 13:03:27+00:00,Closed,13113663,DAFFODIL-245
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"binaryFloatRep can be either ""ieee"" or ""ibm390Hex"", but the latter is a tier 3 priority feature.

Hence, this whole thing is tier 3 since ""ieee"" is the only thing we support.",[],2012-07-17 19:44:30+00:00,,2020-06-10 14:17:21+00:00,Reopened,13113662,DAFFODIL-244
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-07-17 19:43:35+00:00,2017-01-13 21:06:25+00:00,2017-08-01 14:18:10+00:00,Closed,13113661,DAFFODIL-243
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-07-17 19:42:46+00:00,2014-11-11 17:09:03+00:00,2014-11-11 17:09:09+00:00,Closed,13113660,DAFFODIL-242
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-07-17 19:41:51+00:00,2016-09-06 13:11:47+00:00,2017-08-01 13:07:31+00:00,Closed,13113659,DAFFODIL-241
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-07-17 19:41:28+00:00,2016-09-02 19:07:28+00:00,2017-08-22 11:39:18+00:00,Closed,13113658,DAFFODIL-240
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-07-17 19:40:12+00:00,2012-09-14 14:32:16+00:00,2012-09-19 16:26:02+00:00,Closed,13113657,DAFFODIL-239
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,,[],2012-07-17 19:39:37+00:00,,2018-09-13 14:04:08+00:00,Open,13113656,DAFFODIL-238
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"when lengthKind=""explicit"", then length is an expression evaluated to get the length.",[],2012-07-17 19:38:48+00:00,2012-09-14 14:33:44+00:00,2012-09-19 18:02:10+00:00,Closed,13113655,DAFFODIL-237
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Implement inputValueCalc for path-like expressions.,[],2012-07-17 19:37:42+00:00,2012-09-14 14:10:00+00:00,2012-09-19 20:38:50+00:00,Closed,13113654,DAFFODIL-236
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-07-17 19:36:39+00:00,2013-06-04 16:50:40+00:00,2013-06-04 19:13:41+00:00,Closed,13113653,DAFFODIL-235
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Created this as separate work item because lengthUnits bytes and characters are both done, only bits is left.

Note that lengthUnits=""bits"" goes with alignment and by implication alignmentUnits=""bits"" as well. All should be implemented together.",[],2012-07-16 19:58:52+00:00,2012-11-27 01:57:01+00:00,2012-11-29 18:13:32+00:00,Closed,13113652,DAFFODIL-234
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Failing tests in IBMTestsThatPass:
test_introduction_1_01
test_length_implicit_12_01

These two tests seem to have in common that it's byte data vs text.",[],2012-07-16 18:31:09+00:00,2012-10-18 15:55:34+00:00,2012-10-26 12:55:44+00:00,Closed,13113651,DAFFODIL-233
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,These are tests with large input data files.  Please see commit  640d280 in newBackEnd for instruction on running one of these tests.,[],2012-07-13 13:52:06+00:00,2012-10-24 20:38:28+00:00,2012-11-09 17:34:50+00:00,Closed,13113650,DAFFODIL-232
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"Depends on UTF-16LE (Little Endian).

Appears as though modifications need to be made to SchemaComponent-knownEncodingIsFixedWidth so that UTF-8/16/BE/LE all are variable width.

Primitives.scala StringFixedLengtInVariableWidthCharacters needs to be modified to only look for nChars and to appropriately calculate bitPos based upon this.

Started creating a fix so that the entities tests can run successfully.",[],2012-07-12 15:55:37+00:00,2012-07-13 14:04:45+00:00,2012-10-25 19:20:12+00:00,Closed,13113649,DAFFODIL-231
New Feature,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,,[],2012-07-12 15:07:26+00:00,,2018-10-23 17:01:47+00:00,Open,13113648,DAFFODIL-230
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Minor,,[],2012-07-12 14:49:54+00:00,2012-10-19 19:18:18+00:00,2012-10-31 13:51:18+00:00,Closed,13113647,DAFFODIL-229
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Right now there is no way for the compiler to issue a warning diagnostic to advise the user of a possible problem that isn't strictly speaking, an error.

Same for runtime though warnings are less common there. There is a DFDL feature called a continuable-error (something like that), which comes from a special DFDL assertion annotation that is labeled as being a warning only.",[],2012-07-11 23:27:04+00:00,2017-01-06 17:36:18+00:00,2017-08-01 19:02:59+00:00,Closed,13113646,DAFFODIL-228
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,"Implement XQuery for occursCountKind=""expression"" where occursCount=""{ /* Some XQuery */ }"".",[],2012-07-11 18:33:06+00:00,2012-07-17 19:49:31+00:00,2012-09-26 17:40:54+00:00,Closed,13113645,DAFFODIL-227
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"New logger is nice, but you either see all Debug messages, nor none.

We need an API by which one can tell it to log selectively.

I suggest there is a global mutable set of package/class specifiers, and when a logging call is made, a check is done 
(1) is any logging enabled for this loglevel?
(2) if so, is selective logging enabled at all?
(3) if so, is this class or its package in the set of selected loggers?

This would allow code module by code-module control over what debug messages one wants, by making some sort of api call like

log.enableSelective(this) // on a class where you want to see the log calls

Logger.enableSelective(daffodil.dsom) // e.g., a whole package

The specific name of the functions is not the issue here, it's that there's a couple of different idioms for establishing what is selected.

Oh, and these calls probably need the LogLevel specified as well. I.e., I want debug logging from package X, and Info logging from package y, and only errors and warnings from everything else.

These can be embedded in the code, or called from outside (as options to the compile/runtime API.",[],2012-07-11 14:07:46+00:00,2013-05-21 19:18:05+00:00,2013-05-21 19:18:05+00:00,Closed,13113644,DAFFODIL-226
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We cleaned up all the crud which was doing getResource stuff wrong in core (and daffodil-lib, if there was any.)

We forgot to look at dfdl-property-code-generator, which still has code in it that is calling getResourceOrFileStream which is the bad-old way.

Clean this up to use the modern and appropriate technique.",[],2012-07-11 01:44:42+00:00,2012-10-18 15:53:52+00:00,2017-04-06 15:12:48+00:00,Closed,13113643,DAFFODIL-225
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,,[],2012-07-09 19:22:15+00:00,2012-07-21 01:33:41+00:00,2012-07-23 14:49:52+00:00,Closed,13113642,DAFFODIL-224
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,,[],2012-07-06 20:50:04+00:00,2012-07-21 01:05:33+00:00,2012-07-23 15:01:52+00:00,Closed,13113641,DAFFODIL-223
Requirement,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,Thanks to some pair programming with Mike we have a test case and some rudimentary code; am now debugging.,[],2012-07-06 15:09:57+00:00,2012-07-13 22:39:08+00:00,2012-09-26 17:37:32+00:00,Closed,13113640,DAFFODIL-222
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,This test causes the parser to go into what appears an infinite loop condition.,[],2012-07-03 17:57:02+00:00,2012-07-20 21:27:36+00:00,2012-07-20 21:30:45+00:00,Closed,13113639,DAFFODIL-221
Bug,[],gmcdonald,Gavin McDonald,vtguy08,Taylor Wise,Major,"From TresysTests run test_nested_separator_delimited_basicNest2.  Infinite loop occurs.  Go to nest-separator-delimited.tdml and remove the minOccurs=""0"" attribute from element ""s1"" and element ""s2"".  Run the test again, it terminates (albeit incorrectly) but it terminates.",[],2012-06-29 19:46:10+00:00,2012-10-31 15:04:39+00:00,2012-10-31 15:04:39+00:00,Closed,13113638,DAFFODIL-220
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If we implement utf-8 (variable width encoding), then many of the IBM tests will work. (Well, at least the 5 categorized as IBMTestsOnNumbers will work (I know because changing that test to use encoding=""ascii"" and they all run. But,... we don't want to change the IBM tests.)

Implementing utf-8 is a matter of implementing StringFixedLengthInBytesVariableWidthCharacters, and StringFixedLengthInVariableWidthCharacters.

These are variations on the theme established by StringFixedLengthInBytes, which is our current workhorse.

I suggest we fix this in s3 because I don't think it's terribly difficult, so the effort to accomplishment ratio is high :-)",[],2012-06-29 18:10:33+00:00,2012-07-13 14:08:32+00:00,2012-07-31 20:46:12+00:00,Closed,13113637,DAFFODIL-219
Bug,[],gmcdonald,Gavin McDonald,daffodil-pchu,Paul Chu,Major,,[],2012-06-25 20:23:34+00:00,2012-07-13 16:02:59+00:00,2012-07-13 16:02:59+00:00,Closed,13113636,DAFFODIL-218
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,"In Parser.scala the createInitialState allocates a fixed-size buffer to read the data from the stream; if that data is too big for the buffer, only buffer-size characters are read and count is set to a code indicating error.  However, that error value is never checked and it's possible in long files (on the order of 100KiB) might not get completely read.",[],2012-06-14 22:50:24+00:00,2012-08-17 13:48:59+00:00,2018-09-13 14:13:26+00:00,Closed,13113635,DAFFODIL-217
Bug,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,"The Regex string ""([A-Za-z]{1,8}([-][A-Za-z0-9]{1,8})*)"" is valid however the regex compiler for DFDL_part1_simpletypes.xsd fails to compile this string and generates an error with the expression ""[-]"".  The main problem is although valid the character class of one element is itself redundant so although I believe the minus (-) can be escaped with a reverse solidus, visa vi ""[\-]"", I think the best solution is to simply replace this with the character itself: ""-"".",['Regex'],2012-06-13 20:24:15+00:00,2012-06-13 21:40:37+00:00,2012-09-26 17:35:30+00:00,Closed,13113634,DAFFODIL-216
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,The new ResourceResolver is based on class path and the compile for Intellij should take the class path into account.,"['CLASSPATH', 'ResourceResolver']",2012-06-13 16:54:12+00:00,2012-06-13 21:33:46+00:00,2012-09-26 17:32:27+00:00,Closed,13113633,DAFFODIL-215
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Put in place the test-rig features to allow unparser development to move forward the way we want it to, by creating tests in TDML.",[],2012-06-13 15:12:53+00:00,2012-06-13 22:00:32+00:00,2012-06-26 18:19:08+00:00,Closed,13113632,DAFFODIL-214
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"While analyzing delimiter length kind, we discovered this case where a warning is clearly needed due to data ambiguity.

If a delimiter is located after a binary field, then it should be fixed length, otherwise it is very challenging to determine what is the delimiter and what is the binary data.

THis is only a warning because the DFDL user might know their data and know that in their particular case there is no ambiguity.

(Analogous case: no escape scheme for text format, because user knows that the data text fields don't contain the delimiters.... if they do, the parse will be messed up, but if they don't then a format with no escape scheme will be fine.)",[],2012-06-12 14:05:43+00:00,2012-10-22 13:18:11+00:00,2012-12-20 17:30:29+00:00,Closed,13113631,DAFFODIL-213
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Do we use saxon or xalan anymore? 

If not, drop them.",[],2012-06-08 23:17:25+00:00,2012-08-15 12:19:13+00:00,2012-08-15 12:19:18+00:00,Closed,13113630,DAFFODIL-212
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Minor,"Implement zoned and packed-decimal numbers.  See http://en.wikipedia.org/wiki/Binary-coded_decimal for more information.  Note that this requires different code for different integer types (byte, short, int, long, BigInteger), signed and unsigned numbers and differentiation between EBCDIC and ASCII formatting (all be it with a lot of code reuse).

See the src/daffodil/grammar/Primitives.scala/ConvertTextNumberPrim class for an example for how to do this","['ASCII', 'BCD', 'EBCDIC', 'Zoned', 'binary']",2012-06-08 14:18:44+00:00,2017-04-04 20:34:22+00:00,2017-04-04 20:34:42+00:00,Closed,13113629,DAFFODIL-211
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-06-08 13:49:31+00:00,2012-06-08 19:30:57+00:00,2012-06-22 20:34:47+00:00,Closed,13113628,DAFFODIL-210
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Junit4 allows tagging/organizing 

We need to separate tests into regression tests (known to pass - failure is a regression), versus unknown.",[],2012-06-08 13:20:30+00:00,2012-09-24 18:56:07+00:00,2012-10-01 20:23:27+00:00,Closed,13113627,DAFFODIL-209
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Add TDML support tests that are as compact as the JUnit tests.,[],2012-06-07 16:29:46+00:00,2012-06-14 01:26:36+00:00,2012-06-22 20:37:04+00:00,Closed,13113626,DAFFODIL-208
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jeffrey.jacobs,Jeffrey C. Jacobs,Major,"Implement and add test cases for the case when a parsed value is delimited by a character sequence which can occur  within the value escaped.  For example say the comma (,) is the delimiter *except* when preceded by a backslash (\) escape sequence.","['lengthKind=""pattern""', 'regex']",2012-06-07 15:21:56+00:00,2012-06-21 23:04:48+00:00,2012-09-26 17:23:18+00:00,Closed,13113625,DAFFODIL-207
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-06-07 15:17:21+00:00,2012-06-27 14:46:27+00:00,2012-06-27 21:07:46+00:00,Closed,13113624,DAFFODIL-206
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,"DFDL-12-101R
DFDL-12-087R
DFDL-12-088R",[],2012-06-07 15:14:35+00:00,2012-12-17 16:31:15+00:00,2012-12-17 16:31:48+00:00,Closed,13113623,DAFFODIL-205
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-06-07 15:13:52+00:00,2012-07-16 19:53:59+00:00,2012-07-25 20:55:59+00:00,Closed,13113622,DAFFODIL-204
Task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-06-07 15:13:28+00:00,2012-07-24 15:16:08+00:00,2012-08-03 14:56:55+00:00,Closed,13113621,DAFFODIL-203
Sub-task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,DFDL-13-235R,[],2012-06-07 15:11:48+00:00,2012-10-18 16:05:41+00:00,2013-02-22 19:46:51+00:00,Closed,13113620,DAFFODIL-202
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Minor,,[],2012-06-07 15:11:24+00:00,,2020-10-21 20:16:28+00:00,Open,13113619,DAFFODIL-201
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-06-07 15:11:12+00:00,2016-09-02 18:43:56+00:00,2017-03-01 19:17:09+00:00,Closed,13113618,DAFFODIL-200
Sub-task,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,,[],2012-06-07 15:10:55+00:00,2012-10-24 20:35:40+00:00,2013-02-22 19:23:26+00:00,Closed,13113617,DAFFODIL-199
New Feature,[],gmcdonald,Gavin McDonald,slawrence,Steve Lawrence,Major,Umbrella task for nillability feature,[],2012-06-07 15:09:18+00:00,2013-04-09 21:36:42+00:00,2013-05-28 21:38:33+00:00,Closed,13113616,DAFFODIL-198
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Add a main()/Application to TDML Runner so tests can be run from command line without having to run all the JUnit tests.

(Issue: Junit command line rigs often provide good reporting infrastructure. We may want to leverage this to avoid reinventing the wheel here. Right now TDML runner is independent of JUnit - there are Junit tests that call the TDML runner but those are just there for convenience of the Eclipse developer.

That is:
* we want to separate the Unit from the Conformance/Feature tests
* Both may end up using JUnit as infrastructure, but they need to be isolatable from each other.
* The TDML runner doesn't require JUnit today, but no reason not to build that into it, so long as the separation is maintained.",[],2012-06-01 15:39:20+00:00,2012-10-18 15:46:44+00:00,2012-10-18 15:46:45+00:00,Closed,13113615,DAFFODIL-197
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,This segregation is needed in order to enable continuous integration using jenkins or hudson or bamboo (some of which are provided by the UofI open-source infrastructure.,[],2012-06-01 15:19:42+00:00,2012-07-27 20:25:23+00:00,2012-08-20 20:04:48+00:00,Closed,13113614,DAFFODIL-196
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The batch build (using ant), tests the software. The classpath it uses when running these tests should have the built jars on it *only*, it should not have other non-runtime class file directories, nor the scala compiler, java compiler, etc. 

There is code in the XML Validator ResourceResolver.java to find the various resources needed by looking on the classpath for jar files that contain the resources. (E.g., the XML Schema (xsd) files for the DFDL annotation syntax. The Jar step in ant builds these xsd files into the jar.

The code tries looking in the file system src and srcTest directories if it doesn't find them in any jars on the class path. The purpose of this is to insure that we can seamlessly run tests from inside an IDE (where there are no jars) as well as from ant.

However, these two setups should be disjoint. When developing in the IDE, it should NOT be looking at jars for the resources (and it won't, because the ant build.xml is not used, and nothing creates the jars in question nor puts their directory onto any classpath that eclipse or other IDE would see). 

When running from ant it should NOT be picking the resources up from src or srcTest subdirectories. This is trickier - it might just be finding these ""by accident"". 

Fixing this requires creating a test.classpath path for ant, which is different from the classpath used when building. 

It also requires changing the working directory so that the relative paths to src and srcTest won't work. Alternatively we can set a java system parameter at the java/scala command line when testing that says ""jars only"" and use it to shut off the file searching in the src and srcTest directories.

We need to insure that when testing, it ONLY",[],2012-05-31 15:58:00+00:00,2012-08-15 12:16:19+00:00,2018-09-13 14:13:19+00:00,Closed,13113613,DAFFODIL-195
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to be able to do conformance testing across daffodil and the IBM DFDL implementation.

To do this we need a rig that can run a TDML test against the IBM Message-Broker-based implementation of DFDL.

Message Broker product now supports API-level access to the DFDL engine.",[],2012-05-23 18:47:48+00:00,2014-11-11 15:39:37+00:00,2018-09-13 14:13:18+00:00,Closed,13113612,DAFFODIL-194
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"A number of our Junit based tests aren't really ""unit"" testing. They're just in junit because we didn't have the TDML runner for a while, and even since we've had it, copying a pattern in the Junit tests just seems easier sometimes.

However, these should be converted to TDML so that they can be part of our conformance tests. Junit tests should really be lower-level tests.",[],2012-05-23 18:40:57+00:00,,2018-09-13 14:03:53+00:00,Open,13113611,DAFFODIL-193
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"If you run the unit test in TestPrimitives.scala testLengthKindDelimited, when it displays the parser you see

parser = <e1> ~ StartChildren ~ StartSequence ~ Nothing ~ <s1> ...

This occurrence of the Nothing parser should be optimized out.",[],2012-04-23 19:02:12+00:00,2012-06-29 16:52:39+00:00,2012-07-19 17:15:45+00:00,Closed,13113610,DAFFODIL-192
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"Implement remaining properties

list is:

textStandardExponentCharacter
textStandardInfinityRep
textStandardNaNRep",[],2012-04-20 17:57:15+00:00,2013-08-14 16:26:12+00:00,2013-08-21 15:22:30+00:00,Closed,13113609,DAFFODIL-191
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Page 88 in DFDL spec,[],2012-04-20 17:19:19+00:00,2012-04-20 17:53:35+00:00,2018-09-13 14:13:18+00:00,Closed,13113608,DAFFODIL-190
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Page 87 in DFDL spec,[],2012-04-20 17:18:18+00:00,2012-04-20 17:54:34+00:00,2018-09-13 14:13:22+00:00,Closed,13113607,DAFFODIL-189
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Page 87 in DFDL spec,[],2012-04-20 17:16:42+00:00,2012-04-20 17:55:12+00:00,2018-09-13 14:13:21+00:00,Closed,13113606,DAFFODIL-188
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Page 87 in DFDL spec,[],2012-04-20 17:16:06+00:00,2012-04-20 17:55:29+00:00,2018-09-13 14:13:21+00:00,Closed,13113605,DAFFODIL-187
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Page 86 in DFDL spec,[],2012-04-20 17:15:25+00:00,2012-04-20 17:55:46+00:00,2018-09-13 14:13:20+00:00,Closed,13113604,DAFFODIL-186
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"TDML runner needs enhancement. Some tests need to expect errors or warnings.

IBM has provided their XSD schema for TDML format (mike beckerle has this) which has these features, so we can remain compatible with their TDML format.",[],2012-04-20 15:36:11+00:00,2012-06-13 21:59:30+00:00,2012-06-22 20:39:56+00:00,Closed,13113603,DAFFODIL-185
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Creating an int from ""55555555555555555555"" succeeds with some incorrect negative value. 

Right now it seems to just create an incorrect value.

I suspect same is true of all integer types, perhaps all number types.",[],2012-04-18 18:50:56+00:00,2012-06-07 15:02:19+00:00,2012-06-22 20:45:35+00:00,Closed,13113602,DAFFODIL-184
Bug,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"I was using TestUtils.dfdlTestSchema, but I was also defining representation and encoding properties in my test case (creating a duplicate definiton). With this input I was reaching a notYetImplemented assertion. When I removed these property definitions from my input, the test case worked successfully.",[],2012-04-18 17:43:23+00:00,2012-10-18 20:26:02+00:00,2012-10-30 20:14:00+00:00,Closed,13113601,DAFFODIL-183
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Because the infoset is jdom, everything is a string.

To make clear types, XML uses the xsi:type attribute. 

We should have an option to have these added. Then our tests can make sure things were detected to be the right type. 

However, many people will find this too cluttered, so it has to be an option that can be turned off.",[],2012-04-06 21:27:05+00:00,,2020-09-23 20:23:16+00:00,Open,13113600,DAFFODIL-182
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:15:15+00:00,2017-04-06 19:27:59+00:00,2018-09-13 14:13:29+00:00,Closed,13113599,DAFFODIL-181
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:14:37+00:00,2013-09-06 15:33:09+00:00,2013-09-09 13:34:26+00:00,Closed,13113598,DAFFODIL-180
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:13:44+00:00,2013-09-03 20:01:13+00:00,2013-09-04 14:32:20+00:00,Closed,13113597,DAFFODIL-179
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:13:10+00:00,2017-01-13 20:06:11+00:00,2017-08-01 14:18:10+00:00,Closed,13113596,DAFFODIL-178
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:12:48+00:00,2017-01-13 20:06:45+00:00,2017-08-01 14:18:10+00:00,Closed,13113595,DAFFODIL-177
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:11:41+00:00,2017-04-06 20:09:02+00:00,2017-04-06 20:09:02+00:00,Closed,13113594,DAFFODIL-176
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:10:55+00:00,2014-05-19 15:58:49+00:00,2014-05-30 17:53:35+00:00,Closed,13113593,DAFFODIL-175
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:10:05+00:00,2013-09-17 15:02:09+00:00,2013-09-20 18:41:47+00:00,Closed,13113592,DAFFODIL-174
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:09:07+00:00,2013-08-28 15:07:21+00:00,2013-08-28 15:07:37+00:00,Closed,13113591,DAFFODIL-173
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:08:16+00:00,2013-04-03 19:35:29+00:00,2013-04-04 17:00:09+00:00,Closed,13113590,DAFFODIL-172
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:07:11+00:00,2013-08-14 19:16:46+00:00,2013-08-16 19:50:52+00:00,Closed,13113589,DAFFODIL-171
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:06:22+00:00,2013-06-28 14:51:17+00:00,2013-06-28 14:51:43+00:00,Closed,13113588,DAFFODIL-170
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,['Compat'],2012-04-06 21:04:35+00:00,2017-07-27 14:14:34+00:00,2017-07-27 14:14:44+00:00,Closed,13113587,DAFFODIL-169
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Current test won't work in DFDL v1.0 because it depends on being able to treat a variable like an accumulator. DFDL variables are single-assignment (keeps DFDL a functional language, instead of a state machine)

A similar test may be able to be created, but will need to use the newVariableInstance annotation. But I'm not sure.",[],2012-04-06 21:03:54+00:00,2017-04-06 19:21:37+00:00,2018-09-13 14:13:31+00:00,Closed,13113586,DAFFODIL-168
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 21:00:01+00:00,2012-12-13 15:39:46+00:00,2018-09-13 14:13:30+00:00,Closed,13113585,DAFFODIL-167
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:59:15+00:00,2012-08-02 00:19:35+00:00,2012-08-21 20:02:29+00:00,Closed,13113584,DAFFODIL-166
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:58:15+00:00,2012-07-27 19:32:39+00:00,2012-08-21 21:40:27+00:00,Closed,13113583,DAFFODIL-165
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:56:56+00:00,2017-04-06 19:18:02+00:00,2018-09-13 14:13:25+00:00,Closed,13113582,DAFFODIL-164
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL v1.0 doesn't allow recursion. This is an interesting extension, but must be explicitly enabled via some extension mechanism.

There are comments in the source code about how to implement recursion.",[],2012-04-06 20:55:58+00:00,2017-07-31 16:50:40+00:00,2017-07-31 16:50:53+00:00,Closed,13113581,DAFFODIL-163
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:54:20+00:00,2013-03-15 23:27:06+00:00,2013-03-28 16:05:40+00:00,Closed,13113580,DAFFODIL-162
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:52:31+00:00,2013-04-03 19:41:17+00:00,2013-04-04 12:55:51+00:00,Closed,13113579,DAFFODIL-161
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:50:47+00:00,2013-04-30 13:55:07+00:00,2013-04-30 14:08:27+00:00,Closed,13113578,DAFFODIL-160
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:49:11+00:00,2012-08-01 23:49:15+00:00,2012-08-22 15:55:50+00:00,Closed,13113577,DAFFODIL-159
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:48:00+00:00,2012-07-09 15:10:11+00:00,2012-11-13 21:18:54+00:00,Closed,13113576,DAFFODIL-158
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:37:43+00:00,2012-12-13 15:39:28+00:00,2018-09-13 14:13:26+00:00,Closed,13113575,DAFFODIL-157
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:26:53+00:00,2012-07-26 18:23:35+00:00,2012-08-10 19:43:39+00:00,Closed,13113574,DAFFODIL-156
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:26:37+00:00,2012-12-13 15:39:14+00:00,2017-08-01 18:06:28+00:00,Closed,13113573,DAFFODIL-155
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:26:23+00:00,2012-12-13 15:38:56+00:00,2017-08-01 18:09:08+00:00,Closed,13113572,DAFFODIL-154
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:26:10+00:00,2012-12-13 15:40:13+00:00,2018-09-13 14:13:26+00:00,Closed,13113571,DAFFODIL-153
Technical task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This test uses an extension to DFDL which is array-valued expressions. This either should be eliminated, or must be enabled by an explicit extension mechanism such as daffodil:allowArrayValuedExpressions=""true"" or daffodil:enableExtensions=""arrayValuedExpressions""",[],2012-04-06 20:25:54+00:00,2017-07-31 16:51:31+00:00,2017-07-31 16:51:44+00:00,Closed,13113570,DAFFODIL-152
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:24:02+00:00,2012-12-13 15:38:34+00:00,2017-08-01 18:08:03+00:00,Closed,13113569,DAFFODIL-151
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:23:48+00:00,2012-12-13 15:38:08+00:00,2017-08-01 17:58:50+00:00,Closed,13113568,DAFFODIL-150
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fix namespace issue
Convert to TDML
Make into legal DFDL v1.0 (at least some of these tests aren't)

And, implement/fix any features required to make the test work.",[],2012-04-06 20:22:35+00:00,2012-12-13 15:37:18+00:00,2017-07-26 20:48:34+00:00,Closed,13113567,DAFFODIL-149
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Fix XML Schema namespace usage
Convert to TDML
Correct it into legal DFDL v1.0
Implement any features needed to make it work.",[],2012-04-06 20:20:45+00:00,2012-07-27 03:19:07+00:00,2012-08-21 21:39:05+00:00,Closed,13113566,DAFFODIL-148
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 20:01:16+00:00,2012-07-17 20:00:25+00:00,2012-07-17 20:00:25+00:00,Closed,13113565,DAFFODIL-147
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"required to make tests AA and AC work, among many others.",[],2012-04-06 19:58:25+00:00,2012-07-17 20:01:50+00:00,2012-07-17 20:01:50+00:00,Closed,13113564,DAFFODIL-146
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-04-06 19:56:16+00:00,2012-12-18 16:44:56+00:00,2013-02-15 13:24:44+00:00,Closed,13113563,DAFFODIL-145
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,We need some of these sooner than others.,[],2012-04-06 19:33:08+00:00,2012-04-14 20:11:56+00:00,2013-07-28 12:42:38+00:00,Closed,13113562,DAFFODIL-144
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,We need a few of these first. The rest later.,[],2012-04-06 19:27:36+00:00,2012-04-14 21:47:36+00:00,2013-07-28 12:43:55+00:00,Closed,13113561,DAFFODIL-143
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"%WSP is needed to enable some pre-existing tests, so called out specially.",[],2012-04-06 19:10:34+00:00,2012-07-25 23:26:43+00:00,2012-08-01 17:46:59+00:00,Closed,13113560,DAFFODIL-142
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"%NL; seems to enable several tests, so called out specially.",[],2012-04-06 19:09:31+00:00,2012-07-25 23:26:22+00:00,2012-08-01 15:07:18+00:00,Closed,13113559,DAFFODIL-141
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL defines entities beyond those in XSD. String converters that find and replace the DFDL entities syntax are needed.

For the ""pattern entities"" (like %WSP+; this replacement doesn't occur, but the raw and character entities it does.

These are needed to correctly implement almost all use of string literals in DFDL schemas. 

Coverage note: Tests must insure these entities can be used in any DFDL string literal.",[],2012-04-05 21:16:59+00:00,2012-07-26 18:06:37+00:00,2012-08-22 18:35:15+00:00,Closed,13113558,DAFFODIL-140
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need to improve the use of general prints to stderr/out.

Use a disciplined logging mechanism - presumably some standard scala logging mechanism with the usual controls over verbosity.

We need to standardize the format of the messages, and perhaps make use of indenting to make the traces easier to read.

Goal: a trace facility for compilation time, and for run-time, which is useful for showing what Daffodil is doing during each phase, and highlighting how decisions are being taken at compile time that therefore don't need to be tested or considered at runtime.

This is target s1 since improved logging/messages would be good to demo at CDTF, which is April 25.

We should also be able to shut off all logging overhead for performance testing, but that's a longer term need. Often the same controls for verbosity will also provide this, so that's why it is mentioned here.",[],2012-04-05 12:47:33+00:00,2012-07-11 23:24:32+00:00,2012-07-20 18:06:49+00:00,Closed,13113557,DAFFODIL-139
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"We need a schema that is available to include/import which pre-defines a named format which has a reasonable starting value for most properties.

This task depends on multi-schema file support (a separate task)

Note that an example of one has been supplied as an example by IBM - (this task is about picking a place for these to go, and providing at least one, plus a test that uses it and shows that it is working to supply properties and escape scheme)",[],2012-03-28 21:42:16+00:00,2013-02-11 18:33:17+00:00,2013-03-05 15:23:18+00:00,Closed,13113556,DAFFODIL-138
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Implement parser for all the syntaxes of properties.

Short form, long (aka attribute) form, and element form.",[],2012-03-28 21:38:50+00:00,2012-03-28 21:39:00+00:00,2012-12-20 20:47:33+00:00,Closed,13113555,DAFFODIL-137
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Blocker,"Until we have multiple schema files, we cannot fully implement scoping because the default format comes from the schema document. You need more than one schema in order to have more than one default, in order to combine them properly.",[],2012-03-28 21:17:09+00:00,2013-02-08 03:39:32+00:00,2013-03-13 19:14:22+00:00,Closed,13113554,DAFFODIL-136
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 21:01:39+00:00,2012-03-28 21:04:11+00:00,2017-07-26 16:27:05+00:00,Closed,13113553,DAFFODIL-135
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 21:01:28+00:00,2012-03-28 21:04:13+00:00,2013-02-26 17:54:58+00:00,Closed,13113552,DAFFODIL-134
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 21:01:04+00:00,2012-03-28 21:04:10+00:00,2017-07-26 16:27:05+00:00,Closed,13113551,DAFFODIL-133
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 21:00:54+00:00,2012-03-28 21:04:11+00:00,2017-07-26 16:27:05+00:00,Closed,13113550,DAFFODIL-132
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 21:00:28+00:00,2012-03-28 21:04:09+00:00,2012-08-09 21:16:24+00:00,Closed,13113549,DAFFODIL-131
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 21:00:20+00:00,2012-03-28 21:04:10+00:00,2012-11-20 21:42:16+00:00,Closed,13113548,DAFFODIL-130
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 21:00:05+00:00,2012-03-28 21:04:13+00:00,2017-07-26 16:27:05+00:00,Closed,13113547,DAFFODIL-129
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:59:33+00:00,2012-03-28 21:04:12+00:00,2012-11-20 21:44:42+00:00,Closed,13113546,DAFFODIL-128
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:59:28+00:00,2012-03-28 21:04:12+00:00,2017-07-26 16:27:05+00:00,Closed,13113545,DAFFODIL-127
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:59:05+00:00,2012-03-28 21:04:10+00:00,2013-08-14 21:06:36+00:00,Closed,13113544,DAFFODIL-126
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:58:50+00:00,2012-03-28 21:04:12+00:00,2017-07-26 16:21:10+00:00,Closed,13113543,DAFFODIL-125
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"assert, discriminator, defineVariable, newVariableInstance, setVariable",[],2012-03-28 20:58:39+00:00,2012-03-28 21:04:13+00:00,2017-07-26 16:27:05+00:00,Closed,13113542,DAFFODIL-124
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:58:28+00:00,2012-03-28 21:04:13+00:00,2017-07-26 16:02:12+00:00,Closed,13113541,DAFFODIL-123
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:57:15+00:00,2012-03-28 21:04:11+00:00,2013-08-14 15:21:36+00:00,Closed,13113540,DAFFODIL-122
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:56:46+00:00,2012-03-28 21:04:10+00:00,2013-03-15 23:10:19+00:00,Closed,13113539,DAFFODIL-121
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"runs parsers as a suite, or one at a time, or from eclipse as unit tests",[],2012-03-28 20:50:09+00:00,2012-03-28 21:05:31+00:00,2013-03-15 23:09:47+00:00,Closed,13113538,DAFFODIL-120
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The purpose of this task is to improve developer productivity by reducing Scala build cycle time in Eclipse.

The idea is to take the chunks of code we're no longer planning to use going forward, and put them into a separate sub-project which can still be open, and available for us to surf and learn from and decipher, but which aren't part of the primary edit-compile-test cycle. 

This is kind of like daffodil-lib, except this is for code we think is going away, but we still want to learn from, as in we're rewriting the feature, but we still want to try to figure out what the prior-generation code was doing, so we want it there and live, and even runnable so we can walk it in the debugger. But as we're not changing the prior-gen code anymore, it shouldn't need to be compiled (at least not very much.)

We have this src-unused directory, but that specifically isn't great for this because according to eclipse, it's not a ""source"" directory, and so isn't compiled at all. What we want is a separate project where the prior-gen code sits, is compiled, can be rapidly navigated like any source code, where you can jump from definition to definition using IDE features, and so forth. 

Suggest sub-projects/legacy/src/... as the name for this project.

This would be on the newBackEnd branch.",[],2012-03-28 20:35:26+00:00,2012-04-14 19:57:10+00:00,2013-03-15 23:09:23+00:00,Closed,13113537,DAFFODIL-119
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"This is very close in that the existing code base works, and we're re-using most/all of that code, so this should continue to work.",[],2012-03-28 20:23:15+00:00,2012-09-14 13:08:20+00:00,2013-03-15 23:08:29+00:00,Closed,13113536,DAFFODIL-118
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Pushing to s5 (may push it out longer), as this doesn't actually solve our problem. The fixed facet is only validation, and so it doesn't affect choices, which is how this was inteded to be used in the some target data format DFDL schemas.",[],2012-03-28 20:21:36+00:00,,2018-09-13 14:04:30+00:00,Open,13113535,DAFFODIL-117
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,DFDL-12-055R,[],2012-03-28 20:21:19+00:00,2012-10-18 15:29:31+00:00,2012-12-03 16:50:48+00:00,Closed,13113534,DAFFODIL-116
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Defaulting when parsing.

Uses the XML Schema default and fixed properties of element declarations, depends on occursCountKind, minOccurs and maxOccurs. 

emptyValueDelmiterPolicy, initiator, terminator are involved as an empty representation is what triggers defaulting.

Also useNilForDefault property for that specific case.",[],2012-03-28 20:21:03+00:00,,2019-06-19 19:42:31+00:00,Open,13113533,DAFFODIL-115
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"These properties:

lengthKind=""prefixed��� 
prefixIncludesPrefixLength
prefixLengthType",['ForInteroperabilityTest'],2012-03-28 20:20:49+00:00,2018-12-11 13:35:16+00:00,2021-05-20 20:01:26+00:00,Closed,13113532,DAFFODIL-114
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:20:35+00:00,2012-06-07 15:58:17+00:00,2012-07-30 17:34:15+00:00,Closed,13113531,DAFFODIL-113
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:20:31+00:00,2012-06-29 19:34:34+00:00,2012-07-12 18:33:39+00:00,Closed,13113530,DAFFODIL-112
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:20:14+00:00,2013-04-09 22:42:09+00:00,2013-06-04 21:59:19+00:00,Closed,13113529,DAFFODIL-111
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,['ForInteroperabilityTest'],2012-03-28 20:19:22+00:00,2019-05-23 17:24:15+00:00,2021-05-20 20:01:33+00:00,Closed,13113528,DAFFODIL-110
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:19:07+00:00,2012-07-17 12:18:11+00:00,2012-08-02 15:25:51+00:00,Closed,13113527,DAFFODIL-109
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:16:04+00:00,2012-07-17 20:01:03+00:00,2012-07-17 20:01:03+00:00,Closed,13113526,DAFFODIL-108
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"standard text decimal. Probably good to do integer at the same time. 
related property dfdl:decimalSigned",[],2012-03-28 20:13:51+00:00,2013-06-29 00:29:01+00:00,2013-07-09 16:27:58+00:00,Closed,13113525,DAFFODIL-107
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:13:23+00:00,2013-07-26 14:02:52+00:00,2013-07-26 18:58:07+00:00,Closed,13113524,DAFFODIL-106
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"Requirements Specifiec to DateTime:

DFDL-5-024R

Requirements shared with Date/Time/DateTime (See DFDL-100 and DFDL-102):

DFDL-13-003R
DFDL-13-138R
DFDL-13-139R
DFDL-13-140R
DFDL-13-142R
DFDL-13-143R
DFDL-13-145R
DFDL-13-146R
DFDL-13-147R
DFDL-13-150R
DFDL-13-151R
DFDL-13-152R
DFDL-13-153R
DFDL-13-159R
DFDL-13-165R
DFDL-13-166R

Note: Some requirements related to Date/Time/DateTime were not implemented.",[],2012-03-28 20:11:48+00:00,2013-02-08 17:01:16+00:00,2013-02-18 14:43:32+00:00,Closed,13113523,DAFFODIL-105
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-28 20:11:45+00:00,2012-06-07 15:56:45+00:00,2012-07-25 20:57:50+00:00,Closed,13113522,DAFFODIL-104
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:11:26+00:00,2013-04-09 21:30:12+00:00,2013-07-25 19:57:45+00:00,Closed,13113521,DAFFODIL-103
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"Requirements Specific to Time:

DFDL-5-023R

Requirements shared with Date/Time/DateTime (See DFDL-100 and DFDL-105):

DFDL-13-003R
DFDL-13-138R
DFDL-13-139R
DFDL-13-140R
DFDL-13-142R
DFDL-13-143R
DFDL-13-145R
DFDL-13-146R
DFDL-13-147R
DFDL-13-150R
DFDL-13-151R
DFDL-13-152R
DFDL-13-153R
DFDL-13-159R
DFDL-13-165R
DFDL-13-166R

Note: Some requirements related to Date/Time/DateTime were not implemented.",[],2012-03-28 20:10:32+00:00,2013-01-23 20:19:21+00:00,2013-02-13 14:41:27+00:00,Closed,13113520,DAFFODIL-102
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 20:09:20+00:00,2013-04-09 21:29:06+00:00,2013-07-25 19:59:06+00:00,Closed,13113519,DAFFODIL-101
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"Requirements Specific to Date:

DFDL-5-022R

Requirements shared with Date/Time/DateTime (See DFDL-102 and DFDL-105):

DFDL-13-003R
DFDL-13-138R
DFDL-13-139R
DFDL-13-140R
DFDL-13-142R
DFDL-13-143R
DFDL-13-145R
DFDL-13-146R
DFDL-13-147R
DFDL-13-150R
DFDL-13-151R
DFDL-13-152R
DFDL-13-153R
DFDL-13-159R
DFDL-13-165R
DFDL-13-166R

Note: Some requirements related to Date/Time/DateTime were not implemented.",[],2012-03-28 20:08:58+00:00,2013-01-23 20:18:40+00:00,2013-02-14 18:03:06+00:00,Closed,13113518,DAFFODIL-100
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,Also involved. Property binaryCalendarEpoch.,[],2012-03-28 20:08:37+00:00,2018-06-04 20:13:10+00:00,2018-08-16 14:43:44+00:00,Closed,13113517,DAFFODIL-99
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Critical,,[],2012-03-28 18:59:49+00:00,2013-04-25 15:43:30+00:00,2013-04-30 16:54:36+00:00,Closed,13113516,DAFFODIL-98
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:57:58+00:00,2012-04-20 17:58:56+00:00,2013-07-23 19:38:44+00:00,Closed,13113515,DAFFODIL-97
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:57:31+00:00,2012-04-12 19:51:38+00:00,2013-08-01 20:00:47+00:00,Closed,13113514,DAFFODIL-96
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:57:11+00:00,2012-04-20 17:58:44+00:00,2013-08-11 20:15:42+00:00,Closed,13113513,DAFFODIL-95
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:56:17+00:00,2012-04-20 17:12:02+00:00,2013-08-13 14:53:33+00:00,Closed,13113512,DAFFODIL-94
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:51:46+00:00,2012-03-28 18:54:20+00:00,2013-07-30 16:13:27+00:00,Closed,13113511,DAFFODIL-93
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"DFDL-13-013R : 13-013R Long, Int, Short, Byte",[],2012-03-28 18:51:05+00:00,2012-11-09 17:57:27+00:00,2012-11-09 21:45:48+00:00,Closed,13113510,DAFFODIL-92
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"DFDL-13-013R : 13-013R Long, Int, Short, Byte",[],2012-03-28 18:48:22+00:00,2012-11-12 14:09:30+00:00,2012-11-12 15:36:05+00:00,Closed,13113509,DAFFODIL-91
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:44:59+00:00,2012-06-07 16:01:53+00:00,2012-06-22 20:47:08+00:00,Closed,13113508,DAFFODIL-90
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"DFDL-13-013R : 13-013R Long, Int, Short, Byte",[],2012-03-28 18:44:33+00:00,2012-10-18 15:23:31+00:00,2012-11-09 15:09:26+00:00,Closed,13113507,DAFFODIL-89
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:44:08+00:00,2012-06-07 16:01:49+00:00,2012-06-22 20:49:44+00:00,Closed,13113506,DAFFODIL-88
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"DFDL-13-013R : 13-013R Long, Int, Short, Byte",[],2012-03-28 18:43:49+00:00,2012-10-18 15:23:31+00:00,2012-11-09 22:04:59+00:00,Closed,13113505,DAFFODIL-87
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Minor,,[],2012-03-28 18:43:15+00:00,2012-04-18 18:47:10+00:00,2013-07-25 17:26:03+00:00,Closed,13113504,DAFFODIL-86
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"DFDL-13-013R : 13-013R Long, Int, Short, Byte",[],2012-03-28 18:42:12+00:00,2012-10-18 15:23:30+00:00,2012-11-09 22:16:16+00:00,Closed,13113503,DAFFODIL-85
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,,[],2012-03-28 18:39:13+00:00,2013-04-09 21:32:17+00:00,2013-06-04 21:59:32+00:00,Closed,13113502,DAFFODIL-84
New Feature,[],gmcdonald,Gavin McDonald,daffodil-jsolt,Jeremy Solt,Major,"leading and trailing skip
alignment fill",[],2012-03-28 18:37:12+00:00,2012-11-27 02:17:47+00:00,2012-12-06 18:36:31+00:00,Closed,13113501,DAFFODIL-83
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Turns out it is a very bad idea for XML namespaces to be identified by URLs.

All those xmlns:xsd=""http://...."" style things cause many applications to fail if the computers they are running on get disconnected from the internet, or if the w3c servers go down. There is also a huge speed penalty for this since XML namespaces are used a lot, and round-trips across the Internet to retrieve schemas are really inadvisable. Schemas change slowly if at all. Retrieving them on demand is silly.

The schemaLocation features in XSD have never worked. The standard for what they mean is insufficiently clear and appears to have been left that way intentionally. 

Those xmlns identifiers are intended to be exactly and only that, identifiers that are unique because they use a domain name to avoid clashes. They are not supposed to be the location of anything.

More recent practice is things like this: xmlns:xcat=""id::www.ogf.org::DFDL::x::y::z::2012-03-29""  That is, it's any unique string, sufficiently unlikely to be used by anyone else. Those standards that do use URLs as these identifiers are not putting an XML schema at the location specified by the URL, but some error message page, or alternatively just making sure anyone using that URL gets a page-not-found error.

This task: change all our URIs to use the new style, so all our namespaces have non-URL identifiers, so that things will fail if it reaches out to the internet for anything.

This includes changing our front-end validator, which already does text substitutions on URIs, to swap out all the industry standard URIs like for say, W3C XML Schema, with unique IDs of our choosing so that our DFDL processor will only look to its own internal copies of those schemas, and will never go after the internet version.

Daffodil should require people to load up some local directory (or tree thererof) of local copies of DFDL and or XML Schemas that are to be used. It should not reach across the internet to retrieve schemas, but should error out saying ""schema not loaded"" or some such error, with suggestions of how to use some feature to make the schema available to the Daffodil processor. 

This is a small subset of implementing an XML Catalog. (Note that I tried just using the XML Catalog libraries, and found the code not useful. I think this job is too small to bother with worrying about reusuing that 3rd party library. But we might want to add options to Daffodil to specify an XML Catalog location, and implement a tiny subset of the XML Catalog document syntax as a way of specifying these schema locations.",[],2012-03-27 11:18:47+00:00,2013-01-25 21:00:06+00:00,2013-03-21 15:45:42+00:00,Closed,13113500,DAFFODIL-82
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"class TestUnicodeXMLI18N tests various behaviors of Scala XML support to make sure our code can handle Unicode characters, and not just English.

On Windows, the test in that class testUnicodeElementAndAttributeNames won't compile, and the Unicode Kanji characters in the Scala code as part of XML literals don't even display properly.

On linux/eclipse this compiles and runs, and when editing, nicely displays the Kanji characters that are in this Scala XML literal in the code. 

The bug then is to figure out how one changes Windows/Eclipse configuration so that this will work for developers using Windows OS, at which point this test can be uncommented out, and used to verify if people have proper setups.",[],2012-03-26 20:24:47+00:00,2012-03-30 02:37:50+00:00,2012-10-11 18:44:49+00:00,Closed,13113499,DAFFODIL-81
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"DFDL v1.0 prohibits definition of recursive ""types"". Recursive schemas can actually be created by way of elements with types, element references, or group references.

A check needs to be in place to issue an SDE if recursive schema definition is detected.

(As of creation of this bug, nothing is checking for this. Need to create test cases that plumb recursion through all/many of the various ways it can be created, and be sure the SDE is detected.)",[],2012-03-23 13:06:20+00:00,,2021-02-04 14:21:27+00:00,In Progress,13113498,DAFFODIL-80
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"There have been updates (very small) to the schema-for-dfdl-schema (3 files), since the set in use as of the date of creation of this task.

This task is a reminder to take the latest ones and embed them, regenerate properties code from them.

This task is low priority as this is really just about avoiding skew in the future. None of the changes should make any difference.",[],2012-03-22 12:16:58+00:00,2014-08-15 12:31:29+00:00,2017-04-06 15:12:48+00:00,Closed,13113497,DAFFODIL-79
Improvement,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"Our test schemas (AA.dfdl.xsd to BG.dfdl.xsd) are full of a referential integrity error.

They use the default unprefixed namespace as the XSD namespace, but then also assume intra-schema references can use unqualified names. This is an error.

There are two other bugs related. One is that Daffodil itself is validating the incoming schemas, and not catching this error. Another is that the example schemas have the error and need to be fixed.

This bug is that Eclipse's schema support *also* isn't finding this error. A fix would be to figure out eclipse settings or changes to the XMLSchemaSubset schema that will make it really catch these errors for us interactively when editing the schemas. This may be as simple as setting some option we're not setting currently, or it could turn out to not be possible to fix.

Example: 


<schema xmlns=""http://www.ogf.org/dfdl/dfdl-1.0/XMLSchemaSubset""
targetNamespace=""http://example.com"">

<element name=""foo"" type=""bar""/><!-- IS THIS LEGAL, no prefix on name of the type. -->

<complexType name=""bar"">
  <sequence/>
</complexType>

</schema>",[],2012-03-19 13:30:14+00:00,,2018-09-13 14:04:05+00:00,Open,13113496,DAFFODIL-78
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Many (all?) of our test schemas in the AA-BG tests are written in this style:

<schema xmlns=""http://www.ogf.org/dfdl/dfdl-1.0/XMLSchemaSubset""
targetNamespace=""http://example.com"">

<element name=""foo"" type=""bar""/><!-- Notice!!! no prefix on name of the type. -->

<complexType name=""bar"">
  <sequence/>
</complexType>

</schema>

This is illegal. The ""bar"" reference should be interpreted as being to the XML schema namespace (actually our subset namespace specifically in the above).

We aren't getting an error message here from our validator, but there's a separate bug for that.

This bug is the fixing of the test schemas themselves.

To fix this, we must edit all the example schemas (e.g., AA.dfdl.xsd - BG.dfdl.xsd) and change them to use a qualfied namespace for all internal references, adding a prefix definition that matches the target namespace.


<schema xmlns=""http://www.ogf.org/dfdl/dfdl-1.0/XMLSchemaSubset""
targetNamespace=""http://example.com""
xmlns:tns=""http://example.com""
>

<element name=""foo"" type=""tns:bar""/><!-- Notice tns means ""target namespace"" -->

<complexType name=""bar"">
  <sequence/>
</complexType>

</schema>",[],2012-03-19 13:26:00+00:00,2012-09-17 13:57:56+00:00,2012-09-17 13:58:01+00:00,Closed,13113495,DAFFODIL-77
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The validator for DFDL isn't checking referential integrity of type references to type definitions.

We have many test examples with this issue:

<schema xmlns=""http://www.ogf.org/dfdl/dfdl-1.0/XMLSchemaSubset""
        targetNamespace=""http://example.com"">
   <element name=""foo"" type=""bar""/><!-- Illegal: no prefix on name of the type. -->
   <complexType name=""bar"">
     <sequence/>
   </complexType>
</schema>

You can't write a schema with xml schema as the no-prefix namespace, and then not qualify 
the type references (or element or group references, or references to dfdl:defineFormats, or escapeSchemes, or variables, or...)
without qualifying them.

This bug report is that the validator is not catching these. 

Either we turn on some obscure feature of Xerces and it will test and catch these, or we should use either XSOM or the Apache XML Schema library as a secondary validator.

(a separate bug report will describe the test schemas being illegal and needing to be fixed.)",[],2012-03-19 13:14:25+00:00,2013-03-08 18:37:59+00:00,2013-03-29 19:42:00+00:00,Closed,13113494,DAFFODIL-76
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The code generator is creating properties for things like the ref attribute on format annotations, or the test attribute on asserts. These are not properties and the rules are different for them. E.g., for format properties, most of the time code will simply insist they have a value, want to know what it is, and it's an error if they are not defined. This uniform behavior is built into the getProperty that is called when you access one of these property members.

But for the non-property attributes, code will typically need to implement conditional behaviors. E.g., whether or not there is a ref attribute different things will happen. 

So, since the XML Schema for format annotations doesn't distinguish these two kinds of attributes, the code-generator needs a special-case filter so that it either doesn't generate any code for these attributes, or generates different code for them (which will return an Option type so one can have the code behave differently.)",[],2012-03-15 13:12:01+00:00,2012-03-28 17:45:23+00:00,2013-06-06 12:25:15+00:00,Closed,13113493,DAFFODIL-75
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-02 18:26:37+00:00,2012-04-04 13:32:35+00:00,2012-08-09 18:36:20+00:00,Closed,13113492,DAFFODIL-74
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,,[],2012-03-02 18:26:07+00:00,2012-04-11 16:29:46+00:00,2012-08-09 21:10:10+00:00,Closed,13113491,DAFFODIL-73
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,element reference combining of properties with the referenced element's properties.,[],2012-03-02 18:25:38+00:00,2012-07-13 14:03:47+00:00,2012-08-09 20:54:53+00:00,Closed,13113490,DAFFODIL-72
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,element properties are combined with properties on a local immediate or referenced simple type.,[],2012-03-02 18:24:49+00:00,2012-03-28 17:59:03+00:00,2012-08-09 19:19:22+00:00,Closed,13113489,DAFFODIL-71
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Ability for a format annotation to use ref to refer to a named format definition.,[],2012-03-02 18:22:38+00:00,2012-04-02 18:22:02+00:00,2012-08-08 20:02:58+00:00,Closed,13113488,DAFFODIL-70
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The new daffodil front end (in daffodil.dcom) implements most of DFDL properties, but not the complete scoping/combining logic. 

See sub-tasks for the specific sub-features.",[],2012-03-02 18:21:22+00:00,2012-07-17 19:51:51+00:00,2012-08-09 21:10:35+00:00,Closed,13113487,DAFFODIL-69
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There are some tests for the new front end, but the group-reference object was skipped. (I think.)",[],2012-03-02 18:20:00+00:00,2012-07-13 14:07:05+00:00,2013-01-03 17:33:58+00:00,Closed,13113486,DAFFODIL-68
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The existing AA-BG test cases should be converted to a test suite using TDML.

The AA example was done to start this process. see test-suite/tresys-contributed",[],2012-03-02 18:16:19+00:00,2012-09-17 13:56:15+00:00,2012-09-17 13:56:27+00:00,Closed,13113485,DAFFODIL-67
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"As of Nov 2011, Daffodil code is more oriented toward arrays of elements. The DFDL standard has moved properties onto the sequence model group object. For example sequences have separators. Arrays of elements (multiple-occurring elements) don't have separators. The Sequence group they are in can have a separator. 

Accomodating this requires some reorganization in the processing algorithms. Parsing sequences becomes more first class.",[],2011-11-28 21:56:34+00:00,2012-07-16 19:59:45+00:00,2012-08-17 17:47:12+00:00,Closed,13113484,DAFFODIL-66
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Minor,"The code still contains some number of misleading artifacts from Defuddle. There's still mention of writing out a parser to a file. Some of this is just in the command-line/main program area, nevertheless since that's where new contributors often start work, it's worthwhile to clean this stuff out.",[],2011-11-28 21:51:53+00:00,2012-04-10 19:07:51+00:00,2012-04-10 19:07:51+00:00,Closed,13113483,DAFFODIL-65
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The processors use complex multi-argument apply methods. That is, a processor is a functional.

This is unnecessary complexity that makes debugging hard, code hard to understand, etc.

Instead of this signature:

  def apply(input:RollbackStream,node:Element,variables:VariableMap, namespaces:Namespaces,parentTerminators:List[Regex]):ProcessorResult

This should be changed to

  def parse(start : ParseState): ParseResult

A ParseState is an encapsulation of an input, environment of properties, variables, and so forth, but managed together.

This task is related to another task DFDL-63 Consistent processing behavior. Likely those would both get implemented together. The motivations are somewhat independent, so two different issues are used.",[],2011-11-28 21:25:12+00:00,2012-04-14 19:58:47+00:00,2014-02-13 13:24:39+00:00,Closed,13113482,DAFFODIL-64
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"The current processing algorithms are a bit confused across idioms. There is a mix of of things that happen when a parse fails. Sometimes it returns a failed status, sometimes it throws an exception, and sometimes it just doesn't append to a list, and returns the list. There's also complex side-effects to be able to modify state via side-effect, and then checkpoint and rollback changes to these state data structures, including the input stream, the variable memory, the resulting infoset, etc.

All this needs to be made consistent or it will be much too hard to reason about this software and get it correct.

See also related issue DFDL-64 Eliminate Excess use of Functionals",[],2011-11-28 21:18:25+00:00,2012-07-16 20:02:02+00:00,2012-08-23 18:30:36+00:00,Closed,13113481,DAFFODIL-63
New Feature,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Daffodil as a research vehicle, has some extensions that are not part of the DFDL standard, yet are worth retaining.

In order to retain these and still be in compliance with the standard, they need to be controlled via properties that are not in the DFDL standard namespace, but some extension namespace particular to Daffodil.

This task is to implement this URI, and identify and move Daffodil extensions, enabling them only when some daffodil-specific property enables them. 

Example: expressions in daffodil can do array assignments. This is a powerful capability that actually enables DFDL to contain quite rich transformations such as array transposing. This should be enabled explicitly, and otherwise prohibited. A URI such as https://opensource.ncsa.illinois.edu/dfdl/daffodil/1.0/ext, and a property in that namespace such as x-enable-array-valued-expressions=""true""",[],2011-11-28 21:04:44+00:00,2013-01-09 22:13:42+00:00,2013-01-17 18:26:32+00:00,Closed,13113480,DAFFODIL-62
Task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"There is a schema for DFDL annotations.
There is also a schema for the subset of XML Schema used by DFDL.

The first thing Daffodil should do is validate against these. This will help reduce checking and standardize error reporting.

Obviously, this can only check what schema validation checks, so there are still plenty of checks to do in the schema parsing, and runtime, but doing this easy validation pass first before processing the schema at all, can only help reduce complexity.",[],2011-11-28 20:59:13+00:00,2012-02-24 00:52:29+00:00,2013-07-25 18:21:48+00:00,Closed,13113479,DAFFODIL-61
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"Change properties implementation. 

This note from: Daffodil Parser: Explorations of the DFDL Standard

A more dynamic approach should be used, in which properties are treated as keys in a dynamic data structure
rather than as Scala members. This would decouple scoping rules from the code used to
access the values of properties, allowing the code to be more rapidly adapted to new versions
of the specification, or for experimental extensions to the specification. This change requires a
significant redesign of the schema parser.

Suggest: lists of the properties should be scraped off of the XML-Schema-for-DFDL-Annotations - a schema that IBM is publishing as part of their contribution to the DFDL standard. I.e., some XPath expressions that grab the right stuff from this. 

Scala code should be generated off of this base so as to obtain the best of both worlds: strongly typed enums for property values, members for property access, but still allowing more rapid evolution.",[],2011-11-28 20:56:10+00:00,2012-03-28 19:00:16+00:00,2012-12-20 20:54:22+00:00,Closed,13113478,DAFFODIL-60
Sub-task,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,"DFDL doesn't have default values for properties. Rather, there are supposed to be included schemas that define them.
The task here is to rip out current default values for properties, and implement schema inclusion, and at least one includable schema which contains the definitions that were in the default property values.

Suspect there's going to be some issue about XML Schema catalogs - the schema include/import stuff was always very vague about how the actual include file is obtained given the URI. Catalogs have something to do with fixing this.",[],2011-11-28 20:50:12+00:00,2012-03-27 11:20:42+00:00,2013-05-02 22:35:50+00:00,Closed,13113477,DAFFODIL-59
Bug,[],gmcdonald,Gavin McDonald,mbeckerle,Mike Beckerle,Major,Reimplement property scoping to match DFDL v1.0 specification. This includes updating all tests to conform to the new scoping.,[],2011-11-28 20:46:47+00:00,2012-03-28 21:36:34+00:00,2012-07-28 17:06:29+00:00,Closed,13113476,DAFFODIL-58
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"A format can be referenced before it is defined. However, AnnotationParser will scan for annotations in document order, and forward refs will incorrectly fail to resolve.",[],2011-02-10 20:43:26+00:00,2012-04-10 19:07:51+00:00,2012-04-10 19:07:51+00:00,Closed,13113475,DAFFODIL-57
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"For example if the default namespace is the XSD namespace and there is the following

<element name=""foo"" type=""int"" ...>

the canonicalization stylesheet will generate

<xs:element name=""foo"" type=""int"" ...>

instead of

<xs:element name=""foo"" type=""xs:int"" ...>

as required.

See this post for more on this ""QName madness"":

http://broadcast.oreilly.com/2009/08/converting-xml-schemas-to-sche-1.html",[],2011-01-12 16:45:32+00:00,2012-04-10 19:07:50+00:00,2012-04-10 19:07:50+00:00,Closed,13113474,DAFFODIL-56
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,,[],2010-12-22 16:48:51+00:00,2012-04-10 19:07:49+00:00,2012-04-10 19:07:49+00:00,Closed,13113473,DAFFODIL-53
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,,[],2010-12-22 16:46:51+00:00,2012-04-10 19:07:50+00:00,2012-04-10 19:07:50+00:00,Closed,13113472,DAFFODIL-52
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,,[],2010-12-22 16:46:21+00:00,2012-04-10 19:07:48+00:00,2012-04-10 19:07:48+00:00,Closed,13113471,DAFFODIL-51
Task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"The WG has changed the DFDL namespace from ""http://www.ogf.org/dfdl/dfdl-1.0"" to ""http://www.ogf.org/dfdl/dfdl-1.0/"".

This will need to be changed in Daffodil, the canonicalization stylesheet, and the test cases.",[],2010-12-22 16:41:57+00:00,2012-04-10 19:07:48+00:00,2012-04-10 19:07:48+00:00,Closed,13113470,DAFFODIL-50
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"The DFDL spec states in section 13.2

""escapeSchemeRef (QName):

The name of the dfdl:defineEscapeScheme annotation that provides the additional properties used to describe the escape scheme. If the value is the empty string then escaping is explicitly turned off.""",[],2010-12-17 17:07:22+00:00,2012-04-10 19:07:48+00:00,2012-04-10 19:07:48+00:00,Closed,13113469,DAFFODIL-48
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"currently are ""require, supress, supressAtEnd"" [sic]",[],2010-12-16 21:07:24+00:00,2012-04-10 19:07:49+00:00,2012-04-10 19:07:49+00:00,Closed,13113468,DAFFODIL-46
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Major,,[],2010-12-16 21:02:41+00:00,2012-03-28 18:52:11+00:00,2017-07-26 16:27:05+00:00,Closed,13113467,DAFFODIL-45
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,,[],2010-12-16 21:02:17+00:00,2012-04-10 19:07:49+00:00,2012-04-10 19:07:49+00:00,Closed,13113466,DAFFODIL-44
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"Daffodil treats XML Schema's ""targetNamespace"" attribute as required. It is optional.",[],2010-12-16 18:51:31+00:00,2013-02-08 22:56:15+00:00,2013-02-26 18:52:11+00:00,Closed,13113465,DAFFODIL-41
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Major,,[],2010-12-03 22:17:51+00:00,2012-10-18 15:19:22+00:00,2012-10-18 15:19:23+00:00,Closed,13113464,DAFFODIL-39
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,,[],2010-12-03 22:17:15+00:00,2013-04-09 21:44:55+00:00,2013-04-18 19:28:46+00:00,Closed,13113463,DAFFODIL-38
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Major,,[],2010-12-03 22:15:42+00:00,2012-09-10 19:50:05+00:00,2012-09-10 19:57:41+00:00,Closed,13113462,DAFFODIL-37
Sub-task,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"since nillability is not supported, nillable=""true"" should result in a schema definition error; it currently doesn't.",[],2010-12-03 21:44:09+00:00,2012-04-10 19:07:50+00:00,2012-04-10 19:07:50+00:00,Closed,13113461,DAFFODIL-36
Bug,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"The DFDL spec states:

""In order to provide portability of a DFDL schema, a minimal or extended conforming processor  must ensure that all the required properties, as defined in the property precedence sections, are present in a schema, even when those properties are not implemented. For example if the bi-directional text feature is not implemented, it is still a schema definition error if dfdl:textBiDi is not set to 'no' [on] an xs:string element.""

Whereas Daffodil will currently fail if certain annotations are present at all, even if they would not trigger unimplemented behavior. For instance dfdl:lengthUnits must be supported, but dfdl:lengthUnits='bits' is optional.",[],2010-12-03 21:37:45+00:00,,2018-12-26 17:25:14+00:00,Open,13113460,DAFFODIL-35
New Feature,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Minor,"The annotation parser does not recognize dfdl:lengthUnits. This is problematic for bit fields that are not aligned to bytes.

However, behavior is correct when specifying the length of a string in a wide encoding, e.g., UTF-16. Need to investigate how the processor decides to read length * 2 bytes in that case.

For bit fields that are not aligned to bytes, the processor needs to make some provision for extracting the bits and computing the correct integer value. I'm not sure if anything of the sort is currently implemented.",[],2010-12-03 21:26:09+00:00,2012-09-10 19:50:27+00:00,2012-09-10 20:00:20+00:00,Closed,13113459,DAFFODIL-34
Improvement,[],gmcdonald,Gavin McDonald,daffodil-futrelle,Joe Futrelle,Major,Revisit when advanced text number properties are implemented,['ForInteroperabilityTest'],2010-11-17 16:18:33+00:00,2018-12-11 16:42:18+00:00,2021-05-20 20:01:47+00:00,Closed,13113458,DAFFODIL-20
